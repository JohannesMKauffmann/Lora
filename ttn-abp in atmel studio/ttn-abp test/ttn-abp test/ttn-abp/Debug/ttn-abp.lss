
ttn-abp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00005248  000052dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029a  008001e0  008001e0  000053bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000053bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e0  00000000  00000000  0000542c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011a18  00000000  00000000  00005c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000325d  00000000  00000000  00017624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005574  00000000  00000000  0001a881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000171c  00000000  00000000  0001fdf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f60  00000000  00000000  00021514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008b9b  00000000  00000000  00025474  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a8  00000000  00000000  0002e00f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 00 02 	jmp	0x400	; 0x400 <__ctors_end>
       4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
       8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
       c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      10:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      14:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      18:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      1c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      20:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      24:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      28:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      2c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      30:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      34:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      38:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      3c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      40:	0c 94 59 25 	jmp	0x4ab2	; 0x4ab2 <__vector_16>
      44:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      48:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__vector_18>
      4c:	0c 94 89 23 	jmp	0x4712	; 0x4712 <__vector_19>
      50:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      54:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      58:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      5c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      60:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      64:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      68:	5f 02       	muls	r21, r31
      6a:	62 02       	muls	r22, r18
      6c:	65 02       	muls	r22, r21
      6e:	68 02       	muls	r22, r24
      70:	6b 02       	muls	r22, r27
      72:	6e 02       	muls	r22, r30
      74:	71 02       	muls	r23, r17
      76:	74 02       	muls	r23, r20
      78:	77 02       	muls	r23, r23
      7a:	7a 02       	muls	r23, r26
      7c:	b1 02       	muls	r27, r17
      7e:	b4 02       	muls	r27, r20
      80:	b7 02       	muls	r27, r23
      82:	ba 02       	muls	r27, r26
      84:	bd 02       	muls	r27, r29
      86:	3d 0f       	add	r19, r29
      88:	41 0f       	add	r20, r17
      8a:	e9 0f       	add	r30, r25
      8c:	bf 0f       	add	r27, r31
      8e:	b8 0f       	add	r27, r24
      90:	0d 10       	cpse	r0, r13
      92:	e7 10       	cpse	r14, r7
      94:	e7 10       	cpse	r14, r7
      96:	e7 10       	cpse	r14, r7
      98:	e7 10       	cpse	r14, r7
      9a:	e7 10       	cpse	r14, r7
      9c:	e7 10       	cpse	r14, r7
      9e:	e7 10       	cpse	r14, r7
      a0:	e7 10       	cpse	r14, r7
      a2:	e7 10       	cpse	r14, r7
      a4:	4f 10       	cpse	r4, r15
      a6:	6d 10       	cpse	r6, r13

000000a8 <__trampolines_end>:
      a8:	53 74       	andi	r21, 0x43	; 67
      aa:	61 72       	andi	r22, 0x21	; 33
      ac:	74 69       	ori	r23, 0x94	; 148
      ae:	6e 67       	ori	r22, 0x7E	; 126
	...

000000b1 <_ZZ7onEventE3__c_17>:
      b1:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

000000bf <_ZZ7onEventE3__c_16>:
      bf:	45 56 5f 4c 49 4e 4b 5f 41 4c 49 56 45 00           EV_LINK_ALIVE.

000000cd <_ZZ7onEventE3__c_15>:
      cd:	45 56 5f 4c 49 4e 4b 5f 44 45 41 44 00              EV_LINK_DEAD.

000000da <_ZZ7onEventE3__c_14>:
      da:	45 56 5f 52 58 43 4f 4d 50 4c 45 54 45 00           EV_RXCOMPLETE.

000000e8 <_ZZ7onEventE3__c_13>:
      e8:	45 56 5f 52 45 53 45 54 00                          EV_RESET.

000000f1 <_ZZ7onEventE3__c_12>:
      f1:	45 56 5f 4c 4f 53 54 5f 54 53 59 4e 43 00           EV_LOST_TSYNC.

000000ff <_ZZ7onEventE3__c_11>:
      ff:	20 62 79 74 65 73 20 6f 66 20 70 61 79 6c 6f 61      bytes of payloa
     10f:	64 00                                               d.

00000111 <_ZZ7onEventE3__c_10>:
     111:	52 65 63 65 69 76 65 64 20 00                       Received .

0000011b <_ZZ7onEventE3__c_9>:
     11b:	52 65 63 65 69 76 65 64 20 61 63 6b 00              Received ack.

00000128 <_ZZ7onEventE3__c_8>:
     128:	45 56 5f 54 58 43 4f 4d 50 4c 45 54 45 20 28 69     EV_TXCOMPLETE (i
     138:	6e 63 6c 75 64 65 73 20 77 61 69 74 69 6e 67 20     ncludes waiting 
     148:	66 6f 72 20 52 58 20 77 69 6e 64 6f 77 73 29 00     for RX windows).

00000158 <_ZZ7onEventE3__c_7>:
     158:	45 56 5f 52 45 4a 4f 49 4e 5f 46 41 49 4c 45 44     EV_REJOIN_FAILED
	...

00000169 <_ZZ7onEventE3__c_6>:
     169:	45 56 5f 4a 4f 49 4e 5f 46 41 49 4c 45 44 00        EV_JOIN_FAILED.

00000178 <_ZZ7onEventE3__c_5>:
     178:	45 56 5f 52 46 55 31 00                             EV_RFU1.

00000180 <_ZZ7onEventE3__c_4>:
     180:	45 56 5f 4a 4f 49 4e 45 44 00                       EV_JOINED.

0000018a <_ZZ7onEventE3__c_3>:
     18a:	45 56 5f 4a 4f 49 4e 49 4e 47 00                    EV_JOINING.

00000195 <_ZZ7onEventE3__c_2>:
     195:	45 56 5f 42 45 41 43 4f 4e 5f 54 52 41 43 4b 45     EV_BEACON_TRACKE
     1a5:	44 00                                               D.

000001a7 <_ZZ7onEventE3__c_1>:
     1a7:	45 56 5f 42 45 41 43 4f 4e 5f 4d 49 53 53 45 44     EV_BEACON_MISSED
	...

000001b8 <_ZZ7onEventE3__c_0>:
     1b8:	45 56 5f 42 45 41 43 4f 4e 5f 46 4f 55 4e 44 00     EV_BEACON_FOUND.

000001c8 <_ZZ7onEventE3__c>:
     1c8:	45 56 5f 53 43 41 4e 5f 54 49 4d 45 4f 55 54 00     EV_SCAN_TIMEOUT.

000001d8 <_ZZ7do_sendP7osjob_tE3__c_0>:
     1d8:	50 61 63 6b 65 74 20 71 75 65 75 65 64 00           Packet queued.

000001e6 <_ZZ7do_sendP7osjob_tE3__c>:
     1e6:	4f 50 5f 54 58 52 58 50 45 4e 44 2c 20 6e 6f 74     OP_TXRXPEND, not
     1f6:	20 73 65 6e 64 69 6e 67 00                           sending.

000001ff <_ZL7APPSKEY>:
     1ff:	bc 69 c6 0b f7 48 a1 4c 29 76 1c d8 f5 e4 3d 41     .i...H.L)v....=A

0000020f <_ZL7NWKSKEY>:
     20f:	20 8c ef 9a 3c bb b4 9b 08 45 4c 5e af 8c 55 ea      ...<....EL^..U.

0000021f <_ZL22constant_table_S_Table>:
     21f:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     22f:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     23f:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     24f:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     25f:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     26f:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     27f:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     28f:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     29f:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     2af:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     2bf:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     2cf:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     2df:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     2ef:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     2ff:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     30f:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

0000031f <constant_table_iniChannelFreq>:
     31f:	a0 27 be 33 e0 34 c1 33 20 42 c4 33 a1 27 be 33     .'.3.4.3 B.3.'.3
     32f:	e1 34 c1 33 21 42 c4 33                             .4.3!B.3

00000337 <constant_table_DR2HSYM_osticks>:
     337:	00 04 00 00 00 02 00 00 00 01 00 00 80 00 00 00     ................
     347:	40 00 00 00 20 00 00 00 10 00 00 00 05 00 00 00     @... ...........

00000357 <constant_table_DRADJUST>:
     357:	00 00 00 01 00 01 00 01 00 00                       ..........

00000361 <constant_table_SENSITIVITY>:
     361:	20 20 20 0e 11 14 0c 0f 12 09 0c 0f 06 09 0c 03        .............
     371:	06 09 00 03 06                                      .....

00000376 <constant_table_TXPOWLEVELS>:
     376:	14 0e 0b 08 05 02 00 00 00 00 00 00 00 00 00 00     ................

00000386 <constant_table__DR2RPS_CRC>:
     386:	ff 06 05 04 03 02 01 09 00 ff                       ..........

00000390 <constant_table_LORA_RXDONE_FIXUP>:
     390:	00 00 00 00 67 00 cc 00 b8 01 54 03 9d 07           ....g.....T...

0000039e <constant_table_rxlorairqmask>:
     39e:	c0 40 00                                            .@.

000003a1 <digital_pin_to_timer_PGM>:
     3a1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     3b1:	00 00 00 00                                         ....

000003b5 <digital_pin_to_bit_mask_PGM>:
     3b5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3c5:	04 08 10 20                                         ... 

000003c9 <digital_pin_to_port_PGM>:
     3c9:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3d9:	03 03 03 03                                         ....

000003dd <port_to_input_PGM>:
     3dd:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003e7 <port_to_output_PGM>:
     3e7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003f1 <port_to_mode_PGM>:
     3f1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000003fc <__ctors_start>:
     3fc:	c2 06       	cpc	r12, r18
     3fe:	b9 23       	and	r27, r25

00000400 <__ctors_end>:
     400:	11 24       	eor	r1, r1
     402:	1f be       	out	0x3f, r1	; 63
     404:	cf ef       	ldi	r28, 0xFF	; 255
     406:	d8 e0       	ldi	r29, 0x08	; 8
     408:	de bf       	out	0x3e, r29	; 62
     40a:	cd bf       	out	0x3d, r28	; 61

0000040c <__do_copy_data>:
     40c:	11 e0       	ldi	r17, 0x01	; 1
     40e:	a0 e0       	ldi	r26, 0x00	; 0
     410:	b1 e0       	ldi	r27, 0x01	; 1
     412:	e8 e4       	ldi	r30, 0x48	; 72
     414:	f2 e5       	ldi	r31, 0x52	; 82
     416:	02 c0       	rjmp	.+4      	; 0x41c <__do_copy_data+0x10>
     418:	05 90       	lpm	r0, Z+
     41a:	0d 92       	st	X+, r0
     41c:	a0 3e       	cpi	r26, 0xE0	; 224
     41e:	b1 07       	cpc	r27, r17
     420:	d9 f7       	brne	.-10     	; 0x418 <__do_copy_data+0xc>

00000422 <__do_clear_bss>:
     422:	24 e0       	ldi	r18, 0x04	; 4
     424:	a0 ee       	ldi	r26, 0xE0	; 224
     426:	b1 e0       	ldi	r27, 0x01	; 1
     428:	01 c0       	rjmp	.+2      	; 0x42c <.do_clear_bss_start>

0000042a <.do_clear_bss_loop>:
     42a:	1d 92       	st	X+, r1

0000042c <.do_clear_bss_start>:
     42c:	aa 37       	cpi	r26, 0x7A	; 122
     42e:	b2 07       	cpc	r27, r18
     430:	e1 f7       	brne	.-8      	; 0x42a <.do_clear_bss_loop>

00000432 <__do_global_ctors>:
     432:	11 e0       	ldi	r17, 0x01	; 1
     434:	c0 e0       	ldi	r28, 0x00	; 0
     436:	d2 e0       	ldi	r29, 0x02	; 2
     438:	04 c0       	rjmp	.+8      	; 0x442 <__do_global_ctors+0x10>
     43a:	21 97       	sbiw	r28, 0x01	; 1
     43c:	fe 01       	movw	r30, r28
     43e:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__tablejump2__>
     442:	ce 3f       	cpi	r28, 0xFE	; 254
     444:	d1 07       	cpc	r29, r17
     446:	c9 f7       	brne	.-14     	; 0x43a <__do_global_ctors+0x8>
     448:	0e 94 e7 23 	call	0x47ce	; 0x47ce <main>
     44c:	0c 94 22 29 	jmp	0x5244	; 0x5244 <_exit>

00000450 <__bad_interrupt>:
     450:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000454 <_Z7do_sendP7osjob_t>:
	//Serial.println(String((uint8_t) bytesToSend[2]));
}*/

void do_send(osjob_t* j){
	// Check if there is not a current TX/RX job running
	if (LMIC.opmode & OP_TXRXPEND) {
     454:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
     458:	87 ff       	sbrs	r24, 7
     45a:	03 c0       	rjmp	.+6      	; 0x462 <_Z7do_sendP7osjob_t+0xe>
		Serial.println(F("OP_TXRXPEND, not sending"));
     45c:	66 ee       	ldi	r22, 0xE6	; 230
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	09 c0       	rjmp	.+18     	; 0x474 <_Z7do_sendP7osjob_t+0x20>
		} else {
		// Read sensor data and write to bytesToSend
		//updateSensorData();
		// Prepare upstream data transmission at the next possible time.
		//LMIC_setTxData2(1, bytesToSend, sizeof(bytesToSend)-1, 0);
		LMIC_setTxData2(1, mydata, sizeof(mydata)-1, 0);
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	4c e0       	ldi	r20, 0x0C	; 12
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	71 e0       	ldi	r23, 0x01	; 1
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	0e 94 6d 1c 	call	0x38da	; 0x38da <LMIC_setTxData2>
		Serial.println(F("Packet queued"));
     470:	68 ed       	ldi	r22, 0xD8	; 216
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	87 e1       	ldi	r24, 0x17	; 23
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <_ZN5Print7printlnEPK19__FlashStringHelper>

0000047c <os_getArtEui>:
     47c:	08 95       	ret

0000047e <os_getDevEui>:
     47e:	08 95       	ret

00000480 <os_getDevKey>:
// These callbacks are only used in over-the-air activation, so they are
// left empty here (we cannot leave them out completely unless
// DISABLE_JOIN is set in config.h, otherwise the linker will complain).
void os_getArtEui (u1_t* buf) { }
void os_getDevEui (u1_t* buf) { }
void os_getDevKey (u1_t* buf) { }
     480:	08 95       	ret

00000482 <onEvent>:
		Serial.println(F("Packet queued"));
	}
	// Next TX is scheduled after TX_COMPLETE event.
}

void onEvent (ev_t ev) {
     482:	cf 93       	push	r28
     484:	c8 2f       	mov	r28, r24
    Serial.print(os_getTime());
     486:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
     48a:	ab 01       	movw	r20, r22
     48c:	bc 01       	movw	r22, r24
     48e:	2a e0       	ldi	r18, 0x0A	; 10
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	87 e1       	ldi	r24, 0x17	; 23
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 11 25 	call	0x4a22	; 0x4a22 <_ZN5Print5printEli>
    Serial.print(": ");
     49a:	6d e0       	ldi	r22, 0x0D	; 13
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	87 e1       	ldi	r24, 0x17	; 23
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN5Print5printEPKc>
    switch(ev) {
     4a6:	8c 2f       	mov	r24, r28
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	fc 01       	movw	r30, r24
     4ac:	31 97       	sbiw	r30, 0x01	; 1
     4ae:	ef 30       	cpi	r30, 0x0F	; 15
     4b0:	f1 05       	cpc	r31, r1
     4b2:	08 f0       	brcs	.+2      	; 0x4b6 <onEvent+0x34>
     4b4:	65 c0       	rjmp	.+202    	; 0x580 <onEvent+0xfe>
     4b6:	ec 5c       	subi	r30, 0xCC	; 204
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ba:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__tablejump2__>
        case EV_SCAN_TIMEOUT:
            Serial.println(F("EV_SCAN_TIMEOUT"));
     4be:	68 ec       	ldi	r22, 0xC8	; 200
     4c0:	71 e0       	ldi	r23, 0x01	; 1
     4c2:	60 c0       	rjmp	.+192    	; 0x584 <onEvent+0x102>
            break;
        case EV_BEACON_FOUND:
            Serial.println(F("EV_BEACON_FOUND"));
     4c4:	68 eb       	ldi	r22, 0xB8	; 184
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	5d c0       	rjmp	.+186    	; 0x584 <onEvent+0x102>
            break;
        case EV_BEACON_MISSED:
            Serial.println(F("EV_BEACON_MISSED"));
     4ca:	67 ea       	ldi	r22, 0xA7	; 167
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	5a c0       	rjmp	.+180    	; 0x584 <onEvent+0x102>
            break;
        case EV_BEACON_TRACKED:
            Serial.println(F("EV_BEACON_TRACKED"));
     4d0:	65 e9       	ldi	r22, 0x95	; 149
     4d2:	71 e0       	ldi	r23, 0x01	; 1
     4d4:	57 c0       	rjmp	.+174    	; 0x584 <onEvent+0x102>
            break;
        case EV_JOINING:
            Serial.println(F("EV_JOINING"));
     4d6:	6a e8       	ldi	r22, 0x8A	; 138
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	54 c0       	rjmp	.+168    	; 0x584 <onEvent+0x102>
            break;
        case EV_JOINED:
            Serial.println(F("EV_JOINED"));
     4dc:	60 e8       	ldi	r22, 0x80	; 128
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	51 c0       	rjmp	.+162    	; 0x584 <onEvent+0x102>
            break;
        case EV_RFU1:
            Serial.println(F("EV_RFU1"));
     4e2:	68 e7       	ldi	r22, 0x78	; 120
     4e4:	71 e0       	ldi	r23, 0x01	; 1
     4e6:	4e c0       	rjmp	.+156    	; 0x584 <onEvent+0x102>
            break;
        case EV_JOIN_FAILED:
            Serial.println(F("EV_JOIN_FAILED"));
     4e8:	69 e6       	ldi	r22, 0x69	; 105
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	4b c0       	rjmp	.+150    	; 0x584 <onEvent+0x102>
            break;
        case EV_REJOIN_FAILED:
            Serial.println(F("EV_REJOIN_FAILED"));
     4ee:	68 e5       	ldi	r22, 0x58	; 88
     4f0:	71 e0       	ldi	r23, 0x01	; 1
     4f2:	48 c0       	rjmp	.+144    	; 0x584 <onEvent+0x102>
            break;
        case EV_TXCOMPLETE:
            Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));
     4f4:	68 e2       	ldi	r22, 0x28	; 40
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	87 e1       	ldi	r24, 0x17	; 23
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN5Print7printlnEPK19__FlashStringHelper>
            if (LMIC.txrxFlags & TXRX_ACK)
     500:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <LMIC+0x140>
     504:	87 ff       	sbrs	r24, 7
     506:	06 c0       	rjmp	.+12     	; 0x514 <onEvent+0x92>
              Serial.println(F("Received ack"));
     508:	6b e1       	ldi	r22, 0x1B	; 27
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	87 e1       	ldi	r24, 0x17	; 23
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN5Print7printlnEPK19__FlashStringHelper>
            if (LMIC.dataLen) {
     514:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
     518:	88 23       	and	r24, r24
     51a:	a1 f0       	breq	.+40     	; 0x544 <onEvent+0xc2>
              Serial.println(F("Received "));
     51c:	61 e1       	ldi	r22, 0x11	; 17
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	87 e1       	ldi	r24, 0x17	; 23
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN5Print7printlnEPK19__FlashStringHelper>
              Serial.println(LMIC.dataLen);
     528:	4a e0       	ldi	r20, 0x0A	; 10
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <LMIC+0x142>
     530:	87 e1       	ldi	r24, 0x17	; 23
     532:	92 e0       	ldi	r25, 0x02	; 2
     534:	0e 94 e7 24 	call	0x49ce	; 0x49ce <_ZN5Print7printlnEhi>
              Serial.println(F(" bytes of payload"));
     538:	6f ef       	ldi	r22, 0xFF	; 255
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	87 e1       	ldi	r24, 0x17	; 23
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN5Print7printlnEPK19__FlashStringHelper>
            }
            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
     544:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
     548:	ab 01       	movw	r20, r22
     54a:	bc 01       	movw	r22, r24
     54c:	40 59       	subi	r20, 0x90	; 144
     54e:	57 4c       	sbci	r21, 0xC7	; 199
     550:	66 4c       	sbci	r22, 0xC6	; 198
     552:	7f 4f       	sbci	r23, 0xFF	; 255
     554:	2a e2       	ldi	r18, 0x2A	; 42
     556:	32 e0       	ldi	r19, 0x02	; 2
     558:	80 ee       	ldi	r24, 0xE0	; 224
     55a:	91 e0       	ldi	r25, 0x01	; 1
            break;
         default:
            Serial.println(F("Unknown event"));
            break;
    }
}
     55c:	cf 91       	pop	r28
              Serial.println(F("Received "));
              Serial.println(LMIC.dataLen);
              Serial.println(F(" bytes of payload"));
            }
            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
     55e:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <os_setTimedCallback>
            break;
        case EV_LOST_TSYNC:
            Serial.println(F("EV_LOST_TSYNC"));
     562:	61 ef       	ldi	r22, 0xF1	; 241
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	0e c0       	rjmp	.+28     	; 0x584 <onEvent+0x102>
            break;
        case EV_RESET:
            Serial.println(F("EV_RESET"));
     568:	68 ee       	ldi	r22, 0xE8	; 232
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	0b c0       	rjmp	.+22     	; 0x584 <onEvent+0x102>
            break;
        case EV_RXCOMPLETE:
            // data received in ping slot
            Serial.println(F("EV_RXCOMPLETE"));
     56e:	6a ed       	ldi	r22, 0xDA	; 218
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	08 c0       	rjmp	.+16     	; 0x584 <onEvent+0x102>
            break;
        case EV_LINK_DEAD:
            Serial.println(F("EV_LINK_DEAD"));
     574:	6d ec       	ldi	r22, 0xCD	; 205
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	05 c0       	rjmp	.+10     	; 0x584 <onEvent+0x102>
            break;
        case EV_LINK_ALIVE:
            Serial.println(F("EV_LINK_ALIVE"));
     57a:	6f eb       	ldi	r22, 0xBF	; 191
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <onEvent+0x102>
            break;
         default:
            Serial.println(F("Unknown event"));
     580:	61 eb       	ldi	r22, 0xB1	; 177
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	87 e1       	ldi	r24, 0x17	; 23
     586:	92 e0       	ldi	r25, 0x02	; 2
            break;
    }
}
     588:	cf 91       	pop	r28
            break;
        case EV_LINK_ALIVE:
            Serial.println(F("EV_LINK_ALIVE"));
            break;
         default:
            Serial.println(F("Unknown event"));
     58a:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <_ZN5Print7printlnEPK19__FlashStringHelper>

0000058e <setup>:
            break;
    }
}


void setup() {
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	a0 97       	sbiw	r28, 0x20	; 32
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     5aa:	26 e0       	ldi	r18, 0x06	; 6
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	52 ec       	ldi	r21, 0xC2	; 194
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	87 e1       	ldi	r24, 0x17	; 23
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <_ZN14HardwareSerial5beginEmh>
    Serial.begin(115200);
    Serial.println(F("Starting"));
     5bc:	68 ea       	ldi	r22, 0xA8	; 168
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	87 e1       	ldi	r24, 0x17	; 23
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 66 24 	call	0x48cc	; 0x48cc <_ZN5Print7printlnEPK19__FlashStringHelper>
    delay(1000);
    #endif


    // LMIC init
    os_init();
     5c8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <os_init>
    // Reset the MAC state. Session and pending data transfers will be discarded.
    LMIC_reset();
     5cc:	0e 94 06 1c 	call	0x380c	; 0x380c <LMIC_reset>
    // On AVR, these values are stored in flash and only copied to RAM
    // once. Copy them to a temporary buffer here, LMIC_setSession will
    // copy them into a buffer of its own again.
    uint8_t appskey[sizeof(APPSKEY)];
    uint8_t nwkskey[sizeof(NWKSKEY)];
    memcpy_P(appskey, APPSKEY, sizeof(APPSKEY));
     5d0:	40 e1       	ldi	r20, 0x10	; 16
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	6f ef       	ldi	r22, 0xFF	; 255
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	ce 01       	movw	r24, r28
     5da:	41 96       	adiw	r24, 0x11	; 17
     5dc:	0e 94 10 29 	call	0x5220	; 0x5220 <memcpy_P>
    memcpy_P(nwkskey, NWKSKEY, sizeof(NWKSKEY));
     5e0:	40 e1       	ldi	r20, 0x10	; 16
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	6f e0       	ldi	r22, 0x0F	; 15
     5e6:	72 e0       	ldi	r23, 0x02	; 2
     5e8:	ce 01       	movw	r24, r28
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	0e 94 10 29 	call	0x5220	; 0x5220 <memcpy_P>
    LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
     5f0:	ce 01       	movw	r24, r28
     5f2:	41 96       	adiw	r24, 0x11	; 17
     5f4:	7c 01       	movw	r14, r24
     5f6:	8e 01       	movw	r16, r28
     5f8:	0f 5f       	subi	r16, 0xFF	; 255
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
     5fc:	2d e3       	ldi	r18, 0x3D	; 61
     5fe:	34 e1       	ldi	r19, 0x14	; 20
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	56 e2       	ldi	r21, 0x26	; 38
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 8e 1c 	call	0x391c	; 0x391c <LMIC_setSession>
    // frequencies, so be sure to configure the full frequency range of
    // your network here (unless your network autoconfigures them).
    // Setting up channels should happen after LMIC_setSession, as that
    // configures the minimal channel set.
    // NA-US channels 0-71 are configured automatically
    LMIC_setupChannel(0, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
     610:	01 e0       	ldi	r16, 0x01	; 1
     612:	2f e3       	ldi	r18, 0x3F	; 63
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 ea       	ldi	r20, 0xA0	; 160
     618:	57 e2       	ldi	r21, 0x27	; 39
     61a:	6e eb       	ldi	r22, 0xBE	; 190
     61c:	73 e3       	ldi	r23, 0x33	; 51
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <LMIC_setupChannel>
    LMIC_disableChannel(1);
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LMIC_disableChannel>
	LMIC_disableChannel(2);
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LMIC_disableChannel>
    // https://github.com/TheThingsNetwork/gateway-conf/blob/master/US-global_conf.json
    LMIC_selectSubBand(1);
    #endif

    // Disable link check validation
    LMIC_setLinkCheckMode(0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 cc 1c 	call	0x3998	; 0x3998 <LMIC_setLinkCheckMode>

    // TTN uses SF9 for its RX2 window.
    LMIC.dn2Dr = DR_SF9;
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <LMIC+0x126>

    // Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
    LMIC_setDrTxpow(DR_SF7,14);
     63c:	6e e0       	ldi	r22, 0x0E	; 14
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	0e 94 04 1c 	call	0x3808	; 0x3808 <LMIC_setDrTxpow>

    // Start job
    do_send(&sendjob);
     644:	80 ee       	ldi	r24, 0xE0	; 224
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 2a 02 	call	0x454	; 0x454 <_Z7do_sendP7osjob_t>
}
     64c:	a0 96       	adiw	r28, 0x20	; 32
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	08 95       	ret

00000666 <loop>:


void loop() {
    os_runloop_once();
     666:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <os_runloop_once>

0000066a <_ZL17AES_Add_Round_KeyPh>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
static void AES_Add_Round_Key(unsigned char *Round_Key)
{
     66a:	cf 93       	push	r28
     66c:	28 ee       	ldi	r18, 0xE8	; 232
     66e:	31 e0       	ldi	r19, 0x01	; 1
     670:	bc 01       	movw	r22, r24
     672:	60 5f       	subi	r22, 0xF0	; 240
     674:	7f 4f       	sbci	r23, 0xFF	; 255
     676:	dc 01       	movw	r26, r24
     678:	f9 01       	movw	r30, r18
     67a:	40 e0       	ldi	r20, 0x00	; 0

  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
     67c:	5d 91       	ld	r21, X+
     67e:	c0 81       	ld	r28, Z
     680:	5c 27       	eor	r21, r28
     682:	50 83       	st	Z, r21
{
  unsigned char Row,Collum;

  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     684:	4f 5f       	subi	r20, 0xFF	; 255
     686:	34 96       	adiw	r30, 0x04	; 4
     688:	44 30       	cpi	r20, 0x04	; 4
     68a:	c1 f7       	brne	.-16     	; 0x67c <_ZL17AES_Add_Round_KeyPh+0x12>
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
     690:	04 96       	adiw	r24, 0x04	; 4
*/
static void AES_Add_Round_Key(unsigned char *Round_Key)
{
  unsigned char Row,Collum;

  for(Collum = 0; Collum < 4; Collum++)
     692:	68 17       	cp	r22, r24
     694:	79 07       	cpc	r23, r25
     696:	79 f7       	brne	.-34     	; 0x676 <_ZL17AES_Add_Round_KeyPh+0xc>
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
    }
  }
}
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <_ZL14AES_Shift_Rowsv>:

  //Row 0 doesn't change

  //Shift Row 1 one left
  //Store firt byte in buffer
  Buffer = State[1][0];
     69c:	e8 ee       	ldi	r30, 0xE8	; 232
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	84 81       	ldd	r24, Z+4	; 0x04
  //Shift all bytes
  State[1][0] = State[1][1];
     6a2:	95 81       	ldd	r25, Z+5	; 0x05
     6a4:	94 83       	std	Z+4, r25	; 0x04
  State[1][1] = State[1][2];
     6a6:	96 81       	ldd	r25, Z+6	; 0x06
     6a8:	95 83       	std	Z+5, r25	; 0x05
  State[1][2] = State[1][3];
     6aa:	97 81       	ldd	r25, Z+7	; 0x07
     6ac:	96 83       	std	Z+6, r25	; 0x06
  State[1][3] = Buffer;
     6ae:	87 83       	std	Z+7, r24	; 0x07

  //Shift row 2 two left
  Buffer = State[2][0];
     6b0:	80 85       	ldd	r24, Z+8	; 0x08
  State[2][0] = State[2][2];
     6b2:	92 85       	ldd	r25, Z+10	; 0x0a
     6b4:	90 87       	std	Z+8, r25	; 0x08
  State[2][2] = Buffer;
     6b6:	82 87       	std	Z+10, r24	; 0x0a
  Buffer = State[2][1];
     6b8:	81 85       	ldd	r24, Z+9	; 0x09
  State[2][1] = State[2][3];
     6ba:	93 85       	ldd	r25, Z+11	; 0x0b
     6bc:	91 87       	std	Z+9, r25	; 0x09
  State[2][3] = Buffer;
     6be:	83 87       	std	Z+11, r24	; 0x0b

  //Shift row 3 three left
  Buffer = State[3][3];
     6c0:	87 85       	ldd	r24, Z+15	; 0x0f
  State[3][3] = State[3][2];
     6c2:	96 85       	ldd	r25, Z+14	; 0x0e
     6c4:	97 87       	std	Z+15, r25	; 0x0f
  State[3][2] = State[3][1];
     6c6:	95 85       	ldd	r25, Z+13	; 0x0d
     6c8:	96 87       	std	Z+14, r25	; 0x0e
  State[3][1] = State[3][0];
     6ca:	94 85       	ldd	r25, Z+12	; 0x0c
     6cc:	95 87       	std	Z+13, r25	; 0x0d
  State[3][0] = Buffer;
     6ce:	84 87       	std	Z+12, r24	; 0x0c
     6d0:	08 95       	ret

000006d2 <_ZL23AES_Calculate_Round_KeyhPh>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
static void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <_ZL23AES_Calculate_Round_KeyhPh+0x6>
     6d8:	00 d0       	rcall	.+0      	; 0x6da <_ZL23AES_Calculate_Round_KeyhPh+0x8>
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	fb 01       	movw	r30, r22
     6e0:	3c 96       	adiw	r30, 0x0c	; 12
     6e2:	9b 01       	movw	r18, r22
     6e4:	20 5f       	subi	r18, 0xF0	; 240
     6e6:	3f 4f       	sbci	r19, 0xFF	; 255
     6e8:	de 01       	movw	r26, r28
     6ea:	11 96       	adiw	r26, 0x01	; 1

  //Calculate first Temp
  //Copy laste byte from previous key
  for(i = 0; i < 4; i++)
  {
    Temp[i] = Round_Key[i+12];
     6ec:	91 91       	ld	r25, Z+
     6ee:	9d 93       	st	X+, r25
  unsigned char Buffer;
  unsigned char Rcon;

  //Calculate first Temp
  //Copy laste byte from previous key
  for(i = 0; i < 4; i++)
     6f0:	2e 17       	cp	r18, r30
     6f2:	3f 07       	cpc	r19, r31
     6f4:	d9 f7       	brne	.-10     	; 0x6ec <_ZL23AES_Calculate_Round_KeyhPh+0x1a>
  {
    Temp[i] = Round_Key[i+12];
  }

  //Rotate Temp
  Buffer = Temp[0];
     6f6:	99 81       	ldd	r25, Y+1	; 0x01
  Temp[0] = Temp[1];
     6f8:	2a 81       	ldd	r18, Y+2	; 0x02
     6fa:	29 83       	std	Y+1, r18	; 0x01
  Temp[1] = Temp[2];
     6fc:	2b 81       	ldd	r18, Y+3	; 0x03
     6fe:	2a 83       	std	Y+2, r18	; 0x02
  Temp[2] = Temp[3];
     700:	2c 81       	ldd	r18, Y+4	; 0x04
     702:	2b 83       	std	Y+3, r18	; 0x03
  Temp[3] = Buffer;
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	9e 01       	movw	r18, r28
     708:	2b 5f       	subi	r18, 0xFB	; 251
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	de 01       	movw	r26, r28
     70e:	11 96       	adiw	r26, 0x01	; 1

  //Substitute Temp
  for(i = 0; i < 4; i++)
  {
    Temp[i] = AES_Sub_Byte(Temp[i]);
     710:	9c 91       	ld	r25, X
  //Split byte up in Row and Collum
  S_Row = ((Byte >> 4) & 0x0F);
  S_Collum = (Byte & 0x0F);

  //Find the correct byte in the S_Table
  S_Byte = TABLE_GET_U1_TWODIM(S_Table, S_Row, S_Collum);
     712:	e9 2f       	mov	r30, r25
     714:	e2 95       	swap	r30
     716:	ef 70       	andi	r30, 0x0F	; 15
     718:	40 e1       	ldi	r20, 0x10	; 16
     71a:	e4 9f       	mul	r30, r20
     71c:	f0 01       	movw	r30, r0
     71e:	11 24       	eor	r1, r1
     720:	e1 5e       	subi	r30, 0xE1	; 225
     722:	fd 4f       	sbci	r31, 0xFD	; 253
            if (__builtin_constant_p(table[index])) \
                return table[index]; \
            return pgm_read_ ## pgm_type(&table[index]); \
        }

    TABLE_GETTER(_u1, u1_t, byte);
     724:	9f 70       	andi	r25, 0x0F	; 15
     726:	e9 0f       	add	r30, r25
     728:	f1 1d       	adc	r31, r1
     72a:	e4 91       	lpm	r30, Z
  Temp[3] = Buffer;

  //Substitute Temp
  for(i = 0; i < 4; i++)
  {
    Temp[i] = AES_Sub_Byte(Temp[i]);
     72c:	ed 93       	st	X+, r30
  Temp[1] = Temp[2];
  Temp[2] = Temp[3];
  Temp[3] = Buffer;

  //Substitute Temp
  for(i = 0; i < 4; i++)
     72e:	a2 17       	cp	r26, r18
     730:	b3 07       	cpc	r27, r19
     732:	71 f7       	brne	.-36     	; 0x710 <_ZL23AES_Calculate_Round_KeyhPh+0x3e>
     734:	91 e0       	ldi	r25, 0x01	; 1
  {
    b = Rcon & 0x80;
    Rcon = Rcon << 1;
    if(b == 0x80)
    {
      Rcon = Rcon ^ 0x1b;
     736:	4b e1       	ldi	r20, 0x1B	; 27
    Temp[i] = AES_Sub_Byte(Temp[i]);
  }

  //Calculate Rcon
  Rcon = 0x01;
  while(Round != 1)
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	41 f0       	breq	.+16     	; 0x74c <_ZL23AES_Calculate_Round_KeyhPh+0x7a>
  {
    b = Rcon & 0x80;
     73c:	59 2f       	mov	r21, r25
     73e:	50 78       	andi	r21, 0x80	; 128
    Rcon = Rcon << 1;
     740:	99 0f       	add	r25, r25
    if(b == 0x80)
     742:	50 38       	cpi	r21, 0x80	; 128
     744:	09 f4       	brne	.+2      	; 0x748 <_ZL23AES_Calculate_Round_KeyhPh+0x76>
    {
      Rcon = Rcon ^ 0x1b;
     746:	94 27       	eor	r25, r20
    }
    Round--;
     748:	81 50       	subi	r24, 0x01	; 1
    Temp[i] = AES_Sub_Byte(Temp[i]);
  }

  //Calculate Rcon
  Rcon = 0x01;
  while(Round != 1)
     74a:	f6 cf       	rjmp	.-20     	; 0x738 <_ZL23AES_Calculate_Round_KeyhPh+0x66>
    }
    Round--;
  }

  //XOR Rcon
  Temp[0] = Temp[0] ^ Rcon;
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	98 27       	eor	r25, r24
     750:	99 83       	std	Y+1, r25	; 0x01
     752:	94 e0       	ldi	r25, 0x04	; 4
     754:	fe 01       	movw	r30, r28
     756:	31 96       	adiw	r30, 0x01	; 1
     758:	db 01       	movw	r26, r22
  //Calculate new key
  for(i = 0; i < 4; i++)
  {
    for(j = 0; j < 4; j++)
    {
      Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
     75a:	4c 91       	ld	r20, X
     75c:	80 81       	ld	r24, Z
     75e:	84 27       	eor	r24, r20
     760:	8d 93       	st	X+, r24
      Temp[j] = Round_Key[j + (4*i)];
     762:	81 93       	st	Z+, r24
  Temp[0] = Temp[0] ^ Rcon;

  //Calculate new key
  for(i = 0; i < 4; i++)
  {
    for(j = 0; j < 4; j++)
     764:	2e 17       	cp	r18, r30
     766:	3f 07       	cpc	r19, r31
     768:	c1 f7       	brne	.-16     	; 0x75a <_ZL23AES_Calculate_Round_KeyhPh+0x88>
     76a:	91 50       	subi	r25, 0x01	; 1
     76c:	6c 5f       	subi	r22, 0xFC	; 252
     76e:	7f 4f       	sbci	r23, 0xFF	; 255

  //XOR Rcon
  Temp[0] = Temp[0] ^ Rcon;

  //Calculate new key
  for(i = 0; i < 4; i++)
     770:	91 11       	cpse	r25, r1
     772:	f0 cf       	rjmp	.-32     	; 0x754 <_ZL23AES_Calculate_Round_KeyhPh+0x82>
    {
      Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
      Temp[j] = Round_Key[j + (4*i)];
    }
  }
}
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <lmic_aes_encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void lmic_aes_encrypt(unsigned char *Data, unsigned char *Key)
{
     782:	4f 92       	push	r4
     784:	5f 92       	push	r5
     786:	6f 92       	push	r6
     788:	7f 92       	push	r7
     78a:	8f 92       	push	r8
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	68 97       	sbiw	r28, 0x18	; 24
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	8c 01       	movw	r16, r24
     7b4:	28 ee       	ldi	r18, 0xE8	; 232
     7b6:	e2 2e       	mov	r14, r18
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	f2 2e       	mov	r15, r18
     7bc:	97 01       	movw	r18, r14
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	d8 01       	movw	r26, r16
     7c4:	a8 0f       	add	r26, r24
     7c6:	b9 1f       	adc	r27, r25
     7c8:	f9 01       	movw	r30, r18
     7ca:	40 e0       	ldi	r20, 0x00	; 0
  //Copy input to State arry
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = Data[Row + (4*Collum)];
     7cc:	5d 91       	ld	r21, X+
     7ce:	50 83       	st	Z, r21
  unsigned char Round_Key[16];

  //Copy input to State arry
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     7d0:	4f 5f       	subi	r20, 0xFF	; 255
     7d2:	34 96       	adiw	r30, 0x04	; 4
     7d4:	44 30       	cpi	r20, 0x04	; 4
     7d6:	d1 f7       	brne	.-12     	; 0x7cc <lmic_aes_encrypt+0x4a>
     7d8:	04 96       	adiw	r24, 0x04	; 4
     7da:	2f 5f       	subi	r18, 0xFF	; 255
     7dc:	3f 4f       	sbci	r19, 0xFF	; 255
  unsigned char Row,Collum;
  unsigned char Round = 0x00;
  unsigned char Round_Key[16];

  //Copy input to State arry
  for(Collum = 0; Collum < 4; Collum++)
     7de:	80 31       	cpi	r24, 0x10	; 16
     7e0:	91 05       	cpc	r25, r1
     7e2:	79 f7       	brne	.-34     	; 0x7c2 <lmic_aes_encrypt+0x40>
     7e4:	db 01       	movw	r26, r22
     7e6:	fe 01       	movw	r30, r28
     7e8:	31 96       	adiw	r30, 0x01	; 1
     7ea:	6e 01       	movw	r12, r28
     7ec:	51 e1       	ldi	r21, 0x11	; 17
     7ee:	c5 0e       	add	r12, r21
     7f0:	d1 1c       	adc	r13, r1
     7f2:	3f 01       	movw	r6, r30
  }

  //Copy key to round key
  for(i = 0; i < 16; i++)
  {
    Round_Key[i] = Key[i];
     7f4:	8d 91       	ld	r24, X+
     7f6:	81 93       	st	Z+, r24
      State[Row][Collum] = Data[Row + (4*Collum)];
    }
  }

  //Copy key to round key
  for(i = 0; i < 16; i++)
     7f8:	ec 15       	cp	r30, r12
     7fa:	fd 05       	cpc	r31, r13
     7fc:	d9 f7       	brne	.-10     	; 0x7f4 <lmic_aes_encrypt+0x72>
  {
    Round_Key[i] = Key[i];
  }

  //Add round key
  AES_Add_Round_Key(Round_Key);
     7fe:	c3 01       	movw	r24, r6
     800:	0e 94 35 03 	call	0x66a	; 0x66a <_ZL17AES_Add_Round_KeyPh>

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
     804:	55 24       	eor	r5, r5
     806:	53 94       	inc	r5
     808:	8c ee       	ldi	r24, 0xEC	; 236
     80a:	a8 2e       	mov	r10, r24
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	b8 2e       	mov	r11, r24
     810:	4e 01       	movw	r8, r28
     812:	89 e1       	ldi	r24, 0x19	; 25
     814:	88 0e       	add	r8, r24
     816:	91 1c       	adc	r9, r1
      a[Row] = State[Row][Collum];
      b[Row] = (State[Row][Collum] << 1);

      if((State[Row][Collum] & 0x80) == 0x80)
      {
        b[Row] = b[Row] ^ 0x1B;
     818:	9b e1       	ldi	r25, 0x1B	; 27
     81a:	49 2e       	mov	r4, r25

  //Add round key
  AES_Add_Round_Key(Round_Key);

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
     81c:	88 ee       	ldi	r24, 0xE8	; 232
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	24 e0       	ldi	r18, 0x04	; 4
     822:	dc 01       	movw	r26, r24
     824:	30 e0       	ldi	r19, 0x00	; 0
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
    {
      for(Row = 0; Row < 4; Row++)
      {
        State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     826:	4c 91       	ld	r20, X
  //Split byte up in Row and Collum
  S_Row = ((Byte >> 4) & 0x0F);
  S_Collum = (Byte & 0x0F);

  //Find the correct byte in the S_Table
  S_Byte = TABLE_GET_U1_TWODIM(S_Table, S_Row, S_Collum);
     828:	e4 2f       	mov	r30, r20
     82a:	e2 95       	swap	r30
     82c:	ef 70       	andi	r30, 0x0F	; 15
     82e:	50 e1       	ldi	r21, 0x10	; 16
     830:	e5 9f       	mul	r30, r21
     832:	f0 01       	movw	r30, r0
     834:	11 24       	eor	r1, r1
     836:	e1 5e       	subi	r30, 0xE1	; 225
     838:	fd 4f       	sbci	r31, 0xFD	; 253
     83a:	4f 70       	andi	r20, 0x0F	; 15
     83c:	e4 0f       	add	r30, r20
     83e:	f1 1d       	adc	r31, r1
     840:	e4 91       	lpm	r30, Z
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
    {
      for(Row = 0; Row < 4; Row++)
      {
        State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     842:	ec 93       	st	X, r30
  for(Round = 1; Round < 10; Round++)
  {
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
    {
      for(Row = 0; Row < 4; Row++)
     844:	3f 5f       	subi	r19, 0xFF	; 255
     846:	14 96       	adiw	r26, 0x04	; 4
     848:	34 30       	cpi	r19, 0x04	; 4
     84a:	69 f7       	brne	.-38     	; 0x826 <lmic_aes_encrypt+0xa4>
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	01 96       	adiw	r24, 0x01	; 1

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
  {
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
     850:	21 11       	cpse	r18, r1
     852:	e7 cf       	rjmp	.-50     	; 0x822 <lmic_aes_encrypt+0xa0>
        State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
      }
    }

    //Preform Row Shift
    AES_Shift_Rows();
     854:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZL14AES_Shift_Rowsv>
     858:	e8 ee       	ldi	r30, 0xE8	; 232
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	ce 01       	movw	r24, r28
     85e:	45 96       	adiw	r24, 0x15	; 21
     860:	b6 01       	movw	r22, r12
     862:	9f 01       	movw	r18, r30
  unsigned char a[4], b[4];
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      a[Row] = State[Row][Collum];
     864:	d9 01       	movw	r26, r18
     866:	5c 91       	ld	r21, X
     868:	dc 01       	movw	r26, r24
     86a:	5d 93       	st	X+, r21
     86c:	cd 01       	movw	r24, r26
      b[Row] = (State[Row][Collum] << 1);
     86e:	45 2f       	mov	r20, r21
     870:	44 0f       	add	r20, r20

      if((State[Row][Collum] & 0x80) == 0x80)
     872:	57 fd       	sbrc	r21, 7
      {
        b[Row] = b[Row] ^ 0x1B;
     874:	44 25       	eor	r20, r4
     876:	db 01       	movw	r26, r22
     878:	4c 93       	st	X, r20
     87a:	2c 5f       	subi	r18, 0xFC	; 252
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	6f 5f       	subi	r22, 0xFF	; 255
     880:	7f 4f       	sbci	r23, 0xFF	; 255
{
  unsigned char Row,Collum;
  unsigned char a[4], b[4];
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     882:	88 16       	cp	r8, r24
     884:	99 06       	cpc	r9, r25
     886:	71 f7       	brne	.-36     	; 0x864 <lmic_aes_encrypt+0xe2>
      if((State[Row][Collum] & 0x80) == 0x80)
      {
        b[Row] = b[Row] ^ 0x1B;
      }
    }
    State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
     888:	6e 89       	ldd	r22, Y+22	; 0x16
     88a:	99 89       	ldd	r25, Y+17	; 0x11
     88c:	96 27       	eor	r25, r22
     88e:	4f 89       	ldd	r20, Y+23	; 0x17
     890:	38 8d       	ldd	r19, Y+24	; 0x18
     892:	8a 89       	ldd	r24, Y+18	; 0x12
     894:	84 27       	eor	r24, r20
     896:	83 27       	eor	r24, r19
     898:	29 2f       	mov	r18, r25
     89a:	28 27       	eor	r18, r24
     89c:	21 93       	st	Z+, r18
    State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
     89e:	5d 89       	ldd	r21, Y+21	; 0x15
     8a0:	2b 89       	ldd	r18, Y+19	; 0x13
     8a2:	85 27       	eor	r24, r21
     8a4:	82 27       	eor	r24, r18
     8a6:	83 83       	std	Z+3, r24	; 0x03
    State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
     8a8:	8c 89       	ldd	r24, Y+20	; 0x14
     8aa:	36 27       	eor	r19, r22
     8ac:	35 27       	eor	r19, r21
     8ae:	23 27       	eor	r18, r19
     8b0:	28 27       	eor	r18, r24
     8b2:	27 83       	std	Z+7, r18	; 0x07
    State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
     8b4:	45 27       	eor	r20, r21
     8b6:	48 27       	eor	r20, r24
     8b8:	94 27       	eor	r25, r20
     8ba:	93 87       	std	Z+11, r25	; 0x0b
*/
static void AES_Mix_Collums()
{
  unsigned char Row,Collum;
  unsigned char a[4], b[4];
  for(Collum = 0; Collum < 4; Collum++)
     8bc:	ae 16       	cp	r10, r30
     8be:	bf 06       	cpc	r11, r31
     8c0:	69 f6       	brne	.-102    	; 0x85c <lmic_aes_encrypt+0xda>

    //Mix Collums
    AES_Mix_Collums();

    //Calculate new round key
    AES_Calculate_Round_Key(Round,Round_Key);
     8c2:	b3 01       	movw	r22, r6
     8c4:	85 2d       	mov	r24, r5
     8c6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZL23AES_Calculate_Round_KeyhPh>

    //Add round key
    AES_Add_Round_Key(Round_Key);
     8ca:	c3 01       	movw	r24, r6
     8cc:	0e 94 35 03 	call	0x66a	; 0x66a <_ZL17AES_Add_Round_KeyPh>

  //Add round key
  AES_Add_Round_Key(Round_Key);

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
     8d0:	53 94       	inc	r5
     8d2:	ba e0       	ldi	r27, 0x0A	; 10
     8d4:	5b 12       	cpse	r5, r27
     8d6:	a2 cf       	rjmp	.-188    	; 0x81c <lmic_aes_encrypt+0x9a>
     8d8:	88 ee       	ldi	r24, 0xE8	; 232
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	34 e0       	ldi	r19, 0x04	; 4
     8de:	dc 01       	movw	r26, r24
     8e0:	40 e0       	ldi	r20, 0x00	; 0
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     8e2:	2c 91       	ld	r18, X
  //Split byte up in Row and Collum
  S_Row = ((Byte >> 4) & 0x0F);
  S_Collum = (Byte & 0x0F);

  //Find the correct byte in the S_Table
  S_Byte = TABLE_GET_U1_TWODIM(S_Table, S_Row, S_Collum);
     8e4:	e2 2f       	mov	r30, r18
     8e6:	e2 95       	swap	r30
     8e8:	ef 70       	andi	r30, 0x0F	; 15
     8ea:	50 e1       	ldi	r21, 0x10	; 16
     8ec:	e5 9f       	mul	r30, r21
     8ee:	f0 01       	movw	r30, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	e1 5e       	subi	r30, 0xE1	; 225
     8f4:	fd 4f       	sbci	r31, 0xFD	; 253
     8f6:	2f 70       	andi	r18, 0x0F	; 15
     8f8:	e2 0f       	add	r30, r18
     8fa:	f1 1d       	adc	r31, r1
     8fc:	e4 91       	lpm	r30, Z
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     8fe:	ec 93       	st	X, r30

  //Last round whitout mix collums
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     900:	4f 5f       	subi	r20, 0xFF	; 255
     902:	14 96       	adiw	r26, 0x04	; 4
     904:	44 30       	cpi	r20, 0x04	; 4
     906:	69 f7       	brne	.-38     	; 0x8e2 <lmic_aes_encrypt+0x160>
     908:	31 50       	subi	r19, 0x01	; 1
     90a:	01 96       	adiw	r24, 0x01	; 1
    AES_Add_Round_Key(Round_Key);
  }

  //Last round whitout mix collums
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
     90c:	31 11       	cpse	r19, r1
     90e:	e7 cf       	rjmp	.-50     	; 0x8de <lmic_aes_encrypt+0x15c>
      State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
    }
  }

  //Shift rows
  AES_Shift_Rows();
     910:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZL14AES_Shift_Rowsv>

  //Calculate new round key
  AES_Calculate_Round_Key(Round,Round_Key);
     914:	b3 01       	movw	r22, r6
     916:	8a e0       	ldi	r24, 0x0A	; 10
     918:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_ZL23AES_Calculate_Round_KeyhPh>

  //Add round Key
  AES_Add_Round_Key(Round_Key);
     91c:	c3 01       	movw	r24, r6
     91e:	0e 94 35 03 	call	0x66a	; 0x66a <_ZL17AES_Add_Round_KeyPh>
     922:	98 01       	movw	r18, r16
     924:	20 5f       	subi	r18, 0xF0	; 240
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	d8 01       	movw	r26, r16
     92a:	f7 01       	movw	r30, r14
     92c:	80 e0       	ldi	r24, 0x00	; 0
  //Copy the State into the data array
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      Data[Row + (4*Collum)] = State[Row][Collum];
     92e:	90 81       	ld	r25, Z
     930:	9d 93       	st	X+, r25
  AES_Add_Round_Key(Round_Key);

  //Copy the State into the data array
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	34 96       	adiw	r30, 0x04	; 4
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	d1 f7       	brne	.-12     	; 0x92e <__stack+0x2f>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	e8 1a       	sub	r14, r24
     93e:	f8 0a       	sbc	r15, r24
     940:	0c 5f       	subi	r16, 0xFC	; 252
     942:	1f 4f       	sbci	r17, 0xFF	; 255

  //Add round Key
  AES_Add_Round_Key(Round_Key);

  //Copy the State into the data array
  for(Collum = 0; Collum < 4; Collum++)
     944:	20 17       	cp	r18, r16
     946:	31 07       	cpc	r19, r17
     948:	79 f7       	brne	.-34     	; 0x928 <__stack+0x29>
    {
      Data[Row + (4*Collum)] = State[Row][Collum];
    }
  }

}
     94a:	68 96       	adiw	r28, 0x18	; 24
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	7f 90       	pop	r7
     970:	6f 90       	pop	r6
     972:	5f 90       	pop	r5
     974:	4f 90       	pop	r4
     976:	08 95       	ret

00000978 <shift_left.constprop.0>:
// global area for passing parameters (aux, key)
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[16/sizeof(u4_t)];

// Shift the given buffer left one bit
static void shift_left(xref2u1_t buf, u1_t len) {
     978:	fc 01       	movw	r30, r24
    while (len--) {
        u1_t next = len ? buf[1] : 0;
     97a:	20 e1       	ldi	r18, 0x10	; 16
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[16/sizeof(u4_t)];

// Shift the given buffer left one bit
static void shift_left(xref2u1_t buf, u1_t len) {
    while (len--) {
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	50 f0       	brcs	.+20     	; 0x994 <shift_left.constprop.0+0x1c>
        u1_t next = len ? buf[1] : 0;
     980:	11 f0       	breq	.+4      	; 0x986 <shift_left.constprop.0+0xe>
     982:	81 81       	ldd	r24, Z+1	; 0x01
     984:	01 c0       	rjmp	.+2      	; 0x988 <shift_left.constprop.0+0x10>
     986:	80 e0       	ldi	r24, 0x00	; 0

        u1_t val = (*buf << 1);
     988:	90 81       	ld	r25, Z
     98a:	99 0f       	add	r25, r25
        if (next & 0x80)
     98c:	87 fd       	sbrc	r24, 7
            val |= 1;
     98e:	91 60       	ori	r25, 0x01	; 1
        *buf++ = val;
     990:	91 93       	st	Z+, r25
     992:	f4 cf       	rjmp	.-24     	; 0x97c <shift_left.constprop.0+0x4>
    }
}
     994:	08 95       	ret

00000996 <os_aes>:
        // Increment the block index byte
        AESaux[15]++;
    }
}

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
     996:	6f 92       	push	r6
     998:	7f 92       	push	r7
     99a:	8f 92       	push	r8
     99c:	9f 92       	push	r9
     99e:	af 92       	push	r10
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	60 97       	sbiw	r28, 0x10	; 16
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	7b 01       	movw	r14, r22
     9c4:	8a 01       	movw	r16, r20
    switch (mode & ~AES_MICNOAUX) {
     9c6:	28 2f       	mov	r18, r24
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	27 7f       	andi	r18, 0xF7	; 247
     9cc:	22 30       	cpi	r18, 0x02	; 2
     9ce:	31 05       	cpc	r19, r1
     9d0:	49 f0       	breq	.+18     	; 0x9e4 <os_aes+0x4e>
     9d2:	24 30       	cpi	r18, 0x04	; 4
     9d4:	31 05       	cpc	r19, r1
     9d6:	09 f4       	brne	.+2      	; 0x9da <os_aes+0x44>
     9d8:	a0 c0       	rjmp	.+320    	; 0xb1a <os_aes+0x184>
     9da:	23 2b       	or	r18, r19
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <os_aes+0x4a>
     9de:	b6 c0       	rjmp	.+364    	; 0xb4c <os_aes+0x1b6>
     9e0:	d1 2c       	mov	r13, r1
     9e2:	7b c0       	rjmp	.+246    	; 0xada <os_aes+0x144>

// Apply RFC4493 CMAC, using AESKEY as the key. If prepend_aux is true,
// AESAUX is prepended to the message. AESAUX is used as working memory
// in any case. The CMAC result is returned in AESAUX as well.
static void os_aes_cmac(xref2u1_t buf, u2_t len, u1_t prepend_aux) {
    if (prepend_aux)
     9e4:	83 fd       	sbrc	r24, 3
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <os_aes+0x76>
        lmic_aes_encrypt(AESaux, AESkey);
     9e8:	6d eb       	ldi	r22, 0xBD	; 189
     9ea:	72 e0       	ldi	r23, 0x02	; 2
     9ec:	8d ec       	ldi	r24, 0xCD	; 205
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	0e 94 c1 03 	call	0x782	; 0x782 <lmic_aes_encrypt>
        if (len == 0) {
            // Final block, xor with K1 or K2. K1 and K2 are calculated
            // by encrypting the all-zeroes block and then applying some
            // shifts and xor on that.
            u1_t final_key[16];
            memset(final_key, 0, sizeof(final_key));
     9f4:	30 e1       	ldi	r19, 0x10	; 16
     9f6:	63 2e       	mov	r6, r19
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	6c 01       	movw	r12, r24
     9fe:	4d ed       	ldi	r20, 0xDD	; 221
     a00:	84 2e       	mov	r8, r20
     a02:	42 e0       	ldi	r20, 0x02	; 2
     a04:	94 2e       	mov	r9, r20
            // If the final block was not complete, calculate K2 from K1
            if (need_padding) {
                msb = final_key[0] & 0x80;
                shift_left(final_key, sizeof(final_key));
                if (msb)
                    final_key[sizeof(final_key)-1] ^= 0x87;
     a06:	57 e8       	ldi	r21, 0x87	; 135
     a08:	75 2e       	mov	r7, r21
     a0a:	47 c0       	rjmp	.+142    	; 0xa9a <os_aes+0x104>
// in any case. The CMAC result is returned in AESAUX as well.
static void os_aes_cmac(xref2u1_t buf, u2_t len, u1_t prepend_aux) {
    if (prepend_aux)
        lmic_aes_encrypt(AESaux, AESkey);
    else
        memset (AESaux, 0, 16);
     a0c:	80 e1       	ldi	r24, 0x10	; 16
     a0e:	ed ec       	ldi	r30, 0xCD	; 205
     a10:	f2 e0       	ldi	r31, 0x02	; 2
     a12:	df 01       	movw	r26, r30
     a14:	1d 92       	st	X+, r1
     a16:	8a 95       	dec	r24
     a18:	e9 f7       	brne	.-6      	; 0xa14 <os_aes+0x7e>
     a1a:	ec cf       	rjmp	.-40     	; 0x9f4 <os_aes+0x5e>
                // and leave AESAUX unchanged for them.
                AESaux[i] ^= 0x80;
                need_padding = 1;
                break;
            }
            AESaux[i] ^= *buf;
     a1c:	fc 01       	movw	r30, r24
     a1e:	21 91       	ld	r18, Z+
     a20:	cf 01       	movw	r24, r30
     a22:	3c 91       	ld	r19, X
     a24:	23 27       	eor	r18, r19
     a26:	2d 93       	st	X+, r18
    else
        memset (AESaux, 0, 16);

    while (len > 0) {
        u1_t need_padding = 0;
        for (u1_t i = 0; i < 16; ++i, ++buf, --len) {
     a28:	4f 5f       	subi	r20, 0xFF	; 255
     a2a:	7f 01       	movw	r14, r30
     a2c:	01 50       	subi	r16, 0x01	; 1
     a2e:	11 09       	sbc	r17, r1
     a30:	40 31       	cpi	r20, 0x10	; 16
     a32:	f1 f1       	breq	.+124    	; 0xab0 <os_aes+0x11a>
            if (len == 0) {
     a34:	01 15       	cp	r16, r1
     a36:	11 05       	cpc	r17, r1
     a38:	89 f7       	brne	.-30     	; 0xa1c <os_aes+0x86>
                // The message is padded with 0x80 and then zeroes.
                // Since zeroes are no-op for xor, we can just skip them
                // and leave AESAUX unchanged for them.
                AESaux[i] ^= 0x80;
     a3a:	e4 2f       	mov	r30, r20
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	e3 53       	subi	r30, 0x33	; 51
     a40:	fd 4f       	sbci	r31, 0xFD	; 253
     a42:	80 81       	ld	r24, Z
     a44:	80 58       	subi	r24, 0x80	; 128
     a46:	80 83       	st	Z, r24
                need_padding = 1;
     a48:	01 e0       	ldi	r16, 0x01	; 1
        if (len == 0) {
            // Final block, xor with K1 or K2. K1 and K2 are calculated
            // by encrypting the all-zeroes block and then applying some
            // shifts and xor on that.
            u1_t final_key[16];
            memset(final_key, 0, sizeof(final_key));
     a4a:	d6 01       	movw	r26, r12
     a4c:	e6 2d       	mov	r30, r6
     a4e:	1d 92       	st	X+, r1
     a50:	ea 95       	dec	r30
     a52:	e9 f7       	brne	.-6      	; 0xa4e <os_aes+0xb8>
            lmic_aes_encrypt(final_key, AESkey);
     a54:	6d eb       	ldi	r22, 0xBD	; 189
     a56:	72 e0       	ldi	r23, 0x02	; 2
     a58:	c6 01       	movw	r24, r12
     a5a:	0e 94 c1 03 	call	0x782	; 0x782 <lmic_aes_encrypt>

            // Calculate K1
            u1_t msb = final_key[0] & 0x80;
     a5e:	19 81       	ldd	r17, Y+1	; 0x01
     a60:	10 78       	andi	r17, 0x80	; 128
            shift_left(final_key, sizeof(final_key));
     a62:	c6 01       	movw	r24, r12
     a64:	0e 94 bc 04 	call	0x978	; 0x978 <shift_left.constprop.0>
            if (msb)
     a68:	11 23       	and	r17, r17
     a6a:	19 f0       	breq	.+6      	; 0xa72 <os_aes+0xdc>
                final_key[sizeof(final_key)-1] ^= 0x87;
     a6c:	88 89       	ldd	r24, Y+16	; 0x10
     a6e:	87 25       	eor	r24, r7
     a70:	88 8b       	std	Y+16, r24	; 0x10

            // If the final block was not complete, calculate K2 from K1
            if (need_padding) {
     a72:	01 11       	cpse	r16, r1
     a74:	22 c0       	rjmp	.+68     	; 0xaba <os_aes+0x124>
     a76:	f6 01       	movw	r30, r12
                    final_key[sizeof(final_key)-1] ^= 0x87;
            }

            // Xor with K1 or K2
            for (u1_t i = 0; i < sizeof(final_key); ++i)
                AESaux[i] ^= final_key[i];
     a78:	81 91       	ld	r24, Z+
     a7a:	d5 01       	movw	r26, r10
     a7c:	9c 91       	ld	r25, X
     a7e:	89 27       	eor	r24, r25
     a80:	8d 93       	st	X+, r24
     a82:	5d 01       	movw	r10, r26
                if (msb)
                    final_key[sizeof(final_key)-1] ^= 0x87;
            }

            // Xor with K1 or K2
            for (u1_t i = 0; i < sizeof(final_key); ++i)
     a84:	8a 16       	cp	r8, r26
     a86:	9b 06       	cpc	r9, r27
     a88:	b9 f7       	brne	.-18     	; 0xa78 <os_aes+0xe2>
     a8a:	00 e0       	ldi	r16, 0x00	; 0
     a8c:	10 e0       	ldi	r17, 0x00	; 0
                AESaux[i] ^= final_key[i];
        }

        lmic_aes_encrypt(AESaux, AESkey);
     a8e:	6d eb       	ldi	r22, 0xBD	; 189
     a90:	72 e0       	ldi	r23, 0x02	; 2
     a92:	8d ec       	ldi	r24, 0xCD	; 205
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	0e 94 c1 03 	call	0x782	; 0x782 <lmic_aes_encrypt>
    if (prepend_aux)
        lmic_aes_encrypt(AESaux, AESkey);
    else
        memset (AESaux, 0, 16);

    while (len > 0) {
     a9a:	01 15       	cp	r16, r1
     a9c:	11 05       	cpc	r17, r1
     a9e:	c1 f0       	breq	.+48     	; 0xad0 <os_aes+0x13a>
     aa0:	c7 01       	movw	r24, r14
     aa2:	2d ec       	ldi	r18, 0xCD	; 205
     aa4:	a2 2e       	mov	r10, r18
     aa6:	22 e0       	ldi	r18, 0x02	; 2
     aa8:	b2 2e       	mov	r11, r18
     aaa:	d5 01       	movw	r26, r10
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	b6 cf       	rjmp	.-148    	; 0xa1c <os_aes+0x86>
                break;
            }
            AESaux[i] ^= *buf;
        }

        if (len == 0) {
     ab0:	01 15       	cp	r16, r1
     ab2:	11 05       	cpc	r17, r1
     ab4:	61 f7       	brne	.-40     	; 0xa8e <os_aes+0xf8>
        lmic_aes_encrypt(AESaux, AESkey);
    else
        memset (AESaux, 0, 16);

    while (len > 0) {
        u1_t need_padding = 0;
     ab6:	00 e0       	ldi	r16, 0x00	; 0
     ab8:	c8 cf       	rjmp	.-112    	; 0xa4a <os_aes+0xb4>
            if (msb)
                final_key[sizeof(final_key)-1] ^= 0x87;

            // If the final block was not complete, calculate K2 from K1
            if (need_padding) {
                msb = final_key[0] & 0x80;
     aba:	19 81       	ldd	r17, Y+1	; 0x01
     abc:	10 78       	andi	r17, 0x80	; 128
                shift_left(final_key, sizeof(final_key));
     abe:	c6 01       	movw	r24, r12
     ac0:	0e 94 bc 04 	call	0x978	; 0x978 <shift_left.constprop.0>
                if (msb)
     ac4:	11 23       	and	r17, r17
     ac6:	b9 f2       	breq	.-82     	; 0xa76 <os_aes+0xe0>
                    final_key[sizeof(final_key)-1] ^= 0x87;
     ac8:	88 89       	ldd	r24, Y+16	; 0x10
     aca:	87 25       	eor	r24, r7
     acc:	88 8b       	std	Y+16, r24	; 0x10
     ace:	d3 cf       	rjmp	.-90     	; 0xa76 <os_aes+0xe0>

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
    switch (mode & ~AES_MICNOAUX) {
        case AES_MIC:
            os_aes_cmac(buf, len, /* prepend_aux */ !(mode & AES_MICNOAUX));
            return os_rmsbf4(AESaux);
     ad0:	8d ec       	ldi	r24, 0xCD	; 205
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <os_rmsbf4>
     ad8:	3c c0       	rjmp	.+120    	; 0xb52 <os_aes+0x1bc>

        case AES_ENC:
            // TODO: Check / handle when len is not a multiple of 16
            for (u1_t i = 0; i < len; i += 16)
     ada:	8d 2d       	mov	r24, r13
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	80 17       	cp	r24, r16
     ae0:	91 07       	cpc	r25, r17
     ae2:	a0 f5       	brcc	.+104    	; 0xb4c <os_aes+0x1b6>
                lmic_aes_encrypt(buf+i, AESkey);
     ae4:	6d eb       	ldi	r22, 0xBD	; 189
     ae6:	72 e0       	ldi	r23, 0x02	; 2
     ae8:	8e 0d       	add	r24, r14
     aea:	9f 1d       	adc	r25, r15
     aec:	0e 94 c1 03 	call	0x782	; 0x782 <lmic_aes_encrypt>
            os_aes_cmac(buf, len, /* prepend_aux */ !(mode & AES_MICNOAUX));
            return os_rmsbf4(AESaux);

        case AES_ENC:
            // TODO: Check / handle when len is not a multiple of 16
            for (u1_t i = 0; i < len; i += 16)
     af0:	b0 e1       	ldi	r27, 0x10	; 16
     af2:	db 0e       	add	r13, r27
     af4:	f2 cf       	rjmp	.-28     	; 0xada <os_aes+0x144>
        // Encrypt the counter block with the selected key
        memcpy(ctr, AESaux, sizeof(ctr));
        lmic_aes_encrypt(ctr, AESkey);

        // Xor the payload with the resulting ciphertext
        for (u1_t i = 0; i < 16 && len > 0; i++, len--, buf++)
     af6:	01 15       	cp	r16, r1
     af8:	11 05       	cpc	r17, r1
     afa:	51 f0       	breq	.+20     	; 0xb10 <os_aes+0x17a>
            *buf ^= ctr[i];
     afc:	8d 91       	ld	r24, X+
     afe:	90 81       	ld	r25, Z
     b00:	89 27       	eor	r24, r25
     b02:	81 93       	st	Z+, r24
        // Encrypt the counter block with the selected key
        memcpy(ctr, AESaux, sizeof(ctr));
        lmic_aes_encrypt(ctr, AESkey);

        // Xor the payload with the resulting ciphertext
        for (u1_t i = 0; i < 16 && len > 0; i++, len--, buf++)
     b04:	01 50       	subi	r16, 0x01	; 1
     b06:	11 09       	sbc	r17, r1
     b08:	7f 01       	movw	r14, r30
     b0a:	e2 17       	cp	r30, r18
     b0c:	f3 07       	cpc	r31, r19
     b0e:	99 f7       	brne	.-26     	; 0xaf6 <os_aes+0x160>
            *buf ^= ctr[i];

        // Increment the block index byte
        AESaux[15]++;
     b10:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <AESAUX+0xf>
     b14:	8f 5f       	subi	r24, 0xFF	; 255
     b16:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <AESAUX+0xf>
// Run AES-CTR using the key in AESKEY and using AESAUX as the
// counter block. The last byte of the counter block will be incremented
// for every block. The given buffer will be encrypted in place.
static void os_aes_ctr (xref2u1_t buf, u2_t len) {
    u1_t ctr[16];
    while (len) {
     b1a:	01 15       	cp	r16, r1
     b1c:	11 05       	cpc	r17, r1
     b1e:	b1 f0       	breq	.+44     	; 0xb4c <os_aes+0x1b6>
        // Encrypt the counter block with the selected key
        memcpy(ctr, AESaux, sizeof(ctr));
     b20:	80 e1       	ldi	r24, 0x10	; 16
     b22:	ed ec       	ldi	r30, 0xCD	; 205
     b24:	f2 e0       	ldi	r31, 0x02	; 2
     b26:	de 01       	movw	r26, r28
     b28:	11 96       	adiw	r26, 0x01	; 1
     b2a:	01 90       	ld	r0, Z+
     b2c:	0d 92       	st	X+, r0
     b2e:	8a 95       	dec	r24
     b30:	e1 f7       	brne	.-8      	; 0xb2a <os_aes+0x194>
        lmic_aes_encrypt(ctr, AESkey);
     b32:	6d eb       	ldi	r22, 0xBD	; 189
     b34:	72 e0       	ldi	r23, 0x02	; 2
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	0e 94 c1 03 	call	0x782	; 0x782 <lmic_aes_encrypt>
     b3e:	de 01       	movw	r26, r28
     b40:	11 96       	adiw	r26, 0x01	; 1
     b42:	f7 01       	movw	r30, r14
     b44:	97 01       	movw	r18, r14
     b46:	20 5f       	subi	r18, 0xF0	; 240
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	d8 cf       	rjmp	.-80     	; 0xafc <os_aes+0x166>

        case AES_CTR:
            os_aes_ctr(buf, len);
            break;
    }
    return 0;
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	cb 01       	movw	r24, r22
}
     b52:	60 96       	adiw	r28, 0x10	; 16
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	bf 90       	pop	r11
     b70:	af 90       	pop	r10
     b72:	9f 90       	pop	r9
     b74:	8f 90       	pop	r8
     b76:	7f 90       	pop	r7
     b78:	6f 90       	pop	r6
     b7a:	08 95       	ret

00000b7c <hal_pin_rxtx>:
    if (lmic_pins.dio[2] != LMIC_UNUSED_PIN)
        pinMode(lmic_pins.dio[2], INPUT);
}

// val == 1  => tx 1
void hal_pin_rxtx (u1_t val) {
     b7c:	68 2f       	mov	r22, r24
    if (lmic_pins.rxtx != LMIC_UNUSED_PIN)
     b7e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <lmic_pins+0x1>
     b82:	8f 3f       	cpi	r24, 0xFF	; 255
     b84:	11 f0       	breq	.+4      	; 0xb8a <hal_pin_rxtx+0xe>
        digitalWrite(lmic_pins.rxtx, val);
     b86:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <digitalWrite>
     b8a:	08 95       	ret

00000b8c <hal_pin_rst>:
}

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
    if (lmic_pins.rst == LMIC_UNUSED_PIN)
     b90:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <lmic_pins+0x2>
     b94:	cf 3f       	cpi	r28, 0xFF	; 255
     b96:	99 f0       	breq	.+38     	; 0xbbe <hal_pin_rst+0x32>
        return;

    if(val == 0 || val == 1) { // drive pin
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	58 f4       	brcc	.+22     	; 0xbb2 <hal_pin_rst+0x26>
     b9c:	d8 2f       	mov	r29, r24
        pinMode(lmic_pins.rst, OUTPUT);
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	8c 2f       	mov	r24, r28
     ba2:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
        digitalWrite(lmic_pins.rst, val);
     ba6:	6d 2f       	mov	r22, r29
     ba8:	8c 2f       	mov	r24, r28
    } else { // keep pin floating
        pinMode(lmic_pins.rst, INPUT);
    }
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
    if (lmic_pins.rst == LMIC_UNUSED_PIN)
        return;

    if(val == 0 || val == 1) { // drive pin
        pinMode(lmic_pins.rst, OUTPUT);
        digitalWrite(lmic_pins.rst, val);
     bae:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <digitalWrite>
    } else { // keep pin floating
        pinMode(lmic_pins.rst, INPUT);
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	8c 2f       	mov	r24, r28
    }
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28

    if(val == 0 || val == 1) { // drive pin
        pinMode(lmic_pins.rst, OUTPUT);
        digitalWrite(lmic_pins.rst, val);
    } else { // keep pin floating
        pinMode(lmic_pins.rst, INPUT);
     bba:	0c 94 73 26 	jmp	0x4ce6	; 0x4ce6 <pinMode>
    }
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <hal_pin_nss>:

static void hal_spi_init () {
    SPI.begin();
}

void hal_pin_nss (u1_t val) {
     bc4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <_ZN8SPIClass13interruptModeE>
    if (!val)
     bc8:	81 11       	cpse	r24, r1
     bca:	1c c0       	rjmp	.+56     	; 0xc04 <hal_pin_nss+0x40>
     bcc:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <_ZL8settings>
     bd0:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <_ZL8settings+0x1>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     bd4:	99 23       	and	r25, r25
     bd6:	99 f0       	breq	.+38     	; 0xbfe <hal_pin_nss+0x3a>
      uint8_t sreg = SREG;
     bd8:	3f b7       	in	r19, 0x3f	; 63
      noInterrupts();
     bda:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     bdc:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <_ZN8SPIClass13interruptModeE>
     be0:	91 30       	cpi	r25, 0x01	; 1
     be2:	59 f4       	brne	.+22     	; 0xbfa <hal_pin_nss+0x36>
        interruptSave = SPI_AVR_EIMSK;
     be4:	9d b3       	in	r25, 0x1d	; 29
     be6:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     bea:	2d b3       	in	r18, 0x1d	; 29
     bec:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <_ZN8SPIClass13interruptMaskE>
     bf0:	90 95       	com	r25
     bf2:	92 23       	and	r25, r18
     bf4:	9d bb       	out	0x1d, r25	; 29
        SREG = sreg;
     bf6:	3f bf       	out	0x3f, r19	; 63
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <hal_pin_nss+0x3a>
      } else
      #endif
      {
        interruptSave = sreg;
     bfa:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     bfe:	5c bd       	out	0x2c, r21	; 44
    SPSR = settings.spsr;
     c00:	4d bd       	out	0x2d, r20	; 45
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <hal_pin_nss+0x5c>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
     c04:	99 23       	and	r25, r25
     c06:	61 f0       	breq	.+24     	; 0xc20 <hal_pin_nss+0x5c>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
     c08:	2f b7       	in	r18, 0x3f	; 63
      #endif
      noInterrupts();
     c0a:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     c0c:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <_ZN8SPIClass13interruptModeE>
     c10:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <_ZN8SPIClass13interruptSaveE>
     c14:	31 30       	cpi	r19, 0x01	; 1
     c16:	19 f4       	brne	.+6      	; 0xc1e <hal_pin_nss+0x5a>
        SPI_AVR_EIMSK = interruptSave;
     c18:	9d bb       	out	0x1d, r25	; 29
        SREG = sreg;
     c1a:	2f bf       	out	0x3f, r18	; 63
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <hal_pin_nss+0x5c>
      } else
      #endif
      {
        SREG = interruptSave;
     c1e:	9f bf       	out	0x3f, r25	; 63
        SPI.beginTransaction(settings);
    else
        SPI.endTransaction();

    //Serial.println(val?">>":"<<");
    digitalWrite(lmic_pins.nss, val);
     c20:	68 2f       	mov	r22, r24
     c22:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lmic_pins>
     c26:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <digitalWrite>

00000c2a <hal_spi>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     c2a:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     c2c:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     c2e:	0d b4       	in	r0, 0x2d	; 45
     c30:	07 fe       	sbrs	r0, 7
     c32:	fd cf       	rjmp	.-6      	; 0xc2e <hal_spi+0x4>
    return SPDR;
     c34:	8e b5       	in	r24, 0x2e	; 46
    Serial.print(out, HEX);
    Serial.print("<");
    Serial.println(res, HEX);
    */
    return res;
}
     c36:	08 95       	ret

00000c38 <hal_ticks>:
    // efficient on AVR (which only has 1-bit shifts).
    static uint8_t overflow = 0;

    // Scaled down timestamp. The top US_PER_OSTICK_EXPONENT bits are 0,
    // the others will be the lower bits of our return value.
    uint32_t scaled = micros() >> US_PER_OSTICK_EXPONENT;
     c38:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <micros>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	24 e0       	ldi	r18, 0x04	; 4
     c42:	b6 95       	lsr	r27
     c44:	a7 95       	ror	r26
     c46:	97 95       	ror	r25
     c48:	87 95       	ror	r24
     c4a:	2a 95       	dec	r18
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <hal_ticks+0xa>
    const uint8_t mask = (1 << (7 - US_PER_OSTICK_EXPONENT));
    // Update overflow. If the overlapping bit is different
    // between overflow and msb, it is added to the stored value,
    // so the overlapping bit becomes equal again and, if it changed
    // from 1 to 0, the upper bits are incremented.
    overflow += (msb ^ overflow) & mask;
     c4e:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <_ZZ9hal_ticksE8overflow>
     c52:	23 2f       	mov	r18, r19
     c54:	2b 27       	eor	r18, r27
     c56:	28 70       	andi	r18, 0x08	; 8
     c58:	23 0f       	add	r18, r19
     c5a:	20 93 f8 01 	sts	0x01F8, r18	; 0x8001f8 <_ZZ9hal_ticksE8overflow>

    // Return the scaled value with the upper bits of stored added. The
    // overlapping bit will be equal and the lower bits will be 0, so
    // bitwise or is a no-op for them.
    return scaled | ((uint32_t)overflow << 24);
     c5e:	bc 01       	movw	r22, r24
     c60:	cd 01       	movw	r24, r26
     c62:	92 2b       	or	r25, r18

    // 0 leads to correct, but overly complex code (it could just return
    // micros() unmodified), 8 leaves no room for the overlapping bit.
    static_assert(US_PER_OSTICK_EXPONENT > 0 && US_PER_OSTICK_EXPONENT < 8, "Invalid US_PER_OSTICK_EXPONENT value");
}
     c64:	08 95       	ret

00000c66 <hal_waitUntil>:
// time has already passed.
static s4_t delta_time(u4_t time) {
    return (s4_t)(time - hal_ticks());
}

void hal_waitUntil (u4_t time) {
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	6b 01       	movw	r12, r22
     c70:	7c 01       	movw	r14, r24
}

// Returns the number of ticks until time. Negative values indicate that
// time has already passed.
static s4_t delta_time(u4_t time) {
    return (s4_t)(time - hal_ticks());
     c72:	0e 94 1c 06 	call	0xc38	; 0xc38 <hal_ticks>
     c76:	c6 1a       	sub	r12, r22
     c78:	d7 0a       	sbc	r13, r23
     c7a:	e8 0a       	sbc	r14, r24
     c7c:	f9 0a       	sbc	r15, r25

void hal_waitUntil (u4_t time) {
    s4_t delta = delta_time(time);
    // From delayMicroseconds docs: Currently, the largest value that
    // will produce an accurate delay is 16383.
    while (delta > (16000 / US_PER_OSTICK)) {
     c7e:	89 ee       	ldi	r24, 0xE9	; 233
     c80:	c8 16       	cp	r12, r24
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	d8 06       	cpc	r13, r24
     c86:	e1 04       	cpc	r14, r1
     c88:	f1 04       	cpc	r15, r1
     c8a:	6c f0       	brlt	.+26     	; 0xca6 <hal_waitUntil+0x40>
        delay(16);
     c8c:	60 e1       	ldi	r22, 0x10	; 16
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 c8 25 	call	0x4b90	; 0x4b90 <delay>
        delta -= (16000 / US_PER_OSTICK);
     c98:	88 ee       	ldi	r24, 0xE8	; 232
     c9a:	c8 1a       	sub	r12, r24
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	d8 0a       	sbc	r13, r24
     ca0:	e1 08       	sbc	r14, r1
     ca2:	f1 08       	sbc	r15, r1

void hal_waitUntil (u4_t time) {
    s4_t delta = delta_time(time);
    // From delayMicroseconds docs: Currently, the largest value that
    // will produce an accurate delay is 16383.
    while (delta > (16000 / US_PER_OSTICK)) {
     ca4:	ec cf       	rjmp	.-40     	; 0xc7e <hal_waitUntil+0x18>
        delay(16);
        delta -= (16000 / US_PER_OSTICK);
    }
    if (delta > 0)
     ca6:	1c 14       	cp	r1, r12
     ca8:	1d 04       	cpc	r1, r13
     caa:	1e 04       	cpc	r1, r14
     cac:	1f 04       	cpc	r1, r15
     cae:	64 f4       	brge	.+24     	; 0xcc8 <hal_waitUntil+0x62>
        delayMicroseconds(delta * US_PER_OSTICK);
     cb0:	c6 01       	movw	r24, r12
     cb2:	24 e0       	ldi	r18, 0x04	; 4
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	2a 95       	dec	r18
     cba:	e1 f7       	brne	.-8      	; 0xcb4 <hal_waitUntil+0x4e>
}
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
    while (delta > (16000 / US_PER_OSTICK)) {
        delay(16);
        delta -= (16000 / US_PER_OSTICK);
    }
    if (delta > 0)
        delayMicroseconds(delta * US_PER_OSTICK);
     cc4:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <delayMicroseconds>
}
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	08 95       	ret

00000cd2 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	6b 01       	movw	r12, r22
     cdc:	7c 01       	movw	r14, r24
}

// Returns the number of ticks until time. Negative values indicate that
// time has already passed.
static s4_t delta_time(u4_t time) {
    return (s4_t)(time - hal_ticks());
     cde:	0e 94 1c 06 	call	0xc38	; 0xc38 <hal_ticks>
}

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
    // No need to schedule wakeup, since we're not sleeping
    return delta_time(time) <= 0;
     ce2:	c6 1a       	sub	r12, r22
     ce4:	d7 0a       	sbc	r13, r23
     ce6:	e8 0a       	sbc	r14, r24
     ce8:	f9 0a       	sbc	r15, r25
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	1c 14       	cp	r1, r12
     cee:	1d 04       	cpc	r1, r13
     cf0:	1e 04       	cpc	r1, r14
     cf2:	1f 04       	cpc	r1, r15
     cf4:	0c f4       	brge	.+2      	; 0xcf8 <hal_checkTimer+0x26>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
}
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	08 95       	ret

00000d02 <hal_disableIRQs>:

static uint8_t irqlevel = 0;

void hal_disableIRQs () {
    noInterrupts();
     d02:	f8 94       	cli
    irqlevel++;
     d04:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8irqlevel>
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <_ZL8irqlevel>
     d0e:	08 95       	ret

00000d10 <hal_enableIRQs>:
}

void hal_enableIRQs () {
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
    if(--irqlevel == 0) {
     d20:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <_ZL8irqlevel>
     d24:	81 50       	subi	r24, 0x01	; 1
     d26:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <_ZL8irqlevel>
     d2a:	81 11       	cpse	r24, r1
     d2c:	21 c0       	rjmp	.+66     	; 0xd70 <hal_enableIRQs+0x60>
        interrupts();
     d2e:	78 94       	sei
     d30:	83 e1       	ldi	r24, 0x13	; 19
     d32:	c8 2e       	mov	r12, r24
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	d8 2e       	mov	r13, r24
     d38:	cc ef       	ldi	r28, 0xFC	; 252
     d3a:	d1 e0       	ldi	r29, 0x01	; 1

static bool dio_states[NUM_DIO] = {0};

static void hal_io_check() {
    uint8_t i;
    for (i = 0; i < NUM_DIO; ++i) {
     d3c:	10 e0       	ldi	r17, 0x00	; 0
        if (lmic_pins.dio[i] == LMIC_UNUSED_PIN)
            continue;

        if (dio_states[i] != digitalRead(lmic_pins.dio[i])) {
            dio_states[i] = !dio_states[i];
     d3e:	01 e0       	ldi	r16, 0x01	; 1
static bool dio_states[NUM_DIO] = {0};

static void hal_io_check() {
    uint8_t i;
    for (i = 0; i < NUM_DIO; ++i) {
        if (lmic_pins.dio[i] == LMIC_UNUSED_PIN)
     d40:	f6 01       	movw	r30, r12
     d42:	81 91       	ld	r24, Z+
     d44:	6f 01       	movw	r12, r30
     d46:	8f 3f       	cpi	r24, 0xFF	; 255
     d48:	79 f0       	breq	.+30     	; 0xd68 <hal_enableIRQs+0x58>
            continue;

        if (dio_states[i] != digitalRead(lmic_pins.dio[i])) {
     d4a:	e8 80       	ld	r14, Y
     d4c:	f1 2c       	mov	r15, r1
     d4e:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <digitalRead>
     d52:	e8 16       	cp	r14, r24
     d54:	f9 06       	cpc	r15, r25
     d56:	41 f0       	breq	.+16     	; 0xd68 <hal_enableIRQs+0x58>
            dio_states[i] = !dio_states[i];
     d58:	88 81       	ld	r24, Y
     d5a:	80 27       	eor	r24, r16
     d5c:	88 83       	st	Y, r24
            if (dio_states[i])
     d5e:	88 23       	and	r24, r24
     d60:	19 f0       	breq	.+6      	; 0xd68 <hal_enableIRQs+0x58>
                radio_irq_handler(i);
     d62:	81 2f       	mov	r24, r17
     d64:	0e 94 67 20 	call	0x40ce	; 0x40ce <radio_irq_handler>

static bool dio_states[NUM_DIO] = {0};

static void hal_io_check() {
    uint8_t i;
    for (i = 0; i < NUM_DIO; ++i) {
     d68:	1f 5f       	subi	r17, 0xFF	; 255
     d6a:	21 96       	adiw	r28, 0x01	; 1
     d6c:	13 30       	cpi	r17, 0x03	; 3
     d6e:	41 f7       	brne	.-48     	; 0xd40 <hal_enableIRQs+0x30>
        //
        // As an additional bonus, this prevents the can of worms that
        // we would otherwise get for running SPI transfers inside ISRs
        hal_io_check();
    }
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	08 95       	ret

00000d82 <hal_sleep>:

void hal_sleep () {
     d82:	08 95       	ret

00000d84 <_GLOBAL__sub_I_hal_pin_rxtx>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
     d84:	ea ef       	ldi	r30, 0xFA	; 250
     d86:	f1 e0       	ldi	r31, 0x01	; 1
     d88:	80 e5       	ldi	r24, 0x50	; 80
     d8a:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	81 83       	std	Z+1, r24	; 0x01
     d90:	08 95       	ret

00000d92 <hal_failed>:
    // printf support
    hal_printf_init();
#endif
}

void hal_failed (const char *file, u2_t line) {
     d92:	8c 01       	movw	r16, r24
     d94:	eb 01       	movw	r28, r22
#if defined(LMIC_FAILURE_TO)
    LMIC_FAILURE_TO.println("FAILURE ");
     d96:	66 e1       	ldi	r22, 0x16	; 22
     d98:	71 e0       	ldi	r23, 0x01	; 1
     d9a:	87 e1       	ldi	r24, 0x17	; 23
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 78 24 	call	0x48f0	; 0x48f0 <_ZN5Print7printlnEPKc>
    LMIC_FAILURE_TO.print(file);
     da2:	b8 01       	movw	r22, r16
     da4:	87 e1       	ldi	r24, 0x17	; 23
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN5Print5printEPKc>
    LMIC_FAILURE_TO.print(':');
     dac:	6a e3       	ldi	r22, 0x3A	; 58
     dae:	87 e1       	ldi	r24, 0x17	; 23
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <_ZN5Print5printEc>
    LMIC_FAILURE_TO.println(line);
     db6:	4a e0       	ldi	r20, 0x0A	; 10
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	be 01       	movw	r22, r28
     dbc:	87 e1       	ldi	r24, 0x17	; 23
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 ff 24 	call	0x49fe	; 0x49fe <_ZN5Print7printlnEji>
    LMIC_FAILURE_TO.flush();
     dc4:	87 e1       	ldi	r24, 0x17	; 23
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <_ZN14HardwareSerial5flushEv>
#endif
    hal_disableIRQs();
     dcc:	0e 94 81 06 	call	0xd02	; 0xd02 <hal_disableIRQs>
     dd0:	ff cf       	rjmp	.-2      	; 0xdd0 <hal_failed+0x3e>

00000dd2 <hal_init>:
    setbuf(stdout, nullptr);
}
#endif // !defined(__AVR__)
#endif // defined(LMIC_PRINTF_TO)

void hal_init () {
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
    // NSS and DIO0 are required, DIO1 is required for LoRa, DIO2 for FSK
    ASSERT(lmic_pins.nss != LMIC_UNUSED_PIN);
     dd8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lmic_pins>
     ddc:	8f 3f       	cpi	r24, 0xFF	; 255
     dde:	19 f4       	brne	.+6      	; 0xde6 <hal_init+0x14>
     de0:	68 e1       	ldi	r22, 0x18	; 24
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	06 c0       	rjmp	.+12     	; 0xdf2 <hal_init+0x20>
    ASSERT(lmic_pins.dio[0] != LMIC_UNUSED_PIN);
     de6:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <lmic_pins+0x3>
     dea:	1f 3f       	cpi	r17, 0xFF	; 255
     dec:	31 f4       	brne	.+12     	; 0xdfa <hal_init+0x28>
     dee:	69 e1       	ldi	r22, 0x19	; 25
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	8f e1       	ldi	r24, 0x1F	; 31
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    ASSERT(lmic_pins.dio[1] != LMIC_UNUSED_PIN || lmic_pins.dio[2] != LMIC_UNUSED_PIN);
     dfa:	d0 91 14 01 	lds	r29, 0x0114	; 0x800114 <lmic_pins+0x4>
     dfe:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <lmic_pins+0x5>
     e02:	df 3f       	cpi	r29, 0xFF	; 255
     e04:	29 f4       	brne	.+10     	; 0xe10 <hal_init+0x3e>
     e06:	cf 3f       	cpi	r28, 0xFF	; 255
     e08:	19 f4       	brne	.+6      	; 0xe10 <hal_init+0x3e>
     e0a:	6a e1       	ldi	r22, 0x1A	; 26
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	f1 cf       	rjmp	.-30     	; 0xdf2 <hal_init+0x20>

    pinMode(lmic_pins.nss, OUTPUT);
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
    if (lmic_pins.rxtx != LMIC_UNUSED_PIN)
     e16:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <lmic_pins+0x1>
     e1a:	8f 3f       	cpi	r24, 0xFF	; 255
     e1c:	19 f0       	breq	.+6      	; 0xe24 <hal_init+0x52>
        pinMode(lmic_pins.rxtx, OUTPUT);
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
    if (lmic_pins.rst != LMIC_UNUSED_PIN)
     e24:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lmic_pins+0x2>
     e28:	8f 3f       	cpi	r24, 0xFF	; 255
     e2a:	19 f0       	breq	.+6      	; 0xe32 <hal_init+0x60>
        pinMode(lmic_pins.rst, OUTPUT);
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>

    pinMode(lmic_pins.dio[0], INPUT);
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	81 2f       	mov	r24, r17
     e36:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
    if (lmic_pins.dio[1] != LMIC_UNUSED_PIN)
     e3a:	df 3f       	cpi	r29, 0xFF	; 255
     e3c:	21 f0       	breq	.+8      	; 0xe46 <hal_init+0x74>
        pinMode(lmic_pins.dio[1], INPUT);
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	8d 2f       	mov	r24, r29
     e42:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
    if (lmic_pins.dio[2] != LMIC_UNUSED_PIN)
     e46:	cf 3f       	cpi	r28, 0xFF	; 255
     e48:	21 f0       	breq	.+8      	; 0xe52 <hal_init+0x80>
        pinMode(lmic_pins.dio[2], INPUT);
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	8c 2f       	mov	r24, r28
     e4e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
    hal_time_init();
#if defined(LMIC_PRINTF_TO)
    // printf support
    hal_printf_init();
#endif
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
// SPI

static const SPISettings settings(10E6, MSBFIRST, SPI_MODE0);

static void hal_spi_init () {
    SPI.begin();
     e58:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <_ZN8SPIClass5beginEv>

00000e5c <setBcnRxParams>:


// Check if other networks are around.
void LMIC_tryRejoin (void) {
    LMIC.opmode |= OP_REJOIN;
    engineUpdate();
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	cd ed       	ldi	r28, 0xDD	; 221
     e62:	d2 e0       	ldi	r29, 0x02	; 2
     e64:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
     e68:	e0 91 60 04 	lds	r30, 0x0460	; 0x800460 <LMIC+0x183>
     e6c:	84 e0       	ldi	r24, 0x04	; 4
     e6e:	e8 9f       	mul	r30, r24
     e70:	f0 01       	movw	r30, r0
     e72:	11 24       	eor	r1, r1
     e74:	e3 52       	subi	r30, 0x23	; 35
     e76:	fd 4f       	sbci	r31, 0xFD	; 253
     e78:	83 ad       	ldd	r24, Z+59	; 0x3b
     e7a:	94 ad       	ldd	r25, Z+60	; 0x3c
     e7c:	a5 ad       	ldd	r26, Z+61	; 0x3d
     e7e:	b6 ad       	ldd	r27, Z+62	; 0x3e
     e80:	8c 7f       	andi	r24, 0xFC	; 252
     e82:	88 87       	std	Y+8, r24	; 0x08
     e84:	99 87       	std	Y+9, r25	; 0x09
     e86:	aa 87       	std	Y+10, r26	; 0x0a
     e88:	bb 87       	std	Y+11, r27	; 0x0b
     e8a:	83 e8       	ldi	r24, 0x83	; 131
     e8c:	91 e1       	ldi	r25, 0x11	; 17
     e8e:	9f 87       	std	Y+15, r25	; 0x0f
     e90:	8e 87       	std	Y+14, r24	; 0x0e
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <stateJustJoined>:
     e98:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <LMIC+0x117>
     e9c:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <LMIC+0x118>
     ea0:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <LMIC+0x119>
     ea4:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <LMIC+0x11a>
     ea8:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <LMIC+0x113>
     eac:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <LMIC+0x114>
     eb0:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <LMIC+0x115>
     eb4:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <LMIC+0x116>
     eb8:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <LMIC+0xad>
     ebc:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <LMIC+0x121>
     ec0:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <LMIC+0x120>
     ec4:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <LMIC+0x11d>
     ec8:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x11b>
     ecc:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <LMIC+0x125>
     ed0:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <LMIC+0x12b>
     ed4:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <LMIC+0x123>
     ed8:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <LMIC+0x124>
     edc:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <LMIC+0x12e>
     ee0:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <LMIC+0xa9>
     ee4:	84 ef       	ldi	r24, 0xF4	; 244
     ee6:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x11c>
     eea:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <LMIC+0x126>
     eee:	88 e0       	ldi	r24, 0x08	; 8
     ef0:	96 ee       	ldi	r25, 0xE6	; 230
     ef2:	a3 ed       	ldi	r26, 0xD3	; 211
     ef4:	b3 e3       	ldi	r27, 0x33	; 51
     ef6:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <LMIC+0x127>
     efa:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <LMIC+0x128>
     efe:	a0 93 06 04 	sts	0x0406, r26	; 0x800406 <LMIC+0x129>
     f02:	b0 93 07 04 	sts	0x0407, r27	; 0x800407 <LMIC+0x12a>
     f06:	25 e0       	ldi	r18, 0x05	; 5
     f08:	20 93 60 04 	sts	0x0460, r18	; 0x800460 <LMIC+0x183>
     f0c:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <LMIC+0x13b>
     f10:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <LMIC+0x13c>
     f14:	a0 93 1a 04 	sts	0x041A, r26	; 0x80041a <LMIC+0x13d>
     f18:	b0 93 1b 04 	sts	0x041B, r27	; 0x80041b <LMIC+0x13e>
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <LMIC+0x12f>
     f22:	08 95       	ret

00000f24 <calcRxWindow>:
     f24:	4f 92       	push	r4
     f26:	5f 92       	push	r5
     f28:	6f 92       	push	r6
     f2a:	7f 92       	push	r7
     f2c:	8f 92       	push	r8
     f2e:	9f 92       	push	r9
     f30:	af 92       	push	r10
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	c6 2f       	mov	r28, r22
     f42:	a0 91 8b 03 	lds	r26, 0x038B	; 0x80038b <LMIC+0xae>
     f46:	b0 91 8c 03 	lds	r27, 0x038C	; 0x80038c <LMIC+0xaf>
     f4a:	c0 90 8d 03 	lds	r12, 0x038D	; 0x80038d <LMIC+0xb0>
     f4e:	d0 90 8e 03 	lds	r13, 0x038E	; 0x80038e <LMIC+0xb1>
     f52:	81 11       	cpse	r24, r1
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <calcRxWindow+0x44>
     f56:	4d 01       	movw	r8, r26
     f58:	bb 0f       	add	r27, r27
     f5a:	aa 08       	sbc	r10, r10
     f5c:	bb 08       	sbc	r11, r11
     f5e:	0d 2c       	mov	r0, r13
     f60:	00 0c       	add	r0, r0
     f62:	ee 08       	sbc	r14, r14
     f64:	ff 08       	sbc	r15, r15
     f66:	1a c0       	rjmp	.+52     	; 0xf9c <calcRxWindow+0x78>
     f68:	48 2f       	mov	r20, r24
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	9a 01       	movw	r18, r20
     f6e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__usmulhisi3>
     f72:	4b 01       	movw	r8, r22
     f74:	5c 01       	movw	r10, r24
     f76:	87 e0       	ldi	r24, 0x07	; 7
     f78:	b5 94       	asr	r11
     f7a:	a7 94       	ror	r10
     f7c:	97 94       	ror	r9
     f7e:	87 94       	ror	r8
     f80:	8a 95       	dec	r24
     f82:	d1 f7       	brne	.-12     	; 0xf78 <calcRxWindow+0x54>
     f84:	d6 01       	movw	r26, r12
     f86:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__usmulhisi3>
     f8a:	6b 01       	movw	r12, r22
     f8c:	7c 01       	movw	r14, r24
     f8e:	97 e0       	ldi	r25, 0x07	; 7
     f90:	f5 94       	asr	r15
     f92:	e7 94       	ror	r14
     f94:	d7 94       	ror	r13
     f96:	c7 94       	ror	r12
     f98:	9a 95       	dec	r25
     f9a:	d1 f7       	brne	.-12     	; 0xf90 <calcRxWindow+0x6c>
     f9c:	a0 91 8f 03 	lds	r26, 0x038F	; 0x80038f <LMIC+0xb2>
     fa0:	b0 91 90 03 	lds	r27, 0x0390	; 0x800390 <LMIC+0xb3>
     fa4:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <LMIC+0x12c>
     fa8:	84 e0       	ldi	r24, 0x04	; 4
     faa:	c8 9f       	mul	r28, r24
     fac:	e0 01       	movw	r28, r0
     fae:	11 24       	eor	r1, r1
     fb0:	c9 5c       	subi	r28, 0xC9	; 201
     fb2:	dc 4f       	sbci	r29, 0xFC	; 252
     fb4:	fe 01       	movw	r30, r28
     fb6:	45 90       	lpm	r4, Z+
     fb8:	55 90       	lpm	r5, Z+
     fba:	65 90       	lpm	r6, Z+
     fbc:	74 90       	lpm	r7, Z
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__usmulhisi3>
     fc4:	6c 0d       	add	r22, r12
     fc6:	7d 1d       	adc	r23, r13
     fc8:	8e 1d       	adc	r24, r14
     fca:	9f 1d       	adc	r25, r15
     fcc:	a3 01       	movw	r20, r6
     fce:	92 01       	movw	r18, r4
     fd0:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__divmodsi4>
     fd4:	2b 5f       	subi	r18, 0xFB	; 251
     fd6:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <LMIC+0x10>
     fda:	fe 01       	movw	r30, r28
     fdc:	25 91       	lpm	r18, Z+
     fde:	35 91       	lpm	r19, Z+
     fe0:	45 91       	lpm	r20, Z+
     fe2:	54 91       	lpm	r21, Z
     fe4:	ad ef       	ldi	r26, 0xFD	; 253
     fe6:	bf ef       	ldi	r27, 0xFF	; 255
     fe8:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <__mulohisi3>
     fec:	68 0d       	add	r22, r8
     fee:	79 1d       	adc	r23, r9
     ff0:	8a 1d       	adc	r24, r10
     ff2:	9b 1d       	adc	r25, r11
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	9f 90       	pop	r9
    1006:	8f 90       	pop	r8
    1008:	7f 90       	pop	r7
    100a:	6f 90       	pop	r6
    100c:	5f 90       	pop	r5
    100e:	4f 90       	pop	r4
    1010:	08 95       	ret

00001012 <rndDelay>:
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	d8 2f       	mov	r29, r24
    1020:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    1024:	c8 2f       	mov	r28, r24
    1026:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    102a:	2c 2f       	mov	r18, r28
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	32 2f       	mov	r19, r18
    1030:	22 27       	eor	r18, r18
    1032:	a9 01       	movw	r20, r18
    1034:	48 2b       	or	r20, r24
    1036:	ca 01       	movw	r24, r20
    1038:	6c 01       	movw	r12, r24
    103a:	85 32       	cpi	r24, 0x25	; 37
    103c:	54 ef       	ldi	r21, 0xF4	; 244
    103e:	95 07       	cpc	r25, r21
    1040:	20 f0       	brcs	.+8      	; 0x104a <rndDelay+0x38>
    1042:	24 e2       	ldi	r18, 0x24	; 36
    1044:	c2 1a       	sub	r12, r18
    1046:	24 ef       	ldi	r18, 0xF4	; 244
    1048:	d2 0a       	sbc	r13, r18
    104a:	e1 2c       	mov	r14, r1
    104c:	f1 2c       	mov	r15, r1
    104e:	dd 23       	and	r29, r29
    1050:	71 f0       	breq	.+28     	; 0x106e <rndDelay+0x5c>
    1052:	99 27       	eor	r25, r25
    1054:	6d 2f       	mov	r22, r29
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__divmodhi4>
    105c:	24 e2       	ldi	r18, 0x24	; 36
    105e:	34 ef       	ldi	r19, 0xF4	; 244
    1060:	dc 01       	movw	r26, r24
    1062:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__usmulhisi3>
    1066:	c6 0e       	add	r12, r22
    1068:	d7 1e       	adc	r13, r23
    106a:	e8 1e       	adc	r14, r24
    106c:	f9 1e       	adc	r15, r25
    106e:	c7 01       	movw	r24, r14
    1070:	b6 01       	movw	r22, r12
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	08 95       	ret

00001080 <txDelay>:
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	84 2f       	mov	r24, r20
    108e:	0e 94 09 08 	call	0x1012	; 0x1012 <rndDelay>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	8c 0d       	add	r24, r12
    1098:	9d 1d       	adc	r25, r13
    109a:	ae 1d       	adc	r26, r14
    109c:	bf 1d       	adc	r27, r15
    109e:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <LMIC+0x9e>
    10a2:	22 23       	and	r18, r18
    10a4:	99 f0       	breq	.+38     	; 0x10cc <txDelay+0x4c>
    10a6:	c0 90 7c 03 	lds	r12, 0x037C	; 0x80037c <LMIC+0x9f>
    10aa:	d0 90 7d 03 	lds	r13, 0x037D	; 0x80037d <LMIC+0xa0>
    10ae:	e0 90 7e 03 	lds	r14, 0x037E	; 0x80037e <LMIC+0xa1>
    10b2:	f0 90 7f 03 	lds	r15, 0x037F	; 0x80037f <LMIC+0xa2>
    10b6:	9c 01       	movw	r18, r24
    10b8:	ad 01       	movw	r20, r26
    10ba:	2c 19       	sub	r18, r12
    10bc:	3d 09       	sbc	r19, r13
    10be:	4e 09       	sbc	r20, r14
    10c0:	5f 09       	sbc	r21, r15
    10c2:	12 16       	cp	r1, r18
    10c4:	13 06       	cpc	r1, r19
    10c6:	14 06       	cpc	r1, r20
    10c8:	15 06       	cpc	r1, r21
    10ca:	8c f4       	brge	.+34     	; 0x10ee <txDelay+0x6e>
    10cc:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <LMIC+0x9f>
    10d0:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <LMIC+0xa0>
    10d4:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <LMIC+0xa1>
    10d8:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <LMIC+0xa2>
    10dc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    10e0:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    10e4:	91 60       	ori	r25, 0x01	; 1
    10e6:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    10ea:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	08 95       	ret

000010f8 <schedRx12>:
    10f8:	4f 92       	push	r4
    10fa:	5f 92       	push	r5
    10fc:	6f 92       	push	r6
    10fe:	7f 92       	push	r7
    1100:	8f 92       	push	r8
    1102:	9f 92       	push	r9
    1104:	af 92       	push	r10
    1106:	bf 92       	push	r11
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	6b 01       	movw	r12, r22
    111a:	7c 01       	movw	r14, r24
    111c:	ea 01       	movw	r28, r20
    111e:	04 e0       	ldi	r16, 0x04	; 4
    1120:	20 9f       	mul	r18, r16
    1122:	f0 01       	movw	r30, r0
    1124:	11 24       	eor	r1, r1
    1126:	e9 5c       	subi	r30, 0xC9	; 201
    1128:	fc 4f       	sbci	r31, 0xFC	; 252
    112a:	85 90       	lpm	r8, Z+
    112c:	95 90       	lpm	r9, Z+
    112e:	a5 90       	lpm	r10, Z+
    1130:	b4 90       	lpm	r11, Z
    1132:	85 e0       	ldi	r24, 0x05	; 5
    1134:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <LMIC+0x10>
    1138:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <LMIC+0xb4>
    113c:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <LMIC+0xb5>
    1140:	61 15       	cp	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	09 f4       	brne	.+2      	; 0x1148 <schedRx12+0x50>
    1146:	47 c0       	rjmp	.+142    	; 0x11d6 <schedRx12+0xde>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a7 01       	movw	r20, r14
    114e:	96 01       	movw	r18, r12
    1150:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <__mulsidi3>
    1154:	72 2e       	mov	r7, r18
    1156:	03 2f       	mov	r16, r19
    1158:	14 2f       	mov	r17, r20
    115a:	b5 2f       	mov	r27, r21
    115c:	f6 2f       	mov	r31, r22
    115e:	e7 2f       	mov	r30, r23
    1160:	58 2e       	mov	r5, r24
    1162:	69 2e       	mov	r6, r25
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__cmpdi2_s8>
    116a:	84 f4       	brge	.+32     	; 0x118c <schedRx12+0x94>
    116c:	21 50       	subi	r18, 0x01	; 1
    116e:	31 09       	sbc	r19, r1
    1170:	4f 4f       	sbci	r20, 0xFF	; 255
    1172:	5f 4f       	sbci	r21, 0xFF	; 255
    1174:	6f 4f       	sbci	r22, 0xFF	; 255
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	72 2e       	mov	r7, r18
    117e:	03 2f       	mov	r16, r19
    1180:	14 2f       	mov	r17, r20
    1182:	b5 2f       	mov	r27, r21
    1184:	f6 2f       	mov	r31, r22
    1186:	e7 2f       	mov	r30, r23
    1188:	58 2e       	mov	r5, r24
    118a:	69 2e       	mov	r6, r25
    118c:	27 2d       	mov	r18, r7
    118e:	30 2f       	mov	r19, r16
    1190:	41 2f       	mov	r20, r17
    1192:	5b 2f       	mov	r21, r27
    1194:	6f 2f       	mov	r22, r31
    1196:	7e 2f       	mov	r23, r30
    1198:	85 2d       	mov	r24, r5
    119a:	96 2d       	mov	r25, r6
    119c:	00 e1       	ldi	r16, 0x10	; 16
    119e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__ashrdi3>
    11a2:	29 01       	movw	r4, r18
    11a4:	3a 01       	movw	r6, r20
    11a6:	aa ef       	ldi	r26, 0xFA	; 250
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	a5 01       	movw	r20, r10
    11ac:	94 01       	movw	r18, r8
    11ae:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__muluhisi3>
    11b2:	64 15       	cp	r22, r4
    11b4:	75 05       	cpc	r23, r5
    11b6:	86 05       	cpc	r24, r6
    11b8:	97 05       	cpc	r25, r7
    11ba:	24 f4       	brge	.+8      	; 0x11c4 <schedRx12+0xcc>
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <LMIC+0x10>
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <schedRx12+0xde>
    11c4:	c3 01       	movw	r24, r6
    11c6:	b2 01       	movw	r22, r4
    11c8:	a5 01       	movw	r20, r10
    11ca:	94 01       	movw	r18, r8
    11cc:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__divmodsi4>
    11d0:	2b 5f       	subi	r18, 0xFB	; 251
    11d2:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <LMIC+0x10>
    11d6:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <LMIC>
    11da:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <LMIC+0x1>
    11de:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <LMIC+0x2>
    11e2:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <LMIC+0x3>
    11e6:	c4 0e       	add	r12, r20
    11e8:	d5 1e       	adc	r13, r21
    11ea:	e6 1e       	adc	r14, r22
    11ec:	f7 1e       	adc	r15, r23
    11ee:	d5 01       	movw	r26, r10
    11f0:	c4 01       	movw	r24, r8
    11f2:	23 e0       	ldi	r18, 0x03	; 3
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	aa 1f       	adc	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	2a 95       	dec	r18
    11fe:	d1 f7       	brne	.-12     	; 0x11f4 <schedRx12+0xfc>
    1200:	c8 0e       	add	r12, r24
    1202:	d9 1e       	adc	r13, r25
    1204:	ea 1e       	adc	r14, r26
    1206:	fb 1e       	adc	r15, r27
    1208:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <LMIC+0x10>
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	a5 01       	movw	r20, r10
    1210:	94 01       	movw	r18, r8
    1212:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__muluhisi3>
    1216:	97 01       	movw	r18, r14
    1218:	86 01       	movw	r16, r12
    121a:	06 1b       	sub	r16, r22
    121c:	17 0b       	sbc	r17, r23
    121e:	28 0b       	sbc	r18, r24
    1220:	39 0b       	sbc	r19, r25
    1222:	b9 01       	movw	r22, r18
    1224:	a8 01       	movw	r20, r16
    1226:	00 93 e1 02 	sts	0x02E1, r16	; 0x8002e1 <LMIC+0x4>
    122a:	10 93 e2 02 	sts	0x02E2, r17	; 0x8002e2 <LMIC+0x5>
    122e:	20 93 e3 02 	sts	0x02E3, r18	; 0x8002e3 <LMIC+0x6>
    1232:	30 93 e4 02 	sts	0x02E4, r19	; 0x8002e4 <LMIC+0x7>
    1236:	4d 57       	subi	r20, 0x7D	; 125
    1238:	51 09       	sbc	r21, r1
    123a:	61 09       	sbc	r22, r1
    123c:	71 09       	sbc	r23, r1
    123e:	9e 01       	movw	r18, r28
    1240:	80 ef       	ldi	r24, 0xF0	; 240
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	9f 90       	pop	r9
    125a:	8f 90       	pop	r8
    125c:	7f 90       	pop	r7
    125e:	6f 90       	pop	r6
    1260:	5f 90       	pop	r5
    1262:	4f 90       	pop	r4
    1264:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <os_setTimedCallback>

00001268 <startRxBcn>:
    1268:	88 e2       	ldi	r24, 0x28	; 40
    126a:	98 e1       	ldi	r25, 0x18	; 24
    126c:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <LMIC+0x1a>
    1270:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <LMIC+0x19>
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <os_radio>

0000127a <startRxPing>:
    127a:	8d e1       	ldi	r24, 0x1D	; 29
    127c:	9b e1       	ldi	r25, 0x1B	; 27
    127e:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <LMIC+0x1a>
    1282:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <LMIC+0x19>
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <os_radio>

0000128c <setupRx1>:
    128c:	ed ed       	ldi	r30, 0xDD	; 221
    128e:	f2 e0       	ldi	r31, 0x02	; 2
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <LMIC+0x140>
    1296:	26 85       	ldd	r18, Z+14	; 0x0e
    1298:	37 85       	ldd	r19, Z+15	; 0x0f
    129a:	20 68       	ori	r18, 0x80	; 128
    129c:	37 87       	std	Z+15, r19	; 0x0f
    129e:	26 87       	std	Z+14, r18	; 0x0e
    12a0:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    12a4:	92 8f       	std	Z+26, r25	; 0x1a
    12a6:	81 8f       	std	Z+25, r24	; 0x19
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <os_radio>

000012ae <setupRx1DnData>:
    12ae:	8c ed       	ldi	r24, 0xDC	; 220
    12b0:	9b e1       	ldi	r25, 0x1B	; 27
    12b2:	0c 94 46 09 	jmp	0x128c	; 0x128c <setupRx1>

000012b6 <setupRx1Jacc>:
    12b6:	8a ef       	ldi	r24, 0xFA	; 250
    12b8:	9a e1       	ldi	r25, 0x1A	; 26
    12ba:	0c 94 46 09 	jmp	0x128c	; 0x128c <setupRx1>

000012be <setupRx2>:
    12be:	ad ed       	ldi	r26, 0xDD	; 221
    12c0:	b2 e0       	ldi	r27, 0x02	; 2
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <LMIC+0x140>
    12c8:	e0 91 03 04 	lds	r30, 0x0403	; 0x800403 <LMIC+0x126>
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	e9 57       	subi	r30, 0x79	; 121
    12d0:	fc 4f       	sbci	r31, 0xFC	; 252
    12d2:	e4 91       	lpm	r30, Z
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	ef 77       	andi	r30, 0x7F	; 127
    12d8:	e0 68       	ori	r30, 0x80	; 128
    12da:	1f 96       	adiw	r26, 0x0f	; 15
    12dc:	fc 93       	st	X, r31
    12de:	ee 93       	st	-X, r30
    12e0:	1e 97       	sbiw	r26, 0x0e	; 14
    12e2:	40 91 04 04 	lds	r20, 0x0404	; 0x800404 <LMIC+0x127>
    12e6:	50 91 05 04 	lds	r21, 0x0405	; 0x800405 <LMIC+0x128>
    12ea:	60 91 06 04 	lds	r22, 0x0406	; 0x800406 <LMIC+0x129>
    12ee:	70 91 07 04 	lds	r23, 0x0407	; 0x800407 <LMIC+0x12a>
    12f2:	18 96       	adiw	r26, 0x08	; 8
    12f4:	4d 93       	st	X+, r20
    12f6:	5d 93       	st	X+, r21
    12f8:	6d 93       	st	X+, r22
    12fa:	7c 93       	st	X, r23
    12fc:	1b 97       	sbiw	r26, 0x0b	; 11
    12fe:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    1302:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <os_radio>

00001306 <setupRx2DnData>:
    1306:	83 ef       	ldi	r24, 0xF3	; 243
    1308:	9b e1       	ldi	r25, 0x1B	; 27
    130a:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <LMIC+0x1a>
    130e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <LMIC+0x19>
    1312:	0c 94 5f 09 	jmp	0x12be	; 0x12be <setupRx2>

00001316 <setupRx2Jacc>:
    1316:	8d e0       	ldi	r24, 0x0D	; 13
    1318:	9b e1       	ldi	r25, 0x1B	; 27
    131a:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <LMIC+0x1a>
    131e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <LMIC+0x19>
    1322:	0c 94 5f 09 	jmp	0x12be	; 0x12be <setupRx2>

00001326 <startScan>:
    1326:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <LMIC+0x10f>
    132a:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <LMIC+0x110>
    132e:	a0 91 ee 03 	lds	r26, 0x03EE	; 0x8003ee <LMIC+0x111>
    1332:	b0 91 ef 03 	lds	r27, 0x03EF	; 0x8003ef <LMIC+0x112>
    1336:	89 2b       	or	r24, r25
    1338:	8a 2b       	or	r24, r26
    133a:	8b 2b       	or	r24, r27
    133c:	21 f0       	breq	.+8      	; 0x1346 <startScan+0x20>
    133e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    1342:	82 ff       	sbrs	r24, 2
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <startScan+0x2c>
    1346:	63 ef       	ldi	r22, 0xF3	; 243
    1348:	76 e0       	ldi	r23, 0x06	; 6
    134a:	84 e5       	ldi	r24, 0x54	; 84
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    1352:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    1356:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    135a:	86 fd       	sbrc	r24, 6
    135c:	2f c0       	rjmp	.+94     	; 0x13bc <startScan+0x96>
    135e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <LMIC+0x18f>
    1362:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x11b>
    1366:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <LMIC+0x13f>
    136a:	8e 77       	andi	r24, 0x7E	; 126
    136c:	81 60       	ori	r24, 0x01	; 1
    136e:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    1372:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    1376:	0e 94 2e 07 	call	0xe5c	; 0xe5c <setBcnRxParams>
    137a:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    137e:	ab 01       	movw	r20, r22
    1380:	bc 01       	movw	r22, r24
    1382:	4c 5d       	subi	r20, 0xDC	; 220
    1384:	59 4f       	sbci	r21, 0xF9	; 249
    1386:	64 48       	sbci	r22, 0x84	; 132
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	40 93 66 04 	sts	0x0466, r20	; 0x800466 <LMIC+0x189>
    138e:	50 93 67 04 	sts	0x0467, r21	; 0x800467 <LMIC+0x18a>
    1392:	60 93 68 04 	sts	0x0468, r22	; 0x800468 <LMIC+0x18b>
    1396:	70 93 69 04 	sts	0x0469, r23	; 0x800469 <LMIC+0x18c>
    139a:	40 93 e1 02 	sts	0x02E1, r20	; 0x8002e1 <LMIC+0x4>
    139e:	50 93 e2 02 	sts	0x02E2, r21	; 0x8002e2 <LMIC+0x5>
    13a2:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <LMIC+0x6>
    13a6:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <LMIC+0x7>
    13aa:	27 ec       	ldi	r18, 0xC7	; 199
    13ac:	37 e1       	ldi	r19, 0x17	; 23
    13ae:	80 ef       	ldi	r24, 0xF0	; 240
    13b0:	92 e0       	ldi	r25, 0x02	; 2
    13b2:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <os_setTimedCallback>
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <os_radio>
    13bc:	08 95       	ret

000013be <initDefaultChannels>:
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	90 e4       	ldi	r25, 0x40	; 64
    13c4:	e8 e1       	ldi	r30, 0x18	; 24
    13c6:	f3 e0       	ldi	r31, 0x03	; 3
    13c8:	df 01       	movw	r26, r30
    13ca:	1d 92       	st	X+, r1
    13cc:	9a 95       	dec	r25
    13ce:	e9 f7       	brne	.-6      	; 0x13ca <initDefaultChannels+0xc>
    13d0:	90 e2       	ldi	r25, 0x20	; 32
    13d2:	e8 e5       	ldi	r30, 0x58	; 88
    13d4:	f3 e0       	ldi	r31, 0x03	; 3
    13d6:	df 01       	movw	r26, r30
    13d8:	29 2f       	mov	r18, r25
    13da:	1d 92       	st	X+, r1
    13dc:	2a 95       	dec	r18
    13de:	e9 f7       	brne	.-6      	; 0x13da <initDefaultChannels+0x1c>
    13e0:	e8 ef       	ldi	r30, 0xF8	; 248
    13e2:	f2 e0       	ldi	r31, 0x02	; 2
    13e4:	df 01       	movw	r26, r30
    13e6:	1d 92       	st	X+, r1
    13e8:	9a 95       	dec	r25
    13ea:	e9 f7       	brne	.-6      	; 0x13e6 <initDefaultChannels+0x28>
    13ec:	27 e0       	ldi	r18, 0x07	; 7
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <LMIC+0x9c>
    13f4:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <LMIC+0x9b>
    13f8:	81 11       	cpse	r24, r1
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <initDefaultChannels+0x42>
    13fc:	83 e0       	ldi	r24, 0x03	; 3
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <initDefaultChannels+0x44>
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	c8 e1       	ldi	r28, 0x18	; 24
    1404:	d3 e0       	ldi	r29, 0x03	; 3
    1406:	a8 e5       	ldi	r26, 0x58	; 88
    1408:	b3 e0       	ldi	r27, 0x03	; 3
    140a:	93 e0       	ldi	r25, 0x03	; 3
    140c:	98 0f       	add	r25, r24
    140e:	2f e3       	ldi	r18, 0x3F	; 63
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	44 e0       	ldi	r20, 0x04	; 4
    1414:	84 9f       	mul	r24, r20
    1416:	f0 01       	movw	r30, r0
    1418:	11 24       	eor	r1, r1
    141a:	e1 5e       	subi	r30, 0xE1	; 225
    141c:	fc 4f       	sbci	r31, 0xFC	; 252
    141e:	45 91       	lpm	r20, Z+
    1420:	55 91       	lpm	r21, Z+
    1422:	65 91       	lpm	r22, Z+
    1424:	74 91       	lpm	r23, Z
    1426:	49 93       	st	Y+, r20
    1428:	59 93       	st	Y+, r21
    142a:	69 93       	st	Y+, r22
    142c:	79 93       	st	Y+, r23
    142e:	2d 93       	st	X+, r18
    1430:	3d 93       	st	X+, r19
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	89 13       	cpse	r24, r25
    1436:	ed cf       	rjmp	.-38     	; 0x1412 <initDefaultChannels+0x54>
    1438:	88 ee       	ldi	r24, 0xE8	; 232
    143a:	93 e0       	ldi	r25, 0x03	; 3
    143c:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <LMIC+0x1c>
    1440:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <LMIC+0x1b>
    1444:	ce e0       	ldi	r28, 0x0E	; 14
    1446:	c0 93 fa 02 	sts	0x02FA, r28	; 0x8002fa <LMIC+0x1d>
    144a:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    144e:	8f 70       	andi	r24, 0x0F	; 15
    1450:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <LMIC+0x1e>
    1454:	84 e6       	ldi	r24, 0x64	; 100
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <LMIC+0x24>
    145c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <LMIC+0x23>
    1460:	c0 93 02 03 	sts	0x0302, r28	; 0x800302 <LMIC+0x25>
    1464:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    1468:	8f 70       	andi	r24, 0x0F	; 15
    146a:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <LMIC+0x26>
    146e:	8a e0       	ldi	r24, 0x0A	; 10
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <LMIC+0x2c>
    1476:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <LMIC+0x2b>
    147a:	8b e1       	ldi	r24, 0x1B	; 27
    147c:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <LMIC+0x2d>
    1480:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    1484:	8f 70       	andi	r24, 0x0F	; 15
    1486:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <LMIC+0x2e>
    148a:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    148e:	60 93 0c 03 	sts	0x030C, r22	; 0x80030c <LMIC+0x2f>
    1492:	70 93 0d 03 	sts	0x030D, r23	; 0x80030d <LMIC+0x30>
    1496:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <LMIC+0x31>
    149a:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <LMIC+0x32>
    149e:	60 93 04 03 	sts	0x0304, r22	; 0x800304 <LMIC+0x27>
    14a2:	70 93 05 03 	sts	0x0305, r23	; 0x800305 <LMIC+0x28>
    14a6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <LMIC+0x29>
    14aa:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <LMIC+0x2a>
    14ae:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <LMIC+0x1f>
    14b2:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <LMIC+0x20>
    14b6:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <LMIC+0x21>
    14ba:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <LMIC+0x22>
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <setDrTxpow.isra.1>:
    14c4:	60 38       	cpi	r22, 0x80	; 128
    14c6:	11 f0       	breq	.+4      	; 0x14cc <setDrTxpow.isra.1+0x8>
    14c8:	60 93 87 03 	sts	0x0387, r22	; 0x800387 <LMIC+0xaa>
    14cc:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <LMIC+0xab>
    14d0:	98 17       	cp	r25, r24
    14d2:	59 f0       	breq	.+22     	; 0x14ea <setDrTxpow.isra.1+0x26>
    14d4:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <LMIC+0xab>
    14d8:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    14dc:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    14e0:	98 60       	ori	r25, 0x08	; 8
    14e2:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    14e6:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    14ea:	08 95       	ret

000014ec <os_rlsbf4>:
    14ec:	fc 01       	movw	r30, r24
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	08 95       	ret

000014f8 <convFreq>:
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    1502:	27 2f       	mov	r18, r23
    1504:	38 2f       	mov	r19, r24
    1506:	49 2f       	mov	r20, r25
    1508:	55 27       	eor	r21, r21
    150a:	a4 e6       	ldi	r26, 0x64	; 100
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__muluhisi3>
    1512:	8b 01       	movw	r16, r22
    1514:	9c 01       	movw	r18, r24
    1516:	00 5c       	subi	r16, 0xC0	; 192
    1518:	15 45       	sbci	r17, 0x55	; 85
    151a:	20 47       	sbci	r18, 0x70	; 112
    151c:	33 43       	sbci	r19, 0x33	; 51
    151e:	01 3c       	cpi	r16, 0xC1	; 193
    1520:	1f 4c       	sbci	r17, 0xCF	; 207
    1522:	2a 46       	sbci	r18, 0x6A	; 106
    1524:	31 05       	cpc	r19, r1
    1526:	18 f0       	brcs	.+6      	; 0x152e <convFreq+0x36>
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	cb 01       	movw	r24, r22
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	08 95       	ret

00001534 <os_rmsbf4>:
    1534:	fc 01       	movw	r30, r24
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__bswapsi2>
    1542:	08 95       	ret

00001544 <os_wlsbf4>:
    1544:	fc 01       	movw	r30, r24
    1546:	40 83       	st	Z, r20
    1548:	51 83       	std	Z+1, r21	; 0x01
    154a:	62 83       	std	Z+2, r22	; 0x02
    154c:	73 83       	std	Z+3, r23	; 0x03
    154e:	08 95       	ret

00001550 <aes_cipher.part.3>:
    1550:	4f 92       	push	r4
    1552:	5f 92       	push	r5
    1554:	6f 92       	push	r6
    1556:	7f 92       	push	r7
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	ec 01       	movw	r28, r24
    156e:	28 01       	movw	r4, r16
    1570:	39 01       	movw	r6, r18
    1572:	80 e1       	ldi	r24, 0x10	; 16
    1574:	ed ec       	ldi	r30, 0xCD	; 205
    1576:	f2 e0       	ldi	r31, 0x02	; 2
    1578:	df 01       	movw	r26, r30
    157a:	1d 92       	st	X+, r1
    157c:	8a 95       	dec	r24
    157e:	e9 f7       	brne	.-6      	; 0x157a <aes_cipher.part.3+0x2a>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <AESAUX+0xf>
    1586:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <AESAUX>
    158a:	ef 28       	or	r14, r15
    158c:	09 f4       	brne	.+2      	; 0x1590 <aes_cipher.part.3+0x40>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <AESAUX+0x5>
    1594:	83 ed       	ldi	r24, 0xD3	; 211
    1596:	92 e0       	ldi	r25, 0x02	; 2
    1598:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    159c:	b3 01       	movw	r22, r6
    159e:	a2 01       	movw	r20, r4
    15a0:	87 ed       	ldi	r24, 0xD7	; 215
    15a2:	92 e0       	ldi	r25, 0x02	; 2
    15a4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    15a8:	80 e1       	ldi	r24, 0x10	; 16
    15aa:	fe 01       	movw	r30, r28
    15ac:	ad eb       	ldi	r26, 0xBD	; 189
    15ae:	b2 e0       	ldi	r27, 0x02	; 2
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	8a 95       	dec	r24
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <aes_cipher.part.3+0x60>
    15b8:	a5 01       	movw	r20, r10
    15ba:	b6 01       	movw	r22, r12
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	bf 90       	pop	r11
    15d0:	af 90       	pop	r10
    15d2:	7f 90       	pop	r7
    15d4:	6f 90       	pop	r6
    15d6:	5f 90       	pop	r5
    15d8:	4f 90       	pop	r4
    15da:	0c 94 cb 04 	jmp	0x996	; 0x996 <os_aes>

000015de <rxschedInit.constprop.10>:
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	80 e1       	ldi	r24, 0x10	; 16
    15e8:	ed eb       	ldi	r30, 0xBD	; 189
    15ea:	f2 e0       	ldi	r31, 0x02	; 2
    15ec:	df 01       	movw	r26, r30
    15ee:	1d 92       	st	X+, r1
    15f0:	8a 95       	dec	r24
    15f2:	e9 f7       	brne	.-6      	; 0x15ee <rxschedInit.constprop.10+0x10>
    15f4:	88 e0       	ldi	r24, 0x08	; 8
    15f6:	e8 e2       	ldi	r30, 0x28	; 40
    15f8:	f4 e0       	ldi	r31, 0x04	; 4
    15fa:	df 01       	movw	r26, r30
    15fc:	1d 92       	st	X+, r1
    15fe:	8a 95       	dec	r24
    1600:	e9 f7       	brne	.-6      	; 0x15fc <rxschedInit.constprop.10+0x1e>
    1602:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <LMIC+0x190>
    1606:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <LMIC+0x191>
    160a:	60 91 6f 04 	lds	r22, 0x046F	; 0x80046f <LMIC+0x192>
    160e:	70 91 70 04 	lds	r23, 0x0470	; 0x800470 <LMIC+0x193>
    1612:	80 e2       	ldi	r24, 0x20	; 32
    1614:	94 e0       	ldi	r25, 0x04	; 4
    1616:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    161a:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <LMIC+0x10f>
    161e:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <LMIC+0x110>
    1622:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <LMIC+0x111>
    1626:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <LMIC+0x112>
    162a:	84 e2       	ldi	r24, 0x24	; 36
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    1632:	40 e1       	ldi	r20, 0x10	; 16
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	60 e2       	ldi	r22, 0x20	; 32
    1638:	74 e0       	ldi	r23, 0x04	; 4
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    1640:	40 91 0d 04 	lds	r20, 0x040D	; 0x80040d <LMIC+0x130>
    1644:	87 e0       	ldi	r24, 0x07	; 7
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	84 1b       	sub	r24, r20
    164a:	91 09       	sbc	r25, r1
    164c:	2f ef       	ldi	r18, 0xFF	; 255
    164e:	3f e0       	ldi	r19, 0x0F	; 15
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <rxschedInit.constprop.10+0x78>
    1652:	35 95       	asr	r19
    1654:	27 95       	ror	r18
    1656:	8a 95       	dec	r24
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <rxschedInit.constprop.10+0x74>
    165a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <LMIC+0x143>
    165e:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <LMIC+0x144>
    1662:	28 23       	and	r18, r24
    1664:	39 23       	and	r19, r25
    1666:	c0 90 66 04 	lds	r12, 0x0466	; 0x800466 <LMIC+0x189>
    166a:	d0 90 67 04 	lds	r13, 0x0467	; 0x800467 <LMIC+0x18a>
    166e:	e0 90 68 04 	lds	r14, 0x0468	; 0x800468 <LMIC+0x18b>
    1672:	f0 90 69 04 	lds	r15, 0x0469	; 0x800469 <LMIC+0x18c>
    1676:	b4 e9       	ldi	r27, 0x94	; 148
    1678:	cb 0e       	add	r12, r27
    167a:	b5 e0       	ldi	r27, 0x05	; 5
    167c:	db 1e       	adc	r13, r27
    167e:	b2 e0       	ldi	r27, 0x02	; 2
    1680:	eb 1e       	adc	r14, r27
    1682:	f1 1c       	adc	r15, r1
    1684:	a3 e5       	ldi	r26, 0x53	; 83
    1686:	b7 e0       	ldi	r27, 0x07	; 7
    1688:	0e 94 76 27 	call	0x4eec	; 0x4eec <__umulhisi3>
    168c:	c6 0e       	add	r12, r22
    168e:	d7 1e       	adc	r13, r23
    1690:	e8 1e       	adc	r14, r24
    1692:	f9 1e       	adc	r15, r25
    1694:	c0 92 10 04 	sts	0x0410, r12	; 0x800410 <LMIC+0x133>
    1698:	d0 92 11 04 	sts	0x0411, r13	; 0x800411 <LMIC+0x134>
    169c:	e0 92 12 04 	sts	0x0412, r14	; 0x800412 <LMIC+0x135>
    16a0:	f0 92 13 04 	sts	0x0413, r15	; 0x800413 <LMIC+0x136>
    16a4:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <LMIC+0x131>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <rxschedInit.constprop.10+0xd2>
    16ae:	88 0f       	add	r24, r24
    16b0:	4a 95       	dec	r20
    16b2:	ea f7       	brpl	.-6      	; 0x16ae <rxschedInit.constprop.10+0xd0>
    16b4:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <LMIC+0x12f>
    16b8:	8e 5f       	subi	r24, 0xFE	; 254
    16ba:	0e 94 92 07 	call	0xf24	; 0xf24 <calcRxWindow>
    16be:	c6 1a       	sub	r12, r22
    16c0:	d7 0a       	sbc	r13, r23
    16c2:	e8 0a       	sbc	r14, r24
    16c4:	f9 0a       	sbc	r15, r25
    16c6:	c0 92 14 04 	sts	0x0414, r12	; 0x800414 <LMIC+0x137>
    16ca:	d0 92 15 04 	sts	0x0415, r13	; 0x800415 <LMIC+0x138>
    16ce:	e0 92 16 04 	sts	0x0416, r14	; 0x800416 <LMIC+0x139>
    16d2:	f0 92 17 04 	sts	0x0417, r15	; 0x800417 <LMIC+0x13a>
    16d6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <LMIC+0x10>
    16da:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <LMIC+0x132>
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	08 95       	ret

000016e8 <txDone>:
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	6b 01       	movw	r12, r22
    16f6:	7c 01       	movw	r14, r24
    16f8:	ea 01       	movw	r28, r20
    16fa:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    16fe:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    1702:	82 70       	andi	r24, 0x02	; 2
    1704:	96 70       	andi	r25, 0x06	; 6
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	94 40       	sbci	r25, 0x04	; 4
    170a:	59 f4       	brne	.+22     	; 0x1722 <txDone+0x3a>
    170c:	0e 94 ef 0a 	call	0x15de	; 0x15de <rxschedInit.constprop.10>
    1710:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    1714:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    1718:	92 60       	ori	r25, 0x02	; 2
    171a:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    171e:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    1722:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <LMIC+0x10>
    1726:	87 30       	cpi	r24, 0x07	; 7
    1728:	59 f5       	brne	.+86     	; 0x1780 <txDone+0x98>
    172a:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <LMIC>
    172e:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <LMIC+0x1>
    1732:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <LMIC+0x2>
    1736:	70 91 e0 02 	lds	r23, 0x02E0	; 0x8002e0 <LMIC+0x3>
    173a:	4c 0d       	add	r20, r12
    173c:	5d 1d       	adc	r21, r13
    173e:	6e 1d       	adc	r22, r14
    1740:	7f 1d       	adc	r23, r15
    1742:	db 01       	movw	r26, r22
    1744:	ca 01       	movw	r24, r20
    1746:	0a 97       	sbiw	r24, 0x0a	; 10
    1748:	a1 09       	sbc	r26, r1
    174a:	b1 09       	sbc	r27, r1
    174c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <LMIC+0x4>
    1750:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <LMIC+0x5>
    1754:	a0 93 e3 02 	sts	0x02E3, r26	; 0x8002e3 <LMIC+0x6>
    1758:	b0 93 e4 02 	sts	0x02E4, r27	; 0x8002e4 <LMIC+0x7>
    175c:	88 e0       	ldi	r24, 0x08	; 8
    175e:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <LMIC+0x10>
    1762:	47 58       	subi	r20, 0x87	; 135
    1764:	51 09       	sbc	r21, r1
    1766:	61 09       	sbc	r22, r1
    1768:	71 09       	sbc	r23, r1
    176a:	9e 01       	movw	r18, r28
    176c:	80 ef       	ldi	r24, 0xF0	; 240
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	df 90       	pop	r13
    177a:	cf 90       	pop	r12
    177c:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <os_setTimedCallback>
    1780:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <LMIC+0x11>
    1784:	ae 01       	movw	r20, r28
    1786:	c7 01       	movw	r24, r14
    1788:	b6 01       	movw	r22, r12
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <schedRx12>

0000179a <updataDone>:
    179a:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <LMIC+0x11e>
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	a4 e2       	ldi	r26, 0x24	; 36
    17a2:	b4 ef       	ldi	r27, 0xF4	; 244
    17a4:	0e 94 76 27 	call	0x4eec	; 0x4eec <__umulhisi3>
    17a8:	47 e5       	ldi	r20, 0x57	; 87
    17aa:	59 e0       	ldi	r21, 0x09	; 9
    17ac:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <txDone>

000017b0 <jreqDone>:
    17b0:	4b e5       	ldi	r20, 0x5B	; 91
    17b2:	59 e0       	ldi	r21, 0x09	; 9
    17b4:	64 eb       	ldi	r22, 0xB4	; 180
    17b6:	74 ec       	ldi	r23, 0xC4	; 196
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <txDone>

000017c0 <os_wmsbf4>:
    17c0:	fc 01       	movw	r30, r24
    17c2:	43 83       	std	Z+3, r20	; 0x03
    17c4:	52 83       	std	Z+2, r21	; 0x02
    17c6:	61 83       	std	Z+1, r22	; 0x01
    17c8:	70 83       	st	Z, r23
    17ca:	08 95       	ret

000017cc <os_crc16>:
    17cc:	fc 01       	movw	r30, r24
    17ce:	68 0f       	add	r22, r24
    17d0:	79 1f       	adc	r23, r25
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	e6 17       	cp	r30, r22
    17d8:	f7 07       	cpc	r31, r23
    17da:	91 f0       	breq	.+36     	; 0x1800 <os_crc16+0x34>
    17dc:	21 91       	ld	r18, Z+
    17de:	92 27       	eor	r25, r18
    17e0:	28 e0       	ldi	r18, 0x08	; 8
    17e2:	ac 01       	movw	r20, r24
    17e4:	44 0f       	add	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	97 ff       	sbrs	r25, 7
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <os_crc16+0x2c>
    17ec:	ca 01       	movw	r24, r20
    17ee:	31 e2       	ldi	r19, 0x21	; 33
    17f0:	83 27       	eor	r24, r19
    17f2:	30 e1       	ldi	r19, 0x10	; 16
    17f4:	93 27       	eor	r25, r19
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <os_crc16+0x2e>
    17f8:	ca 01       	movw	r24, r20
    17fa:	21 50       	subi	r18, 0x01	; 1
    17fc:	91 f7       	brne	.-28     	; 0x17e2 <os_crc16+0x16>
    17fe:	eb cf       	rjmp	.-42     	; 0x17d6 <os_crc16+0xa>
    1800:	08 95       	ret

00001802 <decodeBeacon>:
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    180c:	81 31       	cpi	r24, 0x11	; 17
    180e:	31 f0       	breq	.+12     	; 0x181c <decodeBeacon+0x1a>
    1810:	67 ee       	ldi	r22, 0xE7	; 231
    1812:	73 e0       	ldi	r23, 0x03	; 3
    1814:	84 e5       	ldi	r24, 0x54	; 84
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    181c:	67 e0       	ldi	r22, 0x07	; 7
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	80 e2       	ldi	r24, 0x20	; 32
    1822:	94 e0       	ldi	r25, 0x04	; 4
    1824:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <os_crc16>
    1828:	20 91 27 04 	lds	r18, 0x0427	; 0x800427 <LMIC+0x14a>
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	99 27       	eor	r25, r25
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	09 f0       	breq	.+2      	; 0x1838 <decodeBeacon+0x36>
    1836:	81 c0       	rjmp	.+258    	; 0x193a <decodeBeacon+0x138>
    1838:	80 e2       	ldi	r24, 0x20	; 32
    183a:	94 e0       	ldi	r25, 0x04	; 4
    183c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bb 27       	eor	r27, r27
    1846:	00 91 80 03 	lds	r16, 0x0380	; 0x800380 <LMIC+0xa3>
    184a:	10 91 81 03 	lds	r17, 0x0381	; 0x800381 <LMIC+0xa4>
    184e:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <LMIC+0xa5>
    1852:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <LMIC+0xa6>
    1856:	80 17       	cp	r24, r16
    1858:	91 07       	cpc	r25, r17
    185a:	a2 07       	cpc	r26, r18
    185c:	b3 07       	cpc	r27, r19
    185e:	09 f0       	breq	.+2      	; 0x1862 <decodeBeacon+0x60>
    1860:	6f c0       	rjmp	.+222    	; 0x1940 <decodeBeacon+0x13e>
    1862:	c0 91 6c 04 	lds	r28, 0x046C	; 0x80046c <LMIC+0x18f>
    1866:	cc 7f       	andi	r28, 0xFC	; 252
    1868:	c0 93 6c 04 	sts	0x046C, r28	; 0x80046c <LMIC+0x18f>
    186c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <LMIC+0xd>
    1870:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <LMIC+0x18e>
    1874:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <LMIC+0xc>
    1878:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <LMIC+0x18d>
    187c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <LMIC+0x4>
    1880:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <LMIC+0x5>
    1884:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <LMIC+0x6>
    1888:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <LMIC+0x7>
    188c:	80 54       	subi	r24, 0x40	; 64
    188e:	93 42       	sbci	r25, 0x23	; 35
    1890:	a1 09       	sbc	r26, r1
    1892:	b1 09       	sbc	r27, r1
    1894:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <LMIC+0x189>
    1898:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <LMIC+0x18a>
    189c:	a0 93 68 04 	sts	0x0468, r26	; 0x800468 <LMIC+0x18b>
    18a0:	b0 93 69 04 	sts	0x0469, r27	; 0x800469 <LMIC+0x18c>
    18a4:	83 e2       	ldi	r24, 0x23	; 35
    18a6:	94 e0       	ldi	r25, 0x04	; 4
    18a8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    18ac:	60 93 6d 04 	sts	0x046D, r22	; 0x80046d <LMIC+0x190>
    18b0:	70 93 6e 04 	sts	0x046E, r23	; 0x80046e <LMIC+0x191>
    18b4:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <LMIC+0x192>
    18b8:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <LMIC+0x193>
    18bc:	8c 2f       	mov	r24, r28
    18be:	81 60       	ori	r24, 0x01	; 1
    18c0:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <LMIC+0x18f>
    18c4:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <LMIC+0x152>
    18c8:	10 91 30 04 	lds	r17, 0x0430	; 0x800430 <LMIC+0x153>
    18cc:	6f e0       	ldi	r22, 0x0F	; 15
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	80 e2       	ldi	r24, 0x20	; 32
    18d2:	94 e0       	ldi	r25, 0x04	; 4
    18d4:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <os_crc16>
    18d8:	08 17       	cp	r16, r24
    18da:	19 07       	cpc	r17, r25
    18dc:	a1 f5       	brne	.+104    	; 0x1946 <decodeBeacon+0x144>
    18de:	88 e2       	ldi	r24, 0x28	; 40
    18e0:	94 e0       	ldi	r25, 0x04	; 4
    18e2:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    18e6:	bb 27       	eor	r27, r27
    18e8:	97 fd       	sbrc	r25, 7
    18ea:	ba 95       	dec	r27
    18ec:	a9 2f       	mov	r26, r25
    18ee:	98 2f       	mov	r25, r24
    18f0:	87 2f       	mov	r24, r23
    18f2:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <LMIC+0x195>
    18f6:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <LMIC+0x196>
    18fa:	a0 93 74 04 	sts	0x0474, r26	; 0x800474 <LMIC+0x197>
    18fe:	b0 93 75 04 	sts	0x0475, r27	; 0x800475 <LMIC+0x198>
    1902:	8b e2       	ldi	r24, 0x2B	; 43
    1904:	94 e0       	ldi	r25, 0x04	; 4
    1906:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    190a:	bb 27       	eor	r27, r27
    190c:	97 fd       	sbrc	r25, 7
    190e:	ba 95       	dec	r27
    1910:	a9 2f       	mov	r26, r25
    1912:	98 2f       	mov	r25, r24
    1914:	87 2f       	mov	r24, r23
    1916:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <LMIC+0x199>
    191a:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <LMIC+0x19a>
    191e:	a0 93 78 04 	sts	0x0478, r26	; 0x800478 <LMIC+0x19b>
    1922:	b0 93 79 04 	sts	0x0479, r27	; 0x800479 <LMIC+0x19c>
    1926:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <LMIC+0x14b>
    192a:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <LMIC+0x194>
    192e:	c3 60       	ori	r28, 0x03	; 3
    1930:	c0 93 6c 04 	sts	0x046C, r28	; 0x80046c <LMIC+0x18f>
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	08 c0       	rjmp	.+16     	; 0x194a <decodeBeacon+0x148>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	05 c0       	rjmp	.+10     	; 0x194a <decodeBeacon+0x148>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	9f ef       	ldi	r25, 0xFF	; 255
    1944:	02 c0       	rjmp	.+4      	; 0x194a <decodeBeacon+0x148>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	08 95       	ret

00001952 <getSensitivity>:
    1952:	28 2f       	mov	r18, r24
    1954:	27 70       	andi	r18, 0x07	; 7
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	f9 01       	movw	r30, r18
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	e2 0f       	add	r30, r18
    1960:	f3 1f       	adc	r31, r19
    1962:	ef 59       	subi	r30, 0x9F	; 159
    1964:	fc 4f       	sbci	r31, 0xFC	; 252
    1966:	53 e0       	ldi	r21, 0x03	; 3
    1968:	96 95       	lsr	r25
    196a:	87 95       	ror	r24
    196c:	5a 95       	dec	r21
    196e:	e1 f7       	brne	.-8      	; 0x1968 <getSensitivity+0x16>
    1970:	83 70       	andi	r24, 0x03	; 3
    1972:	e8 0f       	add	r30, r24
    1974:	f1 1d       	adc	r31, r1
    1976:	84 91       	lpm	r24, Z
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	8d 58       	subi	r24, 0x8D	; 141
    197c:	91 09       	sbc	r25, r1
    197e:	08 95       	ret

00001980 <calcAirTime>:
    1980:	ef 92       	push	r14
    1982:	ff 92       	push	r15
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	fc 01       	movw	r30, r24
    198a:	38 2f       	mov	r19, r24
    198c:	37 70       	andi	r19, 0x07	; 7
    198e:	a6 2f       	mov	r26, r22
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	79 f4       	brne	.+30     	; 0x19b2 <calcAirTime+0x32>
    1994:	1b 96       	adiw	r26, 0x0b	; 11
    1996:	03 e0       	ldi	r16, 0x03	; 3
    1998:	aa 0f       	add	r26, r26
    199a:	bb 1f       	adc	r27, r27
    199c:	0a 95       	dec	r16
    199e:	e1 f7       	brne	.-8      	; 0x1998 <calcAirTime+0x18>
    19a0:	24 e2       	ldi	r18, 0x24	; 36
    19a2:	34 ef       	ldi	r19, 0xF4	; 244
    19a4:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__usmulhisi3>
    19a8:	20 e5       	ldi	r18, 0x50	; 80
    19aa:	33 ec       	ldi	r19, 0xC3	; 195
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	87 c0       	rjmp	.+270    	; 0x1ac0 <calcAirTime+0x140>
    19b2:	63 2f       	mov	r22, r19
    19b4:	66 0f       	add	r22, r22
    19b6:	66 0f       	add	r22, r22
    19b8:	68 5e       	subi	r22, 0xE8	; 232
    19ba:	35 30       	cpi	r19, 0x05	; 5
    19bc:	10 f4       	brcc	.+4      	; 0x19c2 <calcAirTime+0x42>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <calcAirTime+0x44>
    19c2:	28 e0       	ldi	r18, 0x08	; 8
    19c4:	13 e0       	ldi	r17, 0x03	; 3
    19c6:	aa 0f       	add	r26, r26
    19c8:	bb 1f       	adc	r27, r27
    19ca:	1a 95       	dec	r17
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <calcAirTime+0x46>
    19ce:	cd 01       	movw	r24, r26
    19d0:	86 1b       	sub	r24, r22
    19d2:	91 09       	sbc	r25, r1
    19d4:	dc 01       	movw	r26, r24
    19d6:	5c 96       	adiw	r26, 0x1c	; 28
    19d8:	e7 fd       	sbrc	r30, 7
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <calcAirTime+0x62>
    19dc:	80 e1       	ldi	r24, 0x10	; 16
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <calcAirTime+0x66>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	8a 0f       	add	r24, r26
    19e8:	9b 1f       	adc	r25, r27
    19ea:	4f 2f       	mov	r20, r31
    19ec:	55 27       	eor	r21, r21
    19ee:	45 2b       	or	r20, r21
    19f0:	19 f4       	brne	.+6      	; 0x19f8 <calcAirTime+0x78>
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <calcAirTime+0x7c>
    19f8:	44 e1       	ldi	r20, 0x14	; 20
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	84 1b       	sub	r24, r20
    19fe:	95 0b       	sbc	r25, r21
    1a00:	18 16       	cp	r1, r24
    1a02:	19 06       	cpc	r1, r25
    1a04:	d4 f4       	brge	.+52     	; 0x1a3a <calcAirTime+0xba>
    1a06:	62 1b       	sub	r22, r18
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	86 0f       	add	r24, r22
    1a0c:	97 1f       	adc	r25, r23
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__divmodhi4>
    1a14:	af 01       	movw	r20, r30
    1a16:	a5 e0       	ldi	r26, 0x05	; 5
    1a18:	56 95       	lsr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	aa 95       	dec	r26
    1a1e:	e1 f7       	brne	.-8      	; 0x1a18 <calcAirTime+0x98>
    1a20:	43 70       	andi	r20, 0x03	; 3
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	4b 5f       	subi	r20, 0xFB	; 251
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	46 9f       	mul	r20, r22
    1a2a:	c0 01       	movw	r24, r0
    1a2c:	47 9f       	mul	r20, r23
    1a2e:	90 0d       	add	r25, r0
    1a30:	56 9f       	mul	r21, r22
    1a32:	90 0d       	add	r25, r0
    1a34:	11 24       	eor	r1, r1
    1a36:	08 96       	adiw	r24, 0x08	; 8
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <calcAirTime+0xbe>
    1a3a:	88 e0       	ldi	r24, 0x08	; 8
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	c1 96       	adiw	r24, 0x31	; 49
    1a48:	3f 5f       	subi	r19, 0xFF	; 255
    1a4a:	63 e0       	ldi	r22, 0x03	; 3
    1a4c:	f6 95       	lsr	r31
    1a4e:	e7 95       	ror	r30
    1a50:	6a 95       	dec	r22
    1a52:	e1 f7       	brne	.-8      	; 0x1a4c <calcAirTime+0xcc>
    1a54:	e3 70       	andi	r30, 0x03	; 3
    1a56:	3e 1b       	sub	r19, r30
    1a58:	35 30       	cpi	r19, 0x05	; 5
    1a5a:	50 f0       	brcs	.+20     	; 0x1a70 <calcAirTime+0xf0>
    1a5c:	34 50       	subi	r19, 0x04	; 4
    1a5e:	e9 e0       	ldi	r30, 0x09	; 9
    1a60:	fd e3       	ldi	r31, 0x3D	; 61
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <calcAirTime+0xe8>
    1a64:	f5 95       	asr	r31
    1a66:	e7 95       	ror	r30
    1a68:	3a 95       	dec	r19
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <calcAirTime+0xe4>
    1a6c:	34 e0       	ldi	r19, 0x04	; 4
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <calcAirTime+0xf4>
    1a70:	e9 e0       	ldi	r30, 0x09	; 9
    1a72:	fd e3       	ldi	r31, 0x3D	; 61
    1a74:	09 2e       	mov	r0, r25
    1a76:	00 0c       	add	r0, r0
    1a78:	aa 0b       	sbc	r26, r26
    1a7a:	bb 0b       	sbc	r27, r27
    1a7c:	7c 01       	movw	r14, r24
    1a7e:	8d 01       	movw	r16, r26
    1a80:	04 c0       	rjmp	.+8      	; 0x1a8a <calcAirTime+0x10a>
    1a82:	ee 0c       	add	r14, r14
    1a84:	ff 1c       	adc	r15, r15
    1a86:	00 1f       	adc	r16, r16
    1a88:	11 1f       	adc	r17, r17
    1a8a:	3a 95       	dec	r19
    1a8c:	d2 f7       	brpl	.-12     	; 0x1a82 <calcAirTime+0x102>
    1a8e:	a8 01       	movw	r20, r16
    1a90:	97 01       	movw	r18, r14
    1a92:	a4 e2       	ldi	r26, 0x24	; 36
    1a94:	b4 ef       	ldi	r27, 0xF4	; 244
    1a96:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__muluhisi3>
    1a9a:	9f 01       	movw	r18, r30
    1a9c:	f7 ff       	sbrs	r31, 7
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <calcAirTime+0x124>
    1aa0:	2f 5f       	subi	r18, 0xFF	; 255
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	35 95       	asr	r19
    1aa6:	27 95       	ror	r18
    1aa8:	89 01       	movw	r16, r18
    1aaa:	33 0f       	add	r19, r19
    1aac:	22 0b       	sbc	r18, r18
    1aae:	33 0b       	sbc	r19, r19
    1ab0:	60 0f       	add	r22, r16
    1ab2:	71 1f       	adc	r23, r17
    1ab4:	82 1f       	adc	r24, r18
    1ab6:	93 1f       	adc	r25, r19
    1ab8:	9f 01       	movw	r18, r30
    1aba:	ff 0f       	add	r31, r31
    1abc:	44 0b       	sbc	r20, r20
    1abe:	55 0b       	sbc	r21, r21
    1ac0:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__divmodsi4>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	b9 01       	movw	r22, r18
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	08 95       	ret

00001ad2 <LMIC_setupChannel>:
    1ad2:	cf 92       	push	r12
    1ad4:	df 92       	push	r13
    1ad6:	ef 92       	push	r14
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	a8 2f       	mov	r26, r24
    1ae2:	80 31       	cpi	r24, 0x10	; 16
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <LMIC_setupChannel+0x16>
    1ae6:	74 c0       	rjmp	.+232    	; 0x1bd0 <LMIC_setupChannel+0xfe>
    1ae8:	0f 3f       	cpi	r16, 0xFF	; 255
    1aea:	c1 f5       	brne	.+112    	; 0x1b5c <LMIC_setupChannel+0x8a>
    1aec:	6a 01       	movw	r12, r20
    1aee:	7b 01       	movw	r14, r22
    1af0:	80 ec       	ldi	r24, 0xC0	; 192
    1af2:	c8 1a       	sub	r12, r24
    1af4:	8d ef       	ldi	r24, 0xFD	; 253
    1af6:	d8 0a       	sbc	r13, r24
    1af8:	81 ed       	ldi	r24, 0xD1	; 209
    1afa:	e8 0a       	sbc	r14, r24
    1afc:	83 e3       	ldi	r24, 0x33	; 51
    1afe:	f8 0a       	sbc	r15, r24
    1b00:	81 e9       	ldi	r24, 0x91	; 145
    1b02:	c8 16       	cp	r12, r24
    1b04:	80 ed       	ldi	r24, 0xD0	; 208
    1b06:	d8 06       	cpc	r13, r24
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	e8 06       	cpc	r14, r24
    1b0c:	f1 04       	cpc	r15, r1
    1b0e:	10 f4       	brcc	.+4      	; 0x1b14 <LMIC_setupChannel+0x42>
    1b10:	42 60       	ori	r20, 0x02	; 2
    1b12:	30 c0       	rjmp	.+96     	; 0x1b74 <LMIC_setupChannel+0xa2>
    1b14:	6a 01       	movw	r12, r20
    1b16:	7b 01       	movw	r14, r22
    1b18:	81 ea       	ldi	r24, 0xA1	; 161
    1b1a:	d8 1a       	sub	r13, r24
    1b1c:	8c eb       	ldi	r24, 0xBC	; 188
    1b1e:	e8 0a       	sbc	r14, r24
    1b20:	83 e3       	ldi	r24, 0x33	; 51
    1b22:	f8 0a       	sbc	r15, r24
    1b24:	81 ec       	ldi	r24, 0xC1	; 193
    1b26:	c8 16       	cp	r12, r24
    1b28:	87 e2       	ldi	r24, 0x27	; 39
    1b2a:	d8 06       	cpc	r13, r24
    1b2c:	89 e0       	ldi	r24, 0x09	; 9
    1b2e:	e8 06       	cpc	r14, r24
    1b30:	f1 04       	cpc	r15, r1
    1b32:	90 f0       	brcs	.+36     	; 0x1b58 <LMIC_setupChannel+0x86>
    1b34:	6a 01       	movw	r12, r20
    1b36:	7b 01       	movw	r14, r22
    1b38:	80 ea       	ldi	r24, 0xA0	; 160
    1b3a:	c8 1a       	sub	r12, r24
    1b3c:	81 e9       	ldi	r24, 0x91	; 145
    1b3e:	d8 0a       	sbc	r13, r24
    1b40:	86 ed       	ldi	r24, 0xD6	; 214
    1b42:	e8 0a       	sbc	r14, r24
    1b44:	83 e3       	ldi	r24, 0x33	; 51
    1b46:	f8 0a       	sbc	r15, r24
    1b48:	81 ee       	ldi	r24, 0xE1	; 225
    1b4a:	c8 16       	cp	r12, r24
    1b4c:	83 e9       	ldi	r24, 0x93	; 147
    1b4e:	d8 06       	cpc	r13, r24
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	e8 06       	cpc	r14, r24
    1b54:	f1 04       	cpc	r15, r1
    1b56:	70 f4       	brcc	.+28     	; 0x1b74 <LMIC_setupChannel+0xa2>
    1b58:	41 60       	ori	r20, 0x01	; 1
    1b5a:	0c c0       	rjmp	.+24     	; 0x1b74 <LMIC_setupChannel+0xa2>
    1b5c:	04 30       	cpi	r16, 0x04	; 4
    1b5e:	c4 f5       	brge	.+112    	; 0x1bd0 <LMIC_setupChannel+0xfe>
    1b60:	4c 7f       	andi	r20, 0xFC	; 252
    1b62:	c0 2e       	mov	r12, r16
    1b64:	00 0f       	add	r16, r16
    1b66:	dd 08       	sbc	r13, r13
    1b68:	ee 08       	sbc	r14, r14
    1b6a:	ff 08       	sbc	r15, r15
    1b6c:	4c 29       	or	r20, r12
    1b6e:	5d 29       	or	r21, r13
    1b70:	6e 29       	or	r22, r14
    1b72:	7f 29       	or	r23, r15
    1b74:	ea 2f       	mov	r30, r26
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	ef 01       	movw	r28, r30
    1b7a:	cc 0f       	add	r28, r28
    1b7c:	dd 1f       	adc	r29, r29
    1b7e:	cc 0f       	add	r28, r28
    1b80:	dd 1f       	adc	r29, r29
    1b82:	c3 52       	subi	r28, 0x23	; 35
    1b84:	dd 4f       	sbci	r29, 0xFD	; 253
    1b86:	4b af       	std	Y+59, r20	; 0x3b
    1b88:	5c af       	std	Y+60, r21	; 0x3c
    1b8a:	6d af       	std	Y+61, r22	; 0x3d
    1b8c:	7e af       	std	Y+62, r23	; 0x3e
    1b8e:	21 15       	cp	r18, r1
    1b90:	31 05       	cpc	r19, r1
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <LMIC_setupChannel+0xc8>
    1b94:	92 2f       	mov	r25, r18
    1b96:	83 2f       	mov	r24, r19
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <LMIC_setupChannel+0xcc>
    1b9a:	9f e3       	ldi	r25, 0x3F	; 63
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	e8 5a       	subi	r30, 0xA8	; 168
    1ba4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ba6:	90 83       	st	Z, r25
    1ba8:	81 83       	std	Z+1, r24	; 0x01
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <LMIC_setupChannel+0xe2>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	aa 95       	dec	r26
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <LMIC_setupChannel+0xde>
    1bb8:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <LMIC+0x9b>
    1bbc:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <LMIC+0x9c>
    1bc0:	82 2b       	or	r24, r18
    1bc2:	93 2b       	or	r25, r19
    1bc4:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <LMIC+0x9c>
    1bc8:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <LMIC+0x9b>
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <LMIC_setupChannel+0x100>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	0f 91       	pop	r16
    1bd8:	ff 90       	pop	r15
    1bda:	ef 90       	pop	r14
    1bdc:	df 90       	pop	r13
    1bde:	cf 90       	pop	r12
    1be0:	08 95       	ret

00001be2 <decodeFrame>:
    1be2:	2f 92       	push	r2
    1be4:	3f 92       	push	r3
    1be6:	4f 92       	push	r4
    1be8:	5f 92       	push	r5
    1bea:	6f 92       	push	r6
    1bec:	7f 92       	push	r7
    1bee:	8f 92       	push	r8
    1bf0:	9f 92       	push	r9
    1bf2:	af 92       	push	r10
    1bf4:	bf 92       	push	r11
    1bf6:	cf 92       	push	r12
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	29 97       	sbiw	r28, 0x09	; 9
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	e0 90 1f 04 	lds	r14, 0x041F	; 0x80041f <LMIC+0x142>
    1c1a:	f1 2c       	mov	r15, r1
    1c1c:	2c e0       	ldi	r18, 0x0C	; 12
    1c1e:	e2 16       	cp	r14, r18
    1c20:	f1 04       	cpc	r15, r1
    1c22:	24 f4       	brge	.+8      	; 0x1c2c <decodeFrame+0x4a>
    1c24:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	35 c3       	rjmp	.+1642   	; 0x2296 <decodeFrame+0x6b4>
    1c2c:	30 91 20 04 	lds	r19, 0x0420	; 0x800420 <LMIC+0x143>
    1c30:	39 83       	std	Y+1, r19	; 0x01
    1c32:	13 2f       	mov	r17, r19
    1c34:	13 70       	andi	r17, 0x03	; 3
    1c36:	b1 f7       	brne	.-20     	; 0x1c24 <decodeFrame+0x42>
    1c38:	30 7e       	andi	r19, 0xE0	; 224
    1c3a:	3e 83       	std	Y+6, r19	; 0x06
    1c3c:	30 36       	cpi	r19, 0x60	; 96
    1c3e:	11 f0       	breq	.+4      	; 0x1c44 <decodeFrame+0x62>
    1c40:	30 3a       	cpi	r19, 0xA0	; 160
    1c42:	81 f7       	brne	.-32     	; 0x1c24 <decodeFrame+0x42>
    1c44:	81 e2       	ldi	r24, 0x21	; 33
    1c46:	94 e0       	ldi	r25, 0x04	; 4
    1c48:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    1c4c:	ab 01       	movw	r20, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <LMIC+0x10f>
    1c54:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <LMIC+0x110>
    1c58:	a0 91 ee 03 	lds	r26, 0x03EE	; 0x8003ee <LMIC+0x111>
    1c5c:	b0 91 ef 03 	lds	r27, 0x03EF	; 0x8003ef <LMIC+0x112>
    1c60:	48 17       	cp	r20, r24
    1c62:	59 07       	cpc	r21, r25
    1c64:	6a 07       	cpc	r22, r26
    1c66:	7b 07       	cpc	r23, r27
    1c68:	e9 f6       	brne	.-70     	; 0x1c24 <decodeFrame+0x42>
    1c6a:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <LMIC+0x148>
    1c6e:	8b 83       	std	Y+3, r24	; 0x03
    1c70:	8f 70       	andi	r24, 0x0F	; 15
    1c72:	a8 2f       	mov	r26, r24
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	bd 83       	std	Y+5, r27	; 0x05
    1c78:	ac 83       	std	Y+4, r26	; 0x04
    1c7a:	4d 01       	movw	r8, r26
    1c7c:	b8 e0       	ldi	r27, 0x08	; 8
    1c7e:	8b 0e       	add	r8, r27
    1c80:	91 1c       	adc	r9, r1
    1c82:	17 01       	movw	r2, r14
    1c84:	24 e0       	ldi	r18, 0x04	; 4
    1c86:	22 1a       	sub	r2, r18
    1c88:	31 08       	sbc	r3, r1
    1c8a:	28 14       	cp	r2, r8
    1c8c:	39 04       	cpc	r3, r9
    1c8e:	54 f2       	brlt	.-108    	; 0x1c24 <decodeFrame+0x42>
    1c90:	82 14       	cp	r8, r2
    1c92:	93 04       	cpc	r9, r3
    1c94:	74 f4       	brge	.+28     	; 0x1cb2 <decodeFrame+0xd0>
    1c96:	f4 01       	movw	r30, r8
    1c98:	e0 5e       	subi	r30, 0xE0	; 224
    1c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c9c:	80 81       	ld	r24, Z
    1c9e:	a8 2f       	mov	r26, r24
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ba 83       	std	Y+2, r27	; 0x02
    1ca4:	a9 83       	std	Y+1, r26	; 0x01
    1ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    1caa:	27 5f       	subi	r18, 0xF7	; 247
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	49 01       	movw	r8, r18
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <decodeFrame+0xd8>
    1cb2:	8f ef       	ldi	r24, 0xFF	; 255
    1cb4:	9f ef       	ldi	r25, 0xFF	; 255
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	40 90 f0 03 	lds	r4, 0x03F0	; 0x8003f0 <LMIC+0x113>
    1cbe:	50 90 f1 03 	lds	r5, 0x03F1	; 0x8003f1 <LMIC+0x114>
    1cc2:	60 90 f2 03 	lds	r6, 0x03F2	; 0x8003f2 <LMIC+0x115>
    1cc6:	70 90 f3 03 	lds	r7, 0x03F3	; 0x8003f3 <LMIC+0x116>
    1cca:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <LMIC+0x149>
    1cce:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <LMIC+0x14a>
    1cd2:	84 19       	sub	r24, r4
    1cd4:	95 09       	sbc	r25, r5
    1cd6:	48 0e       	add	r4, r24
    1cd8:	59 1e       	adc	r5, r25
    1cda:	61 1c       	adc	r6, r1
    1cdc:	71 1c       	adc	r7, r1
    1cde:	ed ec       	ldi	r30, 0xCD	; 205
    1ce0:	f2 e0       	ldi	r31, 0x02	; 2
    1ce2:	df 01       	movw	r26, r30
    1ce4:	20 e1       	ldi	r18, 0x10	; 16
    1ce6:	1d 92       	st	X+, r1
    1ce8:	2a 95       	dec	r18
    1cea:	e9 f7       	brne	.-6      	; 0x1ce6 <decodeFrame+0x104>
    1cec:	89 e4       	ldi	r24, 0x49	; 73
    1cee:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <AESAUX>
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <AESAUX+0x5>
    1cf8:	20 92 dc 02 	sts	0x02DC, r2	; 0x8002dc <AESAUX+0xf>
    1cfc:	83 ed       	ldi	r24, 0xD3	; 211
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    1d04:	b3 01       	movw	r22, r6
    1d06:	a2 01       	movw	r20, r4
    1d08:	87 ed       	ldi	r24, 0xD7	; 215
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    1d10:	ec ec       	ldi	r30, 0xCC	; 204
    1d12:	f3 e0       	ldi	r31, 0x03	; 3
    1d14:	ad eb       	ldi	r26, 0xBD	; 189
    1d16:	b2 e0       	ldi	r27, 0x02	; 2
    1d18:	30 e1       	ldi	r19, 0x10	; 16
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	3a 95       	dec	r19
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <decodeFrame+0x138>
    1d22:	a1 01       	movw	r20, r2
    1d24:	60 e2       	ldi	r22, 0x20	; 32
    1d26:	74 e0       	ldi	r23, 0x04	; 4
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    1d2e:	6b 01       	movw	r12, r22
    1d30:	7c 01       	movw	r14, r24
    1d32:	c1 01       	movw	r24, r2
    1d34:	80 5e       	subi	r24, 0xE0	; 224
    1d36:	9b 4f       	sbci	r25, 0xFB	; 251
    1d38:	0e 94 9a 0a 	call	0x1534	; 0x1534 <os_rmsbf4>
    1d3c:	c6 16       	cp	r12, r22
    1d3e:	d7 06       	cpc	r13, r23
    1d40:	e8 06       	cpc	r14, r24
    1d42:	f9 06       	cpc	r15, r25
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <decodeFrame+0x166>
    1d46:	6e cf       	rjmp	.-292    	; 0x1c24 <decodeFrame+0x42>
    1d48:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <LMIC+0x113>
    1d4c:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <LMIC+0x114>
    1d50:	a0 91 f2 03 	lds	r26, 0x03F2	; 0x8003f2 <LMIC+0x115>
    1d54:	b0 91 f3 03 	lds	r27, 0x03F3	; 0x8003f3 <LMIC+0x116>
    1d58:	48 16       	cp	r4, r24
    1d5a:	59 06       	cpc	r5, r25
    1d5c:	6a 06       	cpc	r6, r26
    1d5e:	7b 06       	cpc	r7, r27
    1d60:	e8 f4       	brcc	.+58     	; 0x1d9c <decodeFrame+0x1ba>
    1d62:	84 15       	cp	r24, r4
    1d64:	95 05       	cpc	r25, r5
    1d66:	a6 05       	cpc	r26, r6
    1d68:	b7 05       	cpc	r27, r7
    1d6a:	0c f4       	brge	.+2      	; 0x1d6e <decodeFrame+0x18c>
    1d6c:	5b cf       	rjmp	.-330    	; 0x1c24 <decodeFrame+0x42>
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	a1 09       	sbc	r26, r1
    1d72:	b1 09       	sbc	r27, r1
    1d74:	48 16       	cp	r4, r24
    1d76:	59 06       	cpc	r5, r25
    1d78:	6a 06       	cpc	r6, r26
    1d7a:	7b 06       	cpc	r7, r27
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <decodeFrame+0x19e>
    1d7e:	52 cf       	rjmp	.-348    	; 0x1c24 <decodeFrame+0x42>
    1d80:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x11b>
    1d84:	88 23       	and	r24, r24
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <decodeFrame+0x1a8>
    1d88:	4d cf       	rjmp	.-358    	; 0x1c24 <decodeFrame+0x42>
    1d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8c:	80 3a       	cpi	r24, 0xA0	; 160
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <decodeFrame+0x1b0>
    1d90:	49 cf       	rjmp	.-366    	; 0x1c24 <decodeFrame+0x42>
    1d92:	a1 e0       	ldi	r26, 0x01	; 1
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	bf 83       	std	Y+7, r27	; 0x07
    1d98:	ae 83       	std	Y+6, r26	; 0x06
    1d9a:	17 c0       	rjmp	.+46     	; 0x1dca <decodeFrame+0x1e8>
    1d9c:	d3 01       	movw	r26, r6
    1d9e:	c2 01       	movw	r24, r4
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	a1 1d       	adc	r26, r1
    1da4:	b1 1d       	adc	r27, r1
    1da6:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <LMIC+0x113>
    1daa:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <LMIC+0x114>
    1dae:	a0 93 f2 03 	sts	0x03F2, r26	; 0x8003f2 <LMIC+0x115>
    1db2:	b0 93 f3 03 	sts	0x03F3, r27	; 0x8003f3 <LMIC+0x116>
    1db6:	be 81       	ldd	r27, Y+6	; 0x06
    1db8:	b0 3a       	cpi	r27, 0xA0	; 160
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <decodeFrame+0x1de>
    1dbc:	80 e2       	ldi	r24, 0x20	; 32
    1dbe:	01 c0       	rjmp	.+2      	; 0x1dc2 <decodeFrame+0x1e0>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <LMIC+0x11b>
    1dc6:	1f 82       	std	Y+7, r1	; 0x07
    1dc8:	1e 82       	std	Y+6, r1	; 0x06
    1dca:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x11b>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <decodeFrame+0x1f6>
    1dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd4:	24 ff       	sbrs	r18, 4
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <decodeFrame+0x208>
    1dd8:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    1ddc:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    1de0:	80 61       	ori	r24, 0x10	; 16
    1de2:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    1de6:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    1dea:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <LMIC+0xad>
    1dee:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <LMIC+0x11d>
    1df2:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <LMIC+0x11c>
    1df6:	80 38       	cpi	r24, 0x80	; 128
    1df8:	19 f0       	breq	.+6      	; 0x1e00 <decodeFrame+0x21e>
    1dfa:	84 ef       	ldi	r24, 0xF4	; 244
    1dfc:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x11c>
    1e00:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <LMIC+0xc>
    1e04:	83 2f       	mov	r24, r19
    1e06:	08 2e       	mov	r0, r24
    1e08:	00 0c       	add	r0, r0
    1e0a:	99 0b       	sbc	r25, r25
    1e0c:	80 54       	subi	r24, 0x40	; 64
    1e0e:	91 09       	sbc	r25, r1
    1e10:	99 87       	std	Y+9, r25	; 0x09
    1e12:	88 87       	std	Y+8, r24	; 0x08
    1e14:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <LMIC+0xe>
    1e18:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <LMIC+0xf>
    1e1c:	0e 94 a9 0c 	call	0x1952	; 0x1952 <getSensitivity>
    1e20:	a8 85       	ldd	r26, Y+8	; 0x08
    1e22:	b9 85       	ldd	r27, Y+9	; 0x09
    1e24:	a8 1b       	sub	r26, r24
    1e26:	b9 0b       	sbc	r27, r25
    1e28:	b9 87       	std	Y+9, r27	; 0x09
    1e2a:	a8 87       	std	Y+8, r26	; 0x08
    1e2c:	b7 fd       	sbrc	r27, 7
    1e2e:	08 c0       	rjmp	.+16     	; 0x1e40 <decodeFrame+0x25e>
    1e30:	af 3f       	cpi	r26, 0xFF	; 255
    1e32:	b1 05       	cpc	r27, r1
    1e34:	24 f0       	brlt	.+8      	; 0x1e3e <decodeFrame+0x25c>
    1e36:	8e ef       	ldi	r24, 0xFE	; 254
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	99 87       	std	Y+9, r25	; 0x09
    1e3c:	88 87       	std	Y+8, r24	; 0x08
    1e3e:	18 85       	ldd	r17, Y+8	; 0x08
    1e40:	10 93 fc 03 	sts	0x03FC, r17	; 0x8003fc <LMIC+0x11f>
    1e44:	19 86       	std	Y+9, r1	; 0x09
    1e46:	18 86       	std	Y+8, r1	; 0x08
    1e48:	a8 85       	ldd	r26, Y+8	; 0x08
    1e4a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	a2 17       	cp	r26, r18
    1e52:	b3 07       	cpc	r27, r19
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <decodeFrame+0x276>
    1e56:	bb c1       	rjmp	.+886    	; 0x21ce <decodeFrame+0x5ec>
    1e58:	e8 85       	ldd	r30, Y+8	; 0x08
    1e5a:	f9 85       	ldd	r31, Y+9	; 0x09
    1e5c:	e8 5d       	subi	r30, 0xD8	; 216
    1e5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e60:	e0 81       	ld	r30, Z
    1e62:	8e 2f       	mov	r24, r30
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	fc 01       	movw	r30, r24
    1e68:	32 97       	sbiw	r30, 0x02	; 2
    1e6a:	e1 31       	cpi	r30, 0x11	; 17
    1e6c:	f1 05       	cpc	r31, r1
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <decodeFrame+0x290>
    1e70:	ae c1       	rjmp	.+860    	; 0x21ce <decodeFrame+0x5ec>
    1e72:	ed 5b       	subi	r30, 0xBD	; 189
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__tablejump2__>
    1e7a:	a8 85       	ldd	r26, Y+8	; 0x08
    1e7c:	b9 85       	ldd	r27, Y+9	; 0x09
    1e7e:	13 96       	adiw	r26, 0x03	; 3
    1e80:	29 c1       	rjmp	.+594    	; 0x20d4 <decodeFrame+0x4f2>
    1e82:	e8 85       	ldd	r30, Y+8	; 0x08
    1e84:	f9 85       	ldd	r31, Y+9	; 0x09
    1e86:	e7 5d       	subi	r30, 0xD7	; 215
    1e88:	fb 4f       	sbci	r31, 0xFB	; 251
    1e8a:	10 81       	ld	r17, Z
    1e8c:	e8 85       	ldd	r30, Y+8	; 0x08
    1e8e:	f9 85       	ldd	r31, Y+9	; 0x09
    1e90:	e6 5d       	subi	r30, 0xD6	; 214
    1e92:	fb 4f       	sbci	r31, 0xFB	; 251
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	e8 85       	ldd	r30, Y+8	; 0x08
    1e9a:	f9 85       	ldd	r31, Y+9	; 0x09
    1e9c:	e4 5d       	subi	r30, 0xD4	; 212
    1e9e:	fb 4f       	sbci	r31, 0xFB	; 251
    1ea0:	00 81       	ld	r16, Z
    1ea2:	28 85       	ldd	r18, Y+8	; 0x08
    1ea4:	39 85       	ldd	r19, Y+9	; 0x09
    1ea6:	2b 5f       	subi	r18, 0xFB	; 251
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	39 87       	std	Y+9, r19	; 0x09
    1eac:	28 87       	std	Y+8, r18	; 0x08
    1eae:	37 e8       	ldi	r19, 0x87	; 135
    1eb0:	30 93 fd 03 	sts	0x03FD, r19	; 0x8003fd <LMIC+0x120>
    1eb4:	20 2f       	mov	r18, r16
    1eb6:	20 7f       	andi	r18, 0xF0	; 240
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <decodeFrame+0x2da>
    1eba:	db c1       	rjmp	.+950    	; 0x2272 <decodeFrame+0x690>
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <decodeFrame+0x2e0>
    1ec0:	d8 c1       	rjmp	.+944    	; 0x2272 <decodeFrame+0x690>
    1ec2:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <LMIC+0x9b>
    1ec6:	30 91 79 03 	lds	r19, 0x0379	; 0x800379 <LMIC+0x9c>
    1eca:	20 95       	com	r18
    1ecc:	30 95       	com	r19
    1ece:	28 23       	and	r18, r24
    1ed0:	39 23       	and	r19, r25
    1ed2:	23 2b       	or	r18, r19
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <decodeFrame+0x2f6>
    1ed6:	cd c1       	rjmp	.+922    	; 0x2272 <decodeFrame+0x690>
    1ed8:	ad ed       	ldi	r26, 0xDD	; 221
    1eda:	b2 e0       	ldi	r27, 0x02	; 2
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <decodeFrame+0x30a>
    1ee8:	44 0f       	add	r20, r20
    1eea:	55 1f       	adc	r21, r21
    1eec:	0a 94       	dec	r0
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <decodeFrame+0x306>
    1ef0:	ba 01       	movw	r22, r20
    1ef2:	68 23       	and	r22, r24
    1ef4:	79 23       	and	r23, r25
    1ef6:	67 2b       	or	r22, r23
    1ef8:	71 f0       	breq	.+28     	; 0x1f16 <decodeFrame+0x334>
    1efa:	db 96       	adiw	r26, 0x3b	; 59
    1efc:	cd 90       	ld	r12, X+
    1efe:	dd 90       	ld	r13, X+
    1f00:	ed 90       	ld	r14, X+
    1f02:	fc 90       	ld	r15, X
    1f04:	de 97       	sbiw	r26, 0x3e	; 62
    1f06:	cd 28       	or	r12, r13
    1f08:	ce 28       	or	r12, r14
    1f0a:	cf 28       	or	r12, r15
    1f0c:	21 f4       	brne	.+8      	; 0x1f16 <decodeFrame+0x334>
    1f0e:	40 95       	com	r20
    1f10:	50 95       	com	r21
    1f12:	84 23       	and	r24, r20
    1f14:	95 23       	and	r25, r21
    1f16:	2f 5f       	subi	r18, 0xFF	; 255
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	14 96       	adiw	r26, 0x04	; 4
    1f1c:	20 31       	cpi	r18, 0x10	; 16
    1f1e:	31 05       	cpc	r19, r1
    1f20:	f9 f6       	brne	.-66     	; 0x1ee0 <decodeFrame+0x2fe>
    1f22:	90 93 79 03 	sts	0x0379, r25	; 0x800379 <LMIC+0x9c>
    1f26:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <LMIC+0x9b>
    1f2a:	81 2f       	mov	r24, r17
    1f2c:	82 95       	swap	r24
    1f2e:	8f 70       	andi	r24, 0x0F	; 15
    1f30:	e8 2f       	mov	r30, r24
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	e9 57       	subi	r30, 0x79	; 121
    1f36:	fc 4f       	sbci	r31, 0xFC	; 252
    1f38:	e4 91       	lpm	r30, Z
    1f3a:	ef 3f       	cpi	r30, 0xFF	; 255
    1f3c:	29 f4       	brne	.+10     	; 0x1f48 <decodeFrame+0x366>
    1f3e:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <LMIC+0x120>
    1f42:	9d 7f       	andi	r25, 0xFD	; 253
    1f44:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <LMIC+0x120>
    1f48:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <LMIC+0x120>
    1f4c:	9f 77       	andi	r25, 0x7F	; 127
    1f4e:	97 30       	cpi	r25, 0x07	; 7
    1f50:	59 f4       	brne	.+22     	; 0x1f68 <decodeFrame+0x386>
    1f52:	0f 70       	andi	r16, 0x0F	; 15
    1f54:	00 93 86 03 	sts	0x0386, r16	; 0x800386 <LMIC+0xa9>
    1f58:	1f 70       	andi	r17, 0x0F	; 15
    1f5a:	e1 2f       	mov	r30, r17
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	ea 58       	subi	r30, 0x8A	; 138
    1f60:	fc 4f       	sbci	r31, 0xFC	; 252
    1f62:	64 91       	lpm	r22, Z
    1f64:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <setDrTxpow.isra.1>
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <LMIC+0x11d>
    1f6e:	6c cf       	rjmp	.-296    	; 0x1e48 <decodeFrame+0x266>
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <LMIC+0x121>
    1f76:	a8 85       	ldd	r26, Y+8	; 0x08
    1f78:	b9 85       	ldd	r27, Y+9	; 0x09
    1f7a:	11 96       	adiw	r26, 0x01	; 1
    1f7c:	ab c0       	rjmp	.+342    	; 0x20d4 <decodeFrame+0x4f2>
    1f7e:	e8 85       	ldd	r30, Y+8	; 0x08
    1f80:	f9 85       	ldd	r31, Y+9	; 0x09
    1f82:	e7 5d       	subi	r30, 0xD7	; 215
    1f84:	fb 4f       	sbci	r31, 0xFB	; 251
    1f86:	10 81       	ld	r17, Z
    1f88:	1f 70       	andi	r17, 0x0F	; 15
    1f8a:	88 85       	ldd	r24, Y+8	; 0x08
    1f8c:	99 85       	ldd	r25, Y+9	; 0x09
    1f8e:	86 5d       	subi	r24, 0xD6	; 214
    1f90:	9b 4f       	sbci	r25, 0xFB	; 251
    1f92:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <convFreq>
    1f96:	e1 2f       	mov	r30, r17
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	e9 57       	subi	r30, 0x79	; 121
    1f9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f9e:	e4 91       	lpm	r30, Z
    1fa0:	ef 3f       	cpi	r30, 0xFF	; 255
    1fa2:	49 f0       	breq	.+18     	; 0x1fb6 <decodeFrame+0x3d4>
    1fa4:	b2 e8       	ldi	r27, 0x82	; 130
    1fa6:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <LMIC+0x12b>
    1faa:	61 15       	cp	r22, r1
    1fac:	71 05       	cpc	r23, r1
    1fae:	81 05       	cpc	r24, r1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	59 f0       	breq	.+22     	; 0x1fca <decodeFrame+0x3e8>
    1fb4:	62 c1       	rjmp	.+708    	; 0x227a <decodeFrame+0x698>
    1fb6:	30 e8       	ldi	r19, 0x80	; 128
    1fb8:	30 93 08 04 	sts	0x0408, r19	; 0x800408 <LMIC+0x12b>
    1fbc:	67 2b       	or	r22, r23
    1fbe:	68 2b       	or	r22, r24
    1fc0:	69 2b       	or	r22, r25
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <decodeFrame+0x3e8>
    1fc4:	21 e8       	ldi	r18, 0x81	; 129
    1fc6:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <LMIC+0x12b>
    1fca:	88 85       	ldd	r24, Y+8	; 0x08
    1fcc:	99 85       	ldd	r25, Y+9	; 0x09
    1fce:	05 96       	adiw	r24, 0x05	; 5
    1fd0:	fb c0       	rjmp	.+502    	; 0x21c8 <decodeFrame+0x5e6>
    1fd2:	e8 85       	ldd	r30, Y+8	; 0x08
    1fd4:	f9 85       	ldd	r31, Y+9	; 0x09
    1fd6:	e7 5d       	subi	r30, 0xD7	; 215
    1fd8:	fb 4f       	sbci	r31, 0xFB	; 251
    1fda:	20 81       	ld	r18, Z
    1fdc:	2f 3f       	cpi	r18, 0xFF	; 255
    1fde:	49 f4       	brne	.+18     	; 0x1ff2 <decodeFrame+0x410>
    1fe0:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    1fe4:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    1fe8:	80 64       	ori	r24, 0x40	; 64
    1fea:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    1fee:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    1ff2:	2f 70       	andi	r18, 0x0F	; 15
    1ff4:	20 93 7b 03 	sts	0x037B, r18	; 0x80037b <LMIC+0x9e>
    1ff8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    1ffc:	60 93 7c 03 	sts	0x037C, r22	; 0x80037c <LMIC+0x9f>
    2000:	70 93 7d 03 	sts	0x037D, r23	; 0x80037d <LMIC+0xa0>
    2004:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <LMIC+0xa1>
    2008:	90 93 7f 03 	sts	0x037F, r25	; 0x80037f <LMIC+0xa2>
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <LMIC+0x124>
    2012:	a8 85       	ldd	r26, Y+8	; 0x08
    2014:	b9 85       	ldd	r27, Y+9	; 0x09
    2016:	12 96       	adiw	r26, 0x02	; 2
    2018:	5d c0       	rjmp	.+186    	; 0x20d4 <decodeFrame+0x4f2>
    201a:	e8 85       	ldd	r30, Y+8	; 0x08
    201c:	f9 85       	ldd	r31, Y+9	; 0x09
    201e:	e7 5d       	subi	r30, 0xD7	; 215
    2020:	fb 4f       	sbci	r31, 0xFB	; 251
    2022:	d0 80       	ld	r13, Z
    2024:	88 85       	ldd	r24, Y+8	; 0x08
    2026:	99 85       	ldd	r25, Y+9	; 0x09
    2028:	86 5d       	subi	r24, 0xD6	; 214
    202a:	9b 4f       	sbci	r25, 0xFB	; 251
    202c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <convFreq>
    2030:	ab 01       	movw	r20, r22
    2032:	bc 01       	movw	r22, r24
    2034:	e8 85       	ldd	r30, Y+8	; 0x08
    2036:	f9 85       	ldd	r31, Y+9	; 0x09
    2038:	e3 5d       	subi	r30, 0xD3	; 211
    203a:	fb 4f       	sbci	r31, 0xFB	; 251
    203c:	e0 81       	ld	r30, Z
    203e:	b0 e8       	ldi	r27, 0x80	; 128
    2040:	b0 93 02 04 	sts	0x0402, r27	; 0x800402 <LMIC+0x125>
    2044:	41 15       	cp	r20, r1
    2046:	51 05       	cpc	r21, r1
    2048:	61 05       	cpc	r22, r1
    204a:	71 05       	cpc	r23, r1
    204c:	21 f1       	breq	.+72     	; 0x2096 <decodeFrame+0x4b4>
    204e:	8e 2f       	mov	r24, r30
    2050:	82 95       	swap	r24
    2052:	8f 70       	andi	r24, 0x0F	; 15
    2054:	2f e0       	ldi	r18, 0x0F	; 15
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	28 1b       	sub	r18, r24
    205a:	31 09       	sbc	r19, r1
    205c:	c9 01       	movw	r24, r18
    205e:	2f ef       	ldi	r18, 0xFF	; 255
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <decodeFrame+0x486>
    2064:	36 95       	lsr	r19
    2066:	27 95       	ror	r18
    2068:	8a 95       	dec	r24
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <decodeFrame+0x482>
    206c:	ef 70       	andi	r30, 0x0F	; 15
    206e:	8f ef       	ldi	r24, 0xFF	; 255
    2070:	9f ef       	ldi	r25, 0xFF	; 255
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <decodeFrame+0x496>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	ea 95       	dec	r30
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <decodeFrame+0x492>
    207c:	28 23       	and	r18, r24
    207e:	39 23       	and	r19, r25
    2080:	0f ef       	ldi	r16, 0xFF	; 255
    2082:	8d 2d       	mov	r24, r13
    2084:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <LMIC_setupChannel>
    2088:	88 23       	and	r24, r24
    208a:	29 f0       	breq	.+10     	; 0x2096 <decodeFrame+0x4b4>
    208c:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <LMIC+0x125>
    2090:	83 60       	ori	r24, 0x03	; 3
    2092:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <LMIC+0x125>
    2096:	88 85       	ldd	r24, Y+8	; 0x08
    2098:	99 85       	ldd	r25, Y+9	; 0x09
    209a:	06 96       	adiw	r24, 0x06	; 6
    209c:	95 c0       	rjmp	.+298    	; 0x21c8 <decodeFrame+0x5e6>
    209e:	88 85       	ldd	r24, Y+8	; 0x08
    20a0:	99 85       	ldd	r25, Y+9	; 0x09
    20a2:	87 5d       	subi	r24, 0xD7	; 215
    20a4:	9b 4f       	sbci	r25, 0xFB	; 251
    20a6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <convFreq>
    20aa:	61 15       	cp	r22, r1
    20ac:	71 05       	cpc	r23, r1
    20ae:	81 05       	cpc	r24, r1
    20b0:	91 05       	cpc	r25, r1
    20b2:	51 f0       	breq	.+20     	; 0x20c8 <decodeFrame+0x4e6>
    20b4:	60 93 18 04 	sts	0x0418, r22	; 0x800418 <LMIC+0x13b>
    20b8:	70 93 19 04 	sts	0x0419, r23	; 0x800419 <LMIC+0x13c>
    20bc:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <LMIC+0x13d>
    20c0:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <LMIC+0x13e>
    20c4:	81 e8       	ldi	r24, 0x81	; 129
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <decodeFrame+0x4e8>
    20c8:	80 e8       	ldi	r24, 0x80	; 128
    20ca:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <LMIC+0x12e>
    20ce:	a8 85       	ldd	r26, Y+8	; 0x08
    20d0:	b9 85       	ldd	r27, Y+9	; 0x09
    20d2:	14 96       	adiw	r26, 0x04	; 4
    20d4:	b9 87       	std	Y+9, r27	; 0x09
    20d6:	a8 87       	std	Y+8, r26	; 0x08
    20d8:	b7 ce       	rjmp	.-658    	; 0x1e48 <decodeFrame+0x266>
    20da:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    20de:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    20e2:	81 fd       	sbrc	r24, 1
    20e4:	6e c0       	rjmp	.+220    	; 0x21c2 <decodeFrame+0x5e0>
    20e6:	e8 85       	ldd	r30, Y+8	; 0x08
    20e8:	f9 85       	ldd	r31, Y+9	; 0x09
    20ea:	e5 5d       	subi	r30, 0xD5	; 213
    20ec:	fb 4f       	sbci	r31, 0xFB	; 251
    20ee:	20 81       	ld	r18, Z
    20f0:	20 93 60 04 	sts	0x0460, r18	; 0x800460 <LMIC+0x183>
    20f4:	82 60       	ori	r24, 0x02	; 2
    20f6:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    20fa:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    20fe:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <LMIC+0x12d>
    2102:	81 11       	cpse	r24, r1
    2104:	06 c0       	rjmp	.+12     	; 0x2112 <decodeFrame+0x530>
    2106:	63 ee       	ldi	r22, 0xE3	; 227
    2108:	74 e0       	ldi	r23, 0x04	; 4
    210a:	84 e5       	ldi	r24, 0x54	; 84
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    2112:	e8 85       	ldd	r30, Y+8	; 0x08
    2114:	f9 85       	ldd	r31, Y+9	; 0x09
    2116:	e7 5d       	subi	r30, 0xD7	; 215
    2118:	fb 4f       	sbci	r31, 0xFB	; 251
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	be e1       	ldi	r27, 0x1E	; 30
    2120:	b8 9f       	mul	r27, r24
    2122:	b0 01       	movw	r22, r0
    2124:	b9 9f       	mul	r27, r25
    2126:	70 0d       	add	r23, r0
    2128:	11 24       	eor	r1, r1
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	24 e2       	ldi	r18, 0x24	; 36
    2130:	34 ef       	ldi	r19, 0xF4	; 244
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	0e 94 ae 27 	call	0x4f5c	; 0x4f5c <__umulsidi3>
    213a:	e8 ee       	ldi	r30, 0xE8	; 232
    213c:	ae 2e       	mov	r10, r30
    213e:	f3 e0       	ldi	r31, 0x03	; 3
    2140:	bf 2e       	mov	r11, r31
    2142:	c1 2c       	mov	r12, r1
    2144:	d1 2c       	mov	r13, r1
    2146:	e1 2c       	mov	r14, r1
    2148:	f1 2c       	mov	r15, r1
    214a:	00 e0       	ldi	r16, 0x00	; 0
    214c:	10 e0       	ldi	r17, 0x00	; 0
    214e:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <__divdi3>
    2152:	59 01       	movw	r10, r18
    2154:	6a 01       	movw	r12, r20
    2156:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <LMIC+0x4>
    215a:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <LMIC+0x5>
    215e:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <LMIC+0x6>
    2162:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <LMIC+0x7>
    2166:	8a 0d       	add	r24, r10
    2168:	9b 1d       	adc	r25, r11
    216a:	ac 1d       	adc	r26, r12
    216c:	bd 1d       	adc	r27, r13
    216e:	ac 01       	movw	r20, r24
    2170:	bd 01       	movw	r22, r26
    2172:	46 55       	subi	r20, 0x56	; 86
    2174:	5e 40       	sbci	r21, 0x0E	; 14
    2176:	6a 47       	sbci	r22, 0x7A	; 122
    2178:	71 09       	sbc	r23, r1
    217a:	40 93 66 04 	sts	0x0466, r20	; 0x800466 <LMIC+0x189>
    217e:	50 93 67 04 	sts	0x0467, r21	; 0x800467 <LMIC+0x18a>
    2182:	60 93 68 04 	sts	0x0468, r22	; 0x800468 <LMIC+0x18b>
    2186:	70 93 69 04 	sts	0x0469, r23	; 0x800469 <LMIC+0x18c>
    218a:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <LMIC+0xaf>
    218e:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <LMIC+0xae>
    2192:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <LMIC+0xb3>
    2196:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <LMIC+0xb2>
    219a:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <LMIC+0x12c>
    219e:	2c e0       	ldi	r18, 0x0C	; 12
    21a0:	20 93 6c 04 	sts	0x046C, r18	; 0x80046c <LMIC+0x18f>
    21a4:	33 e1       	ldi	r19, 0x13	; 19
    21a6:	30 93 61 04 	sts	0x0461, r19	; 0x800461 <LMIC+0x184>
    21aa:	86 5d       	subi	r24, 0xD6	; 214
    21ac:	91 40       	sbci	r25, 0x01	; 1
    21ae:	a1 09       	sbc	r26, r1
    21b0:	b1 09       	sbc	r27, r1
    21b2:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <LMIC+0x185>
    21b6:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <LMIC+0x186>
    21ba:	a0 93 64 04 	sts	0x0464, r26	; 0x800464 <LMIC+0x187>
    21be:	b0 93 65 04 	sts	0x0465, r27	; 0x800465 <LMIC+0x188>
    21c2:	88 85       	ldd	r24, Y+8	; 0x08
    21c4:	99 85       	ldd	r25, Y+9	; 0x09
    21c6:	04 96       	adiw	r24, 0x04	; 4
    21c8:	99 87       	std	Y+9, r25	; 0x09
    21ca:	88 87       	std	Y+8, r24	; 0x08
    21cc:	3d ce       	rjmp	.-902    	; 0x1e48 <decodeFrame+0x266>
    21ce:	8e 81       	ldd	r24, Y+6	; 0x06
    21d0:	9f 81       	ldd	r25, Y+7	; 0x07
    21d2:	89 2b       	or	r24, r25
    21d4:	31 f5       	brne	.+76     	; 0x2222 <decodeFrame+0x640>
    21d6:	a9 81       	ldd	r26, Y+1	; 0x01
    21d8:	ba 81       	ldd	r27, Y+2	; 0x02
    21da:	af 3f       	cpi	r26, 0xFF	; 255
    21dc:	2f ef       	ldi	r18, 0xFF	; 255
    21de:	b2 07       	cpc	r27, r18
    21e0:	01 f1       	breq	.+64     	; 0x2222 <decodeFrame+0x640>
    21e2:	51 01       	movw	r10, r2
    21e4:	a8 18       	sub	r10, r8
    21e6:	b9 08       	sbc	r11, r9
    21e8:	1a 14       	cp	r1, r10
    21ea:	1b 04       	cpc	r1, r11
    21ec:	d4 f4       	brge	.+52     	; 0x2222 <decodeFrame+0x640>
    21ee:	c4 01       	movw	r24, r8
    21f0:	80 5e       	subi	r24, 0xE0	; 224
    21f2:	9b 4f       	sbci	r25, 0xFB	; 251
    21f4:	6c 01       	movw	r12, r24
    21f6:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <LMIC+0x10f>
    21fa:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <LMIC+0x110>
    21fe:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <LMIC+0x111>
    2202:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <LMIC+0x112>
    2206:	ab 2b       	or	r26, r27
    2208:	19 f4       	brne	.+6      	; 0x2210 <decodeFrame+0x62e>
    220a:	8c ec       	ldi	r24, 0xCC	; 204
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <decodeFrame+0x632>
    2210:	8c ed       	ldi	r24, 0xDC	; 220
    2212:	93 e0       	ldi	r25, 0x03	; 3
    2214:	ee 24       	eor	r14, r14
    2216:	e3 94       	inc	r14
    2218:	f1 2c       	mov	r15, r1
    221a:	93 01       	movw	r18, r6
    221c:	82 01       	movw	r16, r4
    221e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <aes_cipher.part.3>
    2222:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <LMIC+0x13f>
    2226:	88 23       	and	r24, r24
    2228:	59 f0       	breq	.+22     	; 0x2240 <decodeFrame+0x65e>
    222a:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <LMIC+0x140>
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	95 ff       	sbrs	r25, 5
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <decodeFrame+0x656>
    2234:	90 e8       	ldi	r25, 0x80	; 128
    2236:	01 c0       	rjmp	.+2      	; 0x223a <decodeFrame+0x658>
    2238:	90 e4       	ldi	r25, 0x40	; 64
    223a:	89 2b       	or	r24, r25
    223c:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <LMIC+0x140>
    2240:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <LMIC+0x140>
    2244:	a9 81       	ldd	r26, Y+1	; 0x01
    2246:	ba 81       	ldd	r27, Y+2	; 0x02
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	41 f4       	brne	.+16     	; 0x225c <decodeFrame+0x67a>
    224c:	80 62       	ori	r24, 0x20	; 32
    224e:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <LMIC+0x140>
    2252:	80 92 1e 04 	sts	0x041E, r8	; 0x80041e <LMIC+0x141>
    2256:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    225a:	09 c0       	rjmp	.+18     	; 0x226e <decodeFrame+0x68c>
    225c:	80 61       	ori	r24, 0x10	; 16
    225e:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <LMIC+0x140>
    2262:	80 92 1e 04 	sts	0x041E, r8	; 0x80041e <LMIC+0x141>
    2266:	82 2d       	mov	r24, r2
    2268:	88 19       	sub	r24, r8
    226a:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <LMIC+0x142>
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	12 c0       	rjmp	.+36     	; 0x2296 <decodeFrame+0x6b4>
    2272:	86 e8       	ldi	r24, 0x86	; 134
    2274:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <LMIC+0x120>
    2278:	58 ce       	rjmp	.-848    	; 0x1f2a <decodeFrame+0x348>
    227a:	a3 e8       	ldi	r26, 0x83	; 131
    227c:	a0 93 08 04 	sts	0x0408, r26	; 0x800408 <LMIC+0x12b>
    2280:	10 93 03 04 	sts	0x0403, r17	; 0x800403 <LMIC+0x126>
    2284:	60 93 04 04 	sts	0x0404, r22	; 0x800404 <LMIC+0x127>
    2288:	70 93 05 04 	sts	0x0405, r23	; 0x800405 <LMIC+0x128>
    228c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <LMIC+0x129>
    2290:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <LMIC+0x12a>
    2294:	9a ce       	rjmp	.-716    	; 0x1fca <decodeFrame+0x3e8>
    2296:	29 96       	adiw	r28, 0x09	; 9
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	1f 91       	pop	r17
    22a8:	0f 91       	pop	r16
    22aa:	ff 90       	pop	r15
    22ac:	ef 90       	pop	r14
    22ae:	df 90       	pop	r13
    22b0:	cf 90       	pop	r12
    22b2:	bf 90       	pop	r11
    22b4:	af 90       	pop	r10
    22b6:	9f 90       	pop	r9
    22b8:	8f 90       	pop	r8
    22ba:	7f 90       	pop	r7
    22bc:	6f 90       	pop	r6
    22be:	5f 90       	pop	r5
    22c0:	4f 90       	pop	r4
    22c2:	3f 90       	pop	r3
    22c4:	2f 90       	pop	r2
    22c6:	08 95       	ret

000022c8 <LMIC_disableChannel>:
    22c8:	48 2f       	mov	r20, r24
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	f9 01       	movw	r30, r18
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	e3 52       	subi	r30, 0x23	; 35
    22da:	fd 4f       	sbci	r31, 0xFD	; 253
    22dc:	13 ae       	std	Z+59, r1	; 0x3b
    22de:	14 ae       	std	Z+60, r1	; 0x3c
    22e0:	15 ae       	std	Z+61, r1	; 0x3d
    22e2:	16 ae       	std	Z+62, r1	; 0x3e
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	f9 01       	movw	r30, r18
    22ea:	e8 5a       	subi	r30, 0xA8	; 168
    22ec:	fc 4f       	sbci	r31, 0xFC	; 252
    22ee:	11 82       	std	Z+1, r1	; 0x01
    22f0:	10 82       	st	Z, r1
    22f2:	e8 e7       	ldi	r30, 0x78	; 120
    22f4:	f3 e0       	ldi	r31, 0x03	; 3
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <LMIC_disableChannel+0x38>
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	4a 95       	dec	r20
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <LMIC_disableChannel+0x34>
    2304:	80 95       	com	r24
    2306:	90 95       	com	r25
    2308:	20 81       	ld	r18, Z
    230a:	31 81       	ldd	r19, Z+1	; 0x01
    230c:	82 23       	and	r24, r18
    230e:	93 23       	and	r25, r19
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
    2314:	08 95       	ret

00002316 <LMIC_startJoining>:
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <LMIC+0x10f>
    2322:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <LMIC+0x110>
    2326:	a0 91 ee 03 	lds	r26, 0x03EE	; 0x8003ee <LMIC+0x111>
    232a:	b0 91 ef 03 	lds	r27, 0x03EF	; 0x8003ef <LMIC+0x112>
    232e:	89 2b       	or	r24, r25
    2330:	8a 2b       	or	r24, r26
    2332:	8b 2b       	or	r24, r27
    2334:	09 f0       	breq	.+2      	; 0x2338 <LMIC_startJoining+0x22>
    2336:	64 c0       	rjmp	.+200    	; 0x2400 <LMIC_startJoining+0xea>
    2338:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    233c:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    2340:	80 79       	andi	r24, 0x90	; 144
    2342:	99 27       	eor	r25, r25
    2344:	89 2b       	or	r24, r25
    2346:	31 f0       	breq	.+12     	; 0x2354 <LMIC_startJoining+0x3e>
    2348:	69 e3       	ldi	r22, 0x39	; 57
    234a:	77 e0       	ldi	r23, 0x07	; 7
    234c:	84 e5       	ldi	r24, 0x54	; 84
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    2354:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <LMIC+0x9e>
    2358:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    235c:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    2360:	8e 7d       	andi	r24, 0xDE	; 222
    2362:	97 7e       	andi	r25, 0xE7	; 231
    2364:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    2368:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    236c:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <LMIC+0x13f>
    2370:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <LMIC+0xad>
    2374:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	0e 94 08 27 	call	0x4e10	; 0x4e10 <__udivmodqi4>
    237e:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <LMIC+0x9d>
    2382:	8e e0       	ldi	r24, 0x0E	; 14
    2384:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <LMIC+0xaa>
    2388:	85 e0       	ldi	r24, 0x05	; 5
    238a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <LMIC+0xab>
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	0e 94 df 09 	call	0x13be	; 0x13be <initDefaultChannels>
    2394:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    2398:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    239c:	93 ff       	sbrs	r25, 3
    239e:	06 c0       	rjmp	.+12     	; 0x23ac <LMIC_startJoining+0x96>
    23a0:	6a eb       	ldi	r22, 0xBA	; 186
    23a2:	72 e0       	ldi	r23, 0x02	; 2
    23a4:	84 e5       	ldi	r24, 0x54	; 84
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    23ac:	c0 90 fc 02 	lds	r12, 0x02FC	; 0x8002fc <LMIC+0x1f>
    23b0:	d0 90 fd 02 	lds	r13, 0x02FD	; 0x8002fd <LMIC+0x20>
    23b4:	e0 90 fe 02 	lds	r14, 0x02FE	; 0x8002fe <LMIC+0x21>
    23b8:	f0 90 ff 02 	lds	r15, 0x02FF	; 0x8002ff <LMIC+0x22>
    23bc:	88 e0       	ldi	r24, 0x08	; 8
    23be:	0e 94 09 08 	call	0x1012	; 0x1012 <rndDelay>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8c 0d       	add	r24, r12
    23c8:	9d 1d       	adc	r25, r13
    23ca:	ae 1d       	adc	r26, r14
    23cc:	bf 1d       	adc	r27, r15
    23ce:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <LMIC>
    23d2:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <LMIC+0x1>
    23d6:	a0 93 df 02 	sts	0x02DF, r26	; 0x8002df <LMIC+0x2>
    23da:	b0 93 e0 02 	sts	0x02E0, r27	; 0x8002e0 <LMIC+0x3>
    23de:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    23e2:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    23e6:	84 60       	ori	r24, 0x04	; 4
    23e8:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    23ec:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    23f0:	68 e1       	ldi	r22, 0x18	; 24
    23f2:	7b e1       	ldi	r23, 0x1B	; 27
    23f4:	80 ef       	ldi	r24, 0xF0	; 240
    23f6:	92 e0       	ldi	r25, 0x02	; 2
    23f8:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <os_setCallback>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <LMIC_startJoining+0xec>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	ff 90       	pop	r15
    2404:	ef 90       	pop	r14
    2406:	df 90       	pop	r13
    2408:	cf 90       	pop	r12
    240a:	08 95       	ret

0000240c <engineUpdate>:
    240c:	2f 92       	push	r2
    240e:	3f 92       	push	r3
    2410:	4f 92       	push	r4
    2412:	5f 92       	push	r5
    2414:	6f 92       	push	r6
    2416:	7f 92       	push	r7
    2418:	8f 92       	push	r8
    241a:	9f 92       	push	r9
    241c:	af 92       	push	r10
    241e:	bf 92       	push	r11
    2420:	cf 92       	push	r12
    2422:	df 92       	push	r13
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	62 97       	sbiw	r28, 0x12	; 18
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    2444:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    2448:	9c 01       	movw	r18, r24
    244a:	21 7c       	andi	r18, 0xC1	; 193
    244c:	33 27       	eor	r19, r19
    244e:	23 2b       	or	r18, r19
    2450:	09 f0       	breq	.+2      	; 0x2454 <engineUpdate+0x48>
    2452:	80 c5       	rjmp	.+2816   	; 0x2f54 <engineUpdate+0xb48>
    2454:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <LMIC+0x10f>
    2458:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <LMIC+0x110>
    245c:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <LMIC+0x111>
    2460:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <LMIC+0x112>
    2464:	45 2b       	or	r20, r21
    2466:	46 2b       	or	r20, r22
    2468:	47 2b       	or	r20, r23
    246a:	e1 f4       	brne	.+56     	; 0x24a4 <engineUpdate+0x98>
    246c:	82 fd       	sbrc	r24, 2
    246e:	1a c0       	rjmp	.+52     	; 0x24a4 <engineUpdate+0x98>
    2470:	62 96       	adiw	r28, 0x12	; 18
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	7f 90       	pop	r7
    2496:	6f 90       	pop	r6
    2498:	5f 90       	pop	r5
    249a:	4f 90       	pop	r4
    249c:	3f 90       	pop	r3
    249e:	2f 90       	pop	r2
    24a0:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <LMIC_startJoining>
    24a4:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    24a8:	2b 01       	movw	r4, r22
    24aa:	3c 01       	movw	r6, r24
    24ac:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    24b0:	81 ff       	sbrs	r24, 1
    24b2:	30 c0       	rjmp	.+96     	; 0x2514 <engineUpdate+0x108>
    24b4:	40 91 62 04 	lds	r20, 0x0462	; 0x800462 <LMIC+0x185>
    24b8:	50 91 63 04 	lds	r21, 0x0463	; 0x800463 <LMIC+0x186>
    24bc:	60 91 64 04 	lds	r22, 0x0464	; 0x800464 <LMIC+0x187>
    24c0:	70 91 65 04 	lds	r23, 0x0465	; 0x800465 <LMIC+0x188>
    24c4:	d3 01       	movw	r26, r6
    24c6:	c2 01       	movw	r24, r4
    24c8:	83 58       	subi	r24, 0x83	; 131
    24ca:	9f 4f       	sbci	r25, 0xFF	; 255
    24cc:	af 4f       	sbci	r26, 0xFF	; 255
    24ce:	bf 4f       	sbci	r27, 0xFF	; 255
    24d0:	84 1b       	sub	r24, r20
    24d2:	95 0b       	sbc	r25, r21
    24d4:	a6 0b       	sbc	r26, r22
    24d6:	b7 0b       	sbc	r27, r23
    24d8:	18 16       	cp	r1, r24
    24da:	19 06       	cpc	r1, r25
    24dc:	1a 06       	cpc	r1, r26
    24de:	1b 06       	cpc	r1, r27
    24e0:	34 f4       	brge	.+12     	; 0x24ee <engineUpdate+0xe2>
    24e2:	68 e0       	ldi	r22, 0x08	; 8
    24e4:	78 e0       	ldi	r23, 0x08	; 8
    24e6:	84 e5       	ldi	r24, 0x54	; 84
    24e8:	91 e0       	ldi	r25, 0x01	; 1
    24ea:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    24ee:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <LMIC+0x185>
    24f2:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <LMIC+0x186>
    24f6:	a0 91 64 04 	lds	r26, 0x0464	; 0x800464 <LMIC+0x187>
    24fa:	b0 91 65 04 	lds	r27, 0x0465	; 0x800465 <LMIC+0x188>
    24fe:	8c 01       	movw	r16, r24
    2500:	9d 01       	movw	r18, r26
    2502:	0d 57       	subi	r16, 0x7D	; 125
    2504:	11 09       	sbc	r17, r1
    2506:	21 09       	sbc	r18, r1
    2508:	31 09       	sbc	r19, r1
    250a:	09 83       	std	Y+1, r16	; 0x01
    250c:	1a 83       	std	Y+2, r17	; 0x02
    250e:	2b 83       	std	Y+3, r18	; 0x03
    2510:	3c 83       	std	Y+4, r19	; 0x04
    2512:	04 c0       	rjmp	.+8      	; 0x251c <engineUpdate+0x110>
    2514:	19 82       	std	Y+1, r1	; 0x01
    2516:	1a 82       	std	Y+2, r1	; 0x02
    2518:	1b 82       	std	Y+3, r1	; 0x03
    251a:	1c 82       	std	Y+4, r1	; 0x04
    251c:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <LMIC+0xa7>
    2520:	30 91 85 03 	lds	r19, 0x0385	; 0x800385 <LMIC+0xa8>
    2524:	3a 8b       	std	Y+18, r19	; 0x12
    2526:	29 8b       	std	Y+17, r18	; 0x11
    2528:	c9 01       	movw	r24, r18
    252a:	8c 73       	andi	r24, 0x3C	; 60
    252c:	99 27       	eor	r25, r25
    252e:	89 2b       	or	r24, r25
    2530:	09 f4       	brne	.+2      	; 0x2534 <engineUpdate+0x128>
    2532:	ca c3       	rjmp	.+1940   	; 0x2cc8 <engineUpdate+0x8bc>
    2534:	19 01       	movw	r2, r18
    2536:	34 e2       	ldi	r19, 0x24	; 36
    2538:	23 22       	and	r2, r19
    253a:	33 24       	eor	r3, r3
    253c:	49 89       	ldd	r20, Y+17	; 0x11
    253e:	5a 89       	ldd	r21, Y+18	; 0x12
    2540:	53 ff       	sbrs	r21, 3
    2542:	b9 c0       	rjmp	.+370    	; 0x26b6 <engineUpdate+0x2aa>
    2544:	60 91 78 03 	lds	r22, 0x0378	; 0x800378 <LMIC+0x9b>
    2548:	70 91 79 03 	lds	r23, 0x0379	; 0x800379 <LMIC+0x9c>
    254c:	7a 87       	std	Y+10, r23	; 0x0a
    254e:	69 87       	std	Y+9, r22	; 0x09
    2550:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <LMIC+0xab>
    2554:	8f 70       	andi	r24, 0x0F	; 15
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	d9 01       	movw	r26, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <engineUpdate+0x156>
    255e:	aa 0f       	add	r26, r26
    2560:	bb 1f       	adc	r27, r27
    2562:	8a 95       	dec	r24
    2564:	e2 f7       	brpl	.-8      	; 0x255e <engineUpdate+0x152>
    2566:	bc 87       	std	Y+12, r27	; 0x0c
    2568:	ab 87       	std	Y+11, r26	; 0x0b
    256a:	af e0       	ldi	r26, 0x0F	; 15
    256c:	93 01       	movw	r18, r6
    256e:	82 01       	movw	r16, r4
    2570:	1e 52       	subi	r17, 0x2E	; 46
    2572:	26 4b       	sbci	r18, 0xB6	; 182
    2574:	34 49       	sbci	r19, 0x94	; 148
    2576:	0d 87       	std	Y+13, r16	; 0x0d
    2578:	1e 87       	std	Y+14, r17	; 0x0e
    257a:	2f 87       	std	Y+15, r18	; 0x0f
    257c:	38 8b       	std	Y+16, r19	; 0x10
    257e:	cd 84       	ldd	r12, Y+13	; 0x0d
    2580:	de 84       	ldd	r13, Y+14	; 0x0e
    2582:	ef 84       	ldd	r14, Y+15	; 0x0f
    2584:	f8 88       	ldd	r15, Y+16	; 0x10
    2586:	ed ed       	ldi	r30, 0xDD	; 221
    2588:	f2 e0       	ldi	r31, 0x02	; 2
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	2a 2f       	mov	r18, r26
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	a9 01       	movw	r20, r18
    2596:	08 2e       	mov	r0, r24
    2598:	02 c0       	rjmp	.+4      	; 0x259e <engineUpdate+0x192>
    259a:	55 95       	asr	r21
    259c:	47 95       	ror	r20
    259e:	0a 94       	dec	r0
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <engineUpdate+0x18e>
    25a2:	40 ff       	sbrs	r20, 0
    25a4:	12 c0       	rjmp	.+36     	; 0x25ca <engineUpdate+0x1be>
    25a6:	47 8d       	ldd	r20, Z+31	; 0x1f
    25a8:	50 a1       	ldd	r21, Z+32	; 0x20
    25aa:	61 a1       	ldd	r22, Z+33	; 0x21
    25ac:	72 a1       	ldd	r23, Z+34	; 0x22
    25ae:	46 01       	movw	r8, r12
    25b0:	57 01       	movw	r10, r14
    25b2:	84 1a       	sub	r8, r20
    25b4:	95 0a       	sbc	r9, r21
    25b6:	a6 0a       	sbc	r10, r22
    25b8:	b7 0a       	sbc	r11, r23
    25ba:	18 14       	cp	r1, r8
    25bc:	19 04       	cpc	r1, r9
    25be:	1a 04       	cpc	r1, r10
    25c0:	1b 04       	cpc	r1, r11
    25c2:	1c f4       	brge	.+6      	; 0x25ca <engineUpdate+0x1be>
    25c4:	b8 2f       	mov	r27, r24
    25c6:	6a 01       	movw	r12, r20
    25c8:	7b 01       	movw	r14, r22
    25ca:	01 96       	adiw	r24, 0x01	; 1
    25cc:	38 96       	adiw	r30, 0x08	; 8
    25ce:	84 30       	cpi	r24, 0x04	; 4
    25d0:	91 05       	cpc	r25, r1
    25d2:	01 f7       	brne	.-64     	; 0x2594 <engineUpdate+0x188>
    25d4:	2b 2f       	mov	r18, r27
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	3e 83       	std	Y+6, r19	; 0x06
    25da:	2d 83       	std	Y+5, r18	; 0x05
    25dc:	89 01       	movw	r16, r18
    25de:	63 e0       	ldi	r22, 0x03	; 3
    25e0:	00 0f       	add	r16, r16
    25e2:	11 1f       	adc	r17, r17
    25e4:	6a 95       	dec	r22
    25e6:	e1 f7       	brne	.-8      	; 0x25e0 <engineUpdate+0x1d4>
    25e8:	f8 01       	movw	r30, r16
    25ea:	e3 52       	subi	r30, 0x23	; 35
    25ec:	fd 4f       	sbci	r31, 0xFD	; 253
    25ee:	26 8d       	ldd	r18, Z+30	; 0x1e
    25f0:	90 e1       	ldi	r25, 0x10	; 16
    25f2:	8b 2e       	mov	r8, r27
    25f4:	91 2c       	mov	r9, r1
    25f6:	a1 2c       	mov	r10, r1
    25f8:	b1 2c       	mov	r11, r1
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	82 0f       	add	r24, r18
    25fe:	80 31       	cpi	r24, 0x10	; 16
    2600:	10 f0       	brcs	.+4      	; 0x2606 <engineUpdate+0x1fa>
    2602:	81 ef       	ldi	r24, 0xF1	; 241
    2604:	82 0f       	add	r24, r18
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	08 2e       	mov	r0, r24
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <engineUpdate+0x20a>
    2612:	44 0f       	add	r20, r20
    2614:	55 1f       	adc	r21, r21
    2616:	0a 94       	dec	r0
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <engineUpdate+0x206>
    261a:	69 85       	ldd	r22, Y+9	; 0x09
    261c:	7a 85       	ldd	r23, Y+10	; 0x0a
    261e:	46 23       	and	r20, r22
    2620:	57 23       	and	r21, r23
    2622:	45 2b       	or	r20, r21
    2624:	41 f1       	breq	.+80     	; 0x2676 <engineUpdate+0x26a>
    2626:	f9 01       	movw	r30, r18
    2628:	ee 0f       	add	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	e8 5a       	subi	r30, 0xA8	; 168
    262e:	fc 4f       	sbci	r31, 0xFC	; 252
    2630:	40 81       	ld	r20, Z
    2632:	51 81       	ldd	r21, Z+1	; 0x01
    2634:	6b 85       	ldd	r22, Y+11	; 0x0b
    2636:	7c 85       	ldd	r23, Y+12	; 0x0c
    2638:	46 23       	and	r20, r22
    263a:	57 23       	and	r21, r23
    263c:	45 2b       	or	r20, r21
    263e:	d9 f0       	breq	.+54     	; 0x2676 <engineUpdate+0x26a>
    2640:	22 0f       	add	r18, r18
    2642:	33 1f       	adc	r19, r19
    2644:	22 0f       	add	r18, r18
    2646:	33 1f       	adc	r19, r19
    2648:	f9 01       	movw	r30, r18
    264a:	e3 52       	subi	r30, 0x23	; 35
    264c:	fd 4f       	sbci	r31, 0xFD	; 253
    264e:	43 ad       	ldd	r20, Z+59	; 0x3b
    2650:	54 ad       	ldd	r21, Z+60	; 0x3c
    2652:	65 ad       	ldd	r22, Z+61	; 0x3d
    2654:	76 ad       	ldd	r23, Z+62	; 0x3e
    2656:	43 70       	andi	r20, 0x03	; 3
    2658:	55 27       	eor	r21, r21
    265a:	66 27       	eor	r22, r22
    265c:	77 27       	eor	r23, r23
    265e:	84 16       	cp	r8, r20
    2660:	95 06       	cpc	r9, r21
    2662:	a6 06       	cpc	r10, r22
    2664:	b7 06       	cpc	r11, r23
    2666:	39 f4       	brne	.+14     	; 0x2676 <engineUpdate+0x26a>
    2668:	f8 01       	movw	r30, r16
    266a:	e3 52       	subi	r30, 0x23	; 35
    266c:	fd 4f       	sbci	r31, 0xFD	; 253
    266e:	86 8f       	std	Z+30, r24	; 0x1e
    2670:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <LMIC+0x9d>
    2674:	10 c0       	rjmp	.+32     	; 0x2696 <engineUpdate+0x28a>
    2676:	91 50       	subi	r25, 0x01	; 1
    2678:	11 f0       	breq	.+4      	; 0x267e <engineUpdate+0x272>
    267a:	28 2f       	mov	r18, r24
    267c:	be cf       	rjmp	.-132    	; 0x25fa <engineUpdate+0x1ee>
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0d 80       	ldd	r0, Y+5	; 0x05
    2684:	02 c0       	rjmp	.+4      	; 0x268a <engineUpdate+0x27e>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	0a 94       	dec	r0
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <engineUpdate+0x27a>
    268e:	80 95       	com	r24
    2690:	a8 23       	and	r26, r24
    2692:	09 f0       	breq	.+2      	; 0x2696 <engineUpdate+0x28a>
    2694:	74 cf       	rjmp	.-280    	; 0x257e <engineUpdate+0x172>
    2696:	c0 92 dd 02 	sts	0x02DD, r12	; 0x8002dd <LMIC>
    269a:	d0 92 de 02 	sts	0x02DE, r13	; 0x8002de <LMIC+0x1>
    269e:	e0 92 df 02 	sts	0x02DF, r14	; 0x8002df <LMIC+0x2>
    26a2:	f0 92 e0 02 	sts	0x02E0, r15	; 0x8002e0 <LMIC+0x3>
    26a6:	89 89       	ldd	r24, Y+17	; 0x11
    26a8:	9a 89       	ldd	r25, Y+18	; 0x12
    26aa:	97 7f       	andi	r25, 0xF7	; 247
    26ac:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    26b0:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <engineUpdate+0x2ba>
    26b6:	c0 90 dd 02 	lds	r12, 0x02DD	; 0x8002dd <LMIC>
    26ba:	d0 90 de 02 	lds	r13, 0x02DE	; 0x8002de <LMIC+0x1>
    26be:	e0 90 df 02 	lds	r14, 0x02DF	; 0x8002df <LMIC+0x2>
    26c2:	f0 90 e0 02 	lds	r15, 0x02E0	; 0x8002e0 <LMIC+0x3>
    26c6:	20 91 7b 03 	lds	r18, 0x037B	; 0x80037b <LMIC+0x9e>
    26ca:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    26ce:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    26d2:	21 11       	cpse	r18, r1
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <engineUpdate+0x2ce>
    26d6:	90 ff       	sbrs	r25, 0
    26d8:	12 c0       	rjmp	.+36     	; 0x26fe <engineUpdate+0x2f2>
    26da:	40 91 7c 03 	lds	r20, 0x037C	; 0x80037c <LMIC+0x9f>
    26de:	50 91 7d 03 	lds	r21, 0x037D	; 0x80037d <LMIC+0xa0>
    26e2:	60 91 7e 03 	lds	r22, 0x037E	; 0x80037e <LMIC+0xa1>
    26e6:	70 91 7f 03 	lds	r23, 0x037F	; 0x80037f <LMIC+0xa2>
    26ea:	97 01       	movw	r18, r14
    26ec:	86 01       	movw	r16, r12
    26ee:	04 1b       	sub	r16, r20
    26f0:	15 0b       	sbc	r17, r21
    26f2:	26 0b       	sbc	r18, r22
    26f4:	37 0b       	sbc	r19, r23
    26f6:	37 ff       	sbrs	r19, 7
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <engineUpdate+0x2f2>
    26fa:	6a 01       	movw	r12, r20
    26fc:	7b 01       	movw	r14, r22
    26fe:	9c 01       	movw	r18, r24
    2700:	22 70       	andi	r18, 0x02	; 2
    2702:	33 27       	eor	r19, r19
    2704:	81 ff       	sbrs	r24, 1
    2706:	27 c0       	rjmp	.+78     	; 0x2756 <engineUpdate+0x34a>
    2708:	21 14       	cp	r2, r1
    270a:	31 04       	cpc	r3, r1
    270c:	29 f4       	brne	.+10     	; 0x2718 <engineUpdate+0x30c>
    270e:	48 ed       	ldi	r20, 0xD8	; 216
    2710:	58 eb       	ldi	r21, 0xB8	; 184
    2712:	65 e0       	ldi	r22, 0x05	; 5
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	04 c0       	rjmp	.+8      	; 0x2720 <engineUpdate+0x314>
    2718:	44 e4       	ldi	r20, 0x44	; 68
    271a:	55 e9       	ldi	r21, 0x95	; 149
    271c:	68 e0       	ldi	r22, 0x08	; 8
    271e:	70 e0       	ldi	r23, 0x00	; 0
    2720:	4c 0d       	add	r20, r12
    2722:	5d 1d       	adc	r21, r13
    2724:	6e 1d       	adc	r22, r14
    2726:	7f 1d       	adc	r23, r15
    2728:	89 80       	ldd	r8, Y+1	; 0x01
    272a:	9a 80       	ldd	r9, Y+2	; 0x02
    272c:	ab 80       	ldd	r10, Y+3	; 0x03
    272e:	bc 80       	ldd	r11, Y+4	; 0x04
    2730:	48 19       	sub	r20, r8
    2732:	59 09       	sbc	r21, r9
    2734:	6a 09       	sbc	r22, r10
    2736:	7b 09       	sbc	r23, r11
    2738:	14 16       	cp	r1, r20
    273a:	15 06       	cpc	r1, r21
    273c:	16 06       	cpc	r1, r22
    273e:	17 06       	cpc	r1, r23
    2740:	54 f4       	brge	.+20     	; 0x2756 <engineUpdate+0x34a>
    2742:	40 e1       	ldi	r20, 0x10	; 16
    2744:	c5 01       	movw	r24, r10
    2746:	b4 01       	movw	r22, r8
    2748:	6c 56       	subi	r22, 0x6C	; 108
    274a:	7a 4f       	sbci	r23, 0xFA	; 250
    274c:	8d 4f       	sbci	r24, 0xFD	; 253
    274e:	9f 4f       	sbci	r25, 0xFF	; 255
    2750:	0e 94 40 08 	call	0x1080	; 0x1080 <txDelay>
    2754:	bc c2       	rjmp	.+1400   	; 0x2cce <engineUpdate+0x8c2>
    2756:	b3 01       	movw	r22, r6
    2758:	a2 01       	movw	r20, r4
    275a:	43 58       	subi	r20, 0x83	; 131
    275c:	5f 4f       	sbci	r21, 0xFF	; 255
    275e:	6f 4f       	sbci	r22, 0xFF	; 255
    2760:	7f 4f       	sbci	r23, 0xFF	; 255
    2762:	46 01       	movw	r8, r12
    2764:	57 01       	movw	r10, r14
    2766:	84 1a       	sub	r8, r20
    2768:	95 0a       	sbc	r9, r21
    276a:	a6 0a       	sbc	r10, r22
    276c:	b7 0a       	sbc	r11, r23
    276e:	b7 fe       	sbrs	r11, 7
    2770:	9e c2       	rjmp	.+1340   	; 0x2cae <engineUpdate+0x8a2>
    2772:	90 90 88 03 	lds	r9, 0x0388	; 0x800388 <LMIC+0xab>
    2776:	23 28       	or	r2, r3
    2778:	09 f4       	brne	.+2      	; 0x277c <engineUpdate+0x370>
    277a:	44 c0       	rjmp	.+136    	; 0x2804 <engineUpdate+0x3f8>
    277c:	85 ff       	sbrs	r24, 5
    277e:	0f c0       	rjmp	.+30     	; 0x279e <engineUpdate+0x392>
    2780:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <LMIC+0xad>
    2784:	81 50       	subi	r24, 0x01	; 1
    2786:	48 f0       	brcs	.+18     	; 0x279a <engineUpdate+0x38e>
    2788:	e9 2d       	mov	r30, r9
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	ea 57       	subi	r30, 0x7A	; 122
    278e:	fc 4f       	sbci	r31, 0xFC	; 252
    2790:	e4 91       	lpm	r30, Z
    2792:	ef 3f       	cpi	r30, 0xFF	; 255
    2794:	b9 f3       	breq	.-18     	; 0x2784 <engineUpdate+0x378>
    2796:	9a 94       	dec	r9
    2798:	f5 cf       	rjmp	.-22     	; 0x2784 <engineUpdate+0x378>
    279a:	80 ec       	ldi	r24, 0xC0	; 192
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <engineUpdate+0x394>
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <LMIC+0x143>
    27a4:	81 e2       	ldi	r24, 0x21	; 33
    27a6:	94 e0       	ldi	r25, 0x04	; 4
    27a8:	0e 94 3e 02 	call	0x47c	; 0x47c <os_getArtEui>
    27ac:	89 e2       	ldi	r24, 0x29	; 41
    27ae:	94 e0       	ldi	r25, 0x04	; 4
    27b0:	0e 94 3f 02 	call	0x47e	; 0x47e <os_getDevEui>
    27b4:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <LMIC+0xed>
    27b8:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <LMIC+0xee>
    27bc:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <LMIC+0x154>
    27c0:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <LMIC+0x155>
    27c4:	8d eb       	ldi	r24, 0xBD	; 189
    27c6:	92 e0       	ldi	r25, 0x02	; 2
    27c8:	0e 94 40 02 	call	0x480	; 0x480 <os_getDevKey>
    27cc:	43 e1       	ldi	r20, 0x13	; 19
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	60 e2       	ldi	r22, 0x20	; 32
    27d2:	74 e0       	ldi	r23, 0x04	; 4
    27d4:	8a e0       	ldi	r24, 0x0A	; 10
    27d6:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    27da:	ab 01       	movw	r20, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	83 e3       	ldi	r24, 0x33	; 51
    27e0:	94 e0       	ldi	r25, 0x04	; 4
    27e2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <os_wmsbf4>
    27e6:	87 e1       	ldi	r24, 0x17	; 23
    27e8:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <LMIC+0x142>
    27ec:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <LMIC+0xed>
    27f0:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <LMIC+0xee>
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <LMIC+0xee>
    27fa:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <LMIC+0xed>
    27fe:	88 ed       	ldi	r24, 0xD8	; 216
    2800:	9b e0       	ldi	r25, 0x0B	; 11
    2802:	dc c1       	rjmp	.+952    	; 0x2bbc <engineUpdate+0x7b0>
    2804:	40 91 f0 03 	lds	r20, 0x03F0	; 0x8003f0 <LMIC+0x113>
    2808:	50 91 f1 03 	lds	r21, 0x03F1	; 0x8003f1 <LMIC+0x114>
    280c:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <LMIC+0x115>
    2810:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <LMIC+0x116>
    2814:	40 38       	cpi	r20, 0x80	; 128
    2816:	5f 4f       	sbci	r21, 0xFF	; 255
    2818:	6f 4f       	sbci	r22, 0xFF	; 255
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	f0 f0       	brcs	.+60     	; 0x285a <engineUpdate+0x44e>
    281e:	60 e5       	ldi	r22, 0x50	; 80
    2820:	7c e1       	ldi	r23, 0x1C	; 28
    2822:	80 ef       	ldi	r24, 0xF0	; 240
    2824:	92 e0       	ldi	r25, 0x02	; 2
    2826:	62 96       	adiw	r28, 0x12	; 18
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	df 90       	pop	r13
    2840:	cf 90       	pop	r12
    2842:	bf 90       	pop	r11
    2844:	af 90       	pop	r10
    2846:	9f 90       	pop	r9
    2848:	8f 90       	pop	r8
    284a:	7f 90       	pop	r7
    284c:	6f 90       	pop	r6
    284e:	5f 90       	pop	r5
    2850:	4f 90       	pop	r4
    2852:	3f 90       	pop	r3
    2854:	2f 90       	pop	r2
    2856:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <os_setCallback>
    285a:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <LMIC+0x13f>
    285e:	21 11       	cpse	r18, r1
    2860:	0d c0       	rjmp	.+26     	; 0x287c <engineUpdate+0x470>
    2862:	40 91 f4 03 	lds	r20, 0x03F4	; 0x8003f4 <LMIC+0x117>
    2866:	50 91 f5 03 	lds	r21, 0x03F5	; 0x8003f5 <LMIC+0x118>
    286a:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <LMIC+0x119>
    286e:	70 91 f7 03 	lds	r23, 0x03F7	; 0x8003f7 <LMIC+0x11a>
    2872:	4f 3f       	cpi	r20, 0xFF	; 255
    2874:	5f 4f       	sbci	r21, 0xFF	; 255
    2876:	6f 4f       	sbci	r22, 0xFF	; 255
    2878:	7f 4f       	sbci	r23, 0xFF	; 255
    287a:	89 f2       	breq	.-94     	; 0x281e <engineUpdate+0x412>
    287c:	9c 01       	movw	r18, r24
    287e:	28 71       	andi	r18, 0x18	; 24
    2880:	33 27       	eor	r19, r19
    2882:	20 31       	cpi	r18, 0x10	; 16
    2884:	31 05       	cpc	r19, r1
    2886:	21 f0       	breq	.+8      	; 0x2890 <engineUpdate+0x484>
    2888:	80 90 95 03 	lds	r8, 0x0395	; 0x800395 <LMIC+0xb8>
    288c:	8d 82       	std	Y+5, r8	; 0x05
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <engineUpdate+0x486>
    2890:	1d 82       	std	Y+5, r1	; 0x05
    2892:	82 70       	andi	r24, 0x02	; 2
    2894:	94 70       	andi	r25, 0x04	; 4
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	94 40       	sbci	r25, 0x04	; 4
    289a:	89 f4       	brne	.+34     	; 0x28be <engineUpdate+0x4b2>
    289c:	80 e1       	ldi	r24, 0x10	; 16
    289e:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <LMIC+0x14b>
    28a2:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <LMIC+0x130>
    28a6:	10 e1       	ldi	r17, 0x10	; 16
    28a8:	81 9f       	mul	r24, r17
    28aa:	c0 01       	movw	r24, r0
    28ac:	11 24       	eor	r1, r1
    28ae:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <LMIC+0x12f>
    28b2:	89 2b       	or	r24, r25
    28b4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <LMIC+0x14c>
    28b8:	0a e0       	ldi	r16, 0x0A	; 10
    28ba:	10 e0       	ldi	r17, 0x00	; 0
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <engineUpdate+0x4b6>
    28be:	08 e0       	ldi	r16, 0x08	; 8
    28c0:	10 e0       	ldi	r17, 0x00	; 0
    28c2:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <LMIC+0x124>
    28c6:	88 23       	and	r24, r24
    28c8:	49 f0       	breq	.+18     	; 0x28dc <engineUpdate+0x4d0>
    28ca:	f8 01       	movw	r30, r16
    28cc:	e0 5e       	subi	r30, 0xE0	; 224
    28ce:	fb 4f       	sbci	r31, 0xFB	; 251
    28d0:	84 e0       	ldi	r24, 0x04	; 4
    28d2:	80 83       	st	Z, r24
    28d4:	0f 5f       	subi	r16, 0xFF	; 255
    28d6:	1f 4f       	sbci	r17, 0xFF	; 255
    28d8:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <LMIC+0x124>
    28dc:	40 91 08 04 	lds	r20, 0x0408	; 0x800408 <LMIC+0x12b>
    28e0:	44 23       	and	r20, r20
    28e2:	79 f0       	breq	.+30     	; 0x2902 <engineUpdate+0x4f6>
    28e4:	c8 01       	movw	r24, r16
    28e6:	83 52       	subi	r24, 0x23	; 35
    28e8:	9d 4f       	sbci	r25, 0xFD	; 253
    28ea:	fc 01       	movw	r30, r24
    28ec:	ed 5b       	subi	r30, 0xBD	; 189
    28ee:	fe 4f       	sbci	r31, 0xFE	; 254
    28f0:	55 e0       	ldi	r21, 0x05	; 5
    28f2:	50 83       	st	Z, r21
    28f4:	31 96       	adiw	r30, 0x01	; 1
    28f6:	43 70       	andi	r20, 0x03	; 3
    28f8:	40 83       	st	Z, r20
    28fa:	0e 5f       	subi	r16, 0xFE	; 254
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <LMIC+0x12b>
    2902:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <LMIC+0x121>
    2906:	88 23       	and	r24, r24
    2908:	99 f0       	breq	.+38     	; 0x2930 <engineUpdate+0x524>
    290a:	c8 01       	movw	r24, r16
    290c:	83 52       	subi	r24, 0x23	; 35
    290e:	9d 4f       	sbci	r25, 0xFD	; 253
    2910:	fc 01       	movw	r30, r24
    2912:	ed 5b       	subi	r30, 0xBD	; 189
    2914:	fe 4f       	sbci	r31, 0xFE	; 254
    2916:	46 e0       	ldi	r20, 0x06	; 6
    2918:	40 83       	st	Z, r20
    291a:	31 96       	adiw	r30, 0x01	; 1
    291c:	4f ef       	ldi	r20, 0xFF	; 255
    291e:	40 83       	st	Z, r20
    2920:	31 96       	adiw	r30, 0x01	; 1
    2922:	40 91 fc 03 	lds	r20, 0x03FC	; 0x8003fc <LMIC+0x11f>
    2926:	40 83       	st	Z, r20
    2928:	0d 5f       	subi	r16, 0xFD	; 253
    292a:	1f 4f       	sbci	r17, 0xFF	; 255
    292c:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <LMIC+0x121>
    2930:	40 91 fd 03 	lds	r20, 0x03FD	; 0x8003fd <LMIC+0x120>
    2934:	44 23       	and	r20, r20
    2936:	79 f0       	breq	.+30     	; 0x2956 <engineUpdate+0x54a>
    2938:	c8 01       	movw	r24, r16
    293a:	83 52       	subi	r24, 0x23	; 35
    293c:	9d 4f       	sbci	r25, 0xFD	; 253
    293e:	fc 01       	movw	r30, r24
    2940:	ed 5b       	subi	r30, 0xBD	; 189
    2942:	fe 4f       	sbci	r31, 0xFE	; 254
    2944:	53 e0       	ldi	r21, 0x03	; 3
    2946:	50 83       	st	Z, r21
    2948:	31 96       	adiw	r30, 0x01	; 1
    294a:	47 70       	andi	r20, 0x07	; 7
    294c:	40 83       	st	Z, r20
    294e:	0e 5f       	subi	r16, 0xFE	; 254
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <LMIC+0x120>
    2956:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <LMIC+0x12d>
    295a:	88 23       	and	r24, r24
    295c:	39 f0       	breq	.+14     	; 0x296c <engineUpdate+0x560>
    295e:	f8 01       	movw	r30, r16
    2960:	e0 5e       	subi	r30, 0xE0	; 224
    2962:	fb 4f       	sbci	r31, 0xFB	; 251
    2964:	82 e1       	ldi	r24, 0x12	; 18
    2966:	80 83       	st	Z, r24
    2968:	0f 5f       	subi	r16, 0xFF	; 255
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <LMIC+0x11d>
    2970:	88 23       	and	r24, r24
    2972:	39 f0       	breq	.+14     	; 0x2982 <engineUpdate+0x576>
    2974:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <LMIC+0x11c>
    2978:	87 fd       	sbrc	r24, 7
    297a:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <LMIC+0x11c>
    297e:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <LMIC+0x11d>
    2982:	40 91 0b 04 	lds	r20, 0x040B	; 0x80040b <LMIC+0x12e>
    2986:	44 23       	and	r20, r20
    2988:	79 f0       	breq	.+30     	; 0x29a8 <engineUpdate+0x59c>
    298a:	c8 01       	movw	r24, r16
    298c:	83 52       	subi	r24, 0x23	; 35
    298e:	9d 4f       	sbci	r25, 0xFD	; 253
    2990:	fc 01       	movw	r30, r24
    2992:	ed 5b       	subi	r30, 0xBD	; 189
    2994:	fe 4f       	sbci	r31, 0xFE	; 254
    2996:	51 e1       	ldi	r21, 0x11	; 17
    2998:	50 83       	st	Z, r21
    299a:	31 96       	adiw	r30, 0x01	; 1
    299c:	41 70       	andi	r20, 0x01	; 1
    299e:	40 83       	st	Z, r20
    29a0:	0e 5f       	subi	r16, 0xFE	; 254
    29a2:	1f 4f       	sbci	r17, 0xFF	; 255
    29a4:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <LMIC+0x12e>
    29a8:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <LMIC+0x125>
    29ac:	44 23       	and	r20, r20
    29ae:	79 f0       	breq	.+30     	; 0x29ce <engineUpdate+0x5c2>
    29b0:	c8 01       	movw	r24, r16
    29b2:	83 52       	subi	r24, 0x23	; 35
    29b4:	9d 4f       	sbci	r25, 0xFD	; 253
    29b6:	fc 01       	movw	r30, r24
    29b8:	ed 5b       	subi	r30, 0xBD	; 189
    29ba:	fe 4f       	sbci	r31, 0xFE	; 254
    29bc:	57 e0       	ldi	r21, 0x07	; 7
    29be:	50 83       	st	Z, r21
    29c0:	31 96       	adiw	r30, 0x01	; 1
    29c2:	43 70       	andi	r20, 0x03	; 3
    29c4:	40 83       	st	Z, r20
    29c6:	0e 5f       	subi	r16, 0xFE	; 254
    29c8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ca:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <LMIC+0x125>
    29ce:	20 31       	cpi	r18, 0x10	; 16
    29d0:	31 05       	cpc	r19, r1
    29d2:	21 f0       	breq	.+8      	; 0x29dc <engineUpdate+0x5d0>
    29d4:	4d 81       	ldd	r20, Y+5	; 0x05
    29d6:	4b 5f       	subi	r20, 0xFB	; 251
    29d8:	49 83       	std	Y+1, r20	; 0x01
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <engineUpdate+0x5d4>
    29dc:	54 e0       	ldi	r21, 0x04	; 4
    29de:	59 83       	std	Y+1, r21	; 0x01
    29e0:	40 2f       	mov	r20, r16
    29e2:	89 80       	ldd	r8, Y+1	; 0x01
    29e4:	80 0e       	add	r8, r16
    29e6:	89 82       	std	Y+1, r8	; 0x01
    29e8:	58 2d       	mov	r21, r8
    29ea:	51 34       	cpi	r21, 0x41	; 65
    29ec:	30 f4       	brcc	.+12     	; 0x29fa <engineUpdate+0x5ee>
    29ee:	ff 24       	eor	r15, r15
    29f0:	f3 94       	inc	r15
    29f2:	20 31       	cpi	r18, 0x10	; 16
    29f4:	31 05       	cpc	r19, r1
    29f6:	31 f4       	brne	.+12     	; 0x2a04 <engineUpdate+0x5f8>
    29f8:	04 c0       	rjmp	.+8      	; 0x2a02 <engineUpdate+0x5f6>
    29fa:	94 e0       	ldi	r25, 0x04	; 4
    29fc:	89 2e       	mov	r8, r25
    29fe:	80 0e       	add	r8, r16
    2a00:	89 82       	std	Y+1, r8	; 0x01
    2a02:	f1 2c       	mov	r15, r1
    2a04:	80 e4       	ldi	r24, 0x40	; 64
    2a06:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <LMIC+0x143>
    2a0a:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <LMIC+0x11b>
    2a0e:	20 91 ff 03 	lds	r18, 0x03FF	; 0x8003ff <LMIC+0x122>
    2a12:	29 2b       	or	r18, r25
    2a14:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <LMIC+0x11c>
    2a18:	90 95       	com	r25
    2a1a:	89 2f       	mov	r24, r25
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	88 27       	eor	r24, r24
    2a20:	88 1f       	adc	r24, r24
    2a22:	82 95       	swap	r24
    2a24:	88 0f       	add	r24, r24
    2a26:	88 0f       	add	r24, r24
    2a28:	80 7c       	andi	r24, 0xC0	; 192
    2a2a:	98 ef       	ldi	r25, 0xF8	; 248
    2a2c:	94 0f       	add	r25, r20
    2a2e:	92 2b       	or	r25, r18
    2a30:	89 2b       	or	r24, r25
    2a32:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <LMIC+0x148>
    2a36:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <LMIC+0x10f>
    2a3a:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <LMIC+0x110>
    2a3e:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <LMIC+0x111>
    2a42:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <LMIC+0x112>
    2a46:	81 e2       	ldi	r24, 0x21	; 33
    2a48:	94 e0       	ldi	r25, 0x04	; 4
    2a4a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    2a4e:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <LMIC+0x13f>
    2a52:	21 11       	cpse	r18, r1
    2a54:	13 c0       	rjmp	.+38     	; 0x2a7c <engineUpdate+0x670>
    2a56:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <LMIC+0x117>
    2a5a:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <LMIC+0x118>
    2a5e:	a0 91 f6 03 	lds	r26, 0x03F6	; 0x8003f6 <LMIC+0x119>
    2a62:	b0 91 f7 03 	lds	r27, 0x03F7	; 0x8003f7 <LMIC+0x11a>
    2a66:	01 96       	adiw	r24, 0x01	; 1
    2a68:	a1 1d       	adc	r26, r1
    2a6a:	b1 1d       	adc	r27, r1
    2a6c:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <LMIC+0x117>
    2a70:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <LMIC+0x118>
    2a74:	a0 93 f6 03 	sts	0x03F6, r26	; 0x8003f6 <LMIC+0x119>
    2a78:	b0 93 f7 03 	sts	0x03F7, r27	; 0x8003f7 <LMIC+0x11a>
    2a7c:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <LMIC+0x117>
    2a80:	90 91 f5 03 	lds	r25, 0x03F5	; 0x8003f5 <LMIC+0x118>
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <LMIC+0x149>
    2a8a:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <LMIC+0x14a>
    2a8e:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x11b>
    2a92:	ff 20       	and	r15, r15
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <engineUpdate+0x68c>
    2a96:	43 c0       	rjmp	.+134    	; 0x2b1e <engineUpdate+0x712>
    2a98:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <LMIC+0xb7>
    2a9c:	88 23       	and	r24, r24
    2a9e:	41 f0       	breq	.+16     	; 0x2ab0 <engineUpdate+0x6a4>
    2aa0:	80 e8       	ldi	r24, 0x80	; 128
    2aa2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <LMIC+0x143>
    2aa6:	21 11       	cpse	r18, r1
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <engineUpdate+0x6a4>
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <LMIC+0x13f>
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	e0 5e       	subi	r30, 0xE0	; 224
    2ab4:	fb 4f       	sbci	r31, 0xFB	; 251
    2ab6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <LMIC+0xb6>
    2aba:	80 83       	st	Z, r24
    2abc:	98 01       	movw	r18, r16
    2abe:	2f 5d       	subi	r18, 0xDF	; 223
    2ac0:	3b 4f       	sbci	r19, 0xFB	; 251
    2ac2:	69 01       	movw	r12, r18
    2ac4:	8d 80       	ldd	r8, Y+5	; 0x05
    2ac6:	a8 2c       	mov	r10, r8
    2ac8:	b1 2c       	mov	r11, r1
    2aca:	a5 01       	movw	r20, r10
    2acc:	66 e9       	ldi	r22, 0x96	; 150
    2ace:	73 e0       	ldi	r23, 0x03	; 3
    2ad0:	c9 01       	movw	r24, r18
    2ad2:	0e 94 19 29 	call	0x5232	; 0x5232 <memcpy>
    2ad6:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <LMIC+0xb6>
    2ada:	88 23       	and	r24, r24
    2adc:	19 f0       	breq	.+6      	; 0x2ae4 <engineUpdate+0x6d8>
    2ade:	8c ed       	ldi	r24, 0xDC	; 220
    2ae0:	93 e0       	ldi	r25, 0x03	; 3
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <engineUpdate+0x6dc>
    2ae4:	8c ec       	ldi	r24, 0xCC	; 204
    2ae6:	93 e0       	ldi	r25, 0x03	; 3
    2ae8:	a1 14       	cp	r10, r1
    2aea:	b1 04       	cpc	r11, r1
    2aec:	c1 f0       	breq	.+48     	; 0x2b1e <engineUpdate+0x712>
    2aee:	00 91 f4 03 	lds	r16, 0x03F4	; 0x8003f4 <LMIC+0x117>
    2af2:	10 91 f5 03 	lds	r17, 0x03F5	; 0x8003f5 <LMIC+0x118>
    2af6:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <LMIC+0x119>
    2afa:	30 91 f7 03 	lds	r19, 0x03F7	; 0x8003f7 <LMIC+0x11a>
    2afe:	01 50       	subi	r16, 0x01	; 1
    2b00:	11 09       	sbc	r17, r1
    2b02:	21 09       	sbc	r18, r1
    2b04:	31 09       	sbc	r19, r1
    2b06:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <LMIC+0x10f>
    2b0a:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <LMIC+0x110>
    2b0e:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <LMIC+0x111>
    2b12:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <LMIC+0x112>
    2b16:	e1 2c       	mov	r14, r1
    2b18:	f1 2c       	mov	r15, r1
    2b1a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <aes_cipher.part.3>
    2b1e:	89 80       	ldd	r8, Y+1	; 0x01
    2b20:	08 2d       	mov	r16, r8
    2b22:	10 e0       	ldi	r17, 0x00	; 0
    2b24:	04 50       	subi	r16, 0x04	; 4
    2b26:	11 09       	sbc	r17, r1
    2b28:	c0 90 f4 03 	lds	r12, 0x03F4	; 0x8003f4 <LMIC+0x117>
    2b2c:	d0 90 f5 03 	lds	r13, 0x03F5	; 0x8003f5 <LMIC+0x118>
    2b30:	e0 90 f6 03 	lds	r14, 0x03F6	; 0x8003f6 <LMIC+0x119>
    2b34:	f0 90 f7 03 	lds	r15, 0x03F7	; 0x8003f7 <LMIC+0x11a>
    2b38:	21 e0       	ldi	r18, 0x01	; 1
    2b3a:	c2 1a       	sub	r12, r18
    2b3c:	d1 08       	sbc	r13, r1
    2b3e:	e1 08       	sbc	r14, r1
    2b40:	f1 08       	sbc	r15, r1
    2b42:	40 91 ec 03 	lds	r20, 0x03EC	; 0x8003ec <LMIC+0x10f>
    2b46:	50 91 ed 03 	lds	r21, 0x03ED	; 0x8003ed <LMIC+0x110>
    2b4a:	60 91 ee 03 	lds	r22, 0x03EE	; 0x8003ee <LMIC+0x111>
    2b4e:	70 91 ef 03 	lds	r23, 0x03EF	; 0x8003ef <LMIC+0x112>
    2b52:	ed ec       	ldi	r30, 0xCD	; 205
    2b54:	f2 e0       	ldi	r31, 0x02	; 2
    2b56:	df 01       	movw	r26, r30
    2b58:	e0 e1       	ldi	r30, 0x10	; 16
    2b5a:	8e 2e       	mov	r8, r30
    2b5c:	1d 92       	st	X+, r1
    2b5e:	8a 94       	dec	r8
    2b60:	e9 f7       	brne	.-6      	; 0x2b5c <engineUpdate+0x750>
    2b62:	89 e4       	ldi	r24, 0x49	; 73
    2b64:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <AESAUX>
    2b68:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <AESAUX+0x5>
    2b6c:	00 93 dc 02 	sts	0x02DC, r16	; 0x8002dc <AESAUX+0xf>
    2b70:	83 ed       	ldi	r24, 0xD3	; 211
    2b72:	92 e0       	ldi	r25, 0x02	; 2
    2b74:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    2b78:	b7 01       	movw	r22, r14
    2b7a:	a6 01       	movw	r20, r12
    2b7c:	87 ed       	ldi	r24, 0xD7	; 215
    2b7e:	92 e0       	ldi	r25, 0x02	; 2
    2b80:	0e 94 a2 0a 	call	0x1544	; 0x1544 <os_wlsbf4>
    2b84:	ec ec       	ldi	r30, 0xCC	; 204
    2b86:	f3 e0       	ldi	r31, 0x03	; 3
    2b88:	ad eb       	ldi	r26, 0xBD	; 189
    2b8a:	b2 e0       	ldi	r27, 0x02	; 2
    2b8c:	80 e1       	ldi	r24, 0x10	; 16
    2b8e:	a8 2e       	mov	r10, r24
    2b90:	01 90       	ld	r0, Z+
    2b92:	0d 92       	st	X+, r0
    2b94:	aa 94       	dec	r10
    2b96:	e1 f7       	brne	.-8      	; 0x2b90 <engineUpdate+0x784>
    2b98:	a8 01       	movw	r20, r16
    2b9a:	60 e2       	ldi	r22, 0x20	; 32
    2b9c:	74 e0       	ldi	r23, 0x04	; 4
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    2ba4:	ab 01       	movw	r20, r22
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	c8 01       	movw	r24, r16
    2baa:	80 5e       	subi	r24, 0xE0	; 224
    2bac:	9b 4f       	sbci	r25, 0xFB	; 251
    2bae:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <os_wmsbf4>
    2bb2:	89 80       	ldd	r8, Y+1	; 0x01
    2bb4:	80 92 1f 04 	sts	0x041F, r8	; 0x80041f <LMIC+0x142>
    2bb8:	8d ec       	ldi	r24, 0xCD	; 205
    2bba:	9b e0       	ldi	r25, 0x0B	; 11
    2bbc:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <LMIC+0x1a>
    2bc0:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <LMIC+0x19>
    2bc4:	e9 2d       	mov	r30, r9
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	e9 57       	subi	r30, 0x79	; 121
    2bca:	fc 4f       	sbci	r31, 0xFC	; 252
    2bcc:	e4 91       	lpm	r30, Z
    2bce:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <LMIC+0xac>
    2bd2:	00 e2       	ldi	r16, 0x20	; 32
    2bd4:	80 9f       	mul	r24, r16
    2bd6:	c0 01       	movw	r24, r0
    2bd8:	11 24       	eor	r1, r1
    2bda:	ef 79       	andi	r30, 0x9F	; 159
    2bdc:	8e 2b       	or	r24, r30
    2bde:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <LMIC+0xf>
    2be2:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <LMIC+0xe>
    2be6:	90 92 ee 02 	sts	0x02EE, r9	; 0x8002ee <LMIC+0x11>
    2bea:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <LMIC+0xa7>
    2bee:	30 91 85 03 	lds	r19, 0x0385	; 0x800385 <LMIC+0xa8>
    2bf2:	2f 76       	andi	r18, 0x6F	; 111
    2bf4:	36 7f       	andi	r19, 0xF6	; 246
    2bf6:	20 68       	ori	r18, 0x80	; 128
    2bf8:	38 60       	ori	r19, 0x08	; 8
    2bfa:	30 93 85 03 	sts	0x0385, r19	; 0x800385 <LMIC+0xa8>
    2bfe:	20 93 84 03 	sts	0x0384, r18	; 0x800384 <LMIC+0xa7>
    2c02:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <LMIC+0x9d>
    2c06:	14 e0       	ldi	r17, 0x04	; 4
    2c08:	e1 9f       	mul	r30, r17
    2c0a:	f0 01       	movw	r30, r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	e3 52       	subi	r30, 0x23	; 35
    2c10:	fd 4f       	sbci	r31, 0xFD	; 253
    2c12:	83 ac       	ldd	r8, Z+59	; 0x3b
    2c14:	94 ac       	ldd	r9, Z+60	; 0x3c
    2c16:	a5 ac       	ldd	r10, Z+61	; 0x3d
    2c18:	b6 ac       	ldd	r11, Z+62	; 0x3e
    2c1a:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <LMIC+0x142>
    2c1e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <calcAirTime>
    2c22:	6b 01       	movw	r12, r22
    2c24:	7c 01       	movw	r14, r24
    2c26:	d5 01       	movw	r26, r10
    2c28:	c4 01       	movw	r24, r8
    2c2a:	83 70       	andi	r24, 0x03	; 3
    2c2c:	99 27       	eor	r25, r25
    2c2e:	aa 27       	eor	r26, r26
    2c30:	bb 27       	eor	r27, r27
    2c32:	2c ef       	ldi	r18, 0xFC	; 252
    2c34:	82 22       	and	r8, r18
    2c36:	80 92 e5 02 	sts	0x02E5, r8	; 0x8002e5 <LMIC+0x8>
    2c3a:	90 92 e6 02 	sts	0x02E6, r9	; 0x8002e6 <LMIC+0x9>
    2c3e:	a0 92 e7 02 	sts	0x02E7, r10	; 0x8002e7 <LMIC+0xa>
    2c42:	b0 92 e8 02 	sts	0x02E8, r11	; 0x8002e8 <LMIC+0xb>
    2c46:	43 e0       	ldi	r20, 0x03	; 3
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	4a 95       	dec	r20
    2c4e:	e1 f7       	brne	.-8      	; 0x2c48 <engineUpdate+0x83c>
    2c50:	fc 01       	movw	r30, r24
    2c52:	e3 52       	subi	r30, 0x23	; 35
    2c54:	fd 4f       	sbci	r31, 0xFD	; 253
    2c56:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c58:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <LMIC+0x12>
    2c5c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2c5e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2c60:	a7 01       	movw	r20, r14
    2c62:	96 01       	movw	r18, r12
    2c64:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__muluhisi3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	84 0d       	add	r24, r4
    2c6e:	95 1d       	adc	r25, r5
    2c70:	a6 1d       	adc	r26, r6
    2c72:	b7 1d       	adc	r27, r7
    2c74:	87 8f       	std	Z+31, r24	; 0x1f
    2c76:	90 a3       	std	Z+32, r25	; 0x20
    2c78:	a1 a3       	std	Z+33, r26	; 0x21
    2c7a:	b2 a3       	std	Z+34, r27	; 0x22
    2c7c:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <LMIC+0x9e>
    2c80:	88 23       	and	r24, r24
    2c82:	99 f0       	breq	.+38     	; 0x2caa <engineUpdate+0x89e>
    2c84:	04 c0       	rjmp	.+8      	; 0x2c8e <engineUpdate+0x882>
    2c86:	cc 0c       	add	r12, r12
    2c88:	dd 1c       	adc	r13, r13
    2c8a:	ee 1c       	adc	r14, r14
    2c8c:	ff 1c       	adc	r15, r15
    2c8e:	8a 95       	dec	r24
    2c90:	d2 f7       	brpl	.-12     	; 0x2c86 <engineUpdate+0x87a>
    2c92:	c4 0c       	add	r12, r4
    2c94:	d5 1c       	adc	r13, r5
    2c96:	e6 1c       	adc	r14, r6
    2c98:	f7 1c       	adc	r15, r7
    2c9a:	c0 92 7c 03 	sts	0x037C, r12	; 0x80037c <LMIC+0x9f>
    2c9e:	d0 92 7d 03 	sts	0x037D, r13	; 0x80037d <LMIC+0xa0>
    2ca2:	e0 92 7e 03 	sts	0x037E, r14	; 0x80037e <LMIC+0xa1>
    2ca6:	f0 92 7f 03 	sts	0x037F, r15	; 0x80037f <LMIC+0xa2>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	b8 c0       	rjmp	.+368    	; 0x2e1e <engineUpdate+0xa12>
    2cae:	23 2b       	or	r18, r19
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <engineUpdate+0x8a8>
    2cb2:	dc c0       	rjmp	.+440    	; 0x2e6c <engineUpdate+0xa60>
    2cb4:	c1 14       	cp	r12, r1
    2cb6:	d1 04       	cpc	r13, r1
    2cb8:	e1 04       	cpc	r14, r1
    2cba:	f1 04       	cpc	r15, r1
    2cbc:	59 f4       	brne	.+22     	; 0x2cd4 <engineUpdate+0x8c8>
    2cbe:	c1 2c       	mov	r12, r1
    2cc0:	d1 2c       	mov	r13, r1
    2cc2:	76 01       	movw	r14, r12
    2cc4:	c3 94       	inc	r12
    2cc6:	06 c0       	rjmp	.+12     	; 0x2cd4 <engineUpdate+0x8c8>
    2cc8:	39 89       	ldd	r19, Y+17	; 0x11
    2cca:	31 ff       	sbrs	r19, 1
    2ccc:	43 c1       	rjmp	.+646    	; 0x2f54 <engineUpdate+0xb48>
    2cce:	c1 2c       	mov	r12, r1
    2cd0:	d1 2c       	mov	r13, r1
    2cd2:	76 01       	movw	r14, r12
    2cd4:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    2cd8:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    2cdc:	91 ff       	sbrs	r25, 1
    2cde:	65 c0       	rjmp	.+202    	; 0x2daa <engineUpdate+0x99e>
    2ce0:	b3 01       	movw	r22, r6
    2ce2:	a2 01       	movw	r20, r4
    2ce4:	43 58       	subi	r20, 0x83	; 131
    2ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce8:	6f 4f       	sbci	r22, 0xFF	; 255
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255
    2cec:	4d 83       	std	Y+5, r20	; 0x05
    2cee:	5e 83       	std	Y+6, r21	; 0x06
    2cf0:	6f 83       	std	Y+7, r22	; 0x07
    2cf2:	78 87       	std	Y+8, r23	; 0x08
    2cf4:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <LMIC+0x137>
    2cf8:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <LMIC+0x138>
    2cfc:	a0 91 16 04 	lds	r26, 0x0416	; 0x800416 <LMIC+0x139>
    2d00:	b0 91 17 04 	lds	r27, 0x0417	; 0x800417 <LMIC+0x13a>
    2d04:	ac 01       	movw	r20, r24
    2d06:	bd 01       	movw	r22, r26
    2d08:	8d 80       	ldd	r8, Y+5	; 0x05
    2d0a:	9e 80       	ldd	r9, Y+6	; 0x06
    2d0c:	af 80       	ldd	r10, Y+7	; 0x07
    2d0e:	b8 84       	ldd	r11, Y+8	; 0x08
    2d10:	48 19       	sub	r20, r8
    2d12:	59 09       	sbc	r21, r9
    2d14:	6a 09       	sbc	r22, r10
    2d16:	7b 09       	sbc	r23, r11
    2d18:	77 ff       	sbrs	r23, 7
    2d1a:	9b c0       	rjmp	.+310    	; 0x2e52 <engineUpdate+0xa46>
    2d1c:	10 91 0e 04 	lds	r17, 0x040E	; 0x80040e <LMIC+0x131>
    2d20:	17 fd       	sbrc	r17, 7
    2d22:	43 c0       	rjmp	.+134    	; 0x2daa <engineUpdate+0x99e>
    2d24:	e1 e0       	ldi	r30, 0x01	; 1
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	00 90 0d 04 	lds	r0, 0x040D	; 0x80040d <LMIC+0x130>
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <engineUpdate+0x926>
    2d2e:	ee 0f       	add	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	0a 94       	dec	r0
    2d34:	e2 f7       	brpl	.-8      	; 0x2d2e <engineUpdate+0x922>
    2d36:	1e 0f       	add	r17, r30
    2d38:	10 93 0e 04 	sts	0x040E, r17	; 0x80040e <LMIC+0x131>
    2d3c:	17 fd       	sbrc	r17, 7
    2d3e:	35 c0       	rjmp	.+106    	; 0x2daa <engineUpdate+0x99e>
    2d40:	a1 2f       	mov	r26, r17
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e3       	ldi	r19, 0x30	; 48
    2d48:	45 e7       	ldi	r20, 0x75	; 117
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__muluhisi3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	27 e0       	ldi	r18, 0x07	; 7
    2d56:	b5 95       	asr	r27
    2d58:	a7 95       	ror	r26
    2d5a:	97 95       	ror	r25
    2d5c:	87 95       	ror	r24
    2d5e:	2a 95       	dec	r18
    2d60:	d1 f7       	brne	.-12     	; 0x2d56 <engineUpdate+0x94a>
    2d62:	80 90 10 04 	lds	r8, 0x0410	; 0x800410 <LMIC+0x133>
    2d66:	90 90 11 04 	lds	r9, 0x0411	; 0x800411 <LMIC+0x134>
    2d6a:	a0 90 12 04 	lds	r10, 0x0412	; 0x800412 <LMIC+0x135>
    2d6e:	b0 90 13 04 	lds	r11, 0x0413	; 0x800413 <LMIC+0x136>
    2d72:	88 0e       	add	r8, r24
    2d74:	99 1e       	adc	r9, r25
    2d76:	aa 1e       	adc	r10, r26
    2d78:	bb 1e       	adc	r11, r27
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	8e 0f       	add	r24, r30
    2d7e:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <LMIC+0x12f>
    2d82:	81 0f       	add	r24, r17
    2d84:	0e 94 92 07 	call	0xf24	; 0xf24 <calcRxWindow>
    2d88:	86 1a       	sub	r8, r22
    2d8a:	97 0a       	sbc	r9, r23
    2d8c:	a8 0a       	sbc	r10, r24
    2d8e:	b9 0a       	sbc	r11, r25
    2d90:	80 92 14 04 	sts	0x0414, r8	; 0x800414 <LMIC+0x137>
    2d94:	90 92 15 04 	sts	0x0415, r9	; 0x800415 <LMIC+0x138>
    2d98:	a0 92 16 04 	sts	0x0416, r10	; 0x800416 <LMIC+0x139>
    2d9c:	b0 92 17 04 	sts	0x0417, r11	; 0x800417 <LMIC+0x13a>
    2da0:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <LMIC+0x10>
    2da4:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <LMIC+0x132>
    2da8:	a5 cf       	rjmp	.-182    	; 0x2cf4 <engineUpdate+0x8e8>
    2daa:	c1 14       	cp	r12, r1
    2dac:	d1 04       	cpc	r13, r1
    2dae:	e1 04       	cpc	r14, r1
    2db0:	f1 04       	cpc	r15, r1
    2db2:	61 f0       	breq	.+24     	; 0x2dcc <engineUpdate+0x9c0>
    2db4:	d7 01       	movw	r26, r14
    2db6:	c6 01       	movw	r24, r12
    2db8:	89 80       	ldd	r8, Y+1	; 0x01
    2dba:	9a 80       	ldd	r9, Y+2	; 0x02
    2dbc:	ab 80       	ldd	r10, Y+3	; 0x03
    2dbe:	bc 80       	ldd	r11, Y+4	; 0x04
    2dc0:	88 19       	sub	r24, r8
    2dc2:	99 09       	sbc	r25, r9
    2dc4:	aa 09       	sbc	r26, r10
    2dc6:	bb 09       	sbc	r27, r11
    2dc8:	b7 fd       	sbrc	r27, 7
    2dca:	50 c0       	rjmp	.+160    	; 0x2e6c <engineUpdate+0xa60>
    2dcc:	0e 94 2e 07 	call	0xe5c	; 0xe5c <setBcnRxParams>
    2dd0:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <LMIC+0x184>
    2dd4:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <LMIC+0x10>
    2dd8:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <LMIC+0x185>
    2ddc:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <LMIC+0x186>
    2de0:	a0 91 64 04 	lds	r26, 0x0464	; 0x800464 <LMIC+0x187>
    2de4:	b0 91 65 04 	lds	r27, 0x0465	; 0x800465 <LMIC+0x188>
    2de8:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <LMIC+0x4>
    2dec:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <LMIC+0x5>
    2df0:	a0 93 e3 02 	sts	0x02E3, r26	; 0x8002e3 <LMIC+0x6>
    2df4:	b0 93 e4 02 	sts	0x02E4, r27	; 0x8002e4 <LMIC+0x7>
    2df8:	d3 01       	movw	r26, r6
    2dfa:	c2 01       	movw	r24, r4
    2dfc:	89 80       	ldd	r8, Y+1	; 0x01
    2dfe:	9a 80       	ldd	r9, Y+2	; 0x02
    2e00:	ab 80       	ldd	r10, Y+3	; 0x03
    2e02:	bc 80       	ldd	r11, Y+4	; 0x04
    2e04:	88 19       	sub	r24, r8
    2e06:	99 09       	sbc	r25, r9
    2e08:	aa 09       	sbc	r26, r10
    2e0a:	bb 09       	sbc	r27, r11
    2e0c:	b7 fd       	sbrc	r27, 7
    2e0e:	52 c0       	rjmp	.+164    	; 0x2eb4 <engineUpdate+0xaa8>
    2e10:	88 e2       	ldi	r24, 0x28	; 40
    2e12:	98 e1       	ldi	r25, 0x18	; 24
    2e14:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <LMIC+0x1a>
    2e18:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <LMIC+0x19>
    2e1c:	82 e0       	ldi	r24, 0x02	; 2
    2e1e:	62 96       	adiw	r28, 0x12	; 18
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
    2e3e:	9f 90       	pop	r9
    2e40:	8f 90       	pop	r8
    2e42:	7f 90       	pop	r7
    2e44:	6f 90       	pop	r6
    2e46:	5f 90       	pop	r5
    2e48:	4f 90       	pop	r4
    2e4a:	3f 90       	pop	r3
    2e4c:	2f 90       	pop	r2
    2e4e:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <os_radio>
    2e52:	c1 14       	cp	r12, r1
    2e54:	d1 04       	cpc	r13, r1
    2e56:	e1 04       	cpc	r14, r1
    2e58:	f1 04       	cpc	r15, r1
    2e5a:	99 f1       	breq	.+102    	; 0x2ec2 <engineUpdate+0xab6>
    2e5c:	b7 01       	movw	r22, r14
    2e5e:	a6 01       	movw	r20, r12
    2e60:	48 1b       	sub	r20, r24
    2e62:	59 0b       	sbc	r21, r25
    2e64:	6a 0b       	sbc	r22, r26
    2e66:	7b 0b       	sbc	r23, r27
    2e68:	77 ff       	sbrs	r23, 7
    2e6a:	2b c0       	rjmp	.+86     	; 0x2ec2 <engineUpdate+0xab6>
    2e6c:	b7 01       	movw	r22, r14
    2e6e:	a6 01       	movw	r20, r12
    2e70:	4d 57       	subi	r20, 0x7D	; 125
    2e72:	51 09       	sbc	r21, r1
    2e74:	61 09       	sbc	r22, r1
    2e76:	71 09       	sbc	r23, r1
    2e78:	2b e1       	ldi	r18, 0x1B	; 27
    2e7a:	3b e1       	ldi	r19, 0x1B	; 27
    2e7c:	80 ef       	ldi	r24, 0xF0	; 240
    2e7e:	92 e0       	ldi	r25, 0x02	; 2
    2e80:	62 96       	adiw	r28, 0x12	; 18
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	df 90       	pop	r13
    2e9a:	cf 90       	pop	r12
    2e9c:	bf 90       	pop	r11
    2e9e:	af 90       	pop	r10
    2ea0:	9f 90       	pop	r9
    2ea2:	8f 90       	pop	r8
    2ea4:	7f 90       	pop	r7
    2ea6:	6f 90       	pop	r6
    2ea8:	5f 90       	pop	r5
    2eaa:	4f 90       	pop	r4
    2eac:	3f 90       	pop	r3
    2eae:	2f 90       	pop	r2
    2eb0:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <os_setTimedCallback>
    2eb4:	24 e3       	ldi	r18, 0x34	; 52
    2eb6:	39 e0       	ldi	r19, 0x09	; 9
    2eb8:	49 81       	ldd	r20, Y+1	; 0x01
    2eba:	5a 81       	ldd	r21, Y+2	; 0x02
    2ebc:	6b 81       	ldd	r22, Y+3	; 0x03
    2ebe:	7c 81       	ldd	r23, Y+4	; 0x04
    2ec0:	dd cf       	rjmp	.-70     	; 0x2e7c <engineUpdate+0xa70>
    2ec2:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <LMIC+0x132>
    2ec6:	20 93 ed 02 	sts	0x02ED, r18	; 0x8002ed <LMIC+0x10>
    2eca:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <LMIC+0x4>
    2ece:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <LMIC+0x5>
    2ed2:	a0 93 e3 02 	sts	0x02E3, r26	; 0x8002e3 <LMIC+0x6>
    2ed6:	b0 93 e4 02 	sts	0x02E4, r27	; 0x8002e4 <LMIC+0x7>
    2eda:	40 91 18 04 	lds	r20, 0x0418	; 0x800418 <LMIC+0x13b>
    2ede:	50 91 19 04 	lds	r21, 0x0419	; 0x800419 <LMIC+0x13c>
    2ee2:	60 91 1a 04 	lds	r22, 0x041A	; 0x80041a <LMIC+0x13d>
    2ee6:	70 91 1b 04 	lds	r23, 0x041B	; 0x80041b <LMIC+0x13e>
    2eea:	40 93 e5 02 	sts	0x02E5, r20	; 0x8002e5 <LMIC+0x8>
    2eee:	50 93 e6 02 	sts	0x02E6, r21	; 0x8002e6 <LMIC+0x9>
    2ef2:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <LMIC+0xa>
    2ef6:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <LMIC+0xb>
    2efa:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <LMIC+0x12f>
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	e9 57       	subi	r30, 0x79	; 121
    2f02:	fc 4f       	sbci	r31, 0xFC	; 252
    2f04:	e4 91       	lpm	r30, Z
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	ef 77       	andi	r30, 0x7F	; 127
    2f0a:	e0 68       	ori	r30, 0x80	; 128
    2f0c:	f0 93 ec 02 	sts	0x02EC, r31	; 0x8002ec <LMIC+0xf>
    2f10:	e0 93 eb 02 	sts	0x02EB, r30	; 0x8002eb <LMIC+0xe>
    2f14:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    2f18:	84 19       	sub	r24, r4
    2f1a:	95 09       	sbc	r25, r5
    2f1c:	a6 09       	sbc	r26, r6
    2f1e:	b7 09       	sbc	r27, r7
    2f20:	83 38       	cpi	r24, 0x83	; 131
    2f22:	9f 4f       	sbci	r25, 0xFF	; 255
    2f24:	af 4f       	sbci	r26, 0xFF	; 255
    2f26:	bf 4f       	sbci	r27, 0xFF	; 255
    2f28:	34 f4       	brge	.+12     	; 0x2f36 <engineUpdate+0xb2a>
    2f2a:	6e e8       	ldi	r22, 0x8E	; 142
    2f2c:	78 e0       	ldi	r23, 0x08	; 8
    2f2e:	84 e5       	ldi	r24, 0x54	; 84
    2f30:	91 e0       	ldi	r25, 0x01	; 1
    2f32:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    2f36:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <LMIC+0x4>
    2f3a:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <LMIC+0x5>
    2f3e:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <LMIC+0x6>
    2f42:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <LMIC+0x7>
    2f46:	4d 57       	subi	r20, 0x7D	; 125
    2f48:	51 09       	sbc	r21, r1
    2f4a:	61 09       	sbc	r22, r1
    2f4c:	71 09       	sbc	r23, r1
    2f4e:	2d e3       	ldi	r18, 0x3D	; 61
    2f50:	39 e0       	ldi	r19, 0x09	; 9
    2f52:	94 cf       	rjmp	.-216    	; 0x2e7c <engineUpdate+0xa70>
    2f54:	62 96       	adiw	r28, 0x12	; 18
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	1f 91       	pop	r17
    2f66:	0f 91       	pop	r16
    2f68:	ff 90       	pop	r15
    2f6a:	ef 90       	pop	r14
    2f6c:	df 90       	pop	r13
    2f6e:	cf 90       	pop	r12
    2f70:	bf 90       	pop	r11
    2f72:	af 90       	pop	r10
    2f74:	9f 90       	pop	r9
    2f76:	8f 90       	pop	r8
    2f78:	7f 90       	pop	r7
    2f7a:	6f 90       	pop	r6
    2f7c:	5f 90       	pop	r5
    2f7e:	4f 90       	pop	r4
    2f80:	3f 90       	pop	r3
    2f82:	2f 90       	pop	r2
    2f84:	08 95       	ret

00002f86 <reportEvent>:
    2f86:	0e 94 41 02 	call	0x482	; 0x482 <onEvent>
    2f8a:	0c 94 06 12 	jmp	0x240c	; 0x240c <engineUpdate>

00002f8e <onBcnRx>:
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	0e 94 1c 21 	call	0x4238	; 0x4238 <os_radio>
    2f94:	80 ef       	ldi	r24, 0xF0	; 240
    2f96:	92 e0       	ldi	r25, 0x02	; 2
    2f98:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <os_clearCallback>
    2f9c:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    2fa0:	81 11       	cpse	r24, r1
    2fa2:	0b c0       	rjmp	.+22     	; 0x2fba <onBcnRx+0x2c>
    2fa4:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    2fa8:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    2fac:	8c 7f       	andi	r24, 0xFC	; 252
    2fae:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    2fb2:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	49 c0       	rjmp	.+146    	; 0x304c <onBcnRx+0xbe>
    2fba:	0e 94 01 0c 	call	0x1802	; 0x1802 <decodeBeacon>
    2fbe:	18 16       	cp	r1, r24
    2fc0:	19 06       	cpc	r1, r25
    2fc2:	9c f0       	brlt	.+38     	; 0x2fea <onBcnRx+0x5c>
    2fc4:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	0e 94 1c 21 	call	0x4238	; 0x4238 <os_radio>
    2fce:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <LMIC+0x189>
    2fd2:	50 91 67 04 	lds	r21, 0x0467	; 0x800467 <LMIC+0x18a>
    2fd6:	60 91 68 04 	lds	r22, 0x0468	; 0x800468 <LMIC+0x18b>
    2fda:	70 91 69 04 	lds	r23, 0x0469	; 0x800469 <LMIC+0x18c>
    2fde:	27 ec       	ldi	r18, 0xC7	; 199
    2fe0:	37 e1       	ldi	r19, 0x17	; 23
    2fe2:	80 ef       	ldi	r24, 0xF0	; 240
    2fe4:	92 e0       	ldi	r25, 0x02	; 2
    2fe6:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <os_setTimedCallback>
    2fea:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <LMIC+0xaf>
    2fee:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <LMIC+0xae>
    2ff2:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <LMIC+0xb3>
    2ff6:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <LMIC+0xb2>
    2ffa:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <LMIC+0x12c>
    2ffe:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <LMIC+0x18f>
    3002:	8c 60       	ori	r24, 0x0C	; 12
    3004:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <LMIC+0x18f>
    3008:	8b e0       	ldi	r24, 0x0B	; 11
    300a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <LMIC+0x184>
    300e:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <LMIC+0x189>
    3012:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <LMIC+0x18a>
    3016:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <LMIC+0x18b>
    301a:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <LMIC+0x18c>
    301e:	80 58       	subi	r24, 0x80	; 128
    3020:	9f 4e       	sbci	r25, 0xEF	; 239
    3022:	a5 48       	sbci	r26, 0x85	; 133
    3024:	bf 4f       	sbci	r27, 0xFF	; 255
    3026:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <LMIC+0x185>
    302a:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <LMIC+0x186>
    302e:	a0 93 64 04 	sts	0x0464, r26	; 0x800464 <LMIC+0x187>
    3032:	b0 93 65 04 	sts	0x0465, r27	; 0x800465 <LMIC+0x188>
    3036:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    303a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    303e:	8e 7f       	andi	r24, 0xFE	; 254
    3040:	82 60       	ori	r24, 0x02	; 2
    3042:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    3046:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <reportEvent>

00003050 <processBeacon>:
    3050:	cf 92       	push	r12
    3052:	df 92       	push	r13
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	cf 93       	push	r28
    305a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    305e:	88 23       	and	r24, r24
    3060:	09 f4       	brne	.+2      	; 0x3064 <processBeacon+0x14>
    3062:	7f c0       	rjmp	.+254    	; 0x3162 <processBeacon+0x112>
    3064:	c0 90 66 04 	lds	r12, 0x0466	; 0x800466 <LMIC+0x189>
    3068:	d0 90 67 04 	lds	r13, 0x0467	; 0x800467 <LMIC+0x18a>
    306c:	e0 90 68 04 	lds	r14, 0x0468	; 0x800468 <LMIC+0x18b>
    3070:	f0 90 69 04 	lds	r15, 0x0469	; 0x800469 <LMIC+0x18c>
    3074:	c0 91 6c 04 	lds	r28, 0x046C	; 0x80046c <LMIC+0x18f>
    3078:	0e 94 01 0c 	call	0x1802	; 0x1802 <decodeBeacon>
    307c:	18 16       	cp	r1, r24
    307e:	19 06       	cpc	r1, r25
    3080:	0c f0       	brlt	.+2      	; 0x3084 <processBeacon+0x34>
    3082:	6f c0       	rjmp	.+222    	; 0x3162 <processBeacon+0x112>
    3084:	c3 70       	andi	r28, 0x03	; 3
    3086:	c9 f4       	brne	.+50     	; 0x30ba <processBeacon+0x6a>
    3088:	8b e0       	ldi	r24, 0x0B	; 11
    308a:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <LMIC+0x184>
    308e:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <LMIC+0x189>
    3092:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <LMIC+0x18a>
    3096:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <LMIC+0x18b>
    309a:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <LMIC+0x18c>
    309e:	80 58       	subi	r24, 0x80	; 128
    30a0:	9f 4e       	sbci	r25, 0xEF	; 239
    30a2:	a5 48       	sbci	r26, 0x85	; 133
    30a4:	bf 4f       	sbci	r27, 0xFF	; 255
    30a6:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <LMIC+0x185>
    30aa:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <LMIC+0x186>
    30ae:	a0 93 64 04 	sts	0x0464, r26	; 0x800464 <LMIC+0x187>
    30b2:	b0 93 65 04 	sts	0x0465, r27	; 0x800465 <LMIC+0x188>
    30b6:	c4 e0       	ldi	r28, 0x04	; 4
    30b8:	de c0       	rjmp	.+444    	; 0x3276 <processBeacon+0x226>
    30ba:	2e ee       	ldi	r18, 0xEE	; 238
    30bc:	d2 1a       	sub	r13, r18
    30be:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <LMIC+0x189>
    30c2:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <LMIC+0x18a>
    30c6:	c8 1a       	sub	r12, r24
    30c8:	d9 0a       	sbc	r13, r25
    30ca:	60 91 09 04 	lds	r22, 0x0409	; 0x800409 <LMIC+0x12c>
    30ce:	66 23       	and	r22, r22
    30d0:	79 f0       	breq	.+30     	; 0x30f0 <processBeacon+0xa0>
    30d2:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <LMIC+0xae>
    30d6:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <LMIC+0xaf>
    30da:	c6 01       	movw	r24, r12
    30dc:	82 1b       	sub	r24, r18
    30de:	93 0b       	sbc	r25, r19
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	6f 5f       	subi	r22, 0xFF	; 255
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	0e 94 14 27 	call	0x4e28	; 0x4e28 <__divmodhi4>
    30ea:	69 01       	movw	r12, r18
    30ec:	c6 0e       	add	r12, r22
    30ee:	d7 1e       	adc	r13, r23
    30f0:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <LMIC+0x18f>
    30f4:	22 fd       	sbrc	r18, 2
    30f6:	1d c0       	rjmp	.+58     	; 0x3132 <processBeacon+0xe2>
    30f8:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <LMIC+0xae>
    30fc:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <LMIC+0xaf>
    3100:	8c 19       	sub	r24, r12
    3102:	9d 09       	sbc	r25, r13
    3104:	97 ff       	sbrs	r25, 7
    3106:	03 c0       	rjmp	.+6      	; 0x310e <processBeacon+0xbe>
    3108:	91 95       	neg	r25
    310a:	81 95       	neg	r24
    310c:	91 09       	sbc	r25, r1
    310e:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <LMIC+0xb1>
    3112:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <LMIC+0xb0>
    3116:	40 91 8f 03 	lds	r20, 0x038F	; 0x80038f <LMIC+0xb2>
    311a:	50 91 90 03 	lds	r21, 0x0390	; 0x800390 <LMIC+0xb3>
    311e:	48 17       	cp	r20, r24
    3120:	59 07       	cpc	r21, r25
    3122:	24 f4       	brge	.+8      	; 0x312c <processBeacon+0xdc>
    3124:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <LMIC+0xb3>
    3128:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <LMIC+0xb2>
    312c:	27 7f       	andi	r18, 0xF7	; 247
    312e:	20 93 6c 04 	sts	0x046C, r18	; 0x80046c <LMIC+0x18f>
    3132:	d0 92 8c 03 	sts	0x038C, r13	; 0x80038c <LMIC+0xaf>
    3136:	c0 92 8b 03 	sts	0x038B, r12	; 0x80038b <LMIC+0xae>
    313a:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <LMIC+0xad>
    313e:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <LMIC+0x12c>
    3142:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <LMIC+0x18f>
    3146:	98 2f       	mov	r25, r24
    3148:	9b 7f       	andi	r25, 0xFB	; 251
    314a:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <LMIC+0x18f>
    314e:	83 70       	andi	r24, 0x03	; 3
    3150:	09 f0       	breq	.+2      	; 0x3154 <processBeacon+0x104>
    3152:	6d c0       	rjmp	.+218    	; 0x322e <processBeacon+0x1de>
    3154:	64 ec       	ldi	r22, 0xC4	; 196
    3156:	77 e0       	ldi	r23, 0x07	; 7
    3158:	84 e5       	ldi	r24, 0x54	; 84
    315a:	91 e0       	ldi	r25, 0x01	; 1
    315c:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    3160:	66 c0       	rjmp	.+204    	; 0x322e <processBeacon+0x1de>
    3162:	c0 90 8b 03 	lds	r12, 0x038B	; 0x80038b <LMIC+0xae>
    3166:	d0 90 8c 03 	lds	r13, 0x038C	; 0x80038c <LMIC+0xaf>
    316a:	0d 2c       	mov	r0, r13
    316c:	00 0c       	add	r0, r0
    316e:	ee 08       	sbc	r14, r14
    3170:	ff 08       	sbc	r15, r15
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	92 e1       	ldi	r25, 0x12	; 18
    3176:	aa e7       	ldi	r26, 0x7A	; 122
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	ac 01       	movw	r20, r24
    317c:	bd 01       	movw	r22, r26
    317e:	4c 19       	sub	r20, r12
    3180:	5d 09       	sbc	r21, r13
    3182:	6e 09       	sbc	r22, r14
    3184:	7f 09       	sbc	r23, r15
    3186:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <LMIC+0x189>
    318a:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <LMIC+0x18a>
    318e:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <LMIC+0x18b>
    3192:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <LMIC+0x18c>
    3196:	84 0f       	add	r24, r20
    3198:	95 1f       	adc	r25, r21
    319a:	a6 1f       	adc	r26, r22
    319c:	b7 1f       	adc	r27, r23
    319e:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <LMIC+0x189>
    31a2:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <LMIC+0x18a>
    31a6:	a0 93 68 04 	sts	0x0468, r26	; 0x800468 <LMIC+0x18b>
    31aa:	b0 93 69 04 	sts	0x0469, r27	; 0x800469 <LMIC+0x18c>
    31ae:	c0 90 6d 04 	lds	r12, 0x046D	; 0x80046d <LMIC+0x190>
    31b2:	d0 90 6e 04 	lds	r13, 0x046E	; 0x80046e <LMIC+0x191>
    31b6:	e0 90 6f 04 	lds	r14, 0x046F	; 0x80046f <LMIC+0x192>
    31ba:	f0 90 70 04 	lds	r15, 0x0470	; 0x800470 <LMIC+0x193>
    31be:	20 e8       	ldi	r18, 0x80	; 128
    31c0:	c2 0e       	add	r12, r18
    31c2:	d1 1c       	adc	r13, r1
    31c4:	e1 1c       	adc	r14, r1
    31c6:	f1 1c       	adc	r15, r1
    31c8:	c0 92 6d 04 	sts	0x046D, r12	; 0x80046d <LMIC+0x190>
    31cc:	d0 92 6e 04 	sts	0x046E, r13	; 0x80046e <LMIC+0x191>
    31d0:	e0 92 6f 04 	sts	0x046F, r14	; 0x80046f <LMIC+0x192>
    31d4:	f0 92 70 04 	sts	0x0470, r15	; 0x800470 <LMIC+0x193>
    31d8:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <LMIC+0x12c>
    31dc:	2f 5f       	subi	r18, 0xFF	; 255
    31de:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <LMIC+0x12c>
    31e2:	bc 01       	movw	r22, r24
    31e4:	cd 01       	movw	r24, r26
    31e6:	6c 56       	subi	r22, 0x6C	; 108
    31e8:	7a 4f       	sbci	r23, 0xFA	; 250
    31ea:	8d 4f       	sbci	r24, 0xFD	; 253
    31ec:	9f 4f       	sbci	r25, 0xFF	; 255
    31ee:	44 e0       	ldi	r20, 0x04	; 4
    31f0:	0e 94 40 08 	call	0x1080	; 0x1080 <txDelay>
    31f4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <LMIC+0x12c>
    31f8:	85 31       	cpi	r24, 0x15	; 21
    31fa:	48 f0       	brcs	.+18     	; 0x320e <processBeacon+0x1be>
    31fc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    3200:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    3204:	80 62       	ori	r24, 0x20	; 32
    3206:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    320a:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    320e:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <LMIC+0x184>
    3212:	85 36       	cpi	r24, 0x65	; 101
    3214:	70 f0       	brcs	.+28     	; 0x3232 <processBeacon+0x1e2>
    3216:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    321a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    321e:	8d 7d       	andi	r24, 0xDD	; 221
    3220:	99 7f       	andi	r25, 0xF9	; 249
    3222:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    3226:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    322a:	8b e0       	ldi	r24, 0x0B	; 11
    322c:	2c c0       	rjmp	.+88     	; 0x3286 <processBeacon+0x236>
    322e:	c4 e0       	ldi	r28, 0x04	; 4
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <processBeacon+0x1e4>
    3232:	c3 e0       	ldi	r28, 0x03	; 3
    3234:	c0 90 66 04 	lds	r12, 0x0466	; 0x800466 <LMIC+0x189>
    3238:	d0 90 67 04 	lds	r13, 0x0467	; 0x800467 <LMIC+0x18a>
    323c:	e0 90 68 04 	lds	r14, 0x0468	; 0x800468 <LMIC+0x18b>
    3240:	f0 90 69 04 	lds	r15, 0x0469	; 0x800469 <LMIC+0x18c>
    3244:	82 e1       	ldi	r24, 0x12	; 18
    3246:	d8 0e       	add	r13, r24
    3248:	8a e7       	ldi	r24, 0x7A	; 122
    324a:	e8 1e       	adc	r14, r24
    324c:	f1 1c       	adc	r15, r1
    324e:	63 e0       	ldi	r22, 0x03	; 3
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	0e 94 92 07 	call	0xf24	; 0xf24 <calcRxWindow>
    3256:	c6 1a       	sub	r12, r22
    3258:	d7 0a       	sbc	r13, r23
    325a:	e8 0a       	sbc	r14, r24
    325c:	f9 0a       	sbc	r15, r25
    325e:	c0 92 62 04 	sts	0x0462, r12	; 0x800462 <LMIC+0x185>
    3262:	d0 92 63 04 	sts	0x0463, r13	; 0x800463 <LMIC+0x186>
    3266:	e0 92 64 04 	sts	0x0464, r14	; 0x800464 <LMIC+0x187>
    326a:	f0 92 65 04 	sts	0x0465, r15	; 0x800465 <LMIC+0x188>
    326e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <LMIC+0x10>
    3272:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <LMIC+0x184>
    3276:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    327a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    327e:	91 fd       	sbrc	r25, 1
    3280:	0e 94 ef 0a 	call	0x15de	; 0x15de <rxschedInit.constprop.10>
    3284:	8c 2f       	mov	r24, r28
    3286:	cf 91       	pop	r28
    3288:	ff 90       	pop	r15
    328a:	ef 90       	pop	r14
    328c:	df 90       	pop	r13
    328e:	cf 90       	pop	r12
    3290:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <reportEvent>

00003294 <processJoinAccept>:
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <LMIC+0x140>
    32a8:	81 30       	cpi	r24, 0x01	; 1
    32aa:	51 f4       	brne	.+20     	; 0x32c0 <processJoinAccept+0x2c>
    32ac:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    32b0:	81 11       	cpse	r24, r1
    32b2:	06 c0       	rjmp	.+12     	; 0x32c0 <processJoinAccept+0x2c>
    32b4:	6c e9       	ldi	r22, 0x9C	; 156
    32b6:	75 e0       	ldi	r23, 0x05	; 5
    32b8:	84 e5       	ldi	r24, 0x54	; 84
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    32c0:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    32c4:	87 fd       	sbrc	r24, 7
    32c6:	06 c0       	rjmp	.+12     	; 0x32d4 <processJoinAccept+0x40>
    32c8:	6d e9       	ldi	r22, 0x9D	; 157
    32ca:	75 e0       	ldi	r23, 0x05	; 5
    32cc:	84 e5       	ldi	r24, 0x54	; 84
    32ce:	91 e0       	ldi	r25, 0x01	; 1
    32d0:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    32d4:	10 91 1f 04 	lds	r17, 0x041F	; 0x80041f <LMIC+0x142>
    32d8:	11 11       	cpse	r17, r1
    32da:	94 c0       	rjmp	.+296    	; 0x3404 <processJoinAccept+0x170>
    32dc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    32e0:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    32e4:	82 fd       	sbrc	r24, 2
    32e6:	1a c0       	rjmp	.+52     	; 0x331c <processJoinAccept+0x88>
    32e8:	85 fd       	sbrc	r24, 5
    32ea:	06 c0       	rjmp	.+12     	; 0x32f8 <processJoinAccept+0x64>
    32ec:	62 ea       	ldi	r22, 0xA2	; 162
    32ee:	75 e0       	ldi	r23, 0x05	; 5
    32f0:	84 e5       	ldi	r24, 0x54	; 84
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    32f8:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    32fc:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    3300:	8f 75       	andi	r24, 0x5F	; 95
    3302:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    3306:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    330a:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <LMIC+0xad>
    330e:	8a 30       	cpi	r24, 0x0A	; 10
    3310:	18 f4       	brcc	.+6      	; 0x3318 <processJoinAccept+0x84>
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <LMIC+0xad>
    3318:	89 e0       	ldi	r24, 0x09	; 9
    331a:	60 c1       	rjmp	.+704    	; 0x35dc <processJoinAccept+0x348>
    331c:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <LMIC+0x9d>
    3320:	2f 5f       	subi	r18, 0xFF	; 255
    3322:	23 30       	cpi	r18, 0x03	; 3
    3324:	19 f0       	breq	.+6      	; 0x332c <processJoinAccept+0x98>
    3326:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <LMIC+0x9d>
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <processJoinAccept+0x9c>
    332c:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <LMIC+0x9d>
    3330:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <LMIC+0x13f>
    3334:	2f 5f       	subi	r18, 0xFF	; 255
    3336:	20 93 1c 04 	sts	0x041C, r18	; 0x80041c <LMIC+0x13f>
    333a:	20 fd       	sbrc	r18, 0
    333c:	0e c0       	rjmp	.+28     	; 0x335a <processJoinAccept+0xc6>
    333e:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <LMIC+0xab>
    3342:	22 23       	and	r18, r18
    3344:	61 f0       	breq	.+24     	; 0x335e <processJoinAccept+0xca>
    3346:	e2 2f       	mov	r30, r18
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	ea 57       	subi	r30, 0x7A	; 122
    334c:	fc 4f       	sbci	r31, 0xFC	; 252
    334e:	e4 91       	lpm	r30, Z
    3350:	ef 3f       	cpi	r30, 0xFF	; 255
    3352:	09 f0       	breq	.+2      	; 0x3356 <processJoinAccept+0xc2>
    3354:	21 50       	subi	r18, 0x01	; 1
    3356:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <LMIC+0xab>
    335a:	c0 e0       	ldi	r28, 0x00	; 0
    335c:	01 c0       	rjmp	.+2      	; 0x3360 <processJoinAccept+0xcc>
    335e:	c1 e0       	ldi	r28, 0x01	; 1
    3360:	8f 77       	andi	r24, 0x7F	; 127
    3362:	97 7f       	andi	r25, 0xF7	; 247
    3364:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    3368:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    336c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    3370:	6b 01       	movw	r12, r22
    3372:	7c 01       	movw	r14, r24
    3374:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <LMIC+0x1f>
    3378:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <LMIC+0x20>
    337c:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <LMIC+0x21>
    3380:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <LMIC+0x22>
    3384:	b7 01       	movw	r22, r14
    3386:	a6 01       	movw	r20, r12
    3388:	48 1b       	sub	r20, r24
    338a:	59 0b       	sbc	r21, r25
    338c:	6a 0b       	sbc	r22, r26
    338e:	7b 0b       	sbc	r23, r27
    3390:	77 ff       	sbrs	r23, 7
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <processJoinAccept+0x104>
    3394:	6c 01       	movw	r12, r24
    3396:	7d 01       	movw	r14, r26
    3398:	8f ef       	ldi	r24, 0xFF	; 255
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	00 90 88 03 	lds	r0, 0x0388	; 0x800388 <LMIC+0xab>
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <processJoinAccept+0x112>
    33a2:	95 95       	asr	r25
    33a4:	87 95       	ror	r24
    33a6:	0a 94       	dec	r0
    33a8:	e2 f7       	brpl	.-8      	; 0x33a2 <processJoinAccept+0x10e>
    33aa:	0e 94 09 08 	call	0x1012	; 0x1012 <rndDelay>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	84 59       	subi	r24, 0x94	; 148
    33b4:	93 42       	sbci	r25, 0x23	; 35
    33b6:	ad 4f       	sbci	r26, 0xFD	; 253
    33b8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ba:	c8 0e       	add	r12, r24
    33bc:	d9 1e       	adc	r13, r25
    33be:	ea 1e       	adc	r14, r26
    33c0:	fb 1e       	adc	r15, r27
    33c2:	c0 92 dd 02 	sts	0x02DD, r12	; 0x8002dd <LMIC>
    33c6:	d0 92 de 02 	sts	0x02DE, r13	; 0x8002de <LMIC+0x1>
    33ca:	e0 92 df 02 	sts	0x02DF, r14	; 0x8002df <LMIC+0x2>
    33ce:	f0 92 e0 02 	sts	0x02E0, r15	; 0x8002e0 <LMIC+0x3>
    33d2:	cc 2e       	mov	r12, r28
    33d4:	d1 2c       	mov	r13, r1
    33d6:	e1 2c       	mov	r14, r1
    33d8:	f1 2c       	mov	r15, r1
    33da:	c1 11       	cpse	r28, r1
    33dc:	03 c0       	rjmp	.+6      	; 0x33e4 <processJoinAccept+0x150>
    33de:	cb e1       	ldi	r28, 0x1B	; 27
    33e0:	db e1       	ldi	r29, 0x1B	; 27
    33e2:	02 c0       	rjmp	.+4      	; 0x33e8 <processJoinAccept+0x154>
    33e4:	c5 e1       	ldi	r28, 0x15	; 21
    33e6:	db e1       	ldi	r29, 0x1B	; 27
    33e8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    33ec:	ab 01       	movw	r20, r22
    33ee:	bc 01       	movw	r22, r24
    33f0:	4c 0d       	add	r20, r12
    33f2:	5d 1d       	adc	r21, r13
    33f4:	6e 1d       	adc	r22, r14
    33f6:	7f 1d       	adc	r23, r15
    33f8:	9e 01       	movw	r18, r28
    33fa:	80 ef       	ldi	r24, 0xF0	; 240
    33fc:	92 e0       	ldi	r25, 0x02	; 2
    33fe:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <os_setTimedCallback>
    3402:	ee c0       	rjmp	.+476    	; 0x35e0 <processJoinAccept+0x34c>
    3404:	11 31       	cpi	r17, 0x11	; 17
    3406:	41 f0       	breq	.+16     	; 0x3418 <processJoinAccept+0x184>
    3408:	11 32       	cpi	r17, 0x21	; 33
    340a:	31 f0       	breq	.+12     	; 0x3418 <processJoinAccept+0x184>
    340c:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <LMIC+0x140>
    3410:	80 ff       	sbrs	r24, 0
    3412:	64 cf       	rjmp	.-312    	; 0x32dc <processJoinAccept+0x48>
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	e5 c0       	rjmp	.+458    	; 0x35e2 <processJoinAccept+0x34e>
    3418:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <LMIC+0x143>
    341c:	83 7e       	andi	r24, 0xE3	; 227
    341e:	80 32       	cpi	r24, 0x20	; 32
    3420:	a9 f7       	brne	.-22     	; 0x340c <processJoinAccept+0x178>
    3422:	c1 2f       	mov	r28, r17
    3424:	d0 e0       	ldi	r29, 0x00	; 0
    3426:	8d eb       	ldi	r24, 0xBD	; 189
    3428:	92 e0       	ldi	r25, 0x02	; 2
    342a:	0e 94 40 02 	call	0x480	; 0x480 <os_getDevKey>
    342e:	ae 01       	movw	r20, r28
    3430:	41 50       	subi	r20, 0x01	; 1
    3432:	51 09       	sbc	r21, r1
    3434:	61 e2       	ldi	r22, 0x21	; 33
    3436:	74 e0       	ldi	r23, 0x04	; 4
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    343e:	8d eb       	ldi	r24, 0xBD	; 189
    3440:	92 e0       	ldi	r25, 0x02	; 2
    3442:	0e 94 40 02 	call	0x480	; 0x480 <os_getDevKey>
    3446:	24 97       	sbiw	r28, 0x04	; 4
    3448:	ae 01       	movw	r20, r28
    344a:	60 e2       	ldi	r22, 0x20	; 32
    344c:	74 e0       	ldi	r23, 0x04	; 4
    344e:	8a e0       	ldi	r24, 0x0A	; 10
    3450:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    3454:	6b 01       	movw	r12, r22
    3456:	7c 01       	movw	r14, r24
    3458:	ce 01       	movw	r24, r28
    345a:	80 5e       	subi	r24, 0xE0	; 224
    345c:	9b 4f       	sbci	r25, 0xFB	; 251
    345e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <os_rmsbf4>
    3462:	c6 16       	cp	r12, r22
    3464:	d7 06       	cpc	r13, r23
    3466:	e8 06       	cpc	r14, r24
    3468:	f9 06       	cpc	r15, r25
    346a:	81 f6       	brne	.-96     	; 0x340c <processJoinAccept+0x178>
    346c:	87 e2       	ldi	r24, 0x27	; 39
    346e:	94 e0       	ldi	r25, 0x04	; 4
    3470:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    3474:	60 93 ec 03 	sts	0x03EC, r22	; 0x8003ec <LMIC+0x10f>
    3478:	70 93 ed 03 	sts	0x03ED, r23	; 0x8003ed <LMIC+0x110>
    347c:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <LMIC+0x111>
    3480:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <LMIC+0x112>
    3484:	84 e2       	ldi	r24, 0x24	; 36
    3486:	94 e0       	ldi	r25, 0x04	; 4
    3488:	0e 94 76 0a 	call	0x14ec	; 0x14ec <os_rlsbf4>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	bb 27       	eor	r27, r27
    3492:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <LMIC+0xa3>
    3496:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <LMIC+0xa4>
    349a:	a0 93 82 03 	sts	0x0382, r26	; 0x800382 <LMIC+0xa5>
    349e:	b0 93 83 03 	sts	0x0383, r27	; 0x800383 <LMIC+0xa6>
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	0e 94 df 09 	call	0x13be	; 0x13be <initDefaultChannels>
    34a8:	12 31       	cpi	r17, 0x12	; 18
    34aa:	08 f0       	brcs	.+2      	; 0x34ae <processJoinAccept+0x21a>
    34ac:	4d c0       	rjmp	.+154    	; 0x3548 <processJoinAccept+0x2b4>
    34ae:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <LMIC+0xed>
    34b2:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <LMIC+0xee>
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	20 e1       	ldi	r18, 0x10	; 16
    34ba:	ec ec       	ldi	r30, 0xCC	; 204
    34bc:	f3 e0       	ldi	r31, 0x03	; 3
    34be:	df 01       	movw	r26, r30
    34c0:	32 2f       	mov	r19, r18
    34c2:	1d 92       	st	X+, r1
    34c4:	3a 95       	dec	r19
    34c6:	e9 f7       	brne	.-6      	; 0x34c2 <processJoinAccept+0x22e>
    34c8:	31 e0       	ldi	r19, 0x01	; 1
    34ca:	30 93 cc 03 	sts	0x03CC, r19	; 0x8003cc <LMIC+0xef>
    34ce:	36 e0       	ldi	r19, 0x06	; 6
    34d0:	e1 e2       	ldi	r30, 0x21	; 33
    34d2:	f4 e0       	ldi	r31, 0x04	; 4
    34d4:	ad ec       	ldi	r26, 0xCD	; 205
    34d6:	b3 e0       	ldi	r27, 0x03	; 3
    34d8:	01 90       	ld	r0, Z+
    34da:	0d 92       	st	X+, r0
    34dc:	3a 95       	dec	r19
    34de:	e1 f7       	brne	.-8      	; 0x34d8 <processJoinAccept+0x244>
    34e0:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <LMIC+0xf6>
    34e4:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <LMIC+0xf7>
    34e8:	ec ec       	ldi	r30, 0xCC	; 204
    34ea:	f3 e0       	ldi	r31, 0x03	; 3
    34ec:	ac ed       	ldi	r26, 0xDC	; 220
    34ee:	b3 e0       	ldi	r27, 0x03	; 3
    34f0:	01 90       	ld	r0, Z+
    34f2:	0d 92       	st	X+, r0
    34f4:	2a 95       	dec	r18
    34f6:	e1 f7       	brne	.-8      	; 0x34f0 <processJoinAccept+0x25c>
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <LMIC+0xff>
    34fe:	8d eb       	ldi	r24, 0xBD	; 189
    3500:	92 e0       	ldi	r25, 0x02	; 2
    3502:	0e 94 40 02 	call	0x480	; 0x480 <os_getDevKey>
    3506:	40 e1       	ldi	r20, 0x10	; 16
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	6c ec       	ldi	r22, 0xCC	; 204
    350c:	73 e0       	ldi	r23, 0x03	; 3
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    3514:	8d eb       	ldi	r24, 0xBD	; 189
    3516:	92 e0       	ldi	r25, 0x02	; 2
    3518:	0e 94 40 02 	call	0x480	; 0x480 <os_getDevKey>
    351c:	40 e1       	ldi	r20, 0x10	; 16
    351e:	50 e0       	ldi	r21, 0x00	; 0
    3520:	6c ed       	ldi	r22, 0xDC	; 220
    3522:	73 e0       	ldi	r23, 0x03	; 3
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    352a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    352e:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    3532:	84 72       	andi	r24, 0x24	; 36
    3534:	99 27       	eor	r25, r25
    3536:	89 2b       	or	r24, r25
    3538:	19 f5       	brne	.+70     	; 0x3580 <processJoinAccept+0x2ec>
    353a:	66 ef       	ldi	r22, 0xF6	; 246
    353c:	75 e0       	ldi	r23, 0x05	; 5
    353e:	84 e5       	ldi	r24, 0x54	; 84
    3540:	91 e0       	ldi	r25, 0x01	; 1
    3542:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    3546:	1c c0       	rjmp	.+56     	; 0x3580 <processJoinAccept+0x2ec>
    3548:	8d e2       	ldi	r24, 0x2D	; 45
    354a:	e8 2e       	mov	r14, r24
    354c:	84 e0       	ldi	r24, 0x04	; 4
    354e:	f8 2e       	mov	r15, r24
    3550:	c3 e0       	ldi	r28, 0x03	; 3
    3552:	c7 01       	movw	r24, r14
    3554:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <convFreq>
    3558:	ab 01       	movw	r20, r22
    355a:	bc 01       	movw	r22, r24
    355c:	41 15       	cp	r20, r1
    355e:	51 05       	cpc	r21, r1
    3560:	61 05       	cpc	r22, r1
    3562:	71 05       	cpc	r23, r1
    3564:	31 f0       	breq	.+12     	; 0x3572 <processJoinAccept+0x2de>
    3566:	0f ef       	ldi	r16, 0xFF	; 255
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	8c 2f       	mov	r24, r28
    356e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <LMIC_setupChannel>
    3572:	cf 5f       	subi	r28, 0xFF	; 255
    3574:	83 e0       	ldi	r24, 0x03	; 3
    3576:	e8 0e       	add	r14, r24
    3578:	f1 1c       	adc	r15, r1
    357a:	c8 30       	cpi	r28, 0x08	; 8
    357c:	51 f7       	brne	.-44     	; 0x3552 <processJoinAccept+0x2be>
    357e:	97 cf       	rjmp	.-210    	; 0x34ae <processJoinAccept+0x21a>
    3580:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    3584:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    3588:	85 ff       	sbrs	r24, 5
    358a:	11 c0       	rjmp	.+34     	; 0x35ae <processJoinAccept+0x31a>
    358c:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <LMIC+0xad>
    3590:	20 91 88 03 	lds	r18, 0x0388	; 0x800388 <LMIC+0xab>
    3594:	31 50       	subi	r19, 0x01	; 1
    3596:	48 f0       	brcs	.+18     	; 0x35aa <processJoinAccept+0x316>
    3598:	e2 2f       	mov	r30, r18
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	ea 57       	subi	r30, 0x7A	; 122
    359e:	fc 4f       	sbci	r31, 0xFC	; 252
    35a0:	e4 91       	lpm	r30, Z
    35a2:	ef 3f       	cpi	r30, 0xFF	; 255
    35a4:	b9 f3       	breq	.-18     	; 0x3594 <processJoinAccept+0x300>
    35a6:	21 50       	subi	r18, 0x01	; 1
    35a8:	f5 cf       	rjmp	.-22     	; 0x3594 <processJoinAccept+0x300>
    35aa:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <LMIC+0xab>
    35ae:	89 75       	andi	r24, 0x59	; 89
    35b0:	9d 7f       	andi	r25, 0xFD	; 253
    35b2:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    35b6:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    35ba:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <LMIC+0x13f>
    35be:	0e 94 4c 07 	call	0xe98	; 0xe98 <stateJustJoined>
    35c2:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <LMIC+0x14e>
    35c6:	8f 70       	andi	r24, 0x0F	; 15
    35c8:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <LMIC+0x126>
    35cc:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <LMIC+0x14f>
    35d0:	81 11       	cpse	r24, r1
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <processJoinAccept+0x342>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <LMIC+0x11e>
    35da:	86 e0       	ldi	r24, 0x06	; 6
    35dc:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <reportEvent>
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    35ea:	ff 90       	pop	r15
    35ec:	ef 90       	pop	r14
    35ee:	df 90       	pop	r13
    35f0:	cf 90       	pop	r12
    35f2:	08 95       	ret

000035f4 <processRx1Jacc>:
    35f4:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    35f8:	81 11       	cpse	r24, r1
    35fa:	0a c0       	rjmp	.+20     	; 0x3610 <processRx1Jacc+0x1c>
    35fc:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <LMIC+0x126>
    3600:	4b e8       	ldi	r20, 0x8B	; 139
    3602:	59 e0       	ldi	r21, 0x09	; 9
    3604:	68 ed       	ldi	r22, 0xD8	; 216
    3606:	78 eb       	ldi	r23, 0xB8	; 184
    3608:	85 e0       	ldi	r24, 0x05	; 5
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <schedRx12>
    3610:	0e 94 4a 19 	call	0x3294	; 0x3294 <processJoinAccept>
    3614:	88 23       	and	r24, r24
    3616:	91 f3       	breq	.-28     	; 0x35fc <processRx1Jacc+0x8>
    3618:	08 95       	ret

0000361a <processRx2Jacc>:
    361a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    361e:	81 11       	cpse	r24, r1
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <processRx2Jacc+0xc>
    3622:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <LMIC+0x140>
    3626:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <processJoinAccept>

0000362a <onJoinFailed>:
    362a:	88 e0       	ldi	r24, 0x08	; 8
    362c:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <reportEvent>

00003630 <startJoining>:
    3630:	85 e0       	ldi	r24, 0x05	; 5
    3632:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <reportEvent>

00003636 <runEngineUpdate>:
    3636:	0c 94 06 12 	jmp	0x240c	; 0x240c <engineUpdate>

0000363a <processPingRx>:
    363a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    363e:	88 23       	and	r24, r24
    3640:	51 f0       	breq	.+20     	; 0x3656 <processPingRx+0x1c>
    3642:	84 e0       	ldi	r24, 0x04	; 4
    3644:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <LMIC+0x140>
    3648:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <decodeFrame>
    364c:	88 23       	and	r24, r24
    364e:	19 f0       	breq	.+6      	; 0x3656 <processPingRx+0x1c>
    3650:	8d e0       	ldi	r24, 0x0D	; 13
    3652:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <reportEvent>
    3656:	0c 94 06 12 	jmp	0x240c	; 0x240c <engineUpdate>

0000365a <processDnData>:
    365a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    365e:	87 fd       	sbrc	r24, 7
    3660:	06 c0       	rjmp	.+12     	; 0x366e <processDnData+0x14>
    3662:	61 e6       	ldi	r22, 0x61	; 97
    3664:	77 e0       	ldi	r23, 0x07	; 7
    3666:	84 e5       	ldi	r24, 0x54	; 84
    3668:	91 e0       	ldi	r25, 0x01	; 1
    366a:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    366e:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    3672:	81 11       	cpse	r24, r1
    3674:	98 c0       	rjmp	.+304    	; 0x37a6 <processDnData+0x14c>
    3676:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <LMIC+0x13f>
    367a:	ee 23       	and	r30, r30
    367c:	91 f1       	breq	.+100    	; 0x36e2 <processDnData+0x88>
    367e:	e8 30       	cpi	r30, 0x08	; 8
    3680:	70 f5       	brcc	.+92     	; 0x36de <processDnData+0x84>
    3682:	ef 5f       	subi	r30, 0xFF	; 255
    3684:	e0 93 1c 04 	sts	0x041C, r30	; 0x80041c <LMIC+0x13f>
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	e9 5a       	subi	r30, 0xA9	; 169
    368c:	fc 4f       	sbci	r31, 0xFC	; 252
    368e:	94 91       	lpm	r25, Z
    3690:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <LMIC+0xab>
    3694:	91 50       	subi	r25, 0x01	; 1
    3696:	48 f0       	brcs	.+18     	; 0x36aa <processDnData+0x50>
    3698:	e8 2f       	mov	r30, r24
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	ea 57       	subi	r30, 0x7A	; 122
    369e:	fc 4f       	sbci	r31, 0xFC	; 252
    36a0:	e4 91       	lpm	r30, Z
    36a2:	ef 3f       	cpi	r30, 0xFF	; 255
    36a4:	b9 f3       	breq	.-18     	; 0x3694 <processDnData+0x3a>
    36a6:	81 50       	subi	r24, 0x01	; 1
    36a8:	f5 cf       	rjmp	.-22     	; 0x3694 <processDnData+0x3a>
    36aa:	60 e8       	ldi	r22, 0x80	; 128
    36ac:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <setDrTxpow.isra.1>
    36b0:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <LMIC+0x4>
    36b4:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <LMIC+0x5>
    36b8:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <LMIC+0x6>
    36bc:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <LMIC+0x7>
    36c0:	43 e0       	ldi	r20, 0x03	; 3
    36c2:	0e 94 40 08 	call	0x1080	; 0x1080 <txDelay>
    36c6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    36ca:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    36ce:	8f 77       	andi	r24, 0x7F	; 127
    36d0:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    36d4:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    36d8:	0e 94 06 12 	call	0x240c	; 0x240c <engineUpdate>
    36dc:	62 c0       	rjmp	.+196    	; 0x37a2 <processDnData+0x148>
    36de:	80 e6       	ldi	r24, 0x60	; 96
    36e0:	01 c0       	rjmp	.+2      	; 0x36e4 <processDnData+0x8a>
    36e2:	80 e2       	ldi	r24, 0x20	; 32
    36e4:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <LMIC+0x140>
    36e8:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <LMIC+0x11c>
    36ec:	80 38       	cpi	r24, 0x80	; 128
    36ee:	19 f0       	breq	.+6      	; 0x36f6 <processDnData+0x9c>
    36f0:	8f 5f       	subi	r24, 0xFF	; 255
    36f2:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x11c>
    36f6:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    36fa:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <LMIC+0x141>
    36fe:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    3702:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    3706:	9c 01       	movw	r18, r24
    3708:	27 77       	andi	r18, 0x77	; 119
    370a:	30 93 85 03 	sts	0x0385, r19	; 0x800385 <LMIC+0xa8>
    370e:	20 93 84 03 	sts	0x0384, r18	; 0x800384 <LMIC+0xa7>
    3712:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <LMIC+0x140>
    3716:	27 70       	andi	r18, 0x07	; 7
    3718:	59 f0       	breq	.+22     	; 0x3730 <processDnData+0xd6>
    371a:	94 ff       	sbrs	r25, 4
    371c:	09 c0       	rjmp	.+18     	; 0x3730 <processDnData+0xd6>
    371e:	87 77       	andi	r24, 0x77	; 119
    3720:	9f 7e       	andi	r25, 0xEF	; 239
    3722:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    3726:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    372a:	8f e0       	ldi	r24, 0x0F	; 15
    372c:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <reportEvent>
    3730:	8a e0       	ldi	r24, 0x0A	; 10
    3732:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <reportEvent>
    3736:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <LMIC+0x11c>
    373a:	89 31       	cpi	r24, 0x19	; 25
    373c:	ec f0       	brlt	.+58     	; 0x3778 <processDnData+0x11e>
    373e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <LMIC+0xab>
    3742:	e8 2f       	mov	r30, r24
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	ea 57       	subi	r30, 0x7A	; 122
    3748:	fc 4f       	sbci	r31, 0xFC	; 252
    374a:	e4 91       	lpm	r30, Z
    374c:	ef 3f       	cpi	r30, 0xFF	; 255
    374e:	09 f0       	breq	.+2      	; 0x3752 <processDnData+0xf8>
    3750:	81 50       	subi	r24, 0x01	; 1
    3752:	60 e8       	ldi	r22, 0x80	; 128
    3754:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <setDrTxpow.isra.1>
    3758:	8c e0       	ldi	r24, 0x0C	; 12
    375a:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x11c>
    375e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    3762:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    3766:	80 62       	ori	r24, 0x20	; 32
    3768:	90 61       	ori	r25, 0x10	; 16
    376a:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    376e:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    3772:	8e e0       	ldi	r24, 0x0E	; 14
    3774:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <reportEvent>
    3778:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <LMIC+0x12d>
    377c:	88 23       	and	r24, r24
    377e:	89 f0       	breq	.+34     	; 0x37a2 <processDnData+0x148>
    3780:	90 91 84 03 	lds	r25, 0x0384	; 0x800384 <LMIC+0xa7>
    3784:	91 ff       	sbrs	r25, 1
    3786:	06 c0       	rjmp	.+12     	; 0x3794 <processDnData+0x13a>
    3788:	82 e0       	ldi	r24, 0x02	; 2
    378a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <reportEvent>
    378e:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <LMIC+0x12d>
    3792:	07 c0       	rjmp	.+14     	; 0x37a2 <processDnData+0x148>
    3794:	81 50       	subi	r24, 0x01	; 1
    3796:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <LMIC+0x12d>
    379a:	81 11       	cpse	r24, r1
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <processDnData+0x148>
    379e:	0e 94 93 09 	call	0x1326	; 0x1326 <startScan>
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	08 95       	ret
    37a6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <decodeFrame>
    37aa:	81 11       	cpse	r24, r1
    37ac:	a8 cf       	rjmp	.-176    	; 0x36fe <processDnData+0xa4>
    37ae:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <LMIC+0x140>
    37b2:	90 ff       	sbrs	r25, 0
    37b4:	60 cf       	rjmp	.-320    	; 0x3676 <processDnData+0x1c>
    37b6:	08 95       	ret

000037b8 <processRx1DnData>:
    37b8:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    37bc:	81 11       	cpse	r24, r1
    37be:	0e c0       	rjmp	.+28     	; 0x37dc <processRx1DnData+0x24>
    37c0:	a0 91 fb 03 	lds	r26, 0x03FB	; 0x8003fb <LMIC+0x11e>
    37c4:	b0 e0       	ldi	r27, 0x00	; 0
    37c6:	11 96       	adiw	r26, 0x01	; 1
    37c8:	24 e2       	ldi	r18, 0x24	; 36
    37ca:	34 ef       	ldi	r19, 0xF4	; 244
    37cc:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__usmulhisi3>
    37d0:	20 91 03 04 	lds	r18, 0x0403	; 0x800403 <LMIC+0x126>
    37d4:	43 e8       	ldi	r20, 0x83	; 131
    37d6:	59 e0       	ldi	r21, 0x09	; 9
    37d8:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <schedRx12>
    37dc:	0e 94 2d 1b 	call	0x365a	; 0x365a <processDnData>
    37e0:	88 23       	and	r24, r24
    37e2:	71 f3       	breq	.-36     	; 0x37c0 <processRx1DnData+0x8>
    37e4:	08 95       	ret

000037e6 <processRx2DnData>:
    37e6:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    37ea:	81 11       	cpse	r24, r1
    37ec:	0b c0       	rjmp	.+22     	; 0x3804 <processRx2DnData+0x1e>
    37ee:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <LMIC+0x140>
    37f2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    37f6:	64 59       	subi	r22, 0x94	; 148
    37f8:	73 42       	sbci	r23, 0x23	; 35
    37fa:	8d 4f       	sbci	r24, 0xFD	; 253
    37fc:	9f 4f       	sbci	r25, 0xFF	; 255
    37fe:	42 e0       	ldi	r20, 0x02	; 2
    3800:	0e 94 40 08 	call	0x1080	; 0x1080 <txDelay>
    3804:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <processDnData>

00003808 <LMIC_setDrTxpow>:
    3808:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <setDrTxpow.isra.1>

0000380c <LMIC_reset>:
    380c:	cf 93       	push	r28
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	0e 94 1c 21 	call	0x4238	; 0x4238 <os_radio>
    3814:	80 ef       	ldi	r24, 0xF0	; 240
    3816:	92 e0       	ldi	r25, 0x02	; 2
    3818:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <os_clearCallback>
    381c:	8d e9       	ldi	r24, 0x9D	; 157
    381e:	91 e0       	ldi	r25, 0x01	; 1
    3820:	ed ed       	ldi	r30, 0xDD	; 221
    3822:	f2 e0       	ldi	r31, 0x02	; 2
    3824:	df 01       	movw	r26, r30
    3826:	9c 01       	movw	r18, r24
    3828:	1d 92       	st	X+, r1
    382a:	21 50       	subi	r18, 0x01	; 1
    382c:	30 40       	sbci	r19, 0x00	; 0
    382e:	e1 f7       	brne	.-8      	; 0x3828 <LMIC_reset+0x1c>
    3830:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    3834:	c8 2f       	mov	r28, r24
    3836:	0e 94 47 20 	call	0x408e	; 0x408e <radio_rand1>
    383a:	2c 2f       	mov	r18, r28
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	32 2f       	mov	r19, r18
    3840:	22 27       	eor	r18, r18
    3842:	28 2b       	or	r18, r24
    3844:	30 93 cb 03 	sts	0x03CB, r19	; 0x8003cb <LMIC+0xee>
    3848:	20 93 ca 03 	sts	0x03CA, r18	; 0x8003ca <LMIC+0xed>
    384c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <LMIC+0xa8>
    3850:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <LMIC+0xa7>
    3854:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <LMIC+0xac>
    3858:	80 e8       	ldi	r24, 0x80	; 128
    385a:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <LMIC+0x122>
    385e:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <LMIC+0x126>
    3862:	88 e0       	ldi	r24, 0x08	; 8
    3864:	96 ee       	ldi	r25, 0xE6	; 230
    3866:	a3 ed       	ldi	r26, 0xD3	; 211
    3868:	b3 e3       	ldi	r27, 0x33	; 51
    386a:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <LMIC+0x127>
    386e:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <LMIC+0x128>
    3872:	a0 93 06 04 	sts	0x0406, r26	; 0x800406 <LMIC+0x129>
    3876:	b0 93 07 04 	sts	0x0407, r27	; 0x800407 <LMIC+0x12a>
    387a:	21 e0       	ldi	r18, 0x01	; 1
    387c:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <LMIC+0x11e>
    3880:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <LMIC+0x13b>
    3884:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <LMIC+0x13c>
    3888:	a0 93 1a 04 	sts	0x041A, r26	; 0x80041a <LMIC+0x13d>
    388c:	b0 93 1b 04 	sts	0x041B, r27	; 0x80041b <LMIC+0x13e>
    3890:	83 e0       	ldi	r24, 0x03	; 3
    3892:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <LMIC+0x12f>
    3896:	8f ef       	ldi	r24, 0xFF	; 255
    3898:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <LMIC+0x130>
    389c:	cf 91       	pop	r28
    389e:	08 95       	ret

000038a0 <runReset>:
    38a0:	0e 94 06 1c 	call	0x380c	; 0x380c <LMIC_reset>
    38a4:	0e 94 8b 11 	call	0x2316	; 0x2316 <LMIC_startJoining>
    38a8:	8c e0       	ldi	r24, 0x0C	; 12
    38aa:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <reportEvent>

000038ae <LMIC_init>:
    38ae:	80 e4       	ldi	r24, 0x40	; 64
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    38b6:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    38ba:	08 95       	ret

000038bc <LMIC_setTxData>:
    38bc:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    38c0:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    38c4:	9c 01       	movw	r18, r24
    38c6:	28 60       	ori	r18, 0x08	; 8
    38c8:	30 93 85 03 	sts	0x0385, r19	; 0x800385 <LMIC+0xa8>
    38cc:	20 93 84 03 	sts	0x0384, r18	; 0x800384 <LMIC+0xa7>
    38d0:	82 ff       	sbrs	r24, 2
    38d2:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <LMIC+0x13f>
    38d6:	0c 94 06 12 	jmp	0x240c	; 0x240c <engineUpdate>

000038da <LMIC_setTxData2>:
    38da:	1f 93       	push	r17
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	45 33       	cpi	r20, 0x35	; 53
    38e2:	b0 f4       	brcc	.+44     	; 0x3910 <LMIC_setTxData2+0x36>
    38e4:	12 2f       	mov	r17, r18
    38e6:	c4 2f       	mov	r28, r20
    38e8:	d8 2f       	mov	r29, r24
    38ea:	61 15       	cp	r22, r1
    38ec:	71 05       	cpc	r23, r1
    38ee:	29 f0       	breq	.+10     	; 0x38fa <LMIC_setTxData2+0x20>
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	86 e9       	ldi	r24, 0x96	; 150
    38f4:	93 e0       	ldi	r25, 0x03	; 3
    38f6:	0e 94 19 29 	call	0x5232	; 0x5232 <memcpy>
    38fa:	10 93 94 03 	sts	0x0394, r17	; 0x800394 <LMIC+0xb7>
    38fe:	d0 93 93 03 	sts	0x0393, r29	; 0x800393 <LMIC+0xb6>
    3902:	c0 93 95 03 	sts	0x0395, r28	; 0x800395 <LMIC+0xb8>
    3906:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <LMIC_setTxData>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	02 c0       	rjmp	.+4      	; 0x3914 <LMIC_setTxData2+0x3a>
    3910:	8e ef       	ldi	r24, 0xFE	; 254
    3912:	9f ef       	ldi	r25, 0xFF	; 255
    3914:	df 91       	pop	r29
    3916:	cf 91       	pop	r28
    3918:	1f 91       	pop	r17
    391a:	08 95       	ret

0000391c <LMIC_setSession>:
//!    to ensure that different devices use different numbers with high probability.
//! \param nwkKey  the 16 byte network session key used for message integrity.
//!     If NULL the caller has copied the key into `LMIC.nwkKey` before.
//! \param artKey  the 16 byte application router session key used for message confidentiality.
//!     If NULL the caller has copied the key into `LMIC.artKey` before.
void LMIC_setSession (u4_t netid, devaddr_t devaddr, xref2u1_t nwkKey, xref2u1_t artKey) {
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    LMIC.netid = netid;
    3924:	60 93 80 03 	sts	0x0380, r22	; 0x800380 <LMIC+0xa3>
    3928:	70 93 81 03 	sts	0x0381, r23	; 0x800381 <LMIC+0xa4>
    392c:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <LMIC+0xa5>
    3930:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <LMIC+0xa6>
    LMIC.devaddr = devaddr;
    3934:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <LMIC+0x10f>
    3938:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <LMIC+0x110>
    393c:	40 93 ee 03 	sts	0x03EE, r20	; 0x8003ee <LMIC+0x111>
    3940:	50 93 ef 03 	sts	0x03EF, r21	; 0x8003ef <LMIC+0x112>
    if( nwkKey != (xref2u1_t)0 )
    3944:	01 15       	cp	r16, r1
    3946:	11 05       	cpc	r17, r1
    3948:	41 f0       	breq	.+16     	; 0x395a <LMIC_setSession+0x3e>
        os_copyMem(LMIC.nwkKey, nwkKey, 16);
    394a:	80 e1       	ldi	r24, 0x10	; 16
    394c:	f8 01       	movw	r30, r16
    394e:	ac ec       	ldi	r26, 0xCC	; 204
    3950:	b3 e0       	ldi	r27, 0x03	; 3
    3952:	01 90       	ld	r0, Z+
    3954:	0d 92       	st	X+, r0
    3956:	8a 95       	dec	r24
    3958:	e1 f7       	brne	.-8      	; 0x3952 <LMIC_setSession+0x36>
    if( artKey != (xref2u1_t)0 )
    395a:	e1 14       	cp	r14, r1
    395c:	f1 04       	cpc	r15, r1
    395e:	41 f0       	breq	.+16     	; 0x3970 <LMIC_setSession+0x54>
        os_copyMem(LMIC.artKey, artKey, 16);
    3960:	80 e1       	ldi	r24, 0x10	; 16
    3962:	f7 01       	movw	r30, r14
    3964:	ac ed       	ldi	r26, 0xDC	; 220
    3966:	b3 e0       	ldi	r27, 0x03	; 3
    3968:	01 90       	ld	r0, Z+
    396a:	0d 92       	st	X+, r0
    396c:	8a 95       	dec	r24
    396e:	e1 f7       	brne	.-8      	; 0x3968 <LMIC_setSession+0x4c>

#if defined(CFG_eu868)
    initDefaultChannels(0);
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	0e 94 df 09 	call	0x13be	; 0x13be <initDefaultChannels>
#endif

    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    3976:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <LMIC+0xa7>
    397a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <LMIC+0xa8>
    397e:	89 75       	andi	r24, 0x59	; 89
    3980:	9d 7f       	andi	r25, 0xFD	; 253
    3982:	98 60       	ori	r25, 0x08	; 8
    3984:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <LMIC+0xa8>
    3988:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <LMIC+0xa7>
    DO_DEVDB(LMIC.devaddr, devaddr);
    DO_DEVDB(LMIC.nwkKey,  nwkkey);
    DO_DEVDB(LMIC.artKey,  artkey);
    DO_DEVDB(LMIC.seqnoUp, seqnoUp);
    DO_DEVDB(LMIC.seqnoDn, seqnoDn);
}
    398c:	1f 91       	pop	r17
    398e:	0f 91       	pop	r16
    3990:	ff 90       	pop	r15
    3992:	ef 90       	pop	r14
    initDefaultChannels(0);
#endif

    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    stateJustJoined();
    3994:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <stateJustJoined>

00003998 <LMIC_setLinkCheckMode>:
// then the datarate is lowered and a LINK_DEAD event is generated.
// This mode can be disabled and no connectivity prove (ADRACKREQ) is requested
// nor is the datarate changed.
// This must be called only if a session is established (e.g. after EV_JOINED)
void LMIC_setLinkCheckMode (bit_t enabled) {
    LMIC.adrChanged = 0;
    3998:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <LMIC+0x11d>
    LMIC.adrAckReq = enabled ? LINK_CHECK_INIT : LINK_CHECK_OFF;
    399c:	81 11       	cpse	r24, r1
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <LMIC_setLinkCheckMode+0xc>
    39a0:	80 e8       	ldi	r24, 0x80	; 128
    39a2:	01 c0       	rjmp	.+2      	; 0x39a6 <LMIC_setLinkCheckMode+0xe>
    39a4:	84 ef       	ldi	r24, 0xF4	; 244
    39a6:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x11c>
    39aa:	08 95       	ret

000039ac <os_init>:
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
    memset(&OS, 0x00, sizeof(OS));
    39ac:	84 e0       	ldi	r24, 0x04	; 4
    39ae:	ef ef       	ldi	r30, 0xFF	; 255
    39b0:	f1 e0       	ldi	r31, 0x01	; 1
    39b2:	df 01       	movw	r26, r30
    39b4:	1d 92       	st	X+, r1
    39b6:	8a 95       	dec	r24
    39b8:	e9 f7       	brne	.-6      	; 0x39b4 <os_init+0x8>
    hal_init();
    39ba:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <hal_init>
    radio_init();
    39be:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <radio_init>
    LMIC_init();
    39c2:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <LMIC_init>

000039c6 <os_getTime>:
}

ostime_t os_getTime () {
    return hal_ticks();
    39c6:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <hal_ticks>

000039ca <os_clearCallback>:
    }
    return 0;
}

// clear scheduled job
void os_clearCallback (osjob_t* job) {
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	ec 01       	movw	r28, r24
    hal_disableIRQs();
    39d0:	0e 94 81 06 	call	0xd02	; 0xd02 <hal_disableIRQs>
    39d4:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <OS>
    39d8:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <OS+0x1>
    39dc:	af ef       	ldi	r26, 0xFF	; 255
    39de:	b1 e0       	ldi	r27, 0x01	; 1
ostime_t os_getTime () {
    return hal_ticks();
}

static u1_t unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    39e0:	30 97       	sbiw	r30, 0x00	; 0
    39e2:	69 f0       	breq	.+26     	; 0x39fe <os_clearCallback+0x34>
        if(*pnext == job) { // unlink
    39e4:	ce 17       	cp	r28, r30
    39e6:	df 07       	cpc	r29, r31
    39e8:	29 f4       	brne	.+10     	; 0x39f4 <os_clearCallback+0x2a>
            *pnext = job->next;
    39ea:	88 81       	ld	r24, Y
    39ec:	99 81       	ldd	r25, Y+1	; 0x01
    39ee:	8d 93       	st	X+, r24
    39f0:	9c 93       	st	X, r25
    39f2:	15 c0       	rjmp	.+42     	; 0x3a1e <os_clearCallback+0x54>
ostime_t os_getTime () {
    return hal_ticks();
}

static u1_t unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    39f4:	df 01       	movw	r26, r30
    39f6:	01 90       	ld	r0, Z+
    39f8:	f0 81       	ld	r31, Z
    39fa:	e0 2d       	mov	r30, r0
    39fc:	f1 cf       	rjmp	.-30     	; 0x39e0 <os_clearCallback+0x16>
    39fe:	e1 e0       	ldi	r30, 0x01	; 1
    3a00:	f2 e0       	ldi	r31, 0x02	; 2
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	51 f0       	breq	.+20     	; 0x3a1e <os_clearCallback+0x54>
        if(*pnext == job) { // unlink
    3a0a:	c8 17       	cp	r28, r24
    3a0c:	d9 07       	cpc	r29, r25
    3a0e:	29 f4       	brne	.+10     	; 0x3a1a <os_clearCallback+0x50>
            *pnext = job->next;
    3a10:	88 81       	ld	r24, Y
    3a12:	99 81       	ldd	r25, Y+1	; 0x01
    3a14:	91 83       	std	Z+1, r25	; 0x01
    3a16:	80 83       	st	Z, r24
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <os_clearCallback+0x54>
ostime_t os_getTime () {
    return hal_ticks();
}

static u1_t unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	f2 cf       	rjmp	.-28     	; 0x3a02 <os_clearCallback+0x38>
    hal_enableIRQs();
    #if LMIC_DEBUG_LEVEL > 1
        if (res)
            lmic_printf("%lu: Cleared job %p\n", os_getTime(), job);
    #endif
}
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28

// clear scheduled job
void os_clearCallback (osjob_t* job) {
    hal_disableIRQs();
    u1_t res = unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
    hal_enableIRQs();
    3a22:	0c 94 88 06 	jmp	0xd10	; 0xd10 <hal_enableIRQs>

00003a26 <os_setCallback>:
            lmic_printf("%lu: Cleared job %p\n", os_getTime(), job);
    #endif
}

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	ec 01       	movw	r28, r24
    3a30:	8b 01       	movw	r16, r22
    osjob_t** pnext;
    hal_disableIRQs();
    3a32:	0e 94 81 06 	call	0xd02	; 0xd02 <hal_disableIRQs>
    // remove if job was already queued
    os_clearCallback(job);
    3a36:	ce 01       	movw	r24, r28
    3a38:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <os_clearCallback>
    // fill-in job
    job->func = cb;
    3a3c:	1f 83       	std	Y+7, r17	; 0x07
    3a3e:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    3a40:	19 82       	std	Y+1, r1	; 0x01
    3a42:	18 82       	st	Y, r1
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    3a44:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <OS+0x2>
    3a48:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <OS+0x3>
    3a4c:	a1 e0       	ldi	r26, 0x01	; 1
    3a4e:	b2 e0       	ldi	r27, 0x02	; 2
    3a50:	30 97       	sbiw	r30, 0x00	; 0
    3a52:	29 f0       	breq	.+10     	; 0x3a5e <os_setCallback+0x38>
    3a54:	df 01       	movw	r26, r30
    3a56:	01 90       	ld	r0, Z+
    3a58:	f0 81       	ld	r31, Z
    3a5a:	e0 2d       	mov	r30, r0
    3a5c:	f9 cf       	rjmp	.-14     	; 0x3a50 <os_setCallback+0x2a>
    *pnext = job;
    3a5e:	cd 93       	st	X+, r28
    3a60:	dc 93       	st	X, r29
    hal_enableIRQs();
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p ASAP\n", os_getTime(), job, cb);
    #endif
}
    3a62:	df 91       	pop	r29
    3a64:	cf 91       	pop	r28
    3a66:	1f 91       	pop	r17
    3a68:	0f 91       	pop	r16
    job->func = cb;
    job->next = NULL;
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    *pnext = job;
    hal_enableIRQs();
    3a6a:	0c 94 88 06 	jmp	0xd10	; 0xd10 <hal_enableIRQs>

00003a6e <os_setTimedCallback>:
        lmic_printf("%lu: Scheduled job %p, cb %p ASAP\n", os_getTime(), job, cb);
    #endif
}

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
    3a6e:	cf 92       	push	r12
    3a70:	df 92       	push	r13
    3a72:	ef 92       	push	r14
    3a74:	ff 92       	push	r15
    3a76:	0f 93       	push	r16
    3a78:	1f 93       	push	r17
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	ec 01       	movw	r28, r24
    3a80:	6a 01       	movw	r12, r20
    3a82:	7b 01       	movw	r14, r22
    3a84:	89 01       	movw	r16, r18
    osjob_t** pnext;
    hal_disableIRQs();
    3a86:	0e 94 81 06 	call	0xd02	; 0xd02 <hal_disableIRQs>
    // remove if job was already queued
    os_clearCallback(job);
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <os_clearCallback>
    // fill-in job
    job->deadline = time;
    3a90:	ca 82       	std	Y+2, r12	; 0x02
    3a92:	db 82       	std	Y+3, r13	; 0x03
    3a94:	ec 82       	std	Y+4, r14	; 0x04
    3a96:	fd 82       	std	Y+5, r15	; 0x05
    job->func = cb;
    3a98:	1f 83       	std	Y+7, r17	; 0x07
    3a9a:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    3a9c:	19 82       	std	Y+1, r1	; 0x01
    3a9e:	18 82       	st	Y, r1
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    3aa0:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <OS>
    3aa4:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <OS+0x1>
    3aa8:	2f ef       	ldi	r18, 0xFF	; 255
    3aaa:	31 e0       	ldi	r19, 0x01	; 1
    3aac:	30 97       	sbiw	r30, 0x00	; 0
    3aae:	a9 f0       	breq	.+42     	; 0x3ada <os_setTimedCallback+0x6c>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
    3ab0:	82 81       	ldd	r24, Z+2	; 0x02
    3ab2:	93 81       	ldd	r25, Z+3	; 0x03
    3ab4:	a4 81       	ldd	r26, Z+4	; 0x04
    3ab6:	b5 81       	ldd	r27, Z+5	; 0x05
    3ab8:	8c 19       	sub	r24, r12
    3aba:	9d 09       	sbc	r25, r13
    3abc:	ae 09       	sbc	r26, r14
    3abe:	bf 09       	sbc	r27, r15
    3ac0:	18 16       	cp	r1, r24
    3ac2:	19 06       	cpc	r1, r25
    3ac4:	1a 06       	cpc	r1, r26
    3ac6:	1b 06       	cpc	r1, r27
    3ac8:	1c f4       	brge	.+6      	; 0x3ad0 <os_setTimedCallback+0x62>
            // enqueue before next element and stop
            job->next = *pnext;
    3aca:	f9 83       	std	Y+1, r31	; 0x01
    3acc:	e8 83       	st	Y, r30
            break;
    3ace:	05 c0       	rjmp	.+10     	; 0x3ada <os_setTimedCallback+0x6c>
    // fill-in job
    job->deadline = time;
    job->func = cb;
    job->next = NULL;
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    3ad0:	9f 01       	movw	r18, r30
    3ad2:	01 90       	ld	r0, Z+
    3ad4:	f0 81       	ld	r31, Z
    3ad6:	e0 2d       	mov	r30, r0
    3ad8:	e9 cf       	rjmp	.-46     	; 0x3aac <os_setTimedCallback+0x3e>
            // enqueue before next element and stop
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    3ada:	f9 01       	movw	r30, r18
    3adc:	d1 83       	std	Z+1, r29	; 0x01
    3ade:	c0 83       	st	Z, r28
    hal_enableIRQs();
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p at %lu\n", os_getTime(), job, cb, time);
    #endif
}
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	1f 91       	pop	r17
    3ae6:	0f 91       	pop	r16
    3ae8:	ff 90       	pop	r15
    3aea:	ef 90       	pop	r14
    3aec:	df 90       	pop	r13
    3aee:	cf 90       	pop	r12
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    hal_enableIRQs();
    3af0:	0c 94 88 06 	jmp	0xd10	; 0xd10 <hal_enableIRQs>

00003af4 <os_runloop_once>:
    while(1) {
        os_runloop_once();
    }
}

void os_runloop_once() {
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    #if LMIC_DEBUG_LEVEL > 1
        bool has_deadline = false;
    #endif
    osjob_t* j = NULL;
    hal_disableIRQs();
    3af8:	0e 94 81 06 	call	0xd02	; 0xd02 <hal_disableIRQs>
    // check for runnable jobs
    if(OS.runnablejobs) {
    3afc:	c0 91 01 02 	lds	r28, 0x0201	; 0x800201 <OS+0x2>
    3b00:	d0 91 02 02 	lds	r29, 0x0202	; 0x800202 <OS+0x3>
    3b04:	20 97       	sbiw	r28, 0x00	; 0
    3b06:	39 f0       	breq	.+14     	; 0x3b16 <os_runloop_once+0x22>
        j = OS.runnablejobs;
        OS.runnablejobs = j->next;
    3b08:	88 81       	ld	r24, Y
    3b0a:	99 81       	ldd	r25, Y+1	; 0x01
    3b0c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <OS+0x3>
    3b10:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <OS+0x2>
    3b14:	1b c0       	rjmp	.+54     	; 0x3b4c <os_runloop_once+0x58>
    } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
    3b16:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <OS>
    3b1a:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <OS+0x1>
    3b1e:	30 97       	sbiw	r30, 0x00	; 0
    3b20:	99 f0       	breq	.+38     	; 0x3b48 <os_runloop_once+0x54>
    3b22:	62 81       	ldd	r22, Z+2	; 0x02
    3b24:	73 81       	ldd	r23, Z+3	; 0x03
    3b26:	84 81       	ldd	r24, Z+4	; 0x04
    3b28:	95 81       	ldd	r25, Z+5	; 0x05
    3b2a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <hal_checkTimer>
    3b2e:	88 23       	and	r24, r24
    3b30:	59 f0       	breq	.+22     	; 0x3b48 <os_runloop_once+0x54>
        j = OS.scheduledjobs;
    3b32:	c0 91 ff 01 	lds	r28, 0x01FF	; 0x8001ff <OS>
    3b36:	d0 91 00 02 	lds	r29, 0x0200	; 0x800200 <OS+0x1>
        OS.scheduledjobs = j->next;
    3b3a:	88 81       	ld	r24, Y
    3b3c:	99 81       	ldd	r25, Y+1	; 0x01
    3b3e:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <OS+0x1>
    3b42:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <OS>
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <os_runloop_once+0x58>
        #if LMIC_DEBUG_LEVEL > 1
            has_deadline = true;
        #endif
    } else { // nothing pending
        hal_sleep(); // wake by irq (timer already restarted)
    3b48:	0e 94 c1 06 	call	0xd82	; 0xd82 <hal_sleep>
    }
    hal_enableIRQs();
    3b4c:	0e 94 88 06 	call	0xd10	; 0xd10 <hal_enableIRQs>
    if(j) { // run job callback
    3b50:	20 97       	sbiw	r28, 0x00	; 0
    3b52:	31 f0       	breq	.+12     	; 0x3b60 <os_runloop_once+0x6c>
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: Running job %p, cb %p, deadline %lu\n", os_getTime(), j, j->func, has_deadline ? j->deadline : 0);
        #endif
        j->func(j);
    3b54:	ee 81       	ldd	r30, Y+6	; 0x06
    3b56:	ff 81       	ldd	r31, Y+7	; 0x07
    3b58:	ce 01       	movw	r24, r28
    }
}
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    hal_enableIRQs();
    if(j) { // run job callback
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: Running job %p, cb %p, deadline %lu\n", os_getTime(), j, j->func, has_deadline ? j->deadline : 0);
        #endif
        j->func(j);
    3b5e:	09 94       	ijmp
    }
}
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <writeReg>:
u1_t radio_rssi () {
    hal_disableIRQs();
    u1_t r = readReg(LORARegRssiValue);
    hal_enableIRQs();
    return r;
}
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	d8 2f       	mov	r29, r24
    3b6c:	c6 2f       	mov	r28, r22
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <hal_pin_nss>
    3b74:	8d 2f       	mov	r24, r29
    3b76:	80 68       	ori	r24, 0x80	; 128
    3b78:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3b7c:	8c 2f       	mov	r24, r28
    3b7e:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <hal_pin_nss>

00003b8c <configLoraModem>:
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <LMIC+0xe>
    3b94:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <LMIC+0xf>
    3b98:	d8 2f       	mov	r29, r24
    3b9a:	d7 70       	andi	r29, 0x07	; 7
    3b9c:	53 e0       	ldi	r21, 0x03	; 3
    3b9e:	96 95       	lsr	r25
    3ba0:	87 95       	ror	r24
    3ba2:	5a 95       	dec	r21
    3ba4:	e1 f7       	brne	.-8      	; 0x3b9e <configLoraModem+0x12>
    3ba6:	83 70       	andi	r24, 0x03	; 3
    3ba8:	81 30       	cpi	r24, 0x01	; 1
    3baa:	29 f0       	breq	.+10     	; 0x3bb6 <configLoraModem+0x2a>
    3bac:	70 f0       	brcs	.+28     	; 0x3bca <configLoraModem+0x3e>
    3bae:	82 30       	cpi	r24, 0x02	; 2
    3bb0:	21 f4       	brne	.+8      	; 0x3bba <configLoraModem+0x2e>
    3bb2:	80 e9       	ldi	r24, 0x90	; 144
    3bb4:	0b c0       	rjmp	.+22     	; 0x3bcc <configLoraModem+0x40>
    3bb6:	80 e8       	ldi	r24, 0x80	; 128
    3bb8:	09 c0       	rjmp	.+18     	; 0x3bcc <configLoraModem+0x40>
    3bba:	68 e4       	ldi	r22, 0x48	; 72
    3bbc:	71 e0       	ldi	r23, 0x01	; 1
    3bbe:	89 e8       	ldi	r24, 0x89	; 137
    3bc0:	91 e0       	ldi	r25, 0x01	; 1
    3bc2:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	01 c0       	rjmp	.+2      	; 0x3bcc <configLoraModem+0x40>
    3bca:	80 e7       	ldi	r24, 0x70	; 112
    3bcc:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <LMIC+0xe>
    3bd0:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <LMIC+0xf>
    3bd4:	9b 01       	movw	r18, r22
    3bd6:	45 e0       	ldi	r20, 0x05	; 5
    3bd8:	36 95       	lsr	r19
    3bda:	27 95       	ror	r18
    3bdc:	4a 95       	dec	r20
    3bde:	e1 f7       	brne	.-8      	; 0x3bd8 <configLoraModem+0x4c>
    3be0:	23 70       	andi	r18, 0x03	; 3
    3be2:	c8 2f       	mov	r28, r24
    3be4:	22 30       	cpi	r18, 0x02	; 2
    3be6:	41 f0       	breq	.+16     	; 0x3bf8 <configLoraModem+0x6c>
    3be8:	23 30       	cpi	r18, 0x03	; 3
    3bea:	41 f0       	breq	.+16     	; 0x3bfc <configLoraModem+0x70>
    3bec:	21 30       	cpi	r18, 0x01	; 1
    3bee:	11 f0       	breq	.+4      	; 0x3bf4 <configLoraModem+0x68>
    3bf0:	c2 60       	ori	r28, 0x02	; 2
    3bf2:	05 c0       	rjmp	.+10     	; 0x3bfe <configLoraModem+0x72>
    3bf4:	c4 60       	ori	r28, 0x04	; 4
    3bf6:	03 c0       	rjmp	.+6      	; 0x3bfe <configLoraModem+0x72>
    3bf8:	c6 60       	ori	r28, 0x06	; 6
    3bfa:	01 c0       	rjmp	.+2      	; 0x3bfe <configLoraModem+0x72>
    3bfc:	c8 60       	ori	r28, 0x08	; 8
    3bfe:	67 2f       	mov	r22, r23
    3c00:	77 27       	eor	r23, r23
    3c02:	61 15       	cp	r22, r1
    3c04:	71 05       	cpc	r23, r1
    3c06:	21 f0       	breq	.+8      	; 0x3c10 <configLoraModem+0x84>
    3c08:	c1 60       	ori	r28, 0x01	; 1
    3c0a:	82 e2       	ldi	r24, 0x22	; 34
    3c0c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3c10:	6c 2f       	mov	r22, r28
    3c12:	8d e1       	ldi	r24, 0x1D	; 29
    3c14:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3c18:	6d 2f       	mov	r22, r29
    3c1a:	62 95       	swap	r22
    3c1c:	60 7f       	andi	r22, 0xF0	; 240
    3c1e:	60 5a       	subi	r22, 0xA0	; 160
    3c20:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <LMIC+0xe>
    3c24:	87 ff       	sbrs	r24, 7
    3c26:	64 60       	ori	r22, 0x04	; 4
    3c28:	8e e1       	ldi	r24, 0x1E	; 30
    3c2a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3c2e:	d5 50       	subi	r29, 0x05	; 5
    3c30:	d2 30       	cpi	r29, 0x02	; 2
    3c32:	68 f4       	brcc	.+26     	; 0x3c4e <configLoraModem+0xc2>
    3c34:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <LMIC+0xe>
    3c38:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <LMIC+0xf>
    3c3c:	23 e0       	ldi	r18, 0x03	; 3
    3c3e:	96 95       	lsr	r25
    3c40:	87 95       	ror	r24
    3c42:	2a 95       	dec	r18
    3c44:	e1 f7       	brne	.-8      	; 0x3c3e <configLoraModem+0xb2>
    3c46:	83 70       	andi	r24, 0x03	; 3
    3c48:	11 f4       	brne	.+4      	; 0x3c4e <configLoraModem+0xc2>
    3c4a:	6c e0       	ldi	r22, 0x0C	; 12
    3c4c:	01 c0       	rjmp	.+2      	; 0x3c50 <configLoraModem+0xc4>
    3c4e:	64 e0       	ldi	r22, 0x04	; 4
    3c50:	86 e2       	ldi	r24, 0x26	; 38
    3c52:	df 91       	pop	r29
    3c54:	cf 91       	pop	r28
    3c56:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <writeReg>

00003c5a <configChannel>:
    3c5a:	af 92       	push	r10
    3c5c:	bf 92       	push	r11
    3c5e:	cf 92       	push	r12
    3c60:	df 92       	push	r13
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <LMIC+0x8>
    3c72:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <LMIC+0x9>
    3c76:	a0 91 e7 02 	lds	r26, 0x02E7	; 0x8002e7 <LMIC+0xa>
    3c7a:	b0 91 e8 02 	lds	r27, 0x02E8	; 0x8002e8 <LMIC+0xb>
    3c7e:	9c 01       	movw	r18, r24
    3c80:	ad 01       	movw	r20, r26
    3c82:	60 e0       	ldi	r22, 0x00	; 0
    3c84:	70 e0       	ldi	r23, 0x00	; 0
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	03 e1       	ldi	r16, 0x13	; 19
    3c8c:	0e 94 b0 28 	call	0x5160	; 0x5160 <__ashldi3>
    3c90:	a1 2c       	mov	r10, r1
    3c92:	e8 e4       	ldi	r30, 0x48	; 72
    3c94:	be 2e       	mov	r11, r30
    3c96:	f8 ee       	ldi	r31, 0xE8	; 232
    3c98:	cf 2e       	mov	r12, r31
    3c9a:	dd 24       	eor	r13, r13
    3c9c:	d3 94       	inc	r13
    3c9e:	e1 2c       	mov	r14, r1
    3ca0:	f1 2c       	mov	r15, r1
    3ca2:	00 e0       	ldi	r16, 0x00	; 0
    3ca4:	10 e0       	ldi	r17, 0x00	; 0
    3ca6:	0e 94 0c 28 	call	0x5018	; 0x5018 <__udivdi3>
    3caa:	c2 2f       	mov	r28, r18
    3cac:	b3 2e       	mov	r11, r19
    3cae:	6a 01       	movw	r12, r20
    3cb0:	7b 01       	movw	r14, r22
    3cb2:	18 2f       	mov	r17, r24
    3cb4:	d9 2f       	mov	r29, r25
    3cb6:	00 e1       	ldi	r16, 0x10	; 16
    3cb8:	0e 94 cb 28 	call	0x5196	; 0x5196 <__lshrdi3>
    3cbc:	62 2f       	mov	r22, r18
    3cbe:	86 e0       	ldi	r24, 0x06	; 6
    3cc0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3cc4:	2c 2f       	mov	r18, r28
    3cc6:	3b 2d       	mov	r19, r11
    3cc8:	a6 01       	movw	r20, r12
    3cca:	b7 01       	movw	r22, r14
    3ccc:	81 2f       	mov	r24, r17
    3cce:	9d 2f       	mov	r25, r29
    3cd0:	08 e0       	ldi	r16, 0x08	; 8
    3cd2:	0e 94 cb 28 	call	0x5196	; 0x5196 <__lshrdi3>
    3cd6:	62 2f       	mov	r22, r18
    3cd8:	87 e0       	ldi	r24, 0x07	; 7
    3cda:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3cde:	6c 2f       	mov	r22, r28
    3ce0:	88 e0       	ldi	r24, 0x08	; 8
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	df 90       	pop	r13
    3cf0:	cf 90       	pop	r12
    3cf2:	bf 90       	pop	r11
    3cf4:	af 90       	pop	r10
    3cf6:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <writeReg>

00003cfa <readReg>:
    3cfa:	cf 93       	push	r28
    3cfc:	c8 2f       	mov	r28, r24
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <hal_pin_nss>
    3d04:	8c 2f       	mov	r24, r28
    3d06:	8f 77       	andi	r24, 0x7F	; 127
    3d08:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3d12:	c8 2f       	mov	r28, r24
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <hal_pin_nss>
    3d1a:	8c 2f       	mov	r24, r28
    3d1c:	cf 91       	pop	r28
    3d1e:	08 95       	ret

00003d20 <opmode>:
    3d20:	cf 93       	push	r28
    3d22:	c8 2f       	mov	r28, r24
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    3d2a:	88 7f       	andi	r24, 0xF8	; 248
    3d2c:	68 2f       	mov	r22, r24
    3d2e:	6c 2b       	or	r22, r28
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	cf 91       	pop	r28
    3d34:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <writeReg>

00003d38 <rxlora>:
    3d38:	cf 93       	push	r28
    3d3a:	c8 2f       	mov	r28, r24
    3d3c:	68 e8       	ldi	r22, 0x88	; 136
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    3d4a:	87 fd       	sbrc	r24, 7
    3d4c:	06 c0       	rjmp	.+12     	; 0x3d5a <rxlora+0x22>
    3d4e:	61 e2       	ldi	r22, 0x21	; 33
    3d50:	72 e0       	ldi	r23, 0x02	; 2
    3d52:	89 e8       	ldi	r24, 0x89	; 137
    3d54:	91 e0       	ldi	r25, 0x01	; 1
    3d56:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    3d60:	c2 30       	cpi	r28, 0x02	; 2
    3d62:	49 f4       	brne	.+18     	; 0x3d76 <rxlora+0x3e>
    3d64:	6a e0       	ldi	r22, 0x0A	; 10
    3d66:	8d e1       	ldi	r24, 0x1D	; 29
    3d68:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3d6c:	60 e7       	ldi	r22, 0x70	; 112
    3d6e:	8e e1       	ldi	r24, 0x1E	; 30
    3d70:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3d74:	04 c0       	rjmp	.+8      	; 0x3d7e <rxlora+0x46>
    3d76:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <configLoraModem>
    3d7a:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <configChannel>
    3d7e:	61 e2       	ldi	r22, 0x21	; 33
    3d80:	8c e0       	ldi	r24, 0x0C	; 12
    3d82:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3d86:	60 e4       	ldi	r22, 0x40	; 64
    3d88:	83 e2       	ldi	r24, 0x23	; 35
    3d8a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3d8e:	83 e3       	ldi	r24, 0x33	; 51
    3d90:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    3d94:	68 2f       	mov	r22, r24
    3d96:	60 64       	ori	r22, 0x40	; 64
    3d98:	83 e3       	ldi	r24, 0x33	; 51
    3d9a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3d9e:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <LMIC+0x10>
    3da2:	8f e1       	ldi	r24, 0x1F	; 31
    3da4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3da8:	64 e3       	ldi	r22, 0x34	; 52
    3daa:	89 e3       	ldi	r24, 0x39	; 57
    3dac:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3db0:	60 ec       	ldi	r22, 0xC0	; 192
    3db2:	80 e4       	ldi	r24, 0x40	; 64
    3db4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3db8:	6f ef       	ldi	r22, 0xFF	; 255
    3dba:	82 e1       	ldi	r24, 0x12	; 18
    3dbc:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3dc0:	ec 2f       	mov	r30, r28
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	e2 56       	subi	r30, 0x62	; 98
    3dc6:	fc 4f       	sbci	r31, 0xFC	; 252
    3dc8:	64 91       	lpm	r22, Z
    3dca:	60 95       	com	r22
    3dcc:	81 e1       	ldi	r24, 0x11	; 17
    3dce:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3dd2:	80 e0       	ldi	r24, 0x00	; 0
    3dd4:	0e 94 be 05 	call	0xb7c	; 0xb7c <hal_pin_rxtx>
    3dd8:	c1 11       	cpse	r28, r1
    3dda:	0c c0       	rjmp	.+24     	; 0x3df4 <rxlora+0xbc>
    3ddc:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <LMIC+0x4>
    3de0:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <LMIC+0x5>
    3de4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <LMIC+0x6>
    3de8:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <LMIC+0x7>
    3dec:	0e 94 33 06 	call	0xc66	; 0xc66 <hal_waitUntil>
    3df0:	86 e0       	ldi	r24, 0x06	; 6
    3df2:	01 c0       	rjmp	.+2      	; 0x3df6 <rxlora+0xbe>
    3df4:	85 e0       	ldi	r24, 0x05	; 5
    3df6:	cf 91       	pop	r28
    3df8:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <opmode>

00003dfc <configPower>:
    3dfc:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <LMIC+0x12>
    3e00:	61 31       	cpi	r22, 0x11	; 17
    3e02:	24 f4       	brge	.+8      	; 0x3e0c <configPower+0x10>
    3e04:	62 30       	cpi	r22, 0x02	; 2
    3e06:	1c f4       	brge	.+6      	; 0x3e0e <configPower+0x12>
    3e08:	62 e0       	ldi	r22, 0x02	; 2
    3e0a:	01 c0       	rjmp	.+2      	; 0x3e0e <configPower+0x12>
    3e0c:	6f e0       	ldi	r22, 0x0F	; 15
    3e0e:	6f 70       	andi	r22, 0x0F	; 15
    3e10:	60 68       	ori	r22, 0x80	; 128
    3e12:	89 e0       	ldi	r24, 0x09	; 9
    3e14:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3e18:	8a e5       	ldi	r24, 0x5A	; 90
    3e1a:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    3e1e:	68 2f       	mov	r22, r24
    3e20:	64 60       	ori	r22, 0x04	; 4
    3e22:	8a e5       	ldi	r24, 0x5A	; 90
    3e24:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <writeReg>

00003e28 <startrx>:
    3e28:	cf 93       	push	r28
    3e2a:	c8 2f       	mov	r28, r24
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    3e32:	87 70       	andi	r24, 0x07	; 7
    3e34:	31 f0       	breq	.+12     	; 0x3e42 <startrx+0x1a>
    3e36:	64 e9       	ldi	r22, 0x94	; 148
    3e38:	72 e0       	ldi	r23, 0x02	; 2
    3e3a:	89 e8       	ldi	r24, 0x89	; 137
    3e3c:	91 e0       	ldi	r25, 0x01	; 1
    3e3e:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    3e42:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <LMIC+0xe>
    3e46:	87 70       	andi	r24, 0x07	; 7
    3e48:	09 f0       	breq	.+2      	; 0x3e4c <startrx+0x24>
    3e4a:	71 c0       	rjmp	.+226    	; 0x3f2e <startrx+0x106>
    3e4c:	cc 23       	and	r28, r28
    3e4e:	31 f0       	breq	.+12     	; 0x3e5c <startrx+0x34>
    3e50:	62 e6       	ldi	r22, 0x62	; 98
    3e52:	72 e0       	ldi	r23, 0x02	; 2
    3e54:	89 e8       	ldi	r24, 0x89	; 137
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    3e5c:	68 e0       	ldi	r22, 0x08	; 8
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    3e6a:	87 ff       	sbrs	r24, 7
    3e6c:	06 c0       	rjmp	.+12     	; 0x3e7a <startrx+0x52>
    3e6e:	66 e6       	ldi	r22, 0x66	; 102
    3e70:	72 e0       	ldi	r23, 0x02	; 2
    3e72:	89 e8       	ldi	r24, 0x89	; 137
    3e74:	91 e0       	ldi	r25, 0x01	; 1
    3e76:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    3e80:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <configChannel>
    3e84:	61 e2       	ldi	r22, 0x21	; 33
    3e86:	8c e0       	ldi	r24, 0x0C	; 12
    3e88:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3e8c:	6e e1       	ldi	r22, 0x1E	; 30
    3e8e:	8d e0       	ldi	r24, 0x0D	; 13
    3e90:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3e94:	6b e0       	ldi	r22, 0x0B	; 11
    3e96:	82 e1       	ldi	r24, 0x12	; 18
    3e98:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3e9c:	62 e1       	ldi	r22, 0x12	; 18
    3e9e:	83 e1       	ldi	r24, 0x13	; 19
    3ea0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3ea4:	6a ea       	ldi	r22, 0xAA	; 170
    3ea6:	8f e1       	ldi	r24, 0x1F	; 31
    3ea8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3eac:	62 e1       	ldi	r22, 0x12	; 18
    3eae:	87 e2       	ldi	r24, 0x27	; 39
    3eb0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3eb4:	68 ed       	ldi	r22, 0xD8	; 216
    3eb6:	80 e3       	ldi	r24, 0x30	; 48
    3eb8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3ebc:	60 e4       	ldi	r22, 0x40	; 64
    3ebe:	81 e3       	ldi	r24, 0x31	; 49
    3ec0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3ec4:	61 ec       	ldi	r22, 0xC1	; 193
    3ec6:	88 e2       	ldi	r24, 0x28	; 40
    3ec8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3ecc:	64 e9       	ldi	r22, 0x94	; 148
    3ece:	89 e2       	ldi	r24, 0x29	; 41
    3ed0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3ed4:	61 ec       	ldi	r22, 0xC1	; 193
    3ed6:	8a e2       	ldi	r24, 0x2A	; 42
    3ed8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3edc:	6f ef       	ldi	r22, 0xFF	; 255
    3ede:	81 e2       	ldi	r24, 0x21	; 33
    3ee0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3ee4:	62 e0       	ldi	r22, 0x02	; 2
    3ee6:	82 e0       	ldi	r24, 0x02	; 2
    3ee8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3eec:	60 e8       	ldi	r22, 0x80	; 128
    3eee:	83 e0       	ldi	r24, 0x03	; 3
    3ef0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3ef4:	61 e0       	ldi	r22, 0x01	; 1
    3ef6:	84 e0       	ldi	r24, 0x04	; 4
    3ef8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3efc:	69 e9       	ldi	r22, 0x99	; 153
    3efe:	85 e0       	ldi	r24, 0x05	; 5
    3f00:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3f04:	68 e3       	ldi	r22, 0x38	; 56
    3f06:	80 e4       	ldi	r24, 0x40	; 64
    3f08:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	0e 94 be 05 	call	0xb7c	; 0xb7c <hal_pin_rxtx>
    3f12:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <LMIC+0x4>
    3f16:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <LMIC+0x5>
    3f1a:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <LMIC+0x6>
    3f1e:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <LMIC+0x7>
    3f22:	0e 94 33 06 	call	0xc66	; 0xc66 <hal_waitUntil>
    3f26:	85 e0       	ldi	r24, 0x05	; 5
    3f28:	cf 91       	pop	r28
    3f2a:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <opmode>
    3f2e:	8c 2f       	mov	r24, r28
    3f30:	cf 91       	pop	r28
    3f32:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <rxlora>

00003f36 <readBuf.constprop.0>:
    3f36:	0f 93       	push	r16
    3f38:	1f 93       	push	r17
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
    3f3e:	d8 2f       	mov	r29, r24
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <hal_pin_nss>
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3f4c:	00 e2       	ldi	r16, 0x20	; 32
    3f4e:	14 e0       	ldi	r17, 0x04	; 4
    3f50:	c0 e0       	ldi	r28, 0x00	; 0
    3f52:	cd 17       	cp	r28, r29
    3f54:	41 f0       	breq	.+16     	; 0x3f66 <readBuf.constprop.0+0x30>
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3f5c:	f8 01       	movw	r30, r16
    3f5e:	81 93       	st	Z+, r24
    3f60:	8f 01       	movw	r16, r30
    3f62:	cf 5f       	subi	r28, 0xFF	; 255
    3f64:	f6 cf       	rjmp	.-20     	; 0x3f52 <readBuf.constprop.0+0x1c>
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <hal_pin_nss>

00003f74 <writeBuf.constprop.1>:
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	d8 2f       	mov	r29, r24
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <hal_pin_nss>
    3f84:	80 e8       	ldi	r24, 0x80	; 128
    3f86:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3f8a:	00 e2       	ldi	r16, 0x20	; 32
    3f8c:	14 e0       	ldi	r17, 0x04	; 4
    3f8e:	c0 e0       	ldi	r28, 0x00	; 0
    3f90:	cd 17       	cp	r28, r29
    3f92:	39 f0       	breq	.+14     	; 0x3fa2 <writeBuf.constprop.1+0x2e>
    3f94:	f8 01       	movw	r30, r16
    3f96:	81 91       	ld	r24, Z+
    3f98:	8f 01       	movw	r16, r30
    3f9a:	0e 94 15 06 	call	0xc2a	; 0xc2a <hal_spi>
    3f9e:	cf 5f       	subi	r28, 0xFF	; 255
    3fa0:	f7 cf       	rjmp	.-18     	; 0x3f90 <writeBuf.constprop.1+0x1c>
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	df 91       	pop	r29
    3fa6:	cf 91       	pop	r28
    3fa8:	1f 91       	pop	r17
    3faa:	0f 91       	pop	r16
    3fac:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <hal_pin_nss>

00003fb0 <radio_init>:
    3fb0:	af 92       	push	r10
    3fb2:	bf 92       	push	r11
    3fb4:	cf 92       	push	r12
    3fb6:	df 92       	push	r13
    3fb8:	ef 92       	push	r14
    3fba:	ff 92       	push	r15
    3fbc:	1f 93       	push	r17
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	0e 94 81 06 	call	0xd02	; 0xd02 <hal_disableIRQs>
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <hal_pin_rst>
    3fcc:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    3fd0:	62 5c       	subi	r22, 0xC2	; 194
    3fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd8:	0e 94 33 06 	call	0xc66	; 0xc66 <hal_waitUntil>
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	0e 94 c6 05 	call	0xb8c	; 0xb8c <hal_pin_rst>
    3fe2:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    3fe6:	68 5c       	subi	r22, 0xC8	; 200
    3fe8:	7e 4f       	sbci	r23, 0xFE	; 254
    3fea:	8f 4f       	sbci	r24, 0xFF	; 255
    3fec:	9f 4f       	sbci	r25, 0xFF	; 255
    3fee:	0e 94 33 06 	call	0xc66	; 0xc66 <hal_waitUntil>
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    3ff8:	82 e4       	ldi	r24, 0x42	; 66
    3ffa:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    3ffe:	82 31       	cpi	r24, 0x12	; 18
    4000:	31 f0       	breq	.+12     	; 0x400e <radio_init+0x5e>
    4002:	61 eb       	ldi	r22, 0xB1	; 177
    4004:	72 e0       	ldi	r23, 0x02	; 2
    4006:	89 e8       	ldi	r24, 0x89	; 137
    4008:	91 e0       	ldi	r25, 0x01	; 1
    400a:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    400e:	82 e0       	ldi	r24, 0x02	; 2
    4010:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <rxlora>
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    401a:	87 70       	andi	r24, 0x07	; 7
    401c:	85 30       	cpi	r24, 0x05	; 5
    401e:	d1 f7       	brne	.-12     	; 0x4014 <radio_init+0x64>
    4020:	c3 e0       	ldi	r28, 0x03	; 3
    4022:	d2 e0       	ldi	r29, 0x02	; 2
    4024:	92 e1       	ldi	r25, 0x12	; 18
    4026:	a9 2e       	mov	r10, r25
    4028:	92 e0       	ldi	r25, 0x02	; 2
    402a:	b9 2e       	mov	r11, r25
    402c:	88 e0       	ldi	r24, 0x08	; 8
    402e:	e8 2e       	mov	r14, r24
    4030:	f1 2c       	mov	r15, r1
    4032:	8c e2       	ldi	r24, 0x2C	; 44
    4034:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4038:	18 2f       	mov	r17, r24
    403a:	11 70       	andi	r17, 0x01	; 1
    403c:	8c e2       	ldi	r24, 0x2C	; 44
    403e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4042:	21 2f       	mov	r18, r17
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	80 fb       	bst	r24, 0
    4048:	cc 24       	eor	r12, r12
    404a:	c0 f8       	bld	r12, 0
    404c:	d1 2c       	mov	r13, r1
    404e:	2c 15       	cp	r18, r12
    4050:	3d 05       	cpc	r19, r13
    4052:	79 f3       	breq	.-34     	; 0x4032 <radio_init+0x82>
    4054:	89 81       	ldd	r24, Y+1	; 0x01
    4056:	88 0f       	add	r24, r24
    4058:	18 2b       	or	r17, r24
    405a:	19 83       	std	Y+1, r17	; 0x01
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	e8 1a       	sub	r14, r24
    4060:	f1 08       	sbc	r15, r1
    4062:	39 f7       	brne	.-50     	; 0x4032 <radio_init+0x82>
    4064:	21 96       	adiw	r28, 0x01	; 1
    4066:	ac 16       	cp	r10, r28
    4068:	bd 06       	cpc	r11, r29
    406a:	01 f7       	brne	.-64     	; 0x402c <radio_init+0x7c>
    406c:	80 e1       	ldi	r24, 0x10	; 16
    406e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <randbuf>
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	1f 91       	pop	r17
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
    4082:	df 90       	pop	r13
    4084:	cf 90       	pop	r12
    4086:	bf 90       	pop	r11
    4088:	af 90       	pop	r10
    408a:	0c 94 88 06 	jmp	0xd10	; 0xd10 <hal_enableIRQs>

0000408e <radio_rand1>:
    408e:	cf 93       	push	r28
    4090:	c0 91 03 02 	lds	r28, 0x0203	; 0x800203 <randbuf>
    4094:	c1 11       	cpse	r28, r1
    4096:	07 c0       	rjmp	.+14     	; 0x40a6 <radio_rand1+0x18>
    4098:	6f ed       	ldi	r22, 0xDF	; 223
    409a:	72 e0       	ldi	r23, 0x02	; 2
    409c:	89 e8       	ldi	r24, 0x89	; 137
    409e:	91 e0       	ldi	r25, 0x01	; 1
    40a0:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    40a4:	0a c0       	rjmp	.+20     	; 0x40ba <radio_rand1+0x2c>
    40a6:	c0 31       	cpi	r28, 0x10	; 16
    40a8:	41 f4       	brne	.+16     	; 0x40ba <radio_rand1+0x2c>
    40aa:	40 e1       	ldi	r20, 0x10	; 16
    40ac:	50 e0       	ldi	r21, 0x00	; 0
    40ae:	63 e0       	ldi	r22, 0x03	; 3
    40b0:	72 e0       	ldi	r23, 0x02	; 2
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	0e 94 cb 04 	call	0x996	; 0x996 <os_aes>
    40b8:	c0 e0       	ldi	r28, 0x00	; 0
    40ba:	ec 2f       	mov	r30, r28
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	ed 5f       	subi	r30, 0xFD	; 253
    40c0:	fd 4f       	sbci	r31, 0xFD	; 253
    40c2:	80 81       	ld	r24, Z
    40c4:	cf 5f       	subi	r28, 0xFF	; 255
    40c6:	c0 93 03 02 	sts	0x0203, r28	; 0x800203 <randbuf>
    40ca:	cf 91       	pop	r28
    40cc:	08 95       	ret

000040ce <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
    40ce:	cf 92       	push	r12
    40d0:	df 92       	push	r13
    40d2:	ef 92       	push	r14
    40d4:	ff 92       	push	r15
    40d6:	cf 93       	push	r28
    ostime_t now = os_getTime();
    40d8:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <os_getTime>
    40dc:	6b 01       	movw	r12, r22
    40de:	7c 01       	movw	r14, r24
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    40e6:	87 ff       	sbrs	r24, 7
    40e8:	64 c0       	rjmp	.+200    	; 0x41b2 <radio_irq_handler+0xe4>
        u1_t flags = readReg(LORARegIrqFlags);
    40ea:	82 e1       	ldi	r24, 0x12	; 18
    40ec:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
#if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: irq: dio: 0x%x flags: 0x%x\n", now, dio, flags);
#endif
        if( flags & IRQ_LORA_TXDONE_MASK ) {
    40f0:	83 ff       	sbrs	r24, 3
    40f2:	0e c0       	rjmp	.+28     	; 0x4110 <radio_irq_handler+0x42>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
    40f4:	82 e0       	ldi	r24, 0x02	; 2
    40f6:	c8 1a       	sub	r12, r24
    40f8:	d1 08       	sbc	r13, r1
    40fa:	e1 08       	sbc	r14, r1
    40fc:	f1 08       	sbc	r15, r1
    40fe:	c0 92 dd 02 	sts	0x02DD, r12	; 0x8002dd <LMIC>
    4102:	d0 92 de 02 	sts	0x02DE, r13	; 0x8002de <LMIC+0x1>
    4106:	e0 92 df 02 	sts	0x02DF, r14	; 0x8002df <LMIC+0x2>
    410a:	f0 92 e0 02 	sts	0x02E0, r15	; 0x8002e0 <LMIC+0x3>
    410e:	48 c0       	rjmp	.+144    	; 0x41a0 <radio_irq_handler+0xd2>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
    4110:	86 ff       	sbrs	r24, 6
    4112:	43 c0       	rjmp	.+134    	; 0x419a <radio_irq_handler+0xcc>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
    4114:	e0 91 eb 02 	lds	r30, 0x02EB	; 0x8002eb <LMIC+0xe>
    4118:	f0 91 ec 02 	lds	r31, 0x02EC	; 0x8002ec <LMIC+0xf>
    411c:	cf 01       	movw	r24, r30
    411e:	23 e0       	ldi	r18, 0x03	; 3
    4120:	96 95       	lsr	r25
    4122:	87 95       	ror	r24
    4124:	2a 95       	dec	r18
    4126:	e1 f7       	brne	.-8      	; 0x4120 <radio_irq_handler+0x52>
    4128:	83 70       	andi	r24, 0x03	; 3
    412a:	61 f4       	brne	.+24     	; 0x4144 <radio_irq_handler+0x76>
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    412c:	e7 70       	andi	r30, 0x07	; 7
            return pgm_read_ ## pgm_type(&table[index]); \
        }

    TABLE_GETTER(_u1, u1_t, byte);
    TABLE_GETTER(_s1, s1_t, byte);
    TABLE_GETTER(_u2, u2_t, word);
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	ee 0f       	add	r30, r30
    4132:	ff 1f       	adc	r31, r31
    4134:	e0 57       	subi	r30, 0x70	; 112
    4136:	fc 4f       	sbci	r31, 0xFC	; 252
    4138:	85 91       	lpm	r24, Z+
    413a:	94 91       	lpm	r25, Z
                now -= TABLE_GET_U2(LORA_RXDONE_FIXUP, getSf(LMIC.rps));
    413c:	c8 1a       	sub	r12, r24
    413e:	d9 0a       	sbc	r13, r25
    4140:	e1 08       	sbc	r14, r1
    4142:	f1 08       	sbc	r15, r1
            }
            LMIC.rxtime = now;
    4144:	c0 92 e1 02 	sts	0x02E1, r12	; 0x8002e1 <LMIC+0x4>
    4148:	d0 92 e2 02 	sts	0x02E2, r13	; 0x8002e2 <LMIC+0x5>
    414c:	e0 92 e3 02 	sts	0x02E3, r14	; 0x8002e3 <LMIC+0x6>
    4150:	f0 92 e4 02 	sts	0x02E4, r15	; 0x8002e4 <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
    4154:	8d e1       	ldi	r24, 0x1D	; 29
    4156:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    415a:	82 ff       	sbrs	r24, 2
    415c:	02 c0       	rjmp	.+4      	; 0x4162 <radio_irq_handler+0x94>
    415e:	82 e2       	ldi	r24, 0x22	; 34
    4160:	01 c0       	rjmp	.+2      	; 0x4164 <radio_irq_handler+0x96>
    4162:	83 e1       	ldi	r24, 0x13	; 19
    4164:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4168:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <LMIC+0x142>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
    416c:	80 e1       	ldi	r24, 0x10	; 16
    416e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4172:	68 2f       	mov	r22, r24
    4174:	8d e0       	ldi	r24, 0x0D	; 13
    4176:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    417a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    417e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
    4182:	89 e1       	ldi	r24, 0x19	; 25
    4184:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4188:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <LMIC+0xd>
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
    418c:	8a e1       	ldi	r24, 0x1A	; 26
    418e:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4192:	8d 53       	subi	r24, 0x3D	; 61
    4194:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <LMIC+0xc>
    4198:	03 c0       	rjmp	.+6      	; 0x41a0 <radio_irq_handler+0xd2>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
    419a:	87 fd       	sbrc	r24, 7
            // indicate timeout
            LMIC.dataLen = 0;
    419c:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
    41a0:	6f ef       	ldi	r22, 0xFF	; 255
    41a2:	81 e1       	ldi	r24, 0x11	; 17
    41a4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
    41a8:	6f ef       	ldi	r22, 0xFF	; 255
    41aa:	82 e1       	ldi	r24, 0x12	; 18
    41ac:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    41b0:	33 c0       	rjmp	.+102    	; 0x4218 <radio_irq_handler+0x14a>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
    41b2:	8e e3       	ldi	r24, 0x3E	; 62
    41b4:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    41b8:	c8 2f       	mov	r28, r24
        u1_t flags2 = readReg(FSKRegIrqFlags2);
    41ba:	8f e3       	ldi	r24, 0x3F	; 63
    41bc:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
    41c0:	83 ff       	sbrs	r24, 3
    41c2:	09 c0       	rjmp	.+18     	; 0x41d6 <radio_irq_handler+0x108>
            // save exact tx time
            LMIC.txend = now;
    41c4:	c0 92 dd 02 	sts	0x02DD, r12	; 0x8002dd <LMIC>
    41c8:	d0 92 de 02 	sts	0x02DE, r13	; 0x8002de <LMIC+0x1>
    41cc:	e0 92 df 02 	sts	0x02DF, r14	; 0x8002df <LMIC+0x2>
    41d0:	f0 92 e0 02 	sts	0x02E0, r15	; 0x8002e0 <LMIC+0x3>
    41d4:	21 c0       	rjmp	.+66     	; 0x4218 <radio_irq_handler+0x14a>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
    41d6:	82 ff       	sbrs	r24, 2
    41d8:	14 c0       	rjmp	.+40     	; 0x4202 <radio_irq_handler+0x134>
            // save exact rx time
            LMIC.rxtime = now;
    41da:	c0 92 e1 02 	sts	0x02E1, r12	; 0x8002e1 <LMIC+0x4>
    41de:	d0 92 e2 02 	sts	0x02E2, r13	; 0x8002e2 <LMIC+0x5>
    41e2:	e0 92 e3 02 	sts	0x02E3, r14	; 0x8002e3 <LMIC+0x6>
    41e6:	f0 92 e4 02 	sts	0x02E4, r15	; 0x8002e4 <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
    41ea:	82 e3       	ldi	r24, 0x32	; 50
    41ec:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    41f0:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <LMIC+0x142>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    41f4:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
    41f8:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <LMIC+0xd>
            LMIC.rssi = 0; // determine rssi
    41fc:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <LMIC+0xc>
    4200:	0b c0       	rjmp	.+22     	; 0x4218 <radio_irq_handler+0x14a>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
    4202:	c2 ff       	sbrs	r28, 2
    4204:	03 c0       	rjmp	.+6      	; 0x420c <radio_irq_handler+0x13e>
            // indicate timeout
            LMIC.dataLen = 0;
    4206:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <LMIC+0x142>
    420a:	06 c0       	rjmp	.+12     	; 0x4218 <radio_irq_handler+0x14a>
        } else {
            ASSERT(0);
    420c:	62 e3       	ldi	r22, 0x32	; 50
    420e:	73 e0       	ldi	r23, 0x03	; 3
    4210:	89 e8       	ldi	r24, 0x89	; 137
    4212:	91 e0       	ldi	r25, 0x01	; 1
    4214:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    421e:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <LMIC+0x19>
    4222:	70 91 f7 02 	lds	r23, 0x02F7	; 0x8002f7 <LMIC+0x1a>
    4226:	80 ef       	ldi	r24, 0xF0	; 240
    4228:	92 e0       	ldi	r25, 0x02	; 2
}
    422a:	cf 91       	pop	r28
    422c:	ff 90       	pop	r15
    422e:	ef 90       	pop	r14
    4230:	df 90       	pop	r13
    4232:	cf 90       	pop	r12
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    4234:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <os_setCallback>

00004238 <os_radio>:
}

void os_radio (u1_t mode) {
    4238:	cf 93       	push	r28
    423a:	c8 2f       	mov	r28, r24
    hal_disableIRQs();
    423c:	0e 94 81 06 	call	0xd02	; 0xd02 <hal_disableIRQs>
    switch (mode) {
    4240:	c1 30       	cpi	r28, 0x01	; 1
    4242:	59 f0       	breq	.+22     	; 0x425a <os_radio+0x22>
    4244:	40 f0       	brcs	.+16     	; 0x4256 <os_radio+0x1e>
    4246:	c2 30       	cpi	r28, 0x02	; 2
    4248:	09 f4       	brne	.+2      	; 0x424c <os_radio+0x14>
    424a:	b4 c0       	rjmp	.+360    	; 0x43b4 <os_radio+0x17c>
    424c:	c3 30       	cpi	r28, 0x03	; 3
    424e:	09 f0       	breq	.+2      	; 0x4252 <os_radio+0x1a>
    4250:	b4 c0       	rjmp	.+360    	; 0x43ba <os_radio+0x182>
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	b0 c0       	rjmp	.+352    	; 0x43b6 <os_radio+0x17e>
void os_radio (u1_t mode) {
    hal_disableIRQs();
    switch (mode) {
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	6d c0       	rjmp	.+218    	; 0x4334 <os_radio+0xfc>
#endif
}

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4260:	87 70       	andi	r24, 0x07	; 7
    4262:	31 f0       	breq	.+12     	; 0x4270 <os_radio+0x38>
    4264:	6b e0       	ldi	r22, 0x0B	; 11
    4266:	72 e0       	ldi	r23, 0x02	; 2
    4268:	89 e8       	ldi	r24, 0x89	; 137
    426a:	91 e0       	ldi	r25, 0x01	; 1
    426c:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
    4270:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <LMIC+0xe>
    4274:	87 70       	andi	r24, 0x07	; 7
    4276:	09 f0       	breq	.+2      	; 0x427a <os_radio+0x42>
    4278:	60 c0       	rjmp	.+192    	; 0x433a <os_radio+0x102>
#endif /* CFG_sx1272_radio */
}

static void txfsk () {
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
    427a:	60 e1       	ldi	r22, 0x10	; 16
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4288:	80 31       	cpi	r24, 0x10	; 16
    428a:	31 f0       	breq	.+12     	; 0x4298 <os_radio+0x60>
    428c:	6d ea       	ldi	r22, 0xAD	; 173
    428e:	71 e0       	ldi	r23, 0x01	; 1
    4290:	89 e8       	ldi	r24, 0x89	; 137
    4292:	91 e0       	ldi	r25, 0x01	; 1
    4294:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
    429e:	62 e0       	ldi	r22, 0x02	; 2
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
    42a6:	60 e8       	ldi	r22, 0x80	; 128
    42a8:	83 e0       	ldi	r24, 0x03	; 3
    42aa:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
    42ae:	61 e0       	ldi	r22, 0x01	; 1
    42b0:	84 e0       	ldi	r24, 0x04	; 4
    42b2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
    42b6:	69 e9       	ldi	r22, 0x99	; 153
    42b8:	85 e0       	ldi	r24, 0x05	; 5
    42ba:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
    42be:	60 e0       	ldi	r22, 0x00	; 0
    42c0:	85 e2       	ldi	r24, 0x25	; 37
    42c2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
    42c6:	65 e0       	ldi	r22, 0x05	; 5
    42c8:	86 e2       	ldi	r24, 0x26	; 38
    42ca:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
    42ce:	62 e1       	ldi	r22, 0x12	; 18
    42d0:	87 e2       	ldi	r24, 0x27	; 39
    42d2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
    42d6:	60 ed       	ldi	r22, 0xD0	; 208
    42d8:	80 e3       	ldi	r24, 0x30	; 48
    42da:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
    42de:	60 e4       	ldi	r22, 0x40	; 64
    42e0:	81 e3       	ldi	r24, 0x31	; 49
    42e2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
    42e6:	61 ec       	ldi	r22, 0xC1	; 193
    42e8:	88 e2       	ldi	r24, 0x28	; 40
    42ea:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
    42ee:	64 e9       	ldi	r22, 0x94	; 148
    42f0:	89 e2       	ldi	r24, 0x29	; 41
    42f2:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
    42f6:	61 ec       	ldi	r22, 0xC1	; 193
    42f8:	8a e2       	ldi	r24, 0x2A	; 42
    42fa:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    // configure frequency
    configChannel();
    42fe:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <configChannel>
    // configure output power
    configPower();
    4302:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
    4306:	64 e3       	ldi	r22, 0x34	; 52
    4308:	80 e4       	ldi	r24, 0x40	; 64
    430a:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>

    // initialize the payload size and address pointers
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
    430e:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <LMIC+0x142>
    4312:	6f 5f       	subi	r22, 0xFF	; 255
    4314:	82 e3       	ldi	r24, 0x32	; 50
    4316:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
    431a:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <LMIC+0x142>
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    4324:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <LMIC+0x142>
    4328:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <writeBuf.constprop.1>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	0e 94 be 05 	call	0xb7c	; 0xb7c <hal_pin_rxtx>

    // now we actually start the transmission
    opmode(OPMODE_TX);
    4332:	83 e0       	ldi	r24, 0x03	; 3
    4334:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    4338:	40 c0       	rjmp	.+128    	; 0x43ba <os_radio+0x182>
static void opmodeLora() {
    u1_t u = OPMODE_LORA;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    433a:	68 e8       	ldi	r22, 0x88	; 136
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>

static void txlora () {
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    4348:	87 fd       	sbrc	r24, 7
    434a:	06 c0       	rjmp	.+12     	; 0x4358 <os_radio+0x120>
    434c:	69 ed       	ldi	r22, 0xD9	; 217
    434e:	71 e0       	ldi	r23, 0x01	; 1
    4350:	89 e8       	ldi	r24, 0x89	; 137
    4352:	91 e0       	ldi	r25, 0x01	; 1
    4354:	0e 94 c9 06 	call	0xd92	; 0xd92 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
    435e:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <configLoraModem>
    // configure frequency
    configChannel();
    4362:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
    4366:	8a e0       	ldi	r24, 0x0A	; 10
    4368:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <readReg>
    436c:	80 7f       	andi	r24, 0xF0	; 240
    436e:	68 2f       	mov	r22, r24
    4370:	68 60       	ori	r22, 0x08	; 8
    4372:	8a e0       	ldi	r24, 0x0A	; 10
    4374:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    configPower();
    4378:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
    437c:	64 e3       	ldi	r22, 0x34	; 52
    437e:	89 e3       	ldi	r24, 0x39	; 57
    4380:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>

    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
    4384:	60 ef       	ldi	r22, 0xF0	; 240
    4386:	80 e4       	ldi	r24, 0x40	; 64
    4388:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
    438c:	6f ef       	ldi	r22, 0xFF	; 255
    438e:	82 e1       	ldi	r24, 0x12	; 18
    4390:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
    4394:	67 ef       	ldi	r22, 0xF7	; 247
    4396:	81 e1       	ldi	r24, 0x11	; 17
    4398:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>

    // initialize the payload size and address pointers
    writeReg(LORARegFifoTxBaseAddr, 0x00);
    439c:	60 e0       	ldi	r22, 0x00	; 0
    439e:	8e e0       	ldi	r24, 0x0E	; 14
    43a0:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
    43a4:	60 e0       	ldi	r22, 0x00	; 0
    43a6:	8d e0       	ldi	r24, 0x0D	; 13
    43a8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
    43ac:	60 91 1f 04 	lds	r22, 0x041F	; 0x80041f <LMIC+0x142>
    43b0:	82 e2       	ldi	r24, 0x22	; 34
    43b2:	b6 cf       	rjmp	.-148    	; 0x4320 <os_radio+0xe8>
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
        break;

      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
    43b4:	80 e0       	ldi	r24, 0x00	; 0
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    43b6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <startrx>
        break;
    }
    hal_enableIRQs();
}
    43ba:	cf 91       	pop	r28
      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
        break;
    }
    hal_enableIRQs();
    43bc:	0c 94 88 06 	jmp	0xd10	; 0xd10 <hal_enableIRQs>

000043c0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    43c0:	cf 93       	push	r28
  uint8_t sreg = SREG;
    43c2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    43c4:	f8 94       	cli
  if (!initialized) {
    43c6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SPIClass11initializedE>
    43ca:	81 11       	cpse	r24, r1
    43cc:	27 c0       	rjmp	.+78     	; 0x441c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    43ce:	e3 ed       	ldi	r30, 0xD3	; 211
    43d0:	f3 e0       	ldi	r31, 0x03	; 3
    43d2:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    43d4:	ef eb       	ldi	r30, 0xBF	; 191
    43d6:	f3 e0       	ldi	r31, 0x03	; 3
    43d8:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    43da:	e8 2f       	mov	r30, r24
    43dc:	f0 e0       	ldi	r31, 0x00	; 0
    43de:	ee 0f       	add	r30, r30
    43e0:	ff 1f       	adc	r31, r31
    43e2:	ef 50       	subi	r30, 0x0F	; 15
    43e4:	fc 4f       	sbci	r31, 0xFC	; 252
    43e6:	a5 91       	lpm	r26, Z+
    43e8:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    43ea:	ec 91       	ld	r30, X
    43ec:	e9 23       	and	r30, r25
    43ee:	21 f4       	brne	.+8      	; 0x43f8 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    43f0:	61 e0       	ldi	r22, 0x01	; 1
    43f2:	8a e0       	ldi	r24, 0x0A	; 10
    43f4:	0e 94 af 26 	call	0x4d5e	; 0x4d5e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    43f8:	61 e0       	ldi	r22, 0x01	; 1
    43fa:	8a e0       	ldi	r24, 0x0A	; 10
    43fc:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    4400:	8c b5       	in	r24, 0x2c	; 44
    4402:	80 61       	ori	r24, 0x10	; 16
    4404:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4406:	8c b5       	in	r24, 0x2c	; 44
    4408:	80 64       	ori	r24, 0x40	; 64
    440a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    440c:	61 e0       	ldi	r22, 0x01	; 1
    440e:	8d e0       	ldi	r24, 0x0D	; 13
    4410:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
    pinMode(MOSI, OUTPUT);
    4414:	61 e0       	ldi	r22, 0x01	; 1
    4416:	8b e0       	ldi	r24, 0x0B	; 11
    4418:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <pinMode>
  }
  initialized++; // reference count
    441c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_ZN8SPIClass11initializedE>
    4420:	8f 5f       	subi	r24, 0xFF	; 255
    4422:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4426:	cf bf       	out	0x3f, r28	; 63
}
    4428:	cf 91       	pop	r28
    442a:	08 95       	ret

0000442c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    442c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    442e:	91 8d       	ldd	r25, Z+25	; 0x19
    4430:	22 8d       	ldd	r18, Z+26	; 0x1a
    4432:	89 2f       	mov	r24, r25
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	80 5c       	subi	r24, 0xC0	; 192
    4438:	9f 4f       	sbci	r25, 0xFF	; 255
    443a:	82 1b       	sub	r24, r18
    443c:	91 09       	sbc	r25, r1
}
    443e:	8f 73       	andi	r24, 0x3F	; 63
    4440:	99 27       	eor	r25, r25
    4442:	08 95       	ret

00004444 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    4444:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    4446:	91 8d       	ldd	r25, Z+25	; 0x19
    4448:	82 8d       	ldd	r24, Z+26	; 0x1a
    444a:	98 17       	cp	r25, r24
    444c:	31 f0       	breq	.+12     	; 0x445a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    444e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4450:	e8 0f       	add	r30, r24
    4452:	f1 1d       	adc	r31, r1
    4454:	85 8d       	ldd	r24, Z+29	; 0x1d
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    445a:	8f ef       	ldi	r24, 0xFF	; 255
    445c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    445e:	08 95       	ret

00004460 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    4460:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4462:	91 8d       	ldd	r25, Z+25	; 0x19
    4464:	82 8d       	ldd	r24, Z+26	; 0x1a
    4466:	98 17       	cp	r25, r24
    4468:	61 f0       	breq	.+24     	; 0x4482 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    446a:	82 8d       	ldd	r24, Z+26	; 0x1a
    446c:	df 01       	movw	r26, r30
    446e:	a8 0f       	add	r26, r24
    4470:	b1 1d       	adc	r27, r1
    4472:	5d 96       	adiw	r26, 0x1d	; 29
    4474:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4476:	92 8d       	ldd	r25, Z+26	; 0x1a
    4478:	9f 5f       	subi	r25, 0xFF	; 255
    447a:	9f 73       	andi	r25, 0x3F	; 63
    447c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4482:	8f ef       	ldi	r24, 0xFF	; 255
    4484:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4486:	08 95       	ret

00004488 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    4488:	fc 01       	movw	r30, r24
    448a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    448c:	44 8d       	ldd	r20, Z+28	; 0x1c
    448e:	25 2f       	mov	r18, r21
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	84 2f       	mov	r24, r20
    4494:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    4496:	82 1b       	sub	r24, r18
    4498:	93 0b       	sbc	r25, r19
    449a:	54 17       	cp	r21, r20
    449c:	10 f0       	brcs	.+4      	; 0x44a2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    449e:	cf 96       	adiw	r24, 0x3f	; 63
    44a0:	08 95       	ret
  return tail - head - 1;
    44a2:	01 97       	sbiw	r24, 0x01	; 1
}
    44a4:	08 95       	ret

000044a6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    44a6:	8f ea       	ldi	r24, 0xAF	; 175
    44a8:	93 e2       	ldi	r25, 0x23	; 35
    44aa:	89 2b       	or	r24, r25
    44ac:	49 f0       	breq	.+18     	; 0x44c0 <_Z14serialEventRunv+0x1a>
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	89 2b       	or	r24, r25
    44b4:	29 f0       	breq	.+10     	; 0x44c0 <_Z14serialEventRunv+0x1a>
    44b6:	0e 94 af 23 	call	0x475e	; 0x475e <_Z17Serial0_availablev>
    44ba:	81 11       	cpse	r24, r1
    44bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    44c0:	08 95       	ret

000044c2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    44c2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    44c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    44c6:	df 01       	movw	r26, r30
    44c8:	a8 0f       	add	r26, r24
    44ca:	b1 1d       	adc	r27, r1
    44cc:	a3 5a       	subi	r26, 0xA3	; 163
    44ce:	bf 4f       	sbci	r27, 0xFF	; 255
    44d0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    44d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	01 96       	adiw	r24, 0x01	; 1
    44d8:	8f 73       	andi	r24, 0x3F	; 63
    44da:	99 27       	eor	r25, r25
    44dc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    44de:	a6 89       	ldd	r26, Z+22	; 0x16
    44e0:	b7 89       	ldd	r27, Z+23	; 0x17
    44e2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    44e4:	a0 89       	ldd	r26, Z+16	; 0x10
    44e6:	b1 89       	ldd	r27, Z+17	; 0x11
    44e8:	8c 91       	ld	r24, X
    44ea:	83 70       	andi	r24, 0x03	; 3
    44ec:	80 64       	ori	r24, 0x40	; 64
    44ee:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    44f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    44f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    44f4:	98 13       	cpse	r25, r24
    44f6:	06 c0       	rjmp	.+12     	; 0x4504 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    44f8:	02 88       	ldd	r0, Z+18	; 0x12
    44fa:	f3 89       	ldd	r31, Z+19	; 0x13
    44fc:	e0 2d       	mov	r30, r0
    44fe:	80 81       	ld	r24, Z
    4500:	8f 7d       	andi	r24, 0xDF	; 223
    4502:	80 83       	st	Z, r24
    4504:	08 95       	ret

00004506 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    4506:	ef 92       	push	r14
    4508:	ff 92       	push	r15
    450a:	0f 93       	push	r16
    450c:	1f 93       	push	r17
    450e:	cf 93       	push	r28
    4510:	df 93       	push	r29
    4512:	ec 01       	movw	r28, r24
  _written = true;
    4514:	81 e0       	ldi	r24, 0x01	; 1
    4516:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4518:	9b 8d       	ldd	r25, Y+27	; 0x1b
    451a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    451c:	98 13       	cpse	r25, r24
    451e:	05 c0       	rjmp	.+10     	; 0x452a <_ZN14HardwareSerial5writeEh+0x24>
    4520:	e8 89       	ldd	r30, Y+16	; 0x10
    4522:	f9 89       	ldd	r31, Y+17	; 0x11
    4524:	80 81       	ld	r24, Z
    4526:	85 fd       	sbrc	r24, 5
    4528:	26 c0       	rjmp	.+76     	; 0x4576 <_ZN14HardwareSerial5writeEh+0x70>
    452a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    452c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    452e:	10 e0       	ldi	r17, 0x00	; 0
    4530:	0f 5f       	subi	r16, 0xFF	; 255
    4532:	1f 4f       	sbci	r17, 0xFF	; 255
    4534:	0f 73       	andi	r16, 0x3F	; 63
    4536:	11 27       	eor	r17, r17
    4538:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    453a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    453c:	e8 12       	cpse	r14, r24
    453e:	0c c0       	rjmp	.+24     	; 0x4558 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    4540:	0f b6       	in	r0, 0x3f	; 63
    4542:	07 fc       	sbrc	r0, 7
    4544:	fa cf       	rjmp	.-12     	; 0x453a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4546:	e8 89       	ldd	r30, Y+16	; 0x10
    4548:	f9 89       	ldd	r31, Y+17	; 0x11
    454a:	80 81       	ld	r24, Z
    454c:	85 ff       	sbrs	r24, 5
    454e:	f5 cf       	rjmp	.-22     	; 0x453a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    4550:	ce 01       	movw	r24, r28
    4552:	0e 94 61 22 	call	0x44c2	; 0x44c2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    4556:	f1 cf       	rjmp	.-30     	; 0x453a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    455a:	fe 01       	movw	r30, r28
    455c:	e8 0f       	add	r30, r24
    455e:	f1 1d       	adc	r31, r1
    4560:	e3 5a       	subi	r30, 0xA3	; 163
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    4566:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4568:	f8 94       	cli
    _tx_buffer_head = i;
    456a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    456c:	ea 89       	ldd	r30, Y+18	; 0x12
    456e:	fb 89       	ldd	r31, Y+19	; 0x13
    4570:	80 81       	ld	r24, Z
    4572:	80 62       	ori	r24, 0x20	; 32
    4574:	0a c0       	rjmp	.+20     	; 0x458a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    4576:	9f b7       	in	r25, 0x3f	; 63
    4578:	f8 94       	cli
      *_udr = c;
    457a:	ee 89       	ldd	r30, Y+22	; 0x16
    457c:	ff 89       	ldd	r31, Y+23	; 0x17
    457e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    4580:	e8 89       	ldd	r30, Y+16	; 0x10
    4582:	f9 89       	ldd	r31, Y+17	; 0x11
    4584:	80 81       	ld	r24, Z
    4586:	83 70       	andi	r24, 0x03	; 3
    4588:	80 64       	ori	r24, 0x40	; 64
    458a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    458c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	df 91       	pop	r29
    4594:	cf 91       	pop	r28
    4596:	1f 91       	pop	r17
    4598:	0f 91       	pop	r16
    459a:	ff 90       	pop	r15
    459c:	ef 90       	pop	r14
    459e:	08 95       	ret

000045a0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    45a6:	88 8d       	ldd	r24, Y+24	; 0x18
    45a8:	88 23       	and	r24, r24
    45aa:	c9 f0       	breq	.+50     	; 0x45de <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    45ac:	ea 89       	ldd	r30, Y+18	; 0x12
    45ae:	fb 89       	ldd	r31, Y+19	; 0x13
    45b0:	80 81       	ld	r24, Z
    45b2:	85 fd       	sbrc	r24, 5
    45b4:	05 c0       	rjmp	.+10     	; 0x45c0 <_ZN14HardwareSerial5flushEv+0x20>
    45b6:	a8 89       	ldd	r26, Y+16	; 0x10
    45b8:	b9 89       	ldd	r27, Y+17	; 0x11
    45ba:	8c 91       	ld	r24, X
    45bc:	86 fd       	sbrc	r24, 6
    45be:	0f c0       	rjmp	.+30     	; 0x45de <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    45c0:	0f b6       	in	r0, 0x3f	; 63
    45c2:	07 fc       	sbrc	r0, 7
    45c4:	f5 cf       	rjmp	.-22     	; 0x45b0 <_ZN14HardwareSerial5flushEv+0x10>
    45c6:	80 81       	ld	r24, Z
    45c8:	85 ff       	sbrs	r24, 5
    45ca:	f2 cf       	rjmp	.-28     	; 0x45b0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    45cc:	a8 89       	ldd	r26, Y+16	; 0x10
    45ce:	b9 89       	ldd	r27, Y+17	; 0x11
    45d0:	8c 91       	ld	r24, X
    45d2:	85 ff       	sbrs	r24, 5
    45d4:	ed cf       	rjmp	.-38     	; 0x45b0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    45d6:	ce 01       	movw	r24, r28
    45d8:	0e 94 61 22 	call	0x44c2	; 0x44c2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    45dc:	e7 cf       	rjmp	.-50     	; 0x45ac <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    45de:	df 91       	pop	r29
    45e0:	cf 91       	pop	r28
    45e2:	08 95       	ret

000045e4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    45e4:	cf 92       	push	r12
    45e6:	df 92       	push	r13
    45e8:	ef 92       	push	r14
    45ea:	ff 92       	push	r15
    45ec:	1f 93       	push	r17
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	ec 01       	movw	r28, r24
    45f4:	6a 01       	movw	r12, r20
    45f6:	7b 01       	movw	r14, r22
    45f8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    45fa:	e8 89       	ldd	r30, Y+16	; 0x10
    45fc:	f9 89       	ldd	r31, Y+17	; 0x11
    45fe:	82 e0       	ldi	r24, 0x02	; 2
    4600:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4602:	41 15       	cp	r20, r1
    4604:	51 4e       	sbci	r21, 0xE1	; 225
    4606:	61 05       	cpc	r22, r1
    4608:	71 05       	cpc	r23, r1
    460a:	b1 f0       	breq	.+44     	; 0x4638 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    460c:	60 e0       	ldi	r22, 0x00	; 0
    460e:	79 e0       	ldi	r23, 0x09	; 9
    4610:	8d e3       	ldi	r24, 0x3D	; 61
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	a7 01       	movw	r20, r14
    4616:	96 01       	movw	r18, r12
    4618:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__udivmodsi4>
    461c:	da 01       	movw	r26, r20
    461e:	c9 01       	movw	r24, r18
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	a1 09       	sbc	r26, r1
    4624:	b1 09       	sbc	r27, r1
    4626:	b6 95       	lsr	r27
    4628:	a7 95       	ror	r26
    462a:	97 95       	ror	r25
    462c:	87 95       	ror	r24
    462e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4630:	21 15       	cp	r18, r1
    4632:	80 e1       	ldi	r24, 0x10	; 16
    4634:	38 07       	cpc	r19, r24
    4636:	a8 f0       	brcs	.+42     	; 0x4662 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    4638:	e8 89       	ldd	r30, Y+16	; 0x10
    463a:	f9 89       	ldd	r31, Y+17	; 0x11
    463c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    463e:	60 e8       	ldi	r22, 0x80	; 128
    4640:	74 e8       	ldi	r23, 0x84	; 132
    4642:	8e e1       	ldi	r24, 0x1E	; 30
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	a7 01       	movw	r20, r14
    4648:	96 01       	movw	r18, r12
    464a:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__udivmodsi4>
    464e:	da 01       	movw	r26, r20
    4650:	c9 01       	movw	r24, r18
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	a1 09       	sbc	r26, r1
    4656:	b1 09       	sbc	r27, r1
    4658:	b6 95       	lsr	r27
    465a:	a7 95       	ror	r26
    465c:	97 95       	ror	r25
    465e:	87 95       	ror	r24
    4660:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4662:	ec 85       	ldd	r30, Y+12	; 0x0c
    4664:	fd 85       	ldd	r31, Y+13	; 0x0d
    4666:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4668:	ee 85       	ldd	r30, Y+14	; 0x0e
    466a:	ff 85       	ldd	r31, Y+15	; 0x0f
    466c:	20 83       	st	Z, r18

  _written = false;
    466e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4670:	ec 89       	ldd	r30, Y+20	; 0x14
    4672:	fd 89       	ldd	r31, Y+21	; 0x15
    4674:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    4676:	ea 89       	ldd	r30, Y+18	; 0x12
    4678:	fb 89       	ldd	r31, Y+19	; 0x13
    467a:	80 81       	ld	r24, Z
    467c:	80 61       	ori	r24, 0x10	; 16
    467e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    4680:	ea 89       	ldd	r30, Y+18	; 0x12
    4682:	fb 89       	ldd	r31, Y+19	; 0x13
    4684:	80 81       	ld	r24, Z
    4686:	88 60       	ori	r24, 0x08	; 8
    4688:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    468a:	ea 89       	ldd	r30, Y+18	; 0x12
    468c:	fb 89       	ldd	r31, Y+19	; 0x13
    468e:	80 81       	ld	r24, Z
    4690:	80 68       	ori	r24, 0x80	; 128
    4692:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    4694:	ea 89       	ldd	r30, Y+18	; 0x12
    4696:	fb 89       	ldd	r31, Y+19	; 0x13
    4698:	80 81       	ld	r24, Z
    469a:	8f 7d       	andi	r24, 0xDF	; 223
    469c:	80 83       	st	Z, r24
}
    469e:	df 91       	pop	r29
    46a0:	cf 91       	pop	r28
    46a2:	1f 91       	pop	r17
    46a4:	ff 90       	pop	r15
    46a6:	ef 90       	pop	r14
    46a8:	df 90       	pop	r13
    46aa:	cf 90       	pop	r12
    46ac:	08 95       	ret

000046ae <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    46ae:	1f 92       	push	r1
    46b0:	0f 92       	push	r0
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	0f 92       	push	r0
    46b6:	11 24       	eor	r1, r1
    46b8:	2f 93       	push	r18
    46ba:	8f 93       	push	r24
    46bc:	9f 93       	push	r25
    46be:	ef 93       	push	r30
    46c0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    46c2:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <Serial+0x10>
    46c6:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <Serial+0x11>
    46ca:	80 81       	ld	r24, Z
    46cc:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <Serial+0x16>
    46d0:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <Serial+0x17>
    46d4:	82 fd       	sbrc	r24, 2
    46d6:	12 c0       	rjmp	.+36     	; 0x46fc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    46d8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    46da:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <Serial+0x19>
    46de:	8f 5f       	subi	r24, 0xFF	; 255
    46e0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    46e2:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <Serial+0x1a>
    46e6:	82 17       	cp	r24, r18
    46e8:	51 f0       	breq	.+20     	; 0x46fe <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    46ea:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <Serial+0x19>
    46ee:	f0 e0       	ldi	r31, 0x00	; 0
    46f0:	e9 5e       	subi	r30, 0xE9	; 233
    46f2:	fd 4f       	sbci	r31, 0xFD	; 253
    46f4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    46f6:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <Serial+0x19>
    46fa:	01 c0       	rjmp	.+2      	; 0x46fe <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    46fc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    46fe:	ff 91       	pop	r31
    4700:	ef 91       	pop	r30
    4702:	9f 91       	pop	r25
    4704:	8f 91       	pop	r24
    4706:	2f 91       	pop	r18
    4708:	0f 90       	pop	r0
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	0f 90       	pop	r0
    470e:	1f 90       	pop	r1
    4710:	18 95       	reti

00004712 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4712:	1f 92       	push	r1
    4714:	0f 92       	push	r0
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	0f 92       	push	r0
    471a:	11 24       	eor	r1, r1
    471c:	2f 93       	push	r18
    471e:	3f 93       	push	r19
    4720:	4f 93       	push	r20
    4722:	5f 93       	push	r21
    4724:	6f 93       	push	r22
    4726:	7f 93       	push	r23
    4728:	8f 93       	push	r24
    472a:	9f 93       	push	r25
    472c:	af 93       	push	r26
    472e:	bf 93       	push	r27
    4730:	ef 93       	push	r30
    4732:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    4734:	87 e1       	ldi	r24, 0x17	; 23
    4736:	92 e0       	ldi	r25, 0x02	; 2
    4738:	0e 94 61 22 	call	0x44c2	; 0x44c2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    473c:	ff 91       	pop	r31
    473e:	ef 91       	pop	r30
    4740:	bf 91       	pop	r27
    4742:	af 91       	pop	r26
    4744:	9f 91       	pop	r25
    4746:	8f 91       	pop	r24
    4748:	7f 91       	pop	r23
    474a:	6f 91       	pop	r22
    474c:	5f 91       	pop	r21
    474e:	4f 91       	pop	r20
    4750:	3f 91       	pop	r19
    4752:	2f 91       	pop	r18
    4754:	0f 90       	pop	r0
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	0f 90       	pop	r0
    475a:	1f 90       	pop	r1
    475c:	18 95       	reti

0000475e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    475e:	87 e1       	ldi	r24, 0x17	; 23
    4760:	92 e0       	ldi	r25, 0x02	; 2
    4762:	0e 94 16 22 	call	0x442c	; 0x442c <_ZN14HardwareSerial9availableEv>
    4766:	21 e0       	ldi	r18, 0x01	; 1
    4768:	89 2b       	or	r24, r25
    476a:	09 f4       	brne	.+2      	; 0x476e <_Z17Serial0_availablev+0x10>
    476c:	20 e0       	ldi	r18, 0x00	; 0
}
    476e:	82 2f       	mov	r24, r18
    4770:	08 95       	ret

00004772 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4772:	e7 e1       	ldi	r30, 0x17	; 23
    4774:	f2 e0       	ldi	r31, 0x02	; 2
    4776:	13 82       	std	Z+3, r1	; 0x03
    4778:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    477a:	88 ee       	ldi	r24, 0xE8	; 232
    477c:	93 e0       	ldi	r25, 0x03	; 3
    477e:	a0 e0       	ldi	r26, 0x00	; 0
    4780:	b0 e0       	ldi	r27, 0x00	; 0
    4782:	84 83       	std	Z+4, r24	; 0x04
    4784:	95 83       	std	Z+5, r25	; 0x05
    4786:	a6 83       	std	Z+6, r26	; 0x06
    4788:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    478a:	83 ec       	ldi	r24, 0xC3	; 195
    478c:	91 e0       	ldi	r25, 0x01	; 1
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
    4792:	85 ec       	ldi	r24, 0xC5	; 197
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	95 87       	std	Z+13, r25	; 0x0d
    4798:	84 87       	std	Z+12, r24	; 0x0c
    479a:	84 ec       	ldi	r24, 0xC4	; 196
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	97 87       	std	Z+15, r25	; 0x0f
    47a0:	86 87       	std	Z+14, r24	; 0x0e
    47a2:	80 ec       	ldi	r24, 0xC0	; 192
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	91 8b       	std	Z+17, r25	; 0x11
    47a8:	80 8b       	std	Z+16, r24	; 0x10
    47aa:	81 ec       	ldi	r24, 0xC1	; 193
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	93 8b       	std	Z+19, r25	; 0x13
    47b0:	82 8b       	std	Z+18, r24	; 0x12
    47b2:	82 ec       	ldi	r24, 0xC2	; 194
    47b4:	90 e0       	ldi	r25, 0x00	; 0
    47b6:	95 8b       	std	Z+21, r25	; 0x15
    47b8:	84 8b       	std	Z+20, r24	; 0x14
    47ba:	86 ec       	ldi	r24, 0xC6	; 198
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	97 8b       	std	Z+23, r25	; 0x17
    47c0:	86 8b       	std	Z+22, r24	; 0x16
    47c2:	11 8e       	std	Z+25, r1	; 0x19
    47c4:	12 8e       	std	Z+26, r1	; 0x1a
    47c6:	13 8e       	std	Z+27, r1	; 0x1b
    47c8:	14 8e       	std	Z+28, r1	; 0x1c
    47ca:	08 95       	ret

000047cc <initVariant>:
    47cc:	08 95       	ret

000047ce <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    47ce:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <init>

	initVariant();
    47d2:	0e 94 e6 23 	call	0x47cc	; 0x47cc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    47d6:	0e 94 c7 02 	call	0x58e	; 0x58e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    47da:	c3 e5       	ldi	r28, 0x53	; 83
    47dc:	d2 e2       	ldi	r29, 0x22	; 34
#endif
	
	setup();
    
	for (;;) {
		loop();
    47de:	0e 94 33 03 	call	0x666	; 0x666 <loop>
		if (serialEventRun) serialEventRun();
    47e2:	20 97       	sbiw	r28, 0x00	; 0
    47e4:	e1 f3       	breq	.-8      	; 0x47de <main+0x10>
    47e6:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_Z14serialEventRunv>
    47ea:	f9 cf       	rjmp	.-14     	; 0x47de <main+0x10>

000047ec <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    47ec:	cf 92       	push	r12
    47ee:	df 92       	push	r13
    47f0:	ef 92       	push	r14
    47f2:	ff 92       	push	r15
    47f4:	0f 93       	push	r16
    47f6:	1f 93       	push	r17
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	6c 01       	movw	r12, r24
    47fe:	7a 01       	movw	r14, r20
    4800:	8b 01       	movw	r16, r22
    4802:	c0 e0       	ldi	r28, 0x00	; 0
    4804:	d0 e0       	ldi	r29, 0x00	; 0
    4806:	ce 15       	cp	r28, r14
    4808:	df 05       	cpc	r29, r15
    480a:	81 f0       	breq	.+32     	; 0x482c <_ZN5Print5writeEPKhj+0x40>
    480c:	d8 01       	movw	r26, r16
    480e:	6d 91       	ld	r22, X+
    4810:	8d 01       	movw	r16, r26
    4812:	d6 01       	movw	r26, r12
    4814:	ed 91       	ld	r30, X+
    4816:	fc 91       	ld	r31, X
    4818:	01 90       	ld	r0, Z+
    481a:	f0 81       	ld	r31, Z
    481c:	e0 2d       	mov	r30, r0
    481e:	c6 01       	movw	r24, r12
    4820:	09 95       	icall
    4822:	89 2b       	or	r24, r25
    4824:	11 f0       	breq	.+4      	; 0x482a <_ZN5Print5writeEPKhj+0x3e>
    4826:	21 96       	adiw	r28, 0x01	; 1
    4828:	ee cf       	rjmp	.-36     	; 0x4806 <_ZN5Print5writeEPKhj+0x1a>
    482a:	7e 01       	movw	r14, r28
    482c:	c7 01       	movw	r24, r14
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	1f 91       	pop	r17
    4834:	0f 91       	pop	r16
    4836:	ff 90       	pop	r15
    4838:	ef 90       	pop	r14
    483a:	df 90       	pop	r13
    483c:	cf 90       	pop	r12
    483e:	08 95       	ret

00004840 <_ZN5Print5writeEPKc>:
    4840:	61 15       	cp	r22, r1
    4842:	71 05       	cpc	r23, r1
    4844:	79 f0       	breq	.+30     	; 0x4864 <_ZN5Print5writeEPKc+0x24>
    4846:	fb 01       	movw	r30, r22
    4848:	01 90       	ld	r0, Z+
    484a:	00 20       	and	r0, r0
    484c:	e9 f7       	brne	.-6      	; 0x4848 <_ZN5Print5writeEPKc+0x8>
    484e:	31 97       	sbiw	r30, 0x01	; 1
    4850:	af 01       	movw	r20, r30
    4852:	46 1b       	sub	r20, r22
    4854:	57 0b       	sbc	r21, r23
    4856:	dc 01       	movw	r26, r24
    4858:	ed 91       	ld	r30, X+
    485a:	fc 91       	ld	r31, X
    485c:	02 80       	ldd	r0, Z+2	; 0x02
    485e:	f3 81       	ldd	r31, Z+3	; 0x03
    4860:	e0 2d       	mov	r30, r0
    4862:	09 94       	ijmp
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	08 95       	ret

0000486a <_ZN5Print5printEPK19__FlashStringHelper>:
    486a:	ef 92       	push	r14
    486c:	ff 92       	push	r15
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	8c 01       	movw	r16, r24
    4878:	7b 01       	movw	r14, r22
    487a:	c0 e0       	ldi	r28, 0x00	; 0
    487c:	d0 e0       	ldi	r29, 0x00	; 0
    487e:	f7 01       	movw	r30, r14
    4880:	ec 0f       	add	r30, r28
    4882:	fd 1f       	adc	r31, r29
    4884:	64 91       	lpm	r22, Z
    4886:	66 23       	and	r22, r22
    4888:	61 f0       	breq	.+24     	; 0x48a2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    488a:	d8 01       	movw	r26, r16
    488c:	ed 91       	ld	r30, X+
    488e:	fc 91       	ld	r31, X
    4890:	01 90       	ld	r0, Z+
    4892:	f0 81       	ld	r31, Z
    4894:	e0 2d       	mov	r30, r0
    4896:	c8 01       	movw	r24, r16
    4898:	09 95       	icall
    489a:	89 2b       	or	r24, r25
    489c:	11 f0       	breq	.+4      	; 0x48a2 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    489e:	21 96       	adiw	r28, 0x01	; 1
    48a0:	ee cf       	rjmp	.-36     	; 0x487e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    48a2:	ce 01       	movw	r24, r28
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	1f 91       	pop	r17
    48aa:	0f 91       	pop	r16
    48ac:	ff 90       	pop	r15
    48ae:	ef 90       	pop	r14
    48b0:	08 95       	ret

000048b2 <_ZN5Print5printEPKc>:
    48b2:	0c 94 20 24 	jmp	0x4840	; 0x4840 <_ZN5Print5writeEPKc>

000048b6 <_ZN5Print5printEc>:
    48b6:	dc 01       	movw	r26, r24
    48b8:	ed 91       	ld	r30, X+
    48ba:	fc 91       	ld	r31, X
    48bc:	01 90       	ld	r0, Z+
    48be:	f0 81       	ld	r31, Z
    48c0:	e0 2d       	mov	r30, r0
    48c2:	09 94       	ijmp

000048c4 <_ZN5Print7printlnEv>:
    48c4:	61 ed       	ldi	r22, 0xD1	; 209
    48c6:	71 e0       	ldi	r23, 0x01	; 1
    48c8:	0c 94 20 24 	jmp	0x4840	; 0x4840 <_ZN5Print5writeEPKc>

000048cc <_ZN5Print7printlnEPK19__FlashStringHelper>:
    48cc:	0f 93       	push	r16
    48ce:	1f 93       	push	r17
    48d0:	cf 93       	push	r28
    48d2:	df 93       	push	r29
    48d4:	ec 01       	movw	r28, r24
    48d6:	0e 94 35 24 	call	0x486a	; 0x486a <_ZN5Print5printEPK19__FlashStringHelper>
    48da:	8c 01       	movw	r16, r24
    48dc:	ce 01       	movw	r24, r28
    48de:	0e 94 62 24 	call	0x48c4	; 0x48c4 <_ZN5Print7printlnEv>
    48e2:	80 0f       	add	r24, r16
    48e4:	91 1f       	adc	r25, r17
    48e6:	df 91       	pop	r29
    48e8:	cf 91       	pop	r28
    48ea:	1f 91       	pop	r17
    48ec:	0f 91       	pop	r16
    48ee:	08 95       	ret

000048f0 <_ZN5Print7printlnEPKc>:
    48f0:	0f 93       	push	r16
    48f2:	1f 93       	push	r17
    48f4:	cf 93       	push	r28
    48f6:	df 93       	push	r29
    48f8:	ec 01       	movw	r28, r24
    48fa:	0e 94 20 24 	call	0x4840	; 0x4840 <_ZN5Print5writeEPKc>
    48fe:	8c 01       	movw	r16, r24
    4900:	ce 01       	movw	r24, r28
    4902:	0e 94 62 24 	call	0x48c4	; 0x48c4 <_ZN5Print7printlnEv>
    4906:	80 0f       	add	r24, r16
    4908:	91 1f       	adc	r25, r17
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	08 95       	ret

00004914 <_ZN5Print11printNumberEmh>:
    4914:	8f 92       	push	r8
    4916:	9f 92       	push	r9
    4918:	af 92       	push	r10
    491a:	bf 92       	push	r11
    491c:	ef 92       	push	r14
    491e:	ff 92       	push	r15
    4920:	0f 93       	push	r16
    4922:	1f 93       	push	r17
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	cd b7       	in	r28, 0x3d	; 61
    492a:	de b7       	in	r29, 0x3e	; 62
    492c:	a1 97       	sbiw	r28, 0x21	; 33
    492e:	0f b6       	in	r0, 0x3f	; 63
    4930:	f8 94       	cli
    4932:	de bf       	out	0x3e, r29	; 62
    4934:	0f be       	out	0x3f, r0	; 63
    4936:	cd bf       	out	0x3d, r28	; 61
    4938:	7c 01       	movw	r14, r24
    493a:	fa 01       	movw	r30, r20
    493c:	cb 01       	movw	r24, r22
    493e:	19 a2       	std	Y+33, r1	; 0x21
    4940:	22 30       	cpi	r18, 0x02	; 2
    4942:	08 f4       	brcc	.+2      	; 0x4946 <_ZN5Print11printNumberEmh+0x32>
    4944:	2a e0       	ldi	r18, 0x0A	; 10
    4946:	8e 01       	movw	r16, r28
    4948:	0f 5d       	subi	r16, 0xDF	; 223
    494a:	1f 4f       	sbci	r17, 0xFF	; 255
    494c:	82 2e       	mov	r8, r18
    494e:	91 2c       	mov	r9, r1
    4950:	a1 2c       	mov	r10, r1
    4952:	b1 2c       	mov	r11, r1
    4954:	bf 01       	movw	r22, r30
    4956:	a5 01       	movw	r20, r10
    4958:	94 01       	movw	r18, r8
    495a:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__udivmodsi4>
    495e:	f9 01       	movw	r30, r18
    4960:	ca 01       	movw	r24, r20
    4962:	01 50       	subi	r16, 0x01	; 1
    4964:	11 09       	sbc	r17, r1
    4966:	6a 30       	cpi	r22, 0x0A	; 10
    4968:	10 f4       	brcc	.+4      	; 0x496e <_ZN5Print11printNumberEmh+0x5a>
    496a:	60 5d       	subi	r22, 0xD0	; 208
    496c:	01 c0       	rjmp	.+2      	; 0x4970 <_ZN5Print11printNumberEmh+0x5c>
    496e:	69 5c       	subi	r22, 0xC9	; 201
    4970:	d8 01       	movw	r26, r16
    4972:	6c 93       	st	X, r22
    4974:	23 2b       	or	r18, r19
    4976:	24 2b       	or	r18, r20
    4978:	25 2b       	or	r18, r21
    497a:	61 f7       	brne	.-40     	; 0x4954 <_ZN5Print11printNumberEmh+0x40>
    497c:	b8 01       	movw	r22, r16
    497e:	c7 01       	movw	r24, r14
    4980:	0e 94 20 24 	call	0x4840	; 0x4840 <_ZN5Print5writeEPKc>
    4984:	a1 96       	adiw	r28, 0x21	; 33
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	f8 94       	cli
    498a:	de bf       	out	0x3e, r29	; 62
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	cd bf       	out	0x3d, r28	; 61
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	1f 91       	pop	r17
    4996:	0f 91       	pop	r16
    4998:	ff 90       	pop	r15
    499a:	ef 90       	pop	r14
    499c:	bf 90       	pop	r11
    499e:	af 90       	pop	r10
    49a0:	9f 90       	pop	r9
    49a2:	8f 90       	pop	r8
    49a4:	08 95       	ret

000049a6 <_ZN5Print5printEmi>:
    49a6:	21 15       	cp	r18, r1
    49a8:	31 05       	cpc	r19, r1
    49aa:	41 f4       	brne	.+16     	; 0x49bc <_ZN5Print5printEmi+0x16>
    49ac:	dc 01       	movw	r26, r24
    49ae:	ed 91       	ld	r30, X+
    49b0:	fc 91       	ld	r31, X
    49b2:	01 90       	ld	r0, Z+
    49b4:	f0 81       	ld	r31, Z
    49b6:	e0 2d       	mov	r30, r0
    49b8:	64 2f       	mov	r22, r20
    49ba:	09 94       	ijmp
    49bc:	0c 94 8a 24 	jmp	0x4914	; 0x4914 <_ZN5Print11printNumberEmh>

000049c0 <_ZN5Print5printEhi>:
    49c0:	9a 01       	movw	r18, r20
    49c2:	46 2f       	mov	r20, r22
    49c4:	50 e0       	ldi	r21, 0x00	; 0
    49c6:	60 e0       	ldi	r22, 0x00	; 0
    49c8:	70 e0       	ldi	r23, 0x00	; 0
    49ca:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <_ZN5Print5printEmi>

000049ce <_ZN5Print7printlnEhi>:
    49ce:	0f 93       	push	r16
    49d0:	1f 93       	push	r17
    49d2:	cf 93       	push	r28
    49d4:	df 93       	push	r29
    49d6:	ec 01       	movw	r28, r24
    49d8:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <_ZN5Print5printEhi>
    49dc:	8c 01       	movw	r16, r24
    49de:	ce 01       	movw	r24, r28
    49e0:	0e 94 62 24 	call	0x48c4	; 0x48c4 <_ZN5Print7printlnEv>
    49e4:	80 0f       	add	r24, r16
    49e6:	91 1f       	adc	r25, r17
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	1f 91       	pop	r17
    49ee:	0f 91       	pop	r16
    49f0:	08 95       	ret

000049f2 <_ZN5Print5printEji>:
    49f2:	9a 01       	movw	r18, r20
    49f4:	ab 01       	movw	r20, r22
    49f6:	60 e0       	ldi	r22, 0x00	; 0
    49f8:	70 e0       	ldi	r23, 0x00	; 0
    49fa:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <_ZN5Print5printEmi>

000049fe <_ZN5Print7printlnEji>:
    49fe:	0f 93       	push	r16
    4a00:	1f 93       	push	r17
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	ec 01       	movw	r28, r24
    4a08:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <_ZN5Print5printEji>
    4a0c:	8c 01       	movw	r16, r24
    4a0e:	ce 01       	movw	r24, r28
    4a10:	0e 94 62 24 	call	0x48c4	; 0x48c4 <_ZN5Print7printlnEv>
    4a14:	80 0f       	add	r24, r16
    4a16:	91 1f       	adc	r25, r17
    4a18:	df 91       	pop	r29
    4a1a:	cf 91       	pop	r28
    4a1c:	1f 91       	pop	r17
    4a1e:	0f 91       	pop	r16
    4a20:	08 95       	ret

00004a22 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    4a22:	cf 92       	push	r12
    4a24:	df 92       	push	r13
    4a26:	ef 92       	push	r14
    4a28:	ff 92       	push	r15
    4a2a:	0f 93       	push	r16
    4a2c:	1f 93       	push	r17
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29
  if (base == 0) {
    4a32:	21 15       	cp	r18, r1
    4a34:	31 05       	cpc	r19, r1
    4a36:	81 f4       	brne	.+32     	; 0x4a58 <_ZN5Print5printEli+0x36>
    return write(n);
    4a38:	dc 01       	movw	r26, r24
    4a3a:	ed 91       	ld	r30, X+
    4a3c:	fc 91       	ld	r31, X
    4a3e:	01 90       	ld	r0, Z+
    4a40:	f0 81       	ld	r31, Z
    4a42:	e0 2d       	mov	r30, r0
    4a44:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	1f 91       	pop	r17
    4a4c:	0f 91       	pop	r16
    4a4e:	ff 90       	pop	r15
    4a50:	ef 90       	pop	r14
    4a52:	df 90       	pop	r13
    4a54:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    4a56:	09 94       	ijmp
  } else if (base == 10) {
    4a58:	2a 30       	cpi	r18, 0x0A	; 10
    4a5a:	31 05       	cpc	r19, r1
    4a5c:	01 f5       	brne	.+64     	; 0x4a9e <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    4a5e:	77 ff       	sbrs	r23, 7
    4a60:	1d c0       	rjmp	.+58     	; 0x4a9c <_ZN5Print5printEli+0x7a>
    4a62:	6a 01       	movw	r12, r20
    4a64:	7b 01       	movw	r14, r22
    4a66:	ec 01       	movw	r28, r24
      int t = print('-');
    4a68:	6d e2       	ldi	r22, 0x2D	; 45
    4a6a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <_ZN5Print5printEc>
    4a6e:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    4a70:	44 27       	eor	r20, r20
    4a72:	55 27       	eor	r21, r21
    4a74:	ba 01       	movw	r22, r20
    4a76:	4c 19       	sub	r20, r12
    4a78:	5d 09       	sbc	r21, r13
    4a7a:	6e 09       	sbc	r22, r14
    4a7c:	7f 09       	sbc	r23, r15
    4a7e:	2a e0       	ldi	r18, 0x0A	; 10
    4a80:	ce 01       	movw	r24, r28
    4a82:	0e 94 8a 24 	call	0x4914	; 0x4914 <_ZN5Print11printNumberEmh>
    4a86:	80 0f       	add	r24, r16
    4a88:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	1f 91       	pop	r17
    4a90:	0f 91       	pop	r16
    4a92:	ff 90       	pop	r15
    4a94:	ef 90       	pop	r14
    4a96:	df 90       	pop	r13
    4a98:	cf 90       	pop	r12
    4a9a:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    4a9c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    4a9e:	df 91       	pop	r29
    4aa0:	cf 91       	pop	r28
    4aa2:	1f 91       	pop	r17
    4aa4:	0f 91       	pop	r16
    4aa6:	ff 90       	pop	r15
    4aa8:	ef 90       	pop	r14
    4aaa:	df 90       	pop	r13
    4aac:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    4aae:	0c 94 8a 24 	jmp	0x4914	; 0x4914 <_ZN5Print11printNumberEmh>

00004ab2 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    4ab2:	1f 92       	push	r1
    4ab4:	0f 92       	push	r0
    4ab6:	0f b6       	in	r0, 0x3f	; 63
    4ab8:	0f 92       	push	r0
    4aba:	11 24       	eor	r1, r1
    4abc:	2f 93       	push	r18
    4abe:	3f 93       	push	r19
    4ac0:	8f 93       	push	r24
    4ac2:	9f 93       	push	r25
    4ac4:	af 93       	push	r26
    4ac6:	bf 93       	push	r27
    4ac8:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <timer0_millis>
    4acc:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <timer0_millis+0x1>
    4ad0:	a0 91 b7 02 	lds	r26, 0x02B7	; 0x8002b7 <timer0_millis+0x2>
    4ad4:	b0 91 b8 02 	lds	r27, 0x02B8	; 0x8002b8 <timer0_millis+0x3>
    4ad8:	30 91 b4 02 	lds	r19, 0x02B4	; 0x8002b4 <timer0_fract>
    4adc:	23 e0       	ldi	r18, 0x03	; 3
    4ade:	23 0f       	add	r18, r19
    4ae0:	2d 37       	cpi	r18, 0x7D	; 125
    4ae2:	20 f4       	brcc	.+8      	; 0x4aec <__vector_16+0x3a>
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	a1 1d       	adc	r26, r1
    4ae8:	b1 1d       	adc	r27, r1
    4aea:	05 c0       	rjmp	.+10     	; 0x4af6 <__vector_16+0x44>
    4aec:	26 e8       	ldi	r18, 0x86	; 134
    4aee:	23 0f       	add	r18, r19
    4af0:	02 96       	adiw	r24, 0x02	; 2
    4af2:	a1 1d       	adc	r26, r1
    4af4:	b1 1d       	adc	r27, r1
    4af6:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <timer0_fract>
    4afa:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <timer0_millis>
    4afe:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <timer0_millis+0x1>
    4b02:	a0 93 b7 02 	sts	0x02B7, r26	; 0x8002b7 <timer0_millis+0x2>
    4b06:	b0 93 b8 02 	sts	0x02B8, r27	; 0x8002b8 <timer0_millis+0x3>
    4b0a:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <timer0_overflow_count>
    4b0e:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <timer0_overflow_count+0x1>
    4b12:	a0 91 bb 02 	lds	r26, 0x02BB	; 0x8002bb <timer0_overflow_count+0x2>
    4b16:	b0 91 bc 02 	lds	r27, 0x02BC	; 0x8002bc <timer0_overflow_count+0x3>
    4b1a:	01 96       	adiw	r24, 0x01	; 1
    4b1c:	a1 1d       	adc	r26, r1
    4b1e:	b1 1d       	adc	r27, r1
    4b20:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <timer0_overflow_count>
    4b24:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <timer0_overflow_count+0x1>
    4b28:	a0 93 bb 02 	sts	0x02BB, r26	; 0x8002bb <timer0_overflow_count+0x2>
    4b2c:	b0 93 bc 02 	sts	0x02BC, r27	; 0x8002bc <timer0_overflow_count+0x3>
    4b30:	bf 91       	pop	r27
    4b32:	af 91       	pop	r26
    4b34:	9f 91       	pop	r25
    4b36:	8f 91       	pop	r24
    4b38:	3f 91       	pop	r19
    4b3a:	2f 91       	pop	r18
    4b3c:	0f 90       	pop	r0
    4b3e:	0f be       	out	0x3f, r0	; 63
    4b40:	0f 90       	pop	r0
    4b42:	1f 90       	pop	r1
    4b44:	18 95       	reti

00004b46 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4b46:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4b48:	f8 94       	cli
	m = timer0_overflow_count;
    4b4a:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <timer0_overflow_count>
    4b4e:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <timer0_overflow_count+0x1>
    4b52:	a0 91 bb 02 	lds	r26, 0x02BB	; 0x8002bb <timer0_overflow_count+0x2>
    4b56:	b0 91 bc 02 	lds	r27, 0x02BC	; 0x8002bc <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4b5a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4b5c:	a8 9b       	sbis	0x15, 0	; 21
    4b5e:	05 c0       	rjmp	.+10     	; 0x4b6a <micros+0x24>
    4b60:	2f 3f       	cpi	r18, 0xFF	; 255
    4b62:	19 f0       	breq	.+6      	; 0x4b6a <micros+0x24>
		m++;
    4b64:	01 96       	adiw	r24, 0x01	; 1
    4b66:	a1 1d       	adc	r26, r1
    4b68:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4b6a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4b6c:	ba 2f       	mov	r27, r26
    4b6e:	a9 2f       	mov	r26, r25
    4b70:	98 2f       	mov	r25, r24
    4b72:	88 27       	eor	r24, r24
    4b74:	82 0f       	add	r24, r18
    4b76:	91 1d       	adc	r25, r1
    4b78:	a1 1d       	adc	r26, r1
    4b7a:	b1 1d       	adc	r27, r1
    4b7c:	bc 01       	movw	r22, r24
    4b7e:	cd 01       	movw	r24, r26
    4b80:	42 e0       	ldi	r20, 0x02	; 2
    4b82:	66 0f       	add	r22, r22
    4b84:	77 1f       	adc	r23, r23
    4b86:	88 1f       	adc	r24, r24
    4b88:	99 1f       	adc	r25, r25
    4b8a:	4a 95       	dec	r20
    4b8c:	d1 f7       	brne	.-12     	; 0x4b82 <micros+0x3c>
}
    4b8e:	08 95       	ret

00004b90 <delay>:

void delay(unsigned long ms)
{
    4b90:	8f 92       	push	r8
    4b92:	9f 92       	push	r9
    4b94:	af 92       	push	r10
    4b96:	bf 92       	push	r11
    4b98:	cf 92       	push	r12
    4b9a:	df 92       	push	r13
    4b9c:	ef 92       	push	r14
    4b9e:	ff 92       	push	r15
    4ba0:	6b 01       	movw	r12, r22
    4ba2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    4ba4:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <micros>
    4ba8:	4b 01       	movw	r8, r22
    4baa:	5c 01       	movw	r10, r24

	while (ms > 0) {
    4bac:	c1 14       	cp	r12, r1
    4bae:	d1 04       	cpc	r13, r1
    4bb0:	e1 04       	cpc	r14, r1
    4bb2:	f1 04       	cpc	r15, r1
    4bb4:	01 f1       	breq	.+64     	; 0x4bf6 <delay+0x66>
		yield();
    4bb6:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    4bba:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <micros>
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	88 19       	sub	r24, r8
    4bc4:	99 09       	sbc	r25, r9
    4bc6:	aa 09       	sbc	r26, r10
    4bc8:	bb 09       	sbc	r27, r11
    4bca:	88 3e       	cpi	r24, 0xE8	; 232
    4bcc:	93 40       	sbci	r25, 0x03	; 3
    4bce:	a1 05       	cpc	r26, r1
    4bd0:	b1 05       	cpc	r27, r1
    4bd2:	60 f3       	brcs	.-40     	; 0x4bac <delay+0x1c>
			ms--;
    4bd4:	21 e0       	ldi	r18, 0x01	; 1
    4bd6:	c2 1a       	sub	r12, r18
    4bd8:	d1 08       	sbc	r13, r1
    4bda:	e1 08       	sbc	r14, r1
    4bdc:	f1 08       	sbc	r15, r1
			start += 1000;
    4bde:	88 ee       	ldi	r24, 0xE8	; 232
    4be0:	88 0e       	add	r8, r24
    4be2:	83 e0       	ldi	r24, 0x03	; 3
    4be4:	98 1e       	adc	r9, r24
    4be6:	a1 1c       	adc	r10, r1
    4be8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    4bea:	c1 14       	cp	r12, r1
    4bec:	d1 04       	cpc	r13, r1
    4bee:	e1 04       	cpc	r14, r1
    4bf0:	f1 04       	cpc	r15, r1
    4bf2:	19 f7       	brne	.-58     	; 0x4bba <delay+0x2a>
    4bf4:	db cf       	rjmp	.-74     	; 0x4bac <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    4bf6:	ff 90       	pop	r15
    4bf8:	ef 90       	pop	r14
    4bfa:	df 90       	pop	r13
    4bfc:	cf 90       	pop	r12
    4bfe:	bf 90       	pop	r11
    4c00:	af 90       	pop	r10
    4c02:	9f 90       	pop	r9
    4c04:	8f 90       	pop	r8
    4c06:	08 95       	ret

00004c08 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    4c08:	82 30       	cpi	r24, 0x02	; 2
    4c0a:	91 05       	cpc	r25, r1
    4c0c:	38 f0       	brcs	.+14     	; 0x4c1c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    4c0e:	88 0f       	add	r24, r24
    4c10:	99 1f       	adc	r25, r25
    4c12:	88 0f       	add	r24, r24
    4c14:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    4c16:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    4c18:	01 97       	sbiw	r24, 0x01	; 1
    4c1a:	f1 f7       	brne	.-4      	; 0x4c18 <delayMicroseconds+0x10>
    4c1c:	08 95       	ret

00004c1e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4c1e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4c20:	84 b5       	in	r24, 0x24	; 36
    4c22:	82 60       	ori	r24, 0x02	; 2
    4c24:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4c26:	84 b5       	in	r24, 0x24	; 36
    4c28:	81 60       	ori	r24, 0x01	; 1
    4c2a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4c2c:	85 b5       	in	r24, 0x25	; 37
    4c2e:	82 60       	ori	r24, 0x02	; 2
    4c30:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4c32:	85 b5       	in	r24, 0x25	; 37
    4c34:	81 60       	ori	r24, 0x01	; 1
    4c36:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4c38:	ee e6       	ldi	r30, 0x6E	; 110
    4c3a:	f0 e0       	ldi	r31, 0x00	; 0
    4c3c:	80 81       	ld	r24, Z
    4c3e:	81 60       	ori	r24, 0x01	; 1
    4c40:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4c42:	e1 e8       	ldi	r30, 0x81	; 129
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4c48:	80 81       	ld	r24, Z
    4c4a:	82 60       	ori	r24, 0x02	; 2
    4c4c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4c4e:	80 81       	ld	r24, Z
    4c50:	81 60       	ori	r24, 0x01	; 1
    4c52:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4c54:	e0 e8       	ldi	r30, 0x80	; 128
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	80 81       	ld	r24, Z
    4c5a:	81 60       	ori	r24, 0x01	; 1
    4c5c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4c5e:	e1 eb       	ldi	r30, 0xB1	; 177
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	80 81       	ld	r24, Z
    4c64:	84 60       	ori	r24, 0x04	; 4
    4c66:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4c68:	e0 eb       	ldi	r30, 0xB0	; 176
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	80 81       	ld	r24, Z
    4c6e:	81 60       	ori	r24, 0x01	; 1
    4c70:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    4c72:	ea e7       	ldi	r30, 0x7A	; 122
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	80 81       	ld	r24, Z
    4c78:	84 60       	ori	r24, 0x04	; 4
    4c7a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4c7c:	80 81       	ld	r24, Z
    4c7e:	82 60       	ori	r24, 0x02	; 2
    4c80:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    4c82:	80 81       	ld	r24, Z
    4c84:	81 60       	ori	r24, 0x01	; 1
    4c86:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4c88:	80 81       	ld	r24, Z
    4c8a:	80 68       	ori	r24, 0x80	; 128
    4c8c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4c8e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    4c92:	08 95       	ret

00004c94 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4c94:	83 30       	cpi	r24, 0x03	; 3
    4c96:	81 f0       	breq	.+32     	; 0x4cb8 <turnOffPWM+0x24>
    4c98:	28 f4       	brcc	.+10     	; 0x4ca4 <turnOffPWM+0x10>
    4c9a:	81 30       	cpi	r24, 0x01	; 1
    4c9c:	99 f0       	breq	.+38     	; 0x4cc4 <turnOffPWM+0x30>
    4c9e:	82 30       	cpi	r24, 0x02	; 2
    4ca0:	a1 f0       	breq	.+40     	; 0x4cca <turnOffPWM+0x36>
    4ca2:	08 95       	ret
    4ca4:	87 30       	cpi	r24, 0x07	; 7
    4ca6:	a9 f0       	breq	.+42     	; 0x4cd2 <turnOffPWM+0x3e>
    4ca8:	88 30       	cpi	r24, 0x08	; 8
    4caa:	b9 f0       	breq	.+46     	; 0x4cda <turnOffPWM+0x46>
    4cac:	84 30       	cpi	r24, 0x04	; 4
    4cae:	d1 f4       	brne	.+52     	; 0x4ce4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4cb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4cb4:	8f 7d       	andi	r24, 0xDF	; 223
    4cb6:	03 c0       	rjmp	.+6      	; 0x4cbe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4cb8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4cbc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4cbe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4cc2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4cc4:	84 b5       	in	r24, 0x24	; 36
    4cc6:	8f 77       	andi	r24, 0x7F	; 127
    4cc8:	02 c0       	rjmp	.+4      	; 0x4cce <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4cca:	84 b5       	in	r24, 0x24	; 36
    4ccc:	8f 7d       	andi	r24, 0xDF	; 223
    4cce:	84 bd       	out	0x24, r24	; 36
    4cd0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4cd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4cd6:	8f 77       	andi	r24, 0x7F	; 127
    4cd8:	03 c0       	rjmp	.+6      	; 0x4ce0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4cda:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4cde:	8f 7d       	andi	r24, 0xDF	; 223
    4ce0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4ce4:	08 95       	ret

00004ce6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4ce6:	cf 93       	push	r28
    4ce8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	fc 01       	movw	r30, r24
    4cee:	eb 54       	subi	r30, 0x4B	; 75
    4cf0:	fc 4f       	sbci	r31, 0xFC	; 252
    4cf2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	e7 53       	subi	r30, 0x37	; 55
    4cf8:	fc 4f       	sbci	r31, 0xFC	; 252
    4cfa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4cfc:	88 23       	and	r24, r24
    4cfe:	61 f1       	breq	.+88     	; 0x4d58 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	88 0f       	add	r24, r24
    4d04:	99 1f       	adc	r25, r25
    4d06:	fc 01       	movw	r30, r24
    4d08:	ef 50       	subi	r30, 0x0F	; 15
    4d0a:	fc 4f       	sbci	r31, 0xFC	; 252
    4d0c:	c5 91       	lpm	r28, Z+
    4d0e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4d10:	fc 01       	movw	r30, r24
    4d12:	e9 51       	subi	r30, 0x19	; 25
    4d14:	fc 4f       	sbci	r31, 0xFC	; 252
    4d16:	a5 91       	lpm	r26, Z+
    4d18:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    4d1a:	61 11       	cpse	r22, r1
    4d1c:	09 c0       	rjmp	.+18     	; 0x4d30 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    4d1e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4d20:	f8 94       	cli
		*reg &= ~bit;
    4d22:	88 81       	ld	r24, Y
    4d24:	20 95       	com	r18
    4d26:	82 23       	and	r24, r18
    4d28:	88 83       	st	Y, r24
		*out &= ~bit;
    4d2a:	ec 91       	ld	r30, X
    4d2c:	2e 23       	and	r18, r30
    4d2e:	0b c0       	rjmp	.+22     	; 0x4d46 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4d30:	62 30       	cpi	r22, 0x02	; 2
    4d32:	61 f4       	brne	.+24     	; 0x4d4c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    4d34:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4d36:	f8 94       	cli
		*reg &= ~bit;
    4d38:	88 81       	ld	r24, Y
    4d3a:	32 2f       	mov	r19, r18
    4d3c:	30 95       	com	r19
    4d3e:	83 23       	and	r24, r19
    4d40:	88 83       	st	Y, r24
		*out |= bit;
    4d42:	ec 91       	ld	r30, X
    4d44:	2e 2b       	or	r18, r30
    4d46:	2c 93       	st	X, r18
		SREG = oldSREG;
    4d48:	9f bf       	out	0x3f, r25	; 63
    4d4a:	06 c0       	rjmp	.+12     	; 0x4d58 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    4d4c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    4d4e:	f8 94       	cli
		*reg |= bit;
    4d50:	e8 81       	ld	r30, Y
    4d52:	2e 2b       	or	r18, r30
    4d54:	28 83       	st	Y, r18
		SREG = oldSREG;
    4d56:	8f bf       	out	0x3f, r24	; 63
	}
}
    4d58:	df 91       	pop	r29
    4d5a:	cf 91       	pop	r28
    4d5c:	08 95       	ret

00004d5e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4d5e:	1f 93       	push	r17
    4d60:	cf 93       	push	r28
    4d62:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4d64:	28 2f       	mov	r18, r24
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	f9 01       	movw	r30, r18
    4d6a:	ef 55       	subi	r30, 0x5F	; 95
    4d6c:	fc 4f       	sbci	r31, 0xFC	; 252
    4d6e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4d70:	f9 01       	movw	r30, r18
    4d72:	eb 54       	subi	r30, 0x4B	; 75
    4d74:	fc 4f       	sbci	r31, 0xFC	; 252
    4d76:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4d78:	f9 01       	movw	r30, r18
    4d7a:	e7 53       	subi	r30, 0x37	; 55
    4d7c:	fc 4f       	sbci	r31, 0xFC	; 252
    4d7e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4d80:	cc 23       	and	r28, r28
    4d82:	c1 f0       	breq	.+48     	; 0x4db4 <digitalWrite+0x56>
    4d84:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4d86:	81 11       	cpse	r24, r1
    4d88:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <turnOffPWM>

	out = portOutputRegister(port);
    4d8c:	ec 2f       	mov	r30, r28
    4d8e:	f0 e0       	ldi	r31, 0x00	; 0
    4d90:	ee 0f       	add	r30, r30
    4d92:	ff 1f       	adc	r31, r31
    4d94:	e9 51       	subi	r30, 0x19	; 25
    4d96:	fc 4f       	sbci	r31, 0xFC	; 252
    4d98:	a5 91       	lpm	r26, Z+
    4d9a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    4d9c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    4d9e:	f8 94       	cli

	if (val == LOW) {
    4da0:	11 11       	cpse	r17, r1
    4da2:	04 c0       	rjmp	.+8      	; 0x4dac <digitalWrite+0x4e>
		*out &= ~bit;
    4da4:	8c 91       	ld	r24, X
    4da6:	d0 95       	com	r29
    4da8:	d8 23       	and	r29, r24
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    4dac:	ec 91       	ld	r30, X
    4dae:	de 2b       	or	r29, r30
    4db0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4db2:	9f bf       	out	0x3f, r25	; 63
}
    4db4:	df 91       	pop	r29
    4db6:	cf 91       	pop	r28
    4db8:	1f 91       	pop	r17
    4dba:	08 95       	ret

00004dbc <digitalRead>:

int digitalRead(uint8_t pin)
{
    4dbc:	cf 93       	push	r28
    4dbe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    4dc0:	28 2f       	mov	r18, r24
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	f9 01       	movw	r30, r18
    4dc6:	ef 55       	subi	r30, 0x5F	; 95
    4dc8:	fc 4f       	sbci	r31, 0xFC	; 252
    4dca:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4dcc:	f9 01       	movw	r30, r18
    4dce:	eb 54       	subi	r30, 0x4B	; 75
    4dd0:	fc 4f       	sbci	r31, 0xFC	; 252
    4dd2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    4dd4:	f9 01       	movw	r30, r18
    4dd6:	e7 53       	subi	r30, 0x37	; 55
    4dd8:	fc 4f       	sbci	r31, 0xFC	; 252
    4dda:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    4ddc:	cc 23       	and	r28, r28
    4dde:	91 f0       	breq	.+36     	; 0x4e04 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4de0:	81 11       	cpse	r24, r1
    4de2:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    4de6:	ec 2f       	mov	r30, r28
    4de8:	f0 e0       	ldi	r31, 0x00	; 0
    4dea:	ee 0f       	add	r30, r30
    4dec:	ff 1f       	adc	r31, r31
    4dee:	e3 52       	subi	r30, 0x23	; 35
    4df0:	fc 4f       	sbci	r31, 0xFC	; 252
    4df2:	a5 91       	lpm	r26, Z+
    4df4:	b4 91       	lpm	r27, Z
    4df6:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    4df8:	ed 23       	and	r30, r29
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	21 f4       	brne	.+8      	; 0x4e08 <digitalRead+0x4c>
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	02 c0       	rjmp	.+4      	; 0x4e08 <digitalRead+0x4c>
    4e04:	80 e0       	ldi	r24, 0x00	; 0
    4e06:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    4e08:	df 91       	pop	r29
    4e0a:	cf 91       	pop	r28
    4e0c:	08 95       	ret

00004e0e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4e0e:	08 95       	ret

00004e10 <__udivmodqi4>:
    4e10:	99 1b       	sub	r25, r25
    4e12:	79 e0       	ldi	r23, 0x09	; 9
    4e14:	04 c0       	rjmp	.+8      	; 0x4e1e <__udivmodqi4_ep>

00004e16 <__udivmodqi4_loop>:
    4e16:	99 1f       	adc	r25, r25
    4e18:	96 17       	cp	r25, r22
    4e1a:	08 f0       	brcs	.+2      	; 0x4e1e <__udivmodqi4_ep>
    4e1c:	96 1b       	sub	r25, r22

00004e1e <__udivmodqi4_ep>:
    4e1e:	88 1f       	adc	r24, r24
    4e20:	7a 95       	dec	r23
    4e22:	c9 f7       	brne	.-14     	; 0x4e16 <__udivmodqi4_loop>
    4e24:	80 95       	com	r24
    4e26:	08 95       	ret

00004e28 <__divmodhi4>:
    4e28:	97 fb       	bst	r25, 7
    4e2a:	07 2e       	mov	r0, r23
    4e2c:	16 f4       	brtc	.+4      	; 0x4e32 <__divmodhi4+0xa>
    4e2e:	00 94       	com	r0
    4e30:	07 d0       	rcall	.+14     	; 0x4e40 <__divmodhi4_neg1>
    4e32:	77 fd       	sbrc	r23, 7
    4e34:	09 d0       	rcall	.+18     	; 0x4e48 <__divmodhi4_neg2>
    4e36:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <__udivmodhi4>
    4e3a:	07 fc       	sbrc	r0, 7
    4e3c:	05 d0       	rcall	.+10     	; 0x4e48 <__divmodhi4_neg2>
    4e3e:	3e f4       	brtc	.+14     	; 0x4e4e <__divmodhi4_exit>

00004e40 <__divmodhi4_neg1>:
    4e40:	90 95       	com	r25
    4e42:	81 95       	neg	r24
    4e44:	9f 4f       	sbci	r25, 0xFF	; 255
    4e46:	08 95       	ret

00004e48 <__divmodhi4_neg2>:
    4e48:	70 95       	com	r23
    4e4a:	61 95       	neg	r22
    4e4c:	7f 4f       	sbci	r23, 0xFF	; 255

00004e4e <__divmodhi4_exit>:
    4e4e:	08 95       	ret

00004e50 <__udivmodsi4>:
    4e50:	a1 e2       	ldi	r26, 0x21	; 33
    4e52:	1a 2e       	mov	r1, r26
    4e54:	aa 1b       	sub	r26, r26
    4e56:	bb 1b       	sub	r27, r27
    4e58:	fd 01       	movw	r30, r26
    4e5a:	0d c0       	rjmp	.+26     	; 0x4e76 <__udivmodsi4_ep>

00004e5c <__udivmodsi4_loop>:
    4e5c:	aa 1f       	adc	r26, r26
    4e5e:	bb 1f       	adc	r27, r27
    4e60:	ee 1f       	adc	r30, r30
    4e62:	ff 1f       	adc	r31, r31
    4e64:	a2 17       	cp	r26, r18
    4e66:	b3 07       	cpc	r27, r19
    4e68:	e4 07       	cpc	r30, r20
    4e6a:	f5 07       	cpc	r31, r21
    4e6c:	20 f0       	brcs	.+8      	; 0x4e76 <__udivmodsi4_ep>
    4e6e:	a2 1b       	sub	r26, r18
    4e70:	b3 0b       	sbc	r27, r19
    4e72:	e4 0b       	sbc	r30, r20
    4e74:	f5 0b       	sbc	r31, r21

00004e76 <__udivmodsi4_ep>:
    4e76:	66 1f       	adc	r22, r22
    4e78:	77 1f       	adc	r23, r23
    4e7a:	88 1f       	adc	r24, r24
    4e7c:	99 1f       	adc	r25, r25
    4e7e:	1a 94       	dec	r1
    4e80:	69 f7       	brne	.-38     	; 0x4e5c <__udivmodsi4_loop>
    4e82:	60 95       	com	r22
    4e84:	70 95       	com	r23
    4e86:	80 95       	com	r24
    4e88:	90 95       	com	r25
    4e8a:	9b 01       	movw	r18, r22
    4e8c:	ac 01       	movw	r20, r24
    4e8e:	bd 01       	movw	r22, r26
    4e90:	cf 01       	movw	r24, r30
    4e92:	08 95       	ret

00004e94 <__divmodsi4>:
    4e94:	05 2e       	mov	r0, r21
    4e96:	97 fb       	bst	r25, 7
    4e98:	1e f4       	brtc	.+6      	; 0x4ea0 <__divmodsi4+0xc>
    4e9a:	00 94       	com	r0
    4e9c:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <__negsi2>
    4ea0:	57 fd       	sbrc	r21, 7
    4ea2:	07 d0       	rcall	.+14     	; 0x4eb2 <__divmodsi4_neg2>
    4ea4:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__udivmodsi4>
    4ea8:	07 fc       	sbrc	r0, 7
    4eaa:	03 d0       	rcall	.+6      	; 0x4eb2 <__divmodsi4_neg2>
    4eac:	4e f4       	brtc	.+18     	; 0x4ec0 <__divmodsi4_exit>
    4eae:	0c 94 61 27 	jmp	0x4ec2	; 0x4ec2 <__negsi2>

00004eb2 <__divmodsi4_neg2>:
    4eb2:	50 95       	com	r21
    4eb4:	40 95       	com	r20
    4eb6:	30 95       	com	r19
    4eb8:	21 95       	neg	r18
    4eba:	3f 4f       	sbci	r19, 0xFF	; 255
    4ebc:	4f 4f       	sbci	r20, 0xFF	; 255
    4ebe:	5f 4f       	sbci	r21, 0xFF	; 255

00004ec0 <__divmodsi4_exit>:
    4ec0:	08 95       	ret

00004ec2 <__negsi2>:
    4ec2:	90 95       	com	r25
    4ec4:	80 95       	com	r24
    4ec6:	70 95       	com	r23
    4ec8:	61 95       	neg	r22
    4eca:	7f 4f       	sbci	r23, 0xFF	; 255
    4ecc:	8f 4f       	sbci	r24, 0xFF	; 255
    4ece:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed0:	08 95       	ret

00004ed2 <__tablejump2__>:
    4ed2:	ee 0f       	add	r30, r30
    4ed4:	ff 1f       	adc	r31, r31
    4ed6:	05 90       	lpm	r0, Z+
    4ed8:	f4 91       	lpm	r31, Z
    4eda:	e0 2d       	mov	r30, r0
    4edc:	09 94       	ijmp

00004ede <__bswapsi2>:
    4ede:	69 27       	eor	r22, r25
    4ee0:	96 27       	eor	r25, r22
    4ee2:	69 27       	eor	r22, r25
    4ee4:	78 27       	eor	r23, r24
    4ee6:	87 27       	eor	r24, r23
    4ee8:	78 27       	eor	r23, r24
    4eea:	08 95       	ret

00004eec <__umulhisi3>:
    4eec:	a2 9f       	mul	r26, r18
    4eee:	b0 01       	movw	r22, r0
    4ef0:	b3 9f       	mul	r27, r19
    4ef2:	c0 01       	movw	r24, r0
    4ef4:	a3 9f       	mul	r26, r19
    4ef6:	70 0d       	add	r23, r0
    4ef8:	81 1d       	adc	r24, r1
    4efa:	11 24       	eor	r1, r1
    4efc:	91 1d       	adc	r25, r1
    4efe:	b2 9f       	mul	r27, r18
    4f00:	70 0d       	add	r23, r0
    4f02:	81 1d       	adc	r24, r1
    4f04:	11 24       	eor	r1, r1
    4f06:	91 1d       	adc	r25, r1
    4f08:	08 95       	ret

00004f0a <__usmulhisi3>:
    4f0a:	0e 94 76 27 	call	0x4eec	; 0x4eec <__umulhisi3>

00004f0e <__usmulhisi3_tail>:
    4f0e:	b7 ff       	sbrs	r27, 7
    4f10:	08 95       	ret
    4f12:	82 1b       	sub	r24, r18
    4f14:	93 0b       	sbc	r25, r19
    4f16:	08 95       	ret

00004f18 <__muluhisi3>:
    4f18:	0e 94 76 27 	call	0x4eec	; 0x4eec <__umulhisi3>
    4f1c:	a5 9f       	mul	r26, r21
    4f1e:	90 0d       	add	r25, r0
    4f20:	b4 9f       	mul	r27, r20
    4f22:	90 0d       	add	r25, r0
    4f24:	a4 9f       	mul	r26, r20
    4f26:	80 0d       	add	r24, r0
    4f28:	91 1d       	adc	r25, r1
    4f2a:	11 24       	eor	r1, r1
    4f2c:	08 95       	ret

00004f2e <__mulshisi3>:
    4f2e:	b7 ff       	sbrs	r27, 7
    4f30:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <__muluhisi3>

00004f34 <__mulohisi3>:
    4f34:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__muluhisi3>
    4f38:	82 1b       	sub	r24, r18
    4f3a:	93 0b       	sbc	r25, r19
    4f3c:	08 95       	ret

00004f3e <__mulsidi3>:
    4f3e:	97 fb       	bst	r25, 7
    4f40:	57 ff       	sbrs	r21, 7
    4f42:	0c 94 af 27 	jmp	0x4f5e	; 0x4f5e <__umulsidi3_helper>
    4f46:	9f 93       	push	r25
    4f48:	8f 93       	push	r24
    4f4a:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__umulsidi3_helper>
    4f4e:	6e 1b       	sub	r22, r30
    4f50:	7f 0b       	sbc	r23, r31
    4f52:	af 91       	pop	r26
    4f54:	bf 91       	pop	r27
    4f56:	8a 0b       	sbc	r24, r26
    4f58:	9b 0b       	sbc	r25, r27
    4f5a:	08 95       	ret

00004f5c <__umulsidi3>:
    4f5c:	e8 94       	clt

00004f5e <__umulsidi3_helper>:
    4f5e:	df 93       	push	r29
    4f60:	cf 93       	push	r28
    4f62:	fc 01       	movw	r30, r24
    4f64:	db 01       	movw	r26, r22
    4f66:	0e 94 76 27 	call	0x4eec	; 0x4eec <__umulhisi3>
    4f6a:	7f 93       	push	r23
    4f6c:	6f 93       	push	r22
    4f6e:	e9 01       	movw	r28, r18
    4f70:	9a 01       	movw	r18, r20
    4f72:	ac 01       	movw	r20, r24
    4f74:	bf 93       	push	r27
    4f76:	af 93       	push	r26
    4f78:	3f 93       	push	r19
    4f7a:	2f 93       	push	r18
    4f7c:	df 01       	movw	r26, r30
    4f7e:	0e 94 76 27 	call	0x4eec	; 0x4eec <__umulhisi3>
    4f82:	26 f4       	brtc	.+8      	; 0x4f8c <__umulsidi3_helper+0x2e>
    4f84:	6c 1b       	sub	r22, r28
    4f86:	7d 0b       	sbc	r23, r29
    4f88:	82 0b       	sbc	r24, r18
    4f8a:	93 0b       	sbc	r25, r19
    4f8c:	9e 01       	movw	r18, r28
    4f8e:	eb 01       	movw	r28, r22
    4f90:	fc 01       	movw	r30, r24
    4f92:	0e 94 07 29 	call	0x520e	; 0x520e <__muldi3_6>
    4f96:	af 91       	pop	r26
    4f98:	bf 91       	pop	r27
    4f9a:	2f 91       	pop	r18
    4f9c:	3f 91       	pop	r19
    4f9e:	0e 94 07 29 	call	0x520e	; 0x520e <__muldi3_6>
    4fa2:	be 01       	movw	r22, r28
    4fa4:	cf 01       	movw	r24, r30
    4fa6:	f9 01       	movw	r30, r18
    4fa8:	2f 91       	pop	r18
    4faa:	3f 91       	pop	r19
    4fac:	cf 91       	pop	r28
    4fae:	df 91       	pop	r29
    4fb0:	08 95       	ret

00004fb2 <__moddi3>:
    4fb2:	68 94       	set
    4fb4:	01 c0       	rjmp	.+2      	; 0x4fb8 <__divdi3_moddi3>

00004fb6 <__divdi3>:
    4fb6:	e8 94       	clt

00004fb8 <__divdi3_moddi3>:
    4fb8:	f9 2f       	mov	r31, r25
    4fba:	f1 2b       	or	r31, r17
    4fbc:	12 f0       	brmi	.+4      	; 0x4fc2 <__divdi3_moddi3+0xa>
    4fbe:	0c 94 0d 28 	jmp	0x501a	; 0x501a <__udivdi3_umoddi3>
    4fc2:	a0 e0       	ldi	r26, 0x00	; 0
    4fc4:	b0 e0       	ldi	r27, 0x00	; 0
    4fc6:	e7 ee       	ldi	r30, 0xE7	; 231
    4fc8:	f7 e2       	ldi	r31, 0x27	; 39
    4fca:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__prologue_saves__+0xc>
    4fce:	09 2e       	mov	r0, r25
    4fd0:	05 94       	asr	r0
    4fd2:	22 f4       	brpl	.+8      	; 0x4fdc <__divdi3_moddi3+0x24>
    4fd4:	0e 94 69 28 	call	0x50d2	; 0x50d2 <__negdi2>
    4fd8:	11 23       	and	r17, r17
    4fda:	92 f4       	brpl	.+36     	; 0x5000 <__divdi3_moddi3+0x48>
    4fdc:	f0 e8       	ldi	r31, 0x80	; 128
    4fde:	0f 26       	eor	r0, r31
    4fe0:	ff ef       	ldi	r31, 0xFF	; 255
    4fe2:	e0 94       	com	r14
    4fe4:	f0 94       	com	r15
    4fe6:	00 95       	com	r16
    4fe8:	10 95       	com	r17
    4fea:	b0 94       	com	r11
    4fec:	c0 94       	com	r12
    4fee:	d0 94       	com	r13
    4ff0:	a1 94       	neg	r10
    4ff2:	bf 0a       	sbc	r11, r31
    4ff4:	cf 0a       	sbc	r12, r31
    4ff6:	df 0a       	sbc	r13, r31
    4ff8:	ef 0a       	sbc	r14, r31
    4ffa:	ff 0a       	sbc	r15, r31
    4ffc:	0f 0b       	sbc	r16, r31
    4ffe:	1f 0b       	sbc	r17, r31
    5000:	0e 94 18 28 	call	0x5030	; 0x5030 <__udivmod64>
    5004:	07 fc       	sbrc	r0, 7
    5006:	0e 94 69 28 	call	0x50d2	; 0x50d2 <__negdi2>
    500a:	cd b7       	in	r28, 0x3d	; 61
    500c:	de b7       	in	r29, 0x3e	; 62
    500e:	ec e0       	ldi	r30, 0x0C	; 12
    5010:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <__epilogue_restores__+0xc>

00005014 <__umoddi3>:
    5014:	68 94       	set
    5016:	01 c0       	rjmp	.+2      	; 0x501a <__udivdi3_umoddi3>

00005018 <__udivdi3>:
    5018:	e8 94       	clt

0000501a <__udivdi3_umoddi3>:
    501a:	8f 92       	push	r8
    501c:	9f 92       	push	r9
    501e:	cf 93       	push	r28
    5020:	df 93       	push	r29
    5022:	0e 94 18 28 	call	0x5030	; 0x5030 <__udivmod64>
    5026:	df 91       	pop	r29
    5028:	cf 91       	pop	r28
    502a:	9f 90       	pop	r9
    502c:	8f 90       	pop	r8
    502e:	08 95       	ret

00005030 <__udivmod64>:
    5030:	88 24       	eor	r8, r8
    5032:	99 24       	eor	r9, r9
    5034:	f4 01       	movw	r30, r8
    5036:	e4 01       	movw	r28, r8
    5038:	b0 e4       	ldi	r27, 0x40	; 64
    503a:	9f 93       	push	r25
    503c:	aa 27       	eor	r26, r26
    503e:	9a 15       	cp	r25, r10
    5040:	8b 04       	cpc	r8, r11
    5042:	9c 04       	cpc	r9, r12
    5044:	ed 05       	cpc	r30, r13
    5046:	fe 05       	cpc	r31, r14
    5048:	cf 05       	cpc	r28, r15
    504a:	d0 07       	cpc	r29, r16
    504c:	a1 07       	cpc	r26, r17
    504e:	98 f4       	brcc	.+38     	; 0x5076 <__udivmod64+0x46>
    5050:	ad 2f       	mov	r26, r29
    5052:	dc 2f       	mov	r29, r28
    5054:	cf 2f       	mov	r28, r31
    5056:	fe 2f       	mov	r31, r30
    5058:	e9 2d       	mov	r30, r9
    505a:	98 2c       	mov	r9, r8
    505c:	89 2e       	mov	r8, r25
    505e:	98 2f       	mov	r25, r24
    5060:	87 2f       	mov	r24, r23
    5062:	76 2f       	mov	r23, r22
    5064:	65 2f       	mov	r22, r21
    5066:	54 2f       	mov	r21, r20
    5068:	43 2f       	mov	r20, r19
    506a:	32 2f       	mov	r19, r18
    506c:	22 27       	eor	r18, r18
    506e:	b8 50       	subi	r27, 0x08	; 8
    5070:	31 f7       	brne	.-52     	; 0x503e <__udivmod64+0xe>
    5072:	bf 91       	pop	r27
    5074:	27 c0       	rjmp	.+78     	; 0x50c4 <__udivmod64+0x94>
    5076:	1b 2e       	mov	r1, r27
    5078:	bf 91       	pop	r27
    507a:	bb 27       	eor	r27, r27
    507c:	22 0f       	add	r18, r18
    507e:	33 1f       	adc	r19, r19
    5080:	44 1f       	adc	r20, r20
    5082:	55 1f       	adc	r21, r21
    5084:	66 1f       	adc	r22, r22
    5086:	77 1f       	adc	r23, r23
    5088:	88 1f       	adc	r24, r24
    508a:	99 1f       	adc	r25, r25
    508c:	88 1c       	adc	r8, r8
    508e:	99 1c       	adc	r9, r9
    5090:	ee 1f       	adc	r30, r30
    5092:	ff 1f       	adc	r31, r31
    5094:	cc 1f       	adc	r28, r28
    5096:	dd 1f       	adc	r29, r29
    5098:	aa 1f       	adc	r26, r26
    509a:	bb 1f       	adc	r27, r27
    509c:	8a 14       	cp	r8, r10
    509e:	9b 04       	cpc	r9, r11
    50a0:	ec 05       	cpc	r30, r12
    50a2:	fd 05       	cpc	r31, r13
    50a4:	ce 05       	cpc	r28, r14
    50a6:	df 05       	cpc	r29, r15
    50a8:	a0 07       	cpc	r26, r16
    50aa:	b1 07       	cpc	r27, r17
    50ac:	48 f0       	brcs	.+18     	; 0x50c0 <__udivmod64+0x90>
    50ae:	8a 18       	sub	r8, r10
    50b0:	9b 08       	sbc	r9, r11
    50b2:	ec 09       	sbc	r30, r12
    50b4:	fd 09       	sbc	r31, r13
    50b6:	ce 09       	sbc	r28, r14
    50b8:	df 09       	sbc	r29, r15
    50ba:	a0 0b       	sbc	r26, r16
    50bc:	b1 0b       	sbc	r27, r17
    50be:	21 60       	ori	r18, 0x01	; 1
    50c0:	1a 94       	dec	r1
    50c2:	e1 f6       	brne	.-72     	; 0x507c <__udivmod64+0x4c>
    50c4:	2e f4       	brtc	.+10     	; 0x50d0 <__udivmod64+0xa0>
    50c6:	94 01       	movw	r18, r8
    50c8:	af 01       	movw	r20, r30
    50ca:	be 01       	movw	r22, r28
    50cc:	cd 01       	movw	r24, r26
    50ce:	00 0c       	add	r0, r0
    50d0:	08 95       	ret

000050d2 <__negdi2>:
    50d2:	60 95       	com	r22
    50d4:	70 95       	com	r23
    50d6:	80 95       	com	r24
    50d8:	90 95       	com	r25
    50da:	30 95       	com	r19
    50dc:	40 95       	com	r20
    50de:	50 95       	com	r21
    50e0:	21 95       	neg	r18
    50e2:	3f 4f       	sbci	r19, 0xFF	; 255
    50e4:	4f 4f       	sbci	r20, 0xFF	; 255
    50e6:	5f 4f       	sbci	r21, 0xFF	; 255
    50e8:	6f 4f       	sbci	r22, 0xFF	; 255
    50ea:	7f 4f       	sbci	r23, 0xFF	; 255
    50ec:	8f 4f       	sbci	r24, 0xFF	; 255
    50ee:	9f 4f       	sbci	r25, 0xFF	; 255
    50f0:	08 95       	ret

000050f2 <__prologue_saves__>:
    50f2:	2f 92       	push	r2
    50f4:	3f 92       	push	r3
    50f6:	4f 92       	push	r4
    50f8:	5f 92       	push	r5
    50fa:	6f 92       	push	r6
    50fc:	7f 92       	push	r7
    50fe:	8f 92       	push	r8
    5100:	9f 92       	push	r9
    5102:	af 92       	push	r10
    5104:	bf 92       	push	r11
    5106:	cf 92       	push	r12
    5108:	df 92       	push	r13
    510a:	ef 92       	push	r14
    510c:	ff 92       	push	r15
    510e:	0f 93       	push	r16
    5110:	1f 93       	push	r17
    5112:	cf 93       	push	r28
    5114:	df 93       	push	r29
    5116:	cd b7       	in	r28, 0x3d	; 61
    5118:	de b7       	in	r29, 0x3e	; 62
    511a:	ca 1b       	sub	r28, r26
    511c:	db 0b       	sbc	r29, r27
    511e:	0f b6       	in	r0, 0x3f	; 63
    5120:	f8 94       	cli
    5122:	de bf       	out	0x3e, r29	; 62
    5124:	0f be       	out	0x3f, r0	; 63
    5126:	cd bf       	out	0x3d, r28	; 61
    5128:	09 94       	ijmp

0000512a <__epilogue_restores__>:
    512a:	2a 88       	ldd	r2, Y+18	; 0x12
    512c:	39 88       	ldd	r3, Y+17	; 0x11
    512e:	48 88       	ldd	r4, Y+16	; 0x10
    5130:	5f 84       	ldd	r5, Y+15	; 0x0f
    5132:	6e 84       	ldd	r6, Y+14	; 0x0e
    5134:	7d 84       	ldd	r7, Y+13	; 0x0d
    5136:	8c 84       	ldd	r8, Y+12	; 0x0c
    5138:	9b 84       	ldd	r9, Y+11	; 0x0b
    513a:	aa 84       	ldd	r10, Y+10	; 0x0a
    513c:	b9 84       	ldd	r11, Y+9	; 0x09
    513e:	c8 84       	ldd	r12, Y+8	; 0x08
    5140:	df 80       	ldd	r13, Y+7	; 0x07
    5142:	ee 80       	ldd	r14, Y+6	; 0x06
    5144:	fd 80       	ldd	r15, Y+5	; 0x05
    5146:	0c 81       	ldd	r16, Y+4	; 0x04
    5148:	1b 81       	ldd	r17, Y+3	; 0x03
    514a:	aa 81       	ldd	r26, Y+2	; 0x02
    514c:	b9 81       	ldd	r27, Y+1	; 0x01
    514e:	ce 0f       	add	r28, r30
    5150:	d1 1d       	adc	r29, r1
    5152:	0f b6       	in	r0, 0x3f	; 63
    5154:	f8 94       	cli
    5156:	de bf       	out	0x3e, r29	; 62
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	cd bf       	out	0x3d, r28	; 61
    515c:	ed 01       	movw	r28, r26
    515e:	08 95       	ret

00005160 <__ashldi3>:
    5160:	0f 93       	push	r16
    5162:	08 30       	cpi	r16, 0x08	; 8
    5164:	90 f0       	brcs	.+36     	; 0x518a <__ashldi3+0x2a>
    5166:	98 2f       	mov	r25, r24
    5168:	87 2f       	mov	r24, r23
    516a:	76 2f       	mov	r23, r22
    516c:	65 2f       	mov	r22, r21
    516e:	54 2f       	mov	r21, r20
    5170:	43 2f       	mov	r20, r19
    5172:	32 2f       	mov	r19, r18
    5174:	22 27       	eor	r18, r18
    5176:	08 50       	subi	r16, 0x08	; 8
    5178:	f4 cf       	rjmp	.-24     	; 0x5162 <__ashldi3+0x2>
    517a:	22 0f       	add	r18, r18
    517c:	33 1f       	adc	r19, r19
    517e:	44 1f       	adc	r20, r20
    5180:	55 1f       	adc	r21, r21
    5182:	66 1f       	adc	r22, r22
    5184:	77 1f       	adc	r23, r23
    5186:	88 1f       	adc	r24, r24
    5188:	99 1f       	adc	r25, r25
    518a:	0a 95       	dec	r16
    518c:	b2 f7       	brpl	.-20     	; 0x517a <__ashldi3+0x1a>
    518e:	0f 91       	pop	r16
    5190:	08 95       	ret

00005192 <__ashrdi3>:
    5192:	97 fb       	bst	r25, 7
    5194:	10 f8       	bld	r1, 0

00005196 <__lshrdi3>:
    5196:	16 94       	lsr	r1
    5198:	00 08       	sbc	r0, r0
    519a:	0f 93       	push	r16
    519c:	08 30       	cpi	r16, 0x08	; 8
    519e:	98 f0       	brcs	.+38     	; 0x51c6 <__lshrdi3+0x30>
    51a0:	08 50       	subi	r16, 0x08	; 8
    51a2:	23 2f       	mov	r18, r19
    51a4:	34 2f       	mov	r19, r20
    51a6:	45 2f       	mov	r20, r21
    51a8:	56 2f       	mov	r21, r22
    51aa:	67 2f       	mov	r22, r23
    51ac:	78 2f       	mov	r23, r24
    51ae:	89 2f       	mov	r24, r25
    51b0:	90 2d       	mov	r25, r0
    51b2:	f4 cf       	rjmp	.-24     	; 0x519c <__lshrdi3+0x6>
    51b4:	05 94       	asr	r0
    51b6:	97 95       	ror	r25
    51b8:	87 95       	ror	r24
    51ba:	77 95       	ror	r23
    51bc:	67 95       	ror	r22
    51be:	57 95       	ror	r21
    51c0:	47 95       	ror	r20
    51c2:	37 95       	ror	r19
    51c4:	27 95       	ror	r18
    51c6:	0a 95       	dec	r16
    51c8:	aa f7       	brpl	.-22     	; 0x51b4 <__lshrdi3+0x1e>
    51ca:	0f 91       	pop	r16
    51cc:	08 95       	ret

000051ce <__cmpdi2_s8>:
    51ce:	00 24       	eor	r0, r0
    51d0:	a7 fd       	sbrc	r26, 7
    51d2:	00 94       	com	r0
    51d4:	2a 17       	cp	r18, r26
    51d6:	30 05       	cpc	r19, r0
    51d8:	40 05       	cpc	r20, r0
    51da:	50 05       	cpc	r21, r0
    51dc:	60 05       	cpc	r22, r0
    51de:	70 05       	cpc	r23, r0
    51e0:	80 05       	cpc	r24, r0
    51e2:	90 05       	cpc	r25, r0
    51e4:	08 95       	ret

000051e6 <__udivmodhi4>:
    51e6:	aa 1b       	sub	r26, r26
    51e8:	bb 1b       	sub	r27, r27
    51ea:	51 e1       	ldi	r21, 0x11	; 17
    51ec:	07 c0       	rjmp	.+14     	; 0x51fc <__udivmodhi4_ep>

000051ee <__udivmodhi4_loop>:
    51ee:	aa 1f       	adc	r26, r26
    51f0:	bb 1f       	adc	r27, r27
    51f2:	a6 17       	cp	r26, r22
    51f4:	b7 07       	cpc	r27, r23
    51f6:	10 f0       	brcs	.+4      	; 0x51fc <__udivmodhi4_ep>
    51f8:	a6 1b       	sub	r26, r22
    51fa:	b7 0b       	sbc	r27, r23

000051fc <__udivmodhi4_ep>:
    51fc:	88 1f       	adc	r24, r24
    51fe:	99 1f       	adc	r25, r25
    5200:	5a 95       	dec	r21
    5202:	a9 f7       	brne	.-22     	; 0x51ee <__udivmodhi4_loop>
    5204:	80 95       	com	r24
    5206:	90 95       	com	r25
    5208:	bc 01       	movw	r22, r24
    520a:	cd 01       	movw	r24, r26
    520c:	08 95       	ret

0000520e <__muldi3_6>:
    520e:	0e 94 76 27 	call	0x4eec	; 0x4eec <__umulhisi3>
    5212:	46 0f       	add	r20, r22
    5214:	57 1f       	adc	r21, r23
    5216:	c8 1f       	adc	r28, r24
    5218:	d9 1f       	adc	r29, r25
    521a:	08 f4       	brcc	.+2      	; 0x521e <__muldi3_6+0x10>
    521c:	31 96       	adiw	r30, 0x01	; 1
    521e:	08 95       	ret

00005220 <memcpy_P>:
    5220:	fb 01       	movw	r30, r22
    5222:	dc 01       	movw	r26, r24
    5224:	02 c0       	rjmp	.+4      	; 0x522a <memcpy_P+0xa>
    5226:	05 90       	lpm	r0, Z+
    5228:	0d 92       	st	X+, r0
    522a:	41 50       	subi	r20, 0x01	; 1
    522c:	50 40       	sbci	r21, 0x00	; 0
    522e:	d8 f7       	brcc	.-10     	; 0x5226 <memcpy_P+0x6>
    5230:	08 95       	ret

00005232 <memcpy>:
    5232:	fb 01       	movw	r30, r22
    5234:	dc 01       	movw	r26, r24
    5236:	02 c0       	rjmp	.+4      	; 0x523c <memcpy+0xa>
    5238:	01 90       	ld	r0, Z+
    523a:	0d 92       	st	X+, r0
    523c:	41 50       	subi	r20, 0x01	; 1
    523e:	50 40       	sbci	r21, 0x00	; 0
    5240:	d8 f7       	brcc	.-10     	; 0x5238 <memcpy+0x6>
    5242:	08 95       	ret

00005244 <_exit>:
    5244:	f8 94       	cli

00005246 <__stop_program>:
    5246:	ff cf       	rjmp	.-2      	; 0x5246 <__stop_program>
