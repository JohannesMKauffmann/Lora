
ttn-abp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  00007724  000077b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007724  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d3  00800276  00800276  0000792e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000792e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000df0  00000000  00000000  0000799c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f3c4  00000000  00000000  0000878c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004dd1  00000000  00000000  00027b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008ab6  00000000  00000000  0002c921  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002c7c  00000000  00000000  000353d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000059b8  00000000  00000000  00038054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000107f2  00000000  00000000  0003da0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f28  00000000  00000000  0004e1fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__ctors_end>
       4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
       8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
       c:	0c 94 2c 25 	jmp	0x4a58	; 0x4a58 <__vector_3>
      10:	0c 94 2c 25 	jmp	0x4a58	; 0x4a58 <__vector_3>
      14:	0c 94 2c 25 	jmp	0x4a58	; 0x4a58 <__vector_3>
      18:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      1c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      20:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      24:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      28:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      2c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      30:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      34:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      38:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      3c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      40:	0c 94 54 31 	jmp	0x62a8	; 0x62a8 <__vector_16>
      44:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      48:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <__vector_18>
      4c:	0c 94 64 2f 	jmp	0x5ec8	; 0x5ec8 <__vector_19>
      50:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      54:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      58:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      5c:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      60:	0c 94 99 29 	jmp	0x5332	; 0x5332 <__vector_24>
      64:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__bad_interrupt>
      68:	8e 04       	cpc	r8, r14
      6a:	91 04       	cpc	r9, r1
      6c:	94 04       	cpc	r9, r4
      6e:	97 04       	cpc	r9, r7
      70:	9a 04       	cpc	r9, r10
      72:	9d 04       	cpc	r9, r13
      74:	a0 04       	cpc	r10, r0
      76:	a3 04       	cpc	r10, r3
      78:	a6 04       	cpc	r10, r6
      7a:	a9 04       	cpc	r10, r9
      7c:	e0 04       	cpc	r14, r0
      7e:	e3 04       	cpc	r14, r3
      80:	e6 04       	cpc	r14, r6
      82:	e9 04       	cpc	r14, r9
      84:	ec 04       	cpc	r14, r12
      86:	86 11       	cpse	r24, r6
      88:	8a 11       	cpse	r24, r10
      8a:	32 12       	cpse	r3, r18
      8c:	08 12       	cpse	r0, r24
      8e:	01 12       	cpse	r0, r17
      90:	56 12       	cpse	r5, r22
      92:	30 13       	cpse	r19, r16
      94:	30 13       	cpse	r19, r16
      96:	30 13       	cpse	r19, r16
      98:	30 13       	cpse	r19, r16
      9a:	30 13       	cpse	r19, r16
      9c:	30 13       	cpse	r19, r16
      9e:	30 13       	cpse	r19, r16
      a0:	30 13       	cpse	r19, r16
      a2:	30 13       	cpse	r19, r16
      a4:	98 12       	cpse	r9, r24
      a6:	b6 12       	cpse	r11, r22

000000a8 <__trampolines_end>:
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	7a 10       	cpse	r7, r10
      ac:	f3 5a       	subi	r31, 0xA3	; 163
      ae:	00 a0       	ldd	r0, Z+32	; 0x20
      b0:	72 4e       	sbci	r23, 0xE2	; 226
      b2:	18 09       	sbc	r17, r8
      b4:	00 10       	cpse	r0, r0
      b6:	a5 d4       	rcall	.+2378   	; 0xa02 <setup+0x16>
      b8:	e8 00       	.word	0x00e8	; ????
      ba:	00 e8       	ldi	r16, 0x80	; 128
      bc:	76 48       	sbci	r23, 0x86	; 134
      be:	17 00       	.word	0x0017	; ????
      c0:	00 e4       	ldi	r16, 0x40	; 64
      c2:	0b 54       	subi	r16, 0x4B	; 75
      c4:	02 00       	.word	0x0002	; ????
      c6:	00 ca       	rjmp	.-3072   	; 0xfffff4c8 <__eeprom_end+0xff7ef4c8>
      c8:	9a 3b       	cpi	r25, 0xBA	; 186
      ca:	00 00       	nop
      cc:	00 e1       	ldi	r16, 0x10	; 16
      ce:	f5 05       	cpc	r31, r5
      d0:	00 00       	nop
      d2:	80 96       	adiw	r24, 0x20	; 32
      d4:	98 00       	.word	0x0098	; ????
      d6:	00 00       	nop
      d8:	40 42       	sbci	r20, 0x20	; 32
      da:	0f 00       	.word	0x000f	; ????
      dc:	00 00       	nop
      de:	a0 86       	std	Z+8, r10	; 0x08
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	10 27       	eor	r17, r16
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	e8 03       	fmulsu	r22, r16
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	64 00       	.word	0x0064	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	0a 00       	.word	0x000a	; ????
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	01 00       	.word	0x0001	; ????
      fe:	00 00       	nop
     100:	00 00       	nop
     102:	2c 76       	andi	r18, 0x6C	; 108
     104:	d8 88       	ldd	r13, Y+16	; 0x10
     106:	dc 67       	ori	r29, 0x7C	; 124
     108:	4f 08       	sbc	r4, r15
     10a:	23 df       	rcall	.-442    	; 0xffffff52 <__eeprom_end+0xff7eff52>
     10c:	c1 df       	rcall	.-126    	; 0x90 <__SREG__+0x51>
     10e:	ae 59       	subi	r26, 0x9E	; 158
     110:	e1 b1       	in	r30, 0x01	; 1
     112:	b7 96       	adiw	r30, 0x27	; 39
     114:	e5 e3       	ldi	r30, 0x35	; 53
     116:	e4 53       	subi	r30, 0x34	; 52
     118:	c6 3a       	cpi	r28, 0xA6	; 166
     11a:	e6 51       	subi	r30, 0x16	; 22
     11c:	99 76       	andi	r25, 0x69	; 105
     11e:	96 e8       	ldi	r25, 0x86	; 134
     120:	e6 c2       	rjmp	.+1484   	; 0x6ee <_Z16updateSensorDatav+0x196>
     122:	84 26       	eor	r8, r20
     124:	eb 89       	ldd	r30, Y+19	; 0x13
     126:	8c 9b       	sbis	0x11, 4	; 17
     128:	62 ed       	ldi	r22, 0xD2	; 210
     12a:	40 7c       	andi	r20, 0xC0	; 192
     12c:	6f fc       	.word	0xfc6f	; ????
     12e:	ef bc       	out	0x2f, r14	; 47
     130:	9c 9f       	mul	r25, r28
     132:	40 f2       	brcs	.-112    	; 0xc4 <__trampolines_end+0x1c>
     134:	ba a5       	ldd	r27, Y+42	; 0x2a
     136:	6f a5       	ldd	r22, Y+47	; 0x2f
     138:	f4 90       	lpm	r15, Z
     13a:	05 5a       	subi	r16, 0xA5	; 165
     13c:	2a f7       	brpl	.-54     	; 0x108 <__trampolines_end+0x60>
     13e:	5c 93       	st	X, r21
     140:	6b 6c       	ori	r22, 0xCB	; 203
     142:	f9 67       	ori	r31, 0x79	; 121
     144:	6d c1       	rjmp	.+730    	; 0x420 <constant_table_iniChannelFreq+0x7>
     146:	1b fc       	.word	0xfc1b	; ????
     148:	e0 e4       	ldi	r30, 0x40	; 64
     14a:	0d 47       	sbci	r16, 0x7D	; 125
     14c:	fe f5       	brtc	.+126    	; 0x1cc <_ZZ7onEventE3__c_15+0x5>
     14e:	20 e6       	ldi	r18, 0x60	; 96
     150:	b5 00       	.word	0x00b5	; ????
     152:	d0 ed       	ldi	r29, 0xD0	; 208
     154:	90 2e       	mov	r9, r16
     156:	03 00       	.word	0x0003	; ????
     158:	94 35       	cpi	r25, 0x54	; 84
     15a:	77 05       	cpc	r23, r7
     15c:	00 80       	ld	r0, Z
     15e:	84 1e       	adc	r8, r20
     160:	08 00       	.word	0x0008	; ????
     162:	00 20       	and	r0, r0
     164:	4e 0a       	sbc	r4, r30
     166:	00 00       	nop
     168:	00 c8       	rjmp	.-4096   	; 0xfffff16a <__eeprom_end+0xff7ef16a>
     16a:	0c 33       	cpi	r16, 0x3C	; 60
     16c:	33 33       	cpi	r19, 0x33	; 51
     16e:	33 0f       	add	r19, r19
     170:	98 6e       	ori	r25, 0xE8	; 232
     172:	12 83       	std	Z+2, r17	; 0x02
     174:	11 41       	sbci	r17, 0x11	; 17
     176:	ef 8d       	ldd	r30, Y+31	; 0x1f
     178:	21 14       	cp	r2, r1
     17a:	89 3b       	cpi	r24, 0xB9	; 185
     17c:	e6 55       	subi	r30, 0x56	; 86
     17e:	16 cf       	rjmp	.-468    	; 0xffffffac <__eeprom_end+0xff7effac>
     180:	fe e6       	ldi	r31, 0x6E	; 110
     182:	db 18       	sub	r13, r11
     184:	d1 84       	ldd	r13, Z+9	; 0x09
     186:	4b 38       	cpi	r20, 0x8B	; 139
     188:	1b f7       	brvc	.-58     	; 0x150 <__trampolines_end+0xa8>
     18a:	7c 1d       	adc	r23, r12
     18c:	90 1d       	adc	r25, r0
     18e:	a4 bb       	out	0x14, r26	; 20
     190:	e4 24       	eor	r14, r4
     192:	20 32       	cpi	r18, 0x20	; 32
     194:	84 72       	andi	r24, 0x24	; 36
     196:	5e 22       	and	r5, r30
     198:	81 00       	.word	0x0081	; ????
     19a:	c9 f1       	breq	.+114    	; 0x20e <_ZZ7onEventE3__c_10+0x3>
     19c:	24 ec       	ldi	r18, 0xC4	; 196
     19e:	a1 e5       	ldi	r26, 0x51	; 81
     1a0:	3d 27       	eor	r19, r29

000001a2 <_ZZ5setupE3__c>:
     1a2:	53 74 61 72 74 69 6e 67 00                          Starting.

000001ab <_ZZ7onEventE3__c_17>:
     1ab:	55 6e 6b 6e 6f 77 6e 20 65 76 65 6e 74 00           Unknown event.

000001b9 <_ZZ7onEventE3__c_16>:
     1b9:	45 56 5f 4c 49 4e 4b 5f 41 4c 49 56 45 00           EV_LINK_ALIVE.

000001c7 <_ZZ7onEventE3__c_15>:
     1c7:	45 56 5f 4c 49 4e 4b 5f 44 45 41 44 00              EV_LINK_DEAD.

000001d4 <_ZZ7onEventE3__c_14>:
     1d4:	45 56 5f 52 58 43 4f 4d 50 4c 45 54 45 00           EV_RXCOMPLETE.

000001e2 <_ZZ7onEventE3__c_13>:
     1e2:	45 56 5f 52 45 53 45 54 00                          EV_RESET.

000001eb <_ZZ7onEventE3__c_12>:
     1eb:	45 56 5f 4c 4f 53 54 5f 54 53 59 4e 43 00           EV_LOST_TSYNC.

000001f9 <_ZZ7onEventE3__c_11>:
     1f9:	20 62 79 74 65 73 20 6f 66 20 70 61 79 6c 6f 61      bytes of payloa
     209:	64 00                                               d.

0000020b <_ZZ7onEventE3__c_10>:
     20b:	52 65 63 65 69 76 65 64 20 00                       Received .

00000215 <_ZZ7onEventE3__c_9>:
     215:	52 65 63 65 69 76 65 64 20 61 63 6b 00              Received ack.

00000222 <_ZZ7onEventE3__c_8>:
     222:	45 56 5f 54 58 43 4f 4d 50 4c 45 54 45 20 28 69     EV_TXCOMPLETE (i
     232:	6e 63 6c 75 64 65 73 20 77 61 69 74 69 6e 67 20     ncludes waiting 
     242:	66 6f 72 20 52 58 20 77 69 6e 64 6f 77 73 29 00     for RX windows).

00000252 <_ZZ7onEventE3__c_7>:
     252:	45 56 5f 52 45 4a 4f 49 4e 5f 46 41 49 4c 45 44     EV_REJOIN_FAILED
	...

00000263 <_ZZ7onEventE3__c_6>:
     263:	45 56 5f 4a 4f 49 4e 5f 46 41 49 4c 45 44 00        EV_JOIN_FAILED.

00000272 <_ZZ7onEventE3__c_5>:
     272:	45 56 5f 52 46 55 31 00                             EV_RFU1.

0000027a <_ZZ7onEventE3__c_4>:
     27a:	45 56 5f 4a 4f 49 4e 45 44 00                       EV_JOINED.

00000284 <_ZZ7onEventE3__c_3>:
     284:	45 56 5f 4a 4f 49 4e 49 4e 47 00                    EV_JOINING.

0000028f <_ZZ7onEventE3__c_2>:
     28f:	45 56 5f 42 45 41 43 4f 4e 5f 54 52 41 43 4b 45     EV_BEACON_TRACKE
     29f:	44 00                                               D.

000002a1 <_ZZ7onEventE3__c_1>:
     2a1:	45 56 5f 42 45 41 43 4f 4e 5f 4d 49 53 53 45 44     EV_BEACON_MISSED
	...

000002b2 <_ZZ7onEventE3__c_0>:
     2b2:	45 56 5f 42 45 41 43 4f 4e 5f 46 4f 55 4e 44 00     EV_BEACON_FOUND.

000002c2 <_ZZ7onEventE3__c>:
     2c2:	45 56 5f 53 43 41 4e 5f 54 49 4d 45 4f 55 54 00     EV_SCAN_TIMEOUT.

000002d2 <_ZZ7do_sendP7osjob_tE3__c_0>:
     2d2:	50 61 63 6b 65 74 20 71 75 65 75 65 64 00           Packet queued.

000002e0 <_ZZ7do_sendP7osjob_tE3__c>:
     2e0:	4f 50 5f 54 58 52 58 50 45 4e 44 2c 20 6e 6f 74     OP_TXRXPEND, not
     2f0:	20 73 65 6e 64 69 6e 67 00                           sending.

000002f9 <_ZL7APPSKEY>:
     2f9:	bc 69 c6 0b f7 48 a1 4c 29 76 1c d8 f5 e4 3d 41     .i...H.L)v....=A

00000309 <_ZL7NWKSKEY>:
     309:	20 8c ef 9a 3c bb b4 9b 08 45 4c 5e af 8c 55 ea      ...<....EL^..U.

00000319 <_ZL22constant_table_S_Table>:
     319:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     329:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     339:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     349:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     359:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     369:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     379:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     389:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     399:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     3a9:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     3b9:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     3c9:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     3d9:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     3e9:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     3f9:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     409:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000419 <constant_table_iniChannelFreq>:
     419:	a0 27 be 33 e0 34 c1 33 20 42 c4 33 a1 27 be 33     .'.3.4.3 B.3.'.3
     429:	e1 34 c1 33 21 42 c4 33                             .4.3!B.3

00000431 <constant_table_DR2HSYM_osticks>:
     431:	00 04 00 00 00 02 00 00 00 01 00 00 80 00 00 00     ................
     441:	40 00 00 00 20 00 00 00 10 00 00 00 05 00 00 00     @... ...........

00000451 <constant_table_DRADJUST>:
     451:	00 00 00 01 00 01 00 01 00 00                       ..........

0000045b <constant_table_SENSITIVITY>:
     45b:	20 20 20 0e 11 14 0c 0f 12 09 0c 0f 06 09 0c 03        .............
     46b:	06 09 00 03 06                                      .....

00000470 <constant_table_TXPOWLEVELS>:
     470:	14 0e 0b 08 05 02 00 00 00 00 00 00 00 00 00 00     ................

00000480 <constant_table__DR2RPS_CRC>:
     480:	ff 06 05 04 03 02 01 09 00 ff                       ..........

0000048a <constant_table_LORA_RXDONE_FIXUP>:
     48a:	00 00 00 00 67 00 cc 00 b8 01 54 03 9d 07           ....g.....T...

00000498 <constant_table_rxlorairqmask>:
     498:	c0 40 00                                            .@.

0000049b <digital_pin_to_timer_PGM>:
     49b:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     4ab:	00 00 00 00                                         ....

000004af <digital_pin_to_bit_mask_PGM>:
     4af:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     4bf:	04 08 10 20                                         ... 

000004c3 <digital_pin_to_port_PGM>:
     4c3:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     4d3:	03 03 03 03                                         ....

000004d7 <port_to_input_PGM>:
     4d7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000004e1 <port_to_output_PGM>:
     4e1:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000004eb <port_to_mode_PGM>:
     4eb:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000004f6 <__ctors_start>:
     4f6:	77 05       	cpc	r23, r7
     4f8:	0b 09       	sbc	r16, r11
     4fa:	2d 2c       	mov	r2, r13
     4fc:	94 2f       	mov	r25, r20

000004fe <__ctors_end>:
     4fe:	11 24       	eor	r1, r1
     500:	1f be       	out	0x3f, r1	; 63
     502:	cf ef       	ldi	r28, 0xFF	; 255
     504:	d8 e0       	ldi	r29, 0x08	; 8
     506:	de bf       	out	0x3e, r29	; 62
     508:	cd bf       	out	0x3d, r28	; 61

0000050a <__do_copy_data>:
     50a:	12 e0       	ldi	r17, 0x02	; 2
     50c:	a0 e0       	ldi	r26, 0x00	; 0
     50e:	b1 e0       	ldi	r27, 0x01	; 1
     510:	e4 e2       	ldi	r30, 0x24	; 36
     512:	f7 e7       	ldi	r31, 0x77	; 119
     514:	02 c0       	rjmp	.+4      	; 0x51a <__do_copy_data+0x10>
     516:	05 90       	lpm	r0, Z+
     518:	0d 92       	st	X+, r0
     51a:	a6 37       	cpi	r26, 0x76	; 118
     51c:	b1 07       	cpc	r27, r17
     51e:	d9 f7       	brne	.-10     	; 0x516 <__do_copy_data+0xc>

00000520 <__do_clear_bss>:
     520:	26 e0       	ldi	r18, 0x06	; 6
     522:	a6 e7       	ldi	r26, 0x76	; 118
     524:	b2 e0       	ldi	r27, 0x02	; 2
     526:	01 c0       	rjmp	.+2      	; 0x52a <.do_clear_bss_start>

00000528 <.do_clear_bss_loop>:
     528:	1d 92       	st	X+, r1

0000052a <.do_clear_bss_start>:
     52a:	a9 34       	cpi	r26, 0x49	; 73
     52c:	b2 07       	cpc	r27, r18
     52e:	e1 f7       	brne	.-8      	; 0x528 <.do_clear_bss_loop>

00000530 <__do_global_ctors>:
     530:	12 e0       	ldi	r17, 0x02	; 2
     532:	cf e7       	ldi	r28, 0x7F	; 127
     534:	d2 e0       	ldi	r29, 0x02	; 2
     536:	04 c0       	rjmp	.+8      	; 0x540 <__do_global_ctors+0x10>
     538:	21 97       	sbiw	r28, 0x01	; 1
     53a:	fe 01       	movw	r30, r28
     53c:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <__tablejump2__>
     540:	cb 37       	cpi	r28, 0x7B	; 123
     542:	d1 07       	cpc	r29, r17
     544:	c9 f7       	brne	.-14     	; 0x538 <__do_global_ctors+0x8>
     546:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <main>
     54a:	0c 94 90 3b 	jmp	0x7720	; 0x7720 <_exit>

0000054e <__bad_interrupt>:
     54e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000552 <os_getArtEui>:
     552:	08 95       	ret

00000554 <os_getDevEui>:
     554:	08 95       	ret

00000556 <os_getDevKey>:
// These callbacks are only used in over-the-air activation, so they are
// left empty here (we cannot leave them out completely unless
// DISABLE_JOIN is set in config.h, otherwise the linker will complain).
void os_getArtEui (u1_t* buf) { }
void os_getDevEui (u1_t* buf) { }
void os_getDevKey (u1_t* buf) { }
     556:	08 95       	ret

00000558 <_Z16updateSensorDatav>:
    .rxtx = LMIC_UNUSED_PIN,
    .rst = 9,
    .dio = {2, 6, 7},
};

void updateSensorData() {
     558:	5f 92       	push	r5
     55a:	6f 92       	push	r6
     55c:	7f 92       	push	r7
     55e:	8f 92       	push	r8
     560:	9f 92       	push	r9
     562:	af 92       	push	r10
     564:	bf 92       	push	r11
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	a4 97       	sbiw	r28, 0x24	; 36
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
	// read DHT11 sensor data
	DHT.read11(DHT11_PIN);
     586:	63 e0       	ldi	r22, 0x03	; 3
     588:	8d e9       	ldi	r24, 0x9D	; 157
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <_ZN3dht6read11Eh>
	float hum = DHT.humidity;
     590:	c0 90 9d 02 	lds	r12, 0x029D	; 0x80029d <DHT>
     594:	d0 90 9e 02 	lds	r13, 0x029E	; 0x80029e <DHT+0x1>
     598:	e0 90 9f 02 	lds	r14, 0x029F	; 0x80029f <DHT+0x2>
     59c:	f0 90 a0 02 	lds	r15, 0x02A0	; 0x8002a0 <DHT+0x3>
	float temp = DHT.temperature;
     5a0:	80 90 a1 02 	lds	r8, 0x02A1	; 0x8002a1 <DHT+0x4>
     5a4:	90 90 a2 02 	lds	r9, 0x02A2	; 0x8002a2 <DHT+0x5>
     5a8:	a0 90 a3 02 	lds	r10, 0x02A3	; 0x8002a3 <DHT+0x6>
     5ac:	b0 90 a4 02 	lds	r11, 0x02A4	; 0x8002a4 <DHT+0x7>
	uint8_t hum_t = (uint8_t) hum;						// whole part of the float
     5b0:	c7 01       	movw	r24, r14
     5b2:	b6 01       	movw	r22, r12
     5b4:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__fixunssfsi>
     5b8:	76 2e       	mov	r7, r22
	uint8_t temp_t = (uint8_t) temp;
     5ba:	c5 01       	movw	r24, r10
     5bc:	b4 01       	movw	r22, r8
     5be:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__fixunssfsi>
     5c2:	06 2f       	mov	r16, r22
	String hum_frac = String(hum - hum_t, 1);			// extract the fractional part using substring
     5c4:	67 2d       	mov	r22, r7
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__floatsisf>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	0e 94 31 2c 	call	0x5862	; 0x5862 <__subsf3>
     5dc:	ab 01       	movw	r20, r22
     5de:	bc 01       	movw	r22, r24
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	ce 01       	movw	r24, r28
     5e4:	4f 96       	adiw	r24, 0x1f	; 31
     5e6:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <_ZN6StringC1Efh>
	String temp_frac = String(temp - temp_t, 1);
     5ea:	60 2f       	mov	r22, r16
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <__floatsisf>
     5f6:	9b 01       	movw	r18, r22
     5f8:	ac 01       	movw	r20, r24
     5fa:	c5 01       	movw	r24, r10
     5fc:	b4 01       	movw	r22, r8
     5fe:	0e 94 31 2c 	call	0x5862	; 0x5862 <__subsf3>
     602:	ab 01       	movw	r20, r22
     604:	bc 01       	movw	r22, r24
     606:	21 e0       	ldi	r18, 0x01	; 1
     608:	ce 01       	movw	r24, r28
     60a:	49 96       	adiw	r24, 0x19	; 25
     60c:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <_ZN6StringC1Efh>
	int indexOf( const String &str, unsigned int fromIndex ) const;
	int lastIndexOf( char ch ) const;
	int lastIndexOf( char ch, unsigned int fromIndex ) const;
	int lastIndexOf( const String &str ) const;
	int lastIndexOf( const String &str, unsigned int fromIndex ) const;
	String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
     610:	2b a1       	ldd	r18, Y+35	; 0x23
     612:	3c a1       	ldd	r19, Y+36	; 0x24
     614:	42 e0       	ldi	r20, 0x02	; 2
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	be 01       	movw	r22, r28
     61a:	61 5e       	subi	r22, 0xE1	; 225
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	ce 01       	movw	r24, r28
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_ZNK6String9substringEjj>
	uint8_t hum_f = hum_frac.substring(2).toInt();
     626:	ce 01       	movw	r24, r28
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZNK6String5toIntEv>
     62e:	66 2e       	mov	r6, r22
     630:	ce 01       	movw	r24, r28
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     638:	2d 8d       	ldd	r18, Y+29	; 0x1d
     63a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     63c:	42 e0       	ldi	r20, 0x02	; 2
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	be 01       	movw	r22, r28
     642:	67 5e       	subi	r22, 0xE7	; 231
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 74 34 	call	0x68e8	; 0x68e8 <_ZNK6String9substringEjj>
	uint8_t temp_f = temp_frac.substring(2).toInt();
     64e:	ce 01       	movw	r24, r28
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	0e 94 b9 34 	call	0x6972	; 0x6972 <_ZNK6String5toIntEv>
     656:	56 2e       	mov	r5, r22
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
	uint8_t com_f = ((uint8_t) (hum_f << 4)) | ((uint8_t) temp_f);	// combine both fraction parts in one byte
     660:	16 2d       	mov	r17, r6
     662:	12 95       	swap	r17
     664:	10 7f       	andi	r17, 0xF0	; 240
     666:	15 29       	or	r17, r5
	Serial.println(String("whole: ") + String(hum_t) + String(temp_t));
     668:	4a e0       	ldi	r20, 0x0A	; 10
     66a:	60 2f       	mov	r22, r16
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	0e 94 bd 33 	call	0x677a	; 0x677a <_ZN6StringC1Ehh>
     674:	4a e0       	ldi	r20, 0x0A	; 10
     676:	67 2d       	mov	r22, r7
     678:	ce 01       	movw	r24, r28
     67a:	0d 96       	adiw	r24, 0x0d	; 13
     67c:	0e 94 bd 33 	call	0x677a	; 0x677a <_ZN6StringC1Ehh>
     680:	6a e0       	ldi	r22, 0x0A	; 10
     682:	71 e0       	ldi	r23, 0x01	; 1
     684:	ce 01       	movw	r24, r28
     686:	43 96       	adiw	r24, 0x13	; 19
     688:	0e 94 71 33 	call	0x66e2	; 0x66e2 <_ZN6StringC1EPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     68c:	be 01       	movw	r22, r28
     68e:	6d 5e       	subi	r22, 0xED	; 237
     690:	7f 4f       	sbci	r23, 0xFF	; 255
     692:	ce 01       	movw	r24, r28
     694:	07 96       	adiw	r24, 0x07	; 7
     696:	0e 94 9d 33 	call	0x673a	; 0x673a <_ZN6StringC1ERKS_>
     69a:	be 01       	movw	r22, r28
     69c:	63 5f       	subi	r22, 0xF3	; 243
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	ce 01       	movw	r24, r28
     6a2:	07 96       	adiw	r24, 0x07	; 7
     6a4:	0e 94 48 34 	call	0x6890	; 0x6890 <_ZplRK15StringSumHelperRK6String>
     6a8:	be 01       	movw	r22, r28
     6aa:	6f 5f       	subi	r22, 0xFF	; 255
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	0e 94 48 34 	call	0x6890	; 0x6890 <_ZplRK15StringSumHelperRK6String>
     6b2:	bc 01       	movw	r22, r24
     6b4:	82 ee       	ldi	r24, 0xE2	; 226
     6b6:	93 e0       	ldi	r25, 0x03	; 3
     6b8:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     6bc:	ce 01       	movw	r24, r28
     6be:	07 96       	adiw	r24, 0x07	; 7
     6c0:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     6c4:	ce 01       	movw	r24, r28
     6c6:	43 96       	adiw	r24, 0x13	; 19
     6c8:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     6cc:	ce 01       	movw	r24, r28
     6ce:	0d 96       	adiw	r24, 0x0d	; 13
     6d0:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
	Serial.println("fractional: " + String(hum_f) + ", " +  String(temp_f));
     6dc:	4a e0       	ldi	r20, 0x0A	; 10
     6de:	65 2d       	mov	r22, r5
     6e0:	ce 01       	movw	r24, r28
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	0e 94 bd 33 	call	0x677a	; 0x677a <_ZN6StringC1Ehh>
     6e8:	4a e0       	ldi	r20, 0x0A	; 10
     6ea:	66 2d       	mov	r22, r6
     6ec:	ce 01       	movw	r24, r28
     6ee:	0d 96       	adiw	r24, 0x0d	; 13
     6f0:	0e 94 bd 33 	call	0x677a	; 0x677a <_ZN6StringC1Ehh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     6f4:	62 e1       	ldi	r22, 0x12	; 18
     6f6:	71 e0       	ldi	r23, 0x01	; 1
     6f8:	ce 01       	movw	r24, r28
     6fa:	07 96       	adiw	r24, 0x07	; 7
     6fc:	0e 94 71 33 	call	0x66e2	; 0x66e2 <_ZN6StringC1EPKc>
     700:	be 01       	movw	r22, r28
     702:	63 5f       	subi	r22, 0xF3	; 243
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	ce 01       	movw	r24, r28
     708:	07 96       	adiw	r24, 0x07	; 7
     70a:	0e 94 48 34 	call	0x6890	; 0x6890 <_ZplRK15StringSumHelperRK6String>
     70e:	6f e1       	ldi	r22, 0x1F	; 31
     710:	71 e0       	ldi	r23, 0x01	; 1
     712:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <_ZplRK15StringSumHelperPKc>
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	0e 94 48 34 	call	0x6890	; 0x6890 <_ZplRK15StringSumHelperRK6String>
     720:	bc 01       	movw	r22, r24
     722:	82 ee       	ldi	r24, 0xE2	; 226
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     72a:	ce 01       	movw	r24, r28
     72c:	07 96       	adiw	r24, 0x07	; 7
     72e:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     732:	ce 01       	movw	r24, r28
     734:	0d 96       	adiw	r24, 0x0d	; 13
     736:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     73a:	ce 01       	movw	r24, r28
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
	Serial.println("combinedFractional: " + String((uint8_t) bytesToSend[2]));
     742:	4a e0       	ldi	r20, 0x0A	; 10
     744:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <_ZL11bytesToSend+0x2>
     748:	ce 01       	movw	r24, r28
     74a:	07 96       	adiw	r24, 0x07	; 7
     74c:	0e 94 bd 33 	call	0x677a	; 0x677a <_ZN6StringC1Ehh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     750:	62 e2       	ldi	r22, 0x22	; 34
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	0e 94 71 33 	call	0x66e2	; 0x66e2 <_ZN6StringC1EPKc>
     75c:	be 01       	movw	r22, r28
     75e:	69 5f       	subi	r22, 0xF9	; 249
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	0e 94 48 34 	call	0x6890	; 0x6890 <_ZplRK15StringSumHelperRK6String>
     76a:	bc 01       	movw	r22, r24
     76c:	82 ee       	ldi	r24, 0xE2	; 226
     76e:	93 e0       	ldi	r25, 0x03	; 3
     770:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     77c:	ce 01       	movw	r24, r28
     77e:	07 96       	adiw	r24, 0x07	; 7
     780:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
	Serial.println("actual: " + String(hum, 1) + String(temp, 1));
     784:	21 e0       	ldi	r18, 0x01	; 1
     786:	b5 01       	movw	r22, r10
     788:	a4 01       	movw	r20, r8
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <_ZN6StringC1Efh>
     792:	21 e0       	ldi	r18, 0x01	; 1
     794:	b7 01       	movw	r22, r14
     796:	a6 01       	movw	r20, r12
     798:	ce 01       	movw	r24, r28
     79a:	0d 96       	adiw	r24, 0x0d	; 13
     79c:	0e 94 ea 33 	call	0x67d4	; 0x67d4 <_ZN6StringC1Efh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     7a0:	67 e3       	ldi	r22, 0x37	; 55
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	ce 01       	movw	r24, r28
     7a6:	07 96       	adiw	r24, 0x07	; 7
     7a8:	0e 94 71 33 	call	0x66e2	; 0x66e2 <_ZN6StringC1EPKc>
     7ac:	be 01       	movw	r22, r28
     7ae:	63 5f       	subi	r22, 0xF3	; 243
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	ce 01       	movw	r24, r28
     7b4:	07 96       	adiw	r24, 0x07	; 7
     7b6:	0e 94 48 34 	call	0x6890	; 0x6890 <_ZplRK15StringSumHelperRK6String>
     7ba:	be 01       	movw	r22, r28
     7bc:	6f 5f       	subi	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	0e 94 48 34 	call	0x6890	; 0x6890 <_ZplRK15StringSumHelperRK6String>
     7c4:	bc 01       	movw	r22, r24
     7c6:	82 ee       	ldi	r24, 0xE2	; 226
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN5Print7printlnERK6String>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     7ce:	ce 01       	movw	r24, r28
     7d0:	07 96       	adiw	r24, 0x07	; 7
     7d2:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     7d6:	ce 01       	movw	r24, r28
     7d8:	0d 96       	adiw	r24, 0x0d	; 13
     7da:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
     7de:	ce 01       	movw	r24, r28
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
	//	Serial.println(String((uint8_t) bytesToSend[0]) + "," + String((uint8_t) bytesToSend[1]) + "," + String((uint8_t) bytesToSend[2]));
	bytesToSend[0] = hum_t;
     7e6:	70 92 7e 02 	sts	0x027E, r7	; 0x80027e <_ZL11bytesToSend>
	bytesToSend[1] = temp_t;
     7ea:	00 93 7f 02 	sts	0x027F, r16	; 0x80027f <_ZL11bytesToSend+0x1>
	bytesToSend[2] = com_f;
     7ee:	10 93 80 02 	sts	0x0280, r17	; 0x800280 <_ZL11bytesToSend+0x2>
	//Serial.println(String((uint8_t) bytesToSend[2]));

	//read CCS811 sensor data
	if (mySensor.dataAvailable())
     7f2:	86 e8       	ldi	r24, 0x86	; 134
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <_ZN6CCS81113dataAvailableEv>
     7fa:	88 23       	and	r24, r24
     7fc:	b9 f1       	breq	.+110    	; 0x86c <_Z16updateSensorDatav+0x314>
	{
		Serial.println("is available");
     7fe:	60 e4       	ldi	r22, 0x40	; 64
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	82 ee       	ldi	r24, 0xE2	; 226
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	0e 94 73 30 	call	0x60e6	; 0x60e6 <_ZN5Print7printlnEPKc>
		// use DHT11 data to compensate for the environment
		mySensor.setEnvironmentalData(hum, temp);
     80a:	95 01       	movw	r18, r10
     80c:	84 01       	movw	r16, r8
     80e:	b7 01       	movw	r22, r14
     810:	a6 01       	movw	r20, r12
     812:	86 e8       	ldi	r24, 0x86	; 134
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <_ZN6CCS81120setEnvironmentalDataEff>
		mySensor.readAlgorithmResults();
     81a:	86 e8       	ldi	r24, 0x86	; 134
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	0e 94 da 26 	call	0x4db4	; 0x4db4 <_ZN6CCS81120readAlgorithmResultsEv>
		uint16_t CO2 = mySensor.getCO2();
     822:	86 e8       	ldi	r24, 0x86	; 134
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 61 28 	call	0x50c2	; 0x50c2 <_ZN6CCS8116getCO2Ev>
     82a:	f8 2e       	mov	r15, r24
     82c:	e9 2e       	mov	r14, r25
		Serial.println(CO2);
     82e:	4a e0       	ldi	r20, 0x0A	; 10
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	68 2f       	mov	r22, r24
     834:	79 2f       	mov	r23, r25
     836:	82 ee       	ldi	r24, 0xE2	; 226
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <_ZN5Print7printlnEji>
		uint8_t CO2_MSB = (uint8_t)(CO2 >> 8);
		uint8_t CO2_LSB = (uint8_t)(CO2 & 0x00FF);

		uint16_t tVOC = mySensor.getTVOC();
     83e:	86 e8       	ldi	r24, 0x86	; 134
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	0e 94 5d 28 	call	0x50ba	; 0x50ba <_ZN6CCS8117getTVOCEv>
     846:	18 2f       	mov	r17, r24
     848:	09 2f       	mov	r16, r25
		Serial.println(tVOC);
     84a:	4a e0       	ldi	r20, 0x0A	; 10
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	68 2f       	mov	r22, r24
     850:	79 2f       	mov	r23, r25
     852:	82 ee       	ldi	r24, 0xE2	; 226
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <_ZN5Print7printlnEji>
		uint8_t tVOC_MSB = (uint8_t)(tVOC >> 8);
		uint8_t tVOC_LSB = (uint8_t)(tVOC & 0x00FF);
		bytesToSend[3] = CO2_MSB;
     85a:	e0 92 81 02 	sts	0x0281, r14	; 0x800281 <_ZL11bytesToSend+0x3>
		bytesToSend[4] = CO2_LSB;
     85e:	f0 92 82 02 	sts	0x0282, r15	; 0x800282 <_ZL11bytesToSend+0x4>
		bytesToSend[5] = tVOC_MSB;
     862:	00 93 83 02 	sts	0x0283, r16	; 0x800283 <_ZL11bytesToSend+0x5>
		bytesToSend[6] = tVOC_LSB;
     866:	10 93 84 02 	sts	0x0284, r17	; 0x800284 <_ZL11bytesToSend+0x6>
     86a:	06 c0       	rjmp	.+12     	; 0x878 <_Z16updateSensorDatav+0x320>
		} else {
		Serial.println("data is not available!");
     86c:	6d e4       	ldi	r22, 0x4D	; 77
     86e:	71 e0       	ldi	r23, 0x01	; 1
     870:	82 ee       	ldi	r24, 0xE2	; 226
     872:	93 e0       	ldi	r25, 0x03	; 3
     874:	0e 94 73 30 	call	0x60e6	; 0x60e6 <_ZN5Print7printlnEPKc>
	float hum = DHT.humidity;
	float temp = DHT.temperature;
	uint8_t hum_t = (uint8_t) hum;						// whole part of the float
	uint8_t temp_t = (uint8_t) temp;
	String hum_frac = String(hum - hum_t, 1);			// extract the fractional part using substring
	String temp_frac = String(temp - temp_t, 1);
     878:	ce 01       	movw	r24, r28
     87a:	49 96       	adiw	r24, 0x19	; 25
     87c:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
	DHT.read11(DHT11_PIN);
	float hum = DHT.humidity;
	float temp = DHT.temperature;
	uint8_t hum_t = (uint8_t) hum;						// whole part of the float
	uint8_t temp_t = (uint8_t) temp;
	String hum_frac = String(hum - hum_t, 1);			// extract the fractional part using substring
     880:	ce 01       	movw	r24, r28
     882:	4f 96       	adiw	r24, 0x1f	; 31
     884:	0e 94 00 33 	call	0x6600	; 0x6600 <_ZN6StringD1Ev>
		bytesToSend[5] = tVOC_MSB;
		bytesToSend[6] = tVOC_LSB;
		} else {
		Serial.println("data is not available!");
	}
}
     888:	a4 96       	adiw	r28, 0x24	; 36
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	9f 90       	pop	r9
     8aa:	8f 90       	pop	r8
     8ac:	7f 90       	pop	r7
     8ae:	6f 90       	pop	r6
     8b0:	5f 90       	pop	r5
     8b2:	08 95       	ret

000008b4 <_Z7do_sendP7osjob_t>:

void do_send(osjob_t* j){
	// Check if there is not a current TX/RX job running
	if (LMIC.opmode & OP_TXRXPEND) {
     8b4:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
     8b8:	87 ff       	sbrs	r24, 7
     8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <_Z7do_sendP7osjob_t+0xe>
		Serial.println(F("OP_TXRXPEND, not sending"));
     8bc:	60 ee       	ldi	r22, 0xE0	; 224
     8be:	72 e0       	ldi	r23, 0x02	; 2
     8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <_Z7do_sendP7osjob_t+0x24>
		} else {
		// Read sensor data and write to bytesToSend
		updateSensorData();
     8c2:	0e 94 ac 02 	call	0x558	; 0x558 <_Z16updateSensorDatav>
		// Prepare upstream data transmission at the next possible time.
		LMIC_setTxData2(1, bytesToSend, sizeof(bytesToSend)-1, 0);
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	47 e0       	ldi	r20, 0x07	; 7
     8ca:	6e e7       	ldi	r22, 0x7E	; 126
     8cc:	72 e0       	ldi	r23, 0x02	; 2
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <LMIC_setTxData2>
		Serial.println(F("Packet queued"));
     8d4:	62 ed       	ldi	r22, 0xD2	; 210
     8d6:	72 e0       	ldi	r23, 0x02	; 2
     8d8:	82 ee       	ldi	r24, 0xE2	; 226
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0c 94 4f 30 	jmp	0x609e	; 0x609e <_ZN5Print7printlnEPK19__FlashStringHelper>

000008e0 <onEvent>:
	}
	// Next TX is scheduled after TX_COMPLETE event.
}

void onEvent (ev_t ev) {
     8e0:	cf 93       	push	r28
     8e2:	c8 2f       	mov	r28, r24
    Serial.print(os_getTime());
     8e4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
     8e8:	ab 01       	movw	r20, r22
     8ea:	bc 01       	movw	r22, r24
     8ec:	2a e0       	ldi	r18, 0x0A	; 10
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	82 ee       	ldi	r24, 0xE2	; 226
     8f2:	93 e0       	ldi	r25, 0x03	; 3
     8f4:	0e 94 0c 31 	call	0x6218	; 0x6218 <_ZN5Print5printEli>
    Serial.print(": ");
     8f8:	6f e0       	ldi	r22, 0x0F	; 15
     8fa:	71 e0       	ldi	r23, 0x01	; 1
     8fc:	82 ee       	ldi	r24, 0xE2	; 226
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 42 30 	call	0x6084	; 0x6084 <_ZN5Print5printEPKc>
    switch(ev) {
     904:	8c 2f       	mov	r24, r28
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	fc 01       	movw	r30, r24
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	ef 30       	cpi	r30, 0x0F	; 15
     90e:	f1 05       	cpc	r31, r1
     910:	08 f0       	brcs	.+2      	; 0x914 <__stack+0x15>
     912:	65 c0       	rjmp	.+202    	; 0x9de <__stack+0xdf>
     914:	ec 5c       	subi	r30, 0xCC	; 204
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	0c 94 26 35 	jmp	0x6a4c	; 0x6a4c <__tablejump2__>
        case EV_SCAN_TIMEOUT:
            Serial.println(F("EV_SCAN_TIMEOUT"));
     91c:	62 ec       	ldi	r22, 0xC2	; 194
     91e:	72 e0       	ldi	r23, 0x02	; 2
     920:	60 c0       	rjmp	.+192    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_BEACON_FOUND:
            Serial.println(F("EV_BEACON_FOUND"));
     922:	62 eb       	ldi	r22, 0xB2	; 178
     924:	72 e0       	ldi	r23, 0x02	; 2
     926:	5d c0       	rjmp	.+186    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_BEACON_MISSED:
            Serial.println(F("EV_BEACON_MISSED"));
     928:	61 ea       	ldi	r22, 0xA1	; 161
     92a:	72 e0       	ldi	r23, 0x02	; 2
     92c:	5a c0       	rjmp	.+180    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_BEACON_TRACKED:
            Serial.println(F("EV_BEACON_TRACKED"));
     92e:	6f e8       	ldi	r22, 0x8F	; 143
     930:	72 e0       	ldi	r23, 0x02	; 2
     932:	57 c0       	rjmp	.+174    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_JOINING:
            Serial.println(F("EV_JOINING"));
     934:	64 e8       	ldi	r22, 0x84	; 132
     936:	72 e0       	ldi	r23, 0x02	; 2
     938:	54 c0       	rjmp	.+168    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_JOINED:
            Serial.println(F("EV_JOINED"));
     93a:	6a e7       	ldi	r22, 0x7A	; 122
     93c:	72 e0       	ldi	r23, 0x02	; 2
     93e:	51 c0       	rjmp	.+162    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_RFU1:
            Serial.println(F("EV_RFU1"));
     940:	62 e7       	ldi	r22, 0x72	; 114
     942:	72 e0       	ldi	r23, 0x02	; 2
     944:	4e c0       	rjmp	.+156    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_JOIN_FAILED:
            Serial.println(F("EV_JOIN_FAILED"));
     946:	63 e6       	ldi	r22, 0x63	; 99
     948:	72 e0       	ldi	r23, 0x02	; 2
     94a:	4b c0       	rjmp	.+150    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_REJOIN_FAILED:
            Serial.println(F("EV_REJOIN_FAILED"));
     94c:	62 e5       	ldi	r22, 0x52	; 82
     94e:	72 e0       	ldi	r23, 0x02	; 2
     950:	48 c0       	rjmp	.+144    	; 0x9e2 <__stack+0xe3>
            break;
        case EV_TXCOMPLETE:
            Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));
     952:	62 e2       	ldi	r22, 0x22	; 34
     954:	72 e0       	ldi	r23, 0x02	; 2
     956:	82 ee       	ldi	r24, 0xE2	; 226
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN5Print7printlnEPK19__FlashStringHelper>
            if (LMIC.txrxFlags & TXRX_ACK)
     95e:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <LMIC+0x140>
     962:	87 ff       	sbrs	r24, 7
     964:	06 c0       	rjmp	.+12     	; 0x972 <__stack+0x73>
              Serial.println(F("Received ack"));
     966:	65 e1       	ldi	r22, 0x15	; 21
     968:	72 e0       	ldi	r23, 0x02	; 2
     96a:	82 ee       	ldi	r24, 0xE2	; 226
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN5Print7printlnEPK19__FlashStringHelper>
            if (LMIC.dataLen) {
     972:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
     976:	88 23       	and	r24, r24
     978:	a1 f0       	breq	.+40     	; 0x9a2 <__stack+0xa3>
              Serial.println(F("Received "));
     97a:	6b e0       	ldi	r22, 0x0B	; 11
     97c:	72 e0       	ldi	r23, 0x02	; 2
     97e:	82 ee       	ldi	r24, 0xE2	; 226
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN5Print7printlnEPK19__FlashStringHelper>
              Serial.println(LMIC.dataLen);
     986:	4a e0       	ldi	r20, 0x0A	; 10
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <LMIC+0x142>
     98e:	82 ee       	ldi	r24, 0xE2	; 226
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <_ZN5Print7printlnEhi>
              Serial.println(F(" bytes of payload"));
     996:	69 ef       	ldi	r22, 0xF9	; 249
     998:	71 e0       	ldi	r23, 0x01	; 1
     99a:	82 ee       	ldi	r24, 0xE2	; 226
     99c:	93 e0       	ldi	r25, 0x03	; 3
     99e:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN5Print7printlnEPK19__FlashStringHelper>
            }
            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
     9a2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
     9a6:	ab 01       	movw	r20, r22
     9a8:	bc 01       	movw	r22, r24
     9aa:	48 5c       	subi	r20, 0xC8	; 200
     9ac:	53 46       	sbci	r21, 0x63	; 99
     9ae:	63 4e       	sbci	r22, 0xE3	; 227
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	2a e5       	ldi	r18, 0x5A	; 90
     9b4:	34 e0       	ldi	r19, 0x04	; 4
     9b6:	86 e7       	ldi	r24, 0x76	; 118
     9b8:	92 e0       	ldi	r25, 0x02	; 2
            break;
         default:
            Serial.println(F("Unknown event"));
            break;
    }
}
     9ba:	cf 91       	pop	r28
              Serial.println(F("Received "));
              Serial.println(LMIC.dataLen);
              Serial.println(F(" bytes of payload"));
            }
            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
     9bc:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <os_setTimedCallback>
            break;
        case EV_LOST_TSYNC:
            Serial.println(F("EV_LOST_TSYNC"));
     9c0:	6b ee       	ldi	r22, 0xEB	; 235
     9c2:	71 e0       	ldi	r23, 0x01	; 1
     9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <__stack+0xe3>
            break;
        case EV_RESET:
            Serial.println(F("EV_RESET"));
     9c6:	62 ee       	ldi	r22, 0xE2	; 226
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <__stack+0xe3>
            break;
        case EV_RXCOMPLETE:
            // data received in ping slot
            Serial.println(F("EV_RXCOMPLETE"));
     9cc:	64 ed       	ldi	r22, 0xD4	; 212
     9ce:	71 e0       	ldi	r23, 0x01	; 1
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <__stack+0xe3>
            break;
        case EV_LINK_DEAD:
            Serial.println(F("EV_LINK_DEAD"));
     9d2:	67 ec       	ldi	r22, 0xC7	; 199
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <__stack+0xe3>
            break;
        case EV_LINK_ALIVE:
            Serial.println(F("EV_LINK_ALIVE"));
     9d8:	69 eb       	ldi	r22, 0xB9	; 185
     9da:	71 e0       	ldi	r23, 0x01	; 1
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0xe3>
            break;
         default:
            Serial.println(F("Unknown event"));
     9de:	6b ea       	ldi	r22, 0xAB	; 171
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	82 ee       	ldi	r24, 0xE2	; 226
     9e4:	93 e0       	ldi	r25, 0x03	; 3
            break;
    }
}
     9e6:	cf 91       	pop	r28
            break;
        case EV_LINK_ALIVE:
            Serial.println(F("EV_LINK_ALIVE"));
            break;
         default:
            Serial.println(F("Unknown event"));
     9e8:	0c 94 4f 30 	jmp	0x609e	; 0x609e <_ZN5Print7printlnEPK19__FlashStringHelper>

000009ec <setup>:
            break;
    }
}

void setup() {
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	a0 97       	sbiw	r28, 0x20	; 32
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     a08:	26 e0       	ldi	r18, 0x06	; 6
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	52 ec       	ldi	r21, 0xC2	; 194
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	82 ee       	ldi	r24, 0xE2	; 226
     a14:	93 e0       	ldi	r25, 0x03	; 3
     a16:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <_ZN14HardwareSerial5beginEmh>
    Serial.begin(115200);
    Serial.println(F("Starting"));
     a1a:	62 ea       	ldi	r22, 0xA2	; 162
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	82 ee       	ldi	r24, 0xE2	; 226
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	0e 94 4f 30 	call	0x609e	; 0x609e <_ZN5Print7printlnEPK19__FlashStringHelper>

    Wire.begin();
     a26:	8c e8       	ldi	r24, 0x8C	; 140
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	0e 94 94 2b 	call	0x5728	; 0x5728 <_ZN7TwoWire5beginEv>

    if (mySensor.begin() == false)
     a2e:	6c e8       	ldi	r22, 0x8C	; 140
     a30:	73 e0       	ldi	r23, 0x03	; 3
     a32:	86 e8       	ldi	r24, 0x86	; 134
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <_ZN6CCS8115beginER7TwoWire>
     a3a:	81 11       	cpse	r24, r1
     a3c:	07 c0       	rjmp	.+14     	; 0xa4c <setup+0x60>
	{
		Serial.print("CCS811 error. Please check wiring. Freezing...");
     a3e:	64 e6       	ldi	r22, 0x64	; 100
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	82 ee       	ldi	r24, 0xE2	; 226
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	0e 94 42 30 	call	0x6084	; 0x6084 <_ZN5Print5printEPKc>
     a4a:	ff cf       	rjmp	.-2      	; 0xa4a <setup+0x5e>
	    while (1);
	}

    // LMIC init
    os_init();
     a4c:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <os_init>
    // Reset the MAC state. Session and pending data transfers will be discarded.
    LMIC_reset();
     a50:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <LMIC_reset>
    // On AVR, these values are stored in flash and only copied to RAM
    // once. Copy them to a temporary buffer here, LMIC_setSession will
    // copy them into a buffer of its own again.
    uint8_t appskey[sizeof(APPSKEY)];
    uint8_t nwkskey[sizeof(NWKSKEY)];
    memcpy_P(appskey, APPSKEY, sizeof(APPSKEY));
     a54:	40 e1       	ldi	r20, 0x10	; 16
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	69 ef       	ldi	r22, 0xF9	; 249
     a5a:	72 e0       	ldi	r23, 0x02	; 2
     a5c:	ce 01       	movw	r24, r28
     a5e:	41 96       	adiw	r24, 0x11	; 17
     a60:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <memcpy_P>
    memcpy_P(nwkskey, NWKSKEY, sizeof(NWKSKEY));
     a64:	40 e1       	ldi	r20, 0x10	; 16
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	69 e0       	ldi	r22, 0x09	; 9
     a6a:	73 e0       	ldi	r23, 0x03	; 3
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	0e 94 fb 38 	call	0x71f6	; 0x71f6 <memcpy_P>
    LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
     a74:	ce 01       	movw	r24, r28
     a76:	41 96       	adiw	r24, 0x11	; 17
     a78:	7c 01       	movw	r14, r24
     a7a:	8e 01       	movw	r16, r28
     a7c:	0f 5f       	subi	r16, 0xFF	; 255
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
     a80:	2d e3       	ldi	r18, 0x3D	; 61
     a82:	34 e1       	ldi	r19, 0x14	; 20
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	56 e2       	ldi	r21, 0x26	; 38
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <LMIC_setSession>
    // frequencies, so be sure to configure the full frequency range of
    // your network here (unless your network autoconfigures them).
    // Setting up channels should happen after LMIC_setSession, as that
    // configures the minimal channel set.
    // NA-US channels 0-71 are configured automatically
    LMIC_setupChannel(0, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
     a94:	01 e0       	ldi	r16, 0x01	; 1
     a96:	2f e3       	ldi	r18, 0x3F	; 63
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 ea       	ldi	r20, 0xA0	; 160
     a9c:	57 e2       	ldi	r21, 0x27	; 39
     a9e:	6e eb       	ldi	r22, 0xBE	; 190
     aa0:	73 e3       	ldi	r23, 0x33	; 51
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LMIC_setupChannel>
    LMIC_disableChannel(1);
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	0e 94 ad 13 	call	0x275a	; 0x275a <LMIC_disableChannel>
	LMIC_disableChannel(2);
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	0e 94 ad 13 	call	0x275a	; 0x275a <LMIC_disableChannel>
    // https://github.com/TheThingsNetwork/gateway-conf/blob/master/US-global_conf.json
    LMIC_selectSubBand(1);
    #endif

    // Disable link check validation
    LMIC_setLinkCheckMode(0);
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <LMIC_setLinkCheckMode>

    // TTN uses SF9 for its RX2 window.
    LMIC.dn2Dr = DR_SF9;
     aba:	83 e0       	ldi	r24, 0x03	; 3
     abc:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <LMIC+0x126>

    // Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
    LMIC_setDrTxpow(DR_SF7,14);
     ac0:	6e e0       	ldi	r22, 0x0E	; 14
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <LMIC_setDrTxpow>

    // Start job
    do_send(&sendjob);
     ac8:	86 e7       	ldi	r24, 0x76	; 118
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_Z7do_sendP7osjob_t>
}
     ad0:	a0 96       	adiw	r28, 0x20	; 32
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	08 95       	ret

00000aea <loop>:

void loop() {
    os_runloop_once();
     aea:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <os_runloop_once>

00000aee <_GLOBAL__sub_I_DHT>:
#endif

class dht
{
public:
    dht() { _disableIRQ = false; };
     aee:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <DHT+0xd>

#define DHT11_PIN 3
#define CCS811_ADDR 0x5B

dht DHT;
CCS811 mySensor(CCS811_ADDR);
     af2:	6b e5       	ldi	r22, 0x5B	; 91
     af4:	86 e8       	ldi	r24, 0x86	; 134
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0c 94 bf 26 	jmp	0x4d7e	; 0x4d7e <_ZN6CCS811C1Eh>

00000afc <_ZL17AES_Add_Round_KeyPh>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
static void AES_Add_Round_Key(unsigned char *Round_Key)
{
     afc:	cf 93       	push	r28
     afe:	2b ea       	ldi	r18, 0xAB	; 171
     b00:	32 e0       	ldi	r19, 0x02	; 2
     b02:	bc 01       	movw	r22, r24
     b04:	60 5f       	subi	r22, 0xF0	; 240
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	dc 01       	movw	r26, r24
     b0a:	f9 01       	movw	r30, r18
     b0c:	40 e0       	ldi	r20, 0x00	; 0

  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
     b0e:	5d 91       	ld	r21, X+
     b10:	c0 81       	ld	r28, Z
     b12:	5c 27       	eor	r21, r28
     b14:	50 83       	st	Z, r21
{
  unsigned char Row,Collum;

  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     b16:	4f 5f       	subi	r20, 0xFF	; 255
     b18:	34 96       	adiw	r30, 0x04	; 4
     b1a:	44 30       	cpi	r20, 0x04	; 4
     b1c:	c1 f7       	brne	.-16     	; 0xb0e <_ZL17AES_Add_Round_KeyPh+0x12>
     b1e:	2f 5f       	subi	r18, 0xFF	; 255
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	04 96       	adiw	r24, 0x04	; 4
*/
static void AES_Add_Round_Key(unsigned char *Round_Key)
{
  unsigned char Row,Collum;

  for(Collum = 0; Collum < 4; Collum++)
     b24:	68 17       	cp	r22, r24
     b26:	79 07       	cpc	r23, r25
     b28:	79 f7       	brne	.-34     	; 0xb08 <_ZL17AES_Add_Round_KeyPh+0xc>
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
    }
  }
}
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <_ZL14AES_Shift_Rowsv>:

  //Row 0 doesn't change

  //Shift Row 1 one left
  //Store firt byte in buffer
  Buffer = State[1][0];
     b2e:	eb ea       	ldi	r30, 0xAB	; 171
     b30:	f2 e0       	ldi	r31, 0x02	; 2
     b32:	84 81       	ldd	r24, Z+4	; 0x04
  //Shift all bytes
  State[1][0] = State[1][1];
     b34:	95 81       	ldd	r25, Z+5	; 0x05
     b36:	94 83       	std	Z+4, r25	; 0x04
  State[1][1] = State[1][2];
     b38:	96 81       	ldd	r25, Z+6	; 0x06
     b3a:	95 83       	std	Z+5, r25	; 0x05
  State[1][2] = State[1][3];
     b3c:	97 81       	ldd	r25, Z+7	; 0x07
     b3e:	96 83       	std	Z+6, r25	; 0x06
  State[1][3] = Buffer;
     b40:	87 83       	std	Z+7, r24	; 0x07

  //Shift row 2 two left
  Buffer = State[2][0];
     b42:	80 85       	ldd	r24, Z+8	; 0x08
  State[2][0] = State[2][2];
     b44:	92 85       	ldd	r25, Z+10	; 0x0a
     b46:	90 87       	std	Z+8, r25	; 0x08
  State[2][2] = Buffer;
     b48:	82 87       	std	Z+10, r24	; 0x0a
  Buffer = State[2][1];
     b4a:	81 85       	ldd	r24, Z+9	; 0x09
  State[2][1] = State[2][3];
     b4c:	93 85       	ldd	r25, Z+11	; 0x0b
     b4e:	91 87       	std	Z+9, r25	; 0x09
  State[2][3] = Buffer;
     b50:	83 87       	std	Z+11, r24	; 0x0b

  //Shift row 3 three left
  Buffer = State[3][3];
     b52:	87 85       	ldd	r24, Z+15	; 0x0f
  State[3][3] = State[3][2];
     b54:	96 85       	ldd	r25, Z+14	; 0x0e
     b56:	97 87       	std	Z+15, r25	; 0x0f
  State[3][2] = State[3][1];
     b58:	95 85       	ldd	r25, Z+13	; 0x0d
     b5a:	96 87       	std	Z+14, r25	; 0x0e
  State[3][1] = State[3][0];
     b5c:	94 85       	ldd	r25, Z+12	; 0x0c
     b5e:	95 87       	std	Z+13, r25	; 0x0d
  State[3][0] = Buffer;
     b60:	84 87       	std	Z+12, r24	; 0x0c
     b62:	08 95       	ret

00000b64 <_ZL23AES_Calculate_Round_KeyhPh>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
static void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	00 d0       	rcall	.+0      	; 0xb6a <_ZL23AES_Calculate_Round_KeyhPh+0x6>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <_ZL23AES_Calculate_Round_KeyhPh+0x8>
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	fb 01       	movw	r30, r22
     b72:	3c 96       	adiw	r30, 0x0c	; 12
     b74:	9b 01       	movw	r18, r22
     b76:	20 5f       	subi	r18, 0xF0	; 240
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	de 01       	movw	r26, r28
     b7c:	11 96       	adiw	r26, 0x01	; 1

  //Calculate first Temp
  //Copy laste byte from previous key
  for(i = 0; i < 4; i++)
  {
    Temp[i] = Round_Key[i+12];
     b7e:	91 91       	ld	r25, Z+
     b80:	9d 93       	st	X+, r25
  unsigned char Buffer;
  unsigned char Rcon;

  //Calculate first Temp
  //Copy laste byte from previous key
  for(i = 0; i < 4; i++)
     b82:	2e 17       	cp	r18, r30
     b84:	3f 07       	cpc	r19, r31
     b86:	d9 f7       	brne	.-10     	; 0xb7e <_ZL23AES_Calculate_Round_KeyhPh+0x1a>
  {
    Temp[i] = Round_Key[i+12];
  }

  //Rotate Temp
  Buffer = Temp[0];
     b88:	99 81       	ldd	r25, Y+1	; 0x01
  Temp[0] = Temp[1];
     b8a:	2a 81       	ldd	r18, Y+2	; 0x02
     b8c:	29 83       	std	Y+1, r18	; 0x01
  Temp[1] = Temp[2];
     b8e:	2b 81       	ldd	r18, Y+3	; 0x03
     b90:	2a 83       	std	Y+2, r18	; 0x02
  Temp[2] = Temp[3];
     b92:	2c 81       	ldd	r18, Y+4	; 0x04
     b94:	2b 83       	std	Y+3, r18	; 0x03
  Temp[3] = Buffer;
     b96:	9c 83       	std	Y+4, r25	; 0x04
     b98:	9e 01       	movw	r18, r28
     b9a:	2b 5f       	subi	r18, 0xFB	; 251
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	de 01       	movw	r26, r28
     ba0:	11 96       	adiw	r26, 0x01	; 1

  //Substitute Temp
  for(i = 0; i < 4; i++)
  {
    Temp[i] = AES_Sub_Byte(Temp[i]);
     ba2:	9c 91       	ld	r25, X
  //Split byte up in Row and Collum
  S_Row = ((Byte >> 4) & 0x0F);
  S_Collum = (Byte & 0x0F);

  //Find the correct byte in the S_Table
  S_Byte = TABLE_GET_U1_TWODIM(S_Table, S_Row, S_Collum);
     ba4:	e9 2f       	mov	r30, r25
     ba6:	e2 95       	swap	r30
     ba8:	ef 70       	andi	r30, 0x0F	; 15
     baa:	40 e1       	ldi	r20, 0x10	; 16
     bac:	e4 9f       	mul	r30, r20
     bae:	f0 01       	movw	r30, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	e7 5e       	subi	r30, 0xE7	; 231
     bb4:	fc 4f       	sbci	r31, 0xFC	; 252
            if (__builtin_constant_p(table[index])) \
                return table[index]; \
            return pgm_read_ ## pgm_type(&table[index]); \
        }

    TABLE_GETTER(_u1, u1_t, byte);
     bb6:	9f 70       	andi	r25, 0x0F	; 15
     bb8:	e9 0f       	add	r30, r25
     bba:	f1 1d       	adc	r31, r1
     bbc:	e4 91       	lpm	r30, Z
  Temp[3] = Buffer;

  //Substitute Temp
  for(i = 0; i < 4; i++)
  {
    Temp[i] = AES_Sub_Byte(Temp[i]);
     bbe:	ed 93       	st	X+, r30
  Temp[1] = Temp[2];
  Temp[2] = Temp[3];
  Temp[3] = Buffer;

  //Substitute Temp
  for(i = 0; i < 4; i++)
     bc0:	a2 17       	cp	r26, r18
     bc2:	b3 07       	cpc	r27, r19
     bc4:	71 f7       	brne	.-36     	; 0xba2 <_ZL23AES_Calculate_Round_KeyhPh+0x3e>
     bc6:	91 e0       	ldi	r25, 0x01	; 1
  {
    b = Rcon & 0x80;
    Rcon = Rcon << 1;
    if(b == 0x80)
    {
      Rcon = Rcon ^ 0x1b;
     bc8:	4b e1       	ldi	r20, 0x1B	; 27
    Temp[i] = AES_Sub_Byte(Temp[i]);
  }

  //Calculate Rcon
  Rcon = 0x01;
  while(Round != 1)
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	41 f0       	breq	.+16     	; 0xbde <_ZL23AES_Calculate_Round_KeyhPh+0x7a>
  {
    b = Rcon & 0x80;
     bce:	59 2f       	mov	r21, r25
     bd0:	50 78       	andi	r21, 0x80	; 128
    Rcon = Rcon << 1;
     bd2:	99 0f       	add	r25, r25
    if(b == 0x80)
     bd4:	50 38       	cpi	r21, 0x80	; 128
     bd6:	09 f4       	brne	.+2      	; 0xbda <_ZL23AES_Calculate_Round_KeyhPh+0x76>
    {
      Rcon = Rcon ^ 0x1b;
     bd8:	94 27       	eor	r25, r20
    }
    Round--;
     bda:	81 50       	subi	r24, 0x01	; 1
    Temp[i] = AES_Sub_Byte(Temp[i]);
  }

  //Calculate Rcon
  Rcon = 0x01;
  while(Round != 1)
     bdc:	f6 cf       	rjmp	.-20     	; 0xbca <_ZL23AES_Calculate_Round_KeyhPh+0x66>
    }
    Round--;
  }

  //XOR Rcon
  Temp[0] = Temp[0] ^ Rcon;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	98 27       	eor	r25, r24
     be2:	99 83       	std	Y+1, r25	; 0x01
     be4:	94 e0       	ldi	r25, 0x04	; 4
     be6:	fe 01       	movw	r30, r28
     be8:	31 96       	adiw	r30, 0x01	; 1
     bea:	db 01       	movw	r26, r22
  //Calculate new key
  for(i = 0; i < 4; i++)
  {
    for(j = 0; j < 4; j++)
    {
      Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
     bec:	4c 91       	ld	r20, X
     bee:	80 81       	ld	r24, Z
     bf0:	84 27       	eor	r24, r20
     bf2:	8d 93       	st	X+, r24
      Temp[j] = Round_Key[j + (4*i)];
     bf4:	81 93       	st	Z+, r24
  Temp[0] = Temp[0] ^ Rcon;

  //Calculate new key
  for(i = 0; i < 4; i++)
  {
    for(j = 0; j < 4; j++)
     bf6:	2e 17       	cp	r18, r30
     bf8:	3f 07       	cpc	r19, r31
     bfa:	c1 f7       	brne	.-16     	; 0xbec <_ZL23AES_Calculate_Round_KeyhPh+0x88>
     bfc:	91 50       	subi	r25, 0x01	; 1
     bfe:	6c 5f       	subi	r22, 0xFC	; 252
     c00:	7f 4f       	sbci	r23, 0xFF	; 255

  //XOR Rcon
  Temp[0] = Temp[0] ^ Rcon;

  //Calculate new key
  for(i = 0; i < 4; i++)
     c02:	91 11       	cpse	r25, r1
     c04:	f0 cf       	rjmp	.-32     	; 0xbe6 <_ZL23AES_Calculate_Round_KeyhPh+0x82>
    {
      Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
      Temp[j] = Round_Key[j + (4*i)];
    }
  }
}
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <lmic_aes_encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void lmic_aes_encrypt(unsigned char *Data, unsigned char *Key)
{
     c14:	4f 92       	push	r4
     c16:	5f 92       	push	r5
     c18:	6f 92       	push	r6
     c1a:	7f 92       	push	r7
     c1c:	8f 92       	push	r8
     c1e:	9f 92       	push	r9
     c20:	af 92       	push	r10
     c22:	bf 92       	push	r11
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	68 97       	sbiw	r28, 0x18	; 24
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	8c 01       	movw	r16, r24
     c46:	2b ea       	ldi	r18, 0xAB	; 171
     c48:	e2 2e       	mov	r14, r18
     c4a:	22 e0       	ldi	r18, 0x02	; 2
     c4c:	f2 2e       	mov	r15, r18
     c4e:	97 01       	movw	r18, r14
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	d8 01       	movw	r26, r16
     c56:	a8 0f       	add	r26, r24
     c58:	b9 1f       	adc	r27, r25
     c5a:	f9 01       	movw	r30, r18
     c5c:	40 e0       	ldi	r20, 0x00	; 0
  //Copy input to State arry
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = Data[Row + (4*Collum)];
     c5e:	5d 91       	ld	r21, X+
     c60:	50 83       	st	Z, r21
  unsigned char Round_Key[16];

  //Copy input to State arry
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     c62:	4f 5f       	subi	r20, 0xFF	; 255
     c64:	34 96       	adiw	r30, 0x04	; 4
     c66:	44 30       	cpi	r20, 0x04	; 4
     c68:	d1 f7       	brne	.-12     	; 0xc5e <lmic_aes_encrypt+0x4a>
     c6a:	04 96       	adiw	r24, 0x04	; 4
     c6c:	2f 5f       	subi	r18, 0xFF	; 255
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
  unsigned char Row,Collum;
  unsigned char Round = 0x00;
  unsigned char Round_Key[16];

  //Copy input to State arry
  for(Collum = 0; Collum < 4; Collum++)
     c70:	80 31       	cpi	r24, 0x10	; 16
     c72:	91 05       	cpc	r25, r1
     c74:	79 f7       	brne	.-34     	; 0xc54 <lmic_aes_encrypt+0x40>
     c76:	db 01       	movw	r26, r22
     c78:	fe 01       	movw	r30, r28
     c7a:	31 96       	adiw	r30, 0x01	; 1
     c7c:	6e 01       	movw	r12, r28
     c7e:	51 e1       	ldi	r21, 0x11	; 17
     c80:	c5 0e       	add	r12, r21
     c82:	d1 1c       	adc	r13, r1
     c84:	3f 01       	movw	r6, r30
  }

  //Copy key to round key
  for(i = 0; i < 16; i++)
  {
    Round_Key[i] = Key[i];
     c86:	8d 91       	ld	r24, X+
     c88:	81 93       	st	Z+, r24
      State[Row][Collum] = Data[Row + (4*Collum)];
    }
  }

  //Copy key to round key
  for(i = 0; i < 16; i++)
     c8a:	ec 15       	cp	r30, r12
     c8c:	fd 05       	cpc	r31, r13
     c8e:	d9 f7       	brne	.-10     	; 0xc86 <lmic_aes_encrypt+0x72>
  {
    Round_Key[i] = Key[i];
  }

  //Add round key
  AES_Add_Round_Key(Round_Key);
     c90:	c3 01       	movw	r24, r6
     c92:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL17AES_Add_Round_KeyPh>

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
     c96:	55 24       	eor	r5, r5
     c98:	53 94       	inc	r5
     c9a:	8f ea       	ldi	r24, 0xAF	; 175
     c9c:	a8 2e       	mov	r10, r24
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	b8 2e       	mov	r11, r24
     ca2:	4e 01       	movw	r8, r28
     ca4:	89 e1       	ldi	r24, 0x19	; 25
     ca6:	88 0e       	add	r8, r24
     ca8:	91 1c       	adc	r9, r1
      a[Row] = State[Row][Collum];
      b[Row] = (State[Row][Collum] << 1);

      if((State[Row][Collum] & 0x80) == 0x80)
      {
        b[Row] = b[Row] ^ 0x1B;
     caa:	9b e1       	ldi	r25, 0x1B	; 27
     cac:	49 2e       	mov	r4, r25

  //Add round key
  AES_Add_Round_Key(Round_Key);

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
     cae:	8b ea       	ldi	r24, 0xAB	; 171
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	24 e0       	ldi	r18, 0x04	; 4
     cb4:	dc 01       	movw	r26, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
    {
      for(Row = 0; Row < 4; Row++)
      {
        State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     cb8:	4c 91       	ld	r20, X
  //Split byte up in Row and Collum
  S_Row = ((Byte >> 4) & 0x0F);
  S_Collum = (Byte & 0x0F);

  //Find the correct byte in the S_Table
  S_Byte = TABLE_GET_U1_TWODIM(S_Table, S_Row, S_Collum);
     cba:	e4 2f       	mov	r30, r20
     cbc:	e2 95       	swap	r30
     cbe:	ef 70       	andi	r30, 0x0F	; 15
     cc0:	50 e1       	ldi	r21, 0x10	; 16
     cc2:	e5 9f       	mul	r30, r21
     cc4:	f0 01       	movw	r30, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	e7 5e       	subi	r30, 0xE7	; 231
     cca:	fc 4f       	sbci	r31, 0xFC	; 252
     ccc:	4f 70       	andi	r20, 0x0F	; 15
     cce:	e4 0f       	add	r30, r20
     cd0:	f1 1d       	adc	r31, r1
     cd2:	e4 91       	lpm	r30, Z
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
    {
      for(Row = 0; Row < 4; Row++)
      {
        State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     cd4:	ec 93       	st	X, r30
  for(Round = 1; Round < 10; Round++)
  {
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
    {
      for(Row = 0; Row < 4; Row++)
     cd6:	3f 5f       	subi	r19, 0xFF	; 255
     cd8:	14 96       	adiw	r26, 0x04	; 4
     cda:	34 30       	cpi	r19, 0x04	; 4
     cdc:	69 f7       	brne	.-38     	; 0xcb8 <lmic_aes_encrypt+0xa4>
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	01 96       	adiw	r24, 0x01	; 1

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
  {
    //Preform Byte substitution with S table
    for(Collum = 0; Collum < 4; Collum++)
     ce2:	21 11       	cpse	r18, r1
     ce4:	e7 cf       	rjmp	.-50     	; 0xcb4 <lmic_aes_encrypt+0xa0>
        State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
      }
    }

    //Preform Row Shift
    AES_Shift_Rows();
     ce6:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZL14AES_Shift_Rowsv>
     cea:	eb ea       	ldi	r30, 0xAB	; 171
     cec:	f2 e0       	ldi	r31, 0x02	; 2
     cee:	ce 01       	movw	r24, r28
     cf0:	45 96       	adiw	r24, 0x15	; 21
     cf2:	b6 01       	movw	r22, r12
     cf4:	9f 01       	movw	r18, r30
  unsigned char a[4], b[4];
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      a[Row] = State[Row][Collum];
     cf6:	d9 01       	movw	r26, r18
     cf8:	5c 91       	ld	r21, X
     cfa:	dc 01       	movw	r26, r24
     cfc:	5d 93       	st	X+, r21
     cfe:	cd 01       	movw	r24, r26
      b[Row] = (State[Row][Collum] << 1);
     d00:	45 2f       	mov	r20, r21
     d02:	44 0f       	add	r20, r20

      if((State[Row][Collum] & 0x80) == 0x80)
     d04:	57 fd       	sbrc	r21, 7
      {
        b[Row] = b[Row] ^ 0x1B;
     d06:	44 25       	eor	r20, r4
     d08:	db 01       	movw	r26, r22
     d0a:	4c 93       	st	X, r20
     d0c:	2c 5f       	subi	r18, 0xFC	; 252
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	6f 5f       	subi	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
{
  unsigned char Row,Collum;
  unsigned char a[4], b[4];
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     d14:	88 16       	cp	r8, r24
     d16:	99 06       	cpc	r9, r25
     d18:	71 f7       	brne	.-36     	; 0xcf6 <lmic_aes_encrypt+0xe2>
      if((State[Row][Collum] & 0x80) == 0x80)
      {
        b[Row] = b[Row] ^ 0x1B;
      }
    }
    State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
     d1a:	6e 89       	ldd	r22, Y+22	; 0x16
     d1c:	99 89       	ldd	r25, Y+17	; 0x11
     d1e:	96 27       	eor	r25, r22
     d20:	4f 89       	ldd	r20, Y+23	; 0x17
     d22:	38 8d       	ldd	r19, Y+24	; 0x18
     d24:	8a 89       	ldd	r24, Y+18	; 0x12
     d26:	84 27       	eor	r24, r20
     d28:	83 27       	eor	r24, r19
     d2a:	29 2f       	mov	r18, r25
     d2c:	28 27       	eor	r18, r24
     d2e:	21 93       	st	Z+, r18
    State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
     d30:	5d 89       	ldd	r21, Y+21	; 0x15
     d32:	2b 89       	ldd	r18, Y+19	; 0x13
     d34:	85 27       	eor	r24, r21
     d36:	82 27       	eor	r24, r18
     d38:	83 83       	std	Z+3, r24	; 0x03
    State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
     d3a:	8c 89       	ldd	r24, Y+20	; 0x14
     d3c:	36 27       	eor	r19, r22
     d3e:	35 27       	eor	r19, r21
     d40:	23 27       	eor	r18, r19
     d42:	28 27       	eor	r18, r24
     d44:	27 83       	std	Z+7, r18	; 0x07
    State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
     d46:	45 27       	eor	r20, r21
     d48:	48 27       	eor	r20, r24
     d4a:	94 27       	eor	r25, r20
     d4c:	93 87       	std	Z+11, r25	; 0x0b
*/
static void AES_Mix_Collums()
{
  unsigned char Row,Collum;
  unsigned char a[4], b[4];
  for(Collum = 0; Collum < 4; Collum++)
     d4e:	ae 16       	cp	r10, r30
     d50:	bf 06       	cpc	r11, r31
     d52:	69 f6       	brne	.-102    	; 0xcee <lmic_aes_encrypt+0xda>

    //Mix Collums
    AES_Mix_Collums();

    //Calculate new round key
    AES_Calculate_Round_Key(Round,Round_Key);
     d54:	b3 01       	movw	r22, r6
     d56:	85 2d       	mov	r24, r5
     d58:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZL23AES_Calculate_Round_KeyhPh>

    //Add round key
    AES_Add_Round_Key(Round_Key);
     d5c:	c3 01       	movw	r24, r6
     d5e:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL17AES_Add_Round_KeyPh>

  //Add round key
  AES_Add_Round_Key(Round_Key);

  //Preform 9 full rounds
  for(Round = 1; Round < 10; Round++)
     d62:	53 94       	inc	r5
     d64:	ba e0       	ldi	r27, 0x0A	; 10
     d66:	5b 12       	cpse	r5, r27
     d68:	a2 cf       	rjmp	.-188    	; 0xcae <lmic_aes_encrypt+0x9a>
     d6a:	8b ea       	ldi	r24, 0xAB	; 171
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	34 e0       	ldi	r19, 0x04	; 4
     d70:	dc 01       	movw	r26, r24
     d72:	40 e0       	ldi	r20, 0x00	; 0
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     d74:	2c 91       	ld	r18, X
  //Split byte up in Row and Collum
  S_Row = ((Byte >> 4) & 0x0F);
  S_Collum = (Byte & 0x0F);

  //Find the correct byte in the S_Table
  S_Byte = TABLE_GET_U1_TWODIM(S_Table, S_Row, S_Collum);
     d76:	e2 2f       	mov	r30, r18
     d78:	e2 95       	swap	r30
     d7a:	ef 70       	andi	r30, 0x0F	; 15
     d7c:	50 e1       	ldi	r21, 0x10	; 16
     d7e:	e5 9f       	mul	r30, r21
     d80:	f0 01       	movw	r30, r0
     d82:	11 24       	eor	r1, r1
     d84:	e7 5e       	subi	r30, 0xE7	; 231
     d86:	fc 4f       	sbci	r31, 0xFC	; 252
     d88:	2f 70       	andi	r18, 0x0F	; 15
     d8a:	e2 0f       	add	r30, r18
     d8c:	f1 1d       	adc	r31, r1
     d8e:	e4 91       	lpm	r30, Z
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
     d90:	ec 93       	st	X, r30

  //Last round whitout mix collums
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     d92:	4f 5f       	subi	r20, 0xFF	; 255
     d94:	14 96       	adiw	r26, 0x04	; 4
     d96:	44 30       	cpi	r20, 0x04	; 4
     d98:	69 f7       	brne	.-38     	; 0xd74 <lmic_aes_encrypt+0x160>
     d9a:	31 50       	subi	r19, 0x01	; 1
     d9c:	01 96       	adiw	r24, 0x01	; 1
    AES_Add_Round_Key(Round_Key);
  }

  //Last round whitout mix collums
  //Preform Byte substitution with S table
  for(Collum = 0; Collum < 4; Collum++)
     d9e:	31 11       	cpse	r19, r1
     da0:	e7 cf       	rjmp	.-50     	; 0xd70 <lmic_aes_encrypt+0x15c>
      State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
    }
  }

  //Shift rows
  AES_Shift_Rows();
     da2:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZL14AES_Shift_Rowsv>

  //Calculate new round key
  AES_Calculate_Round_Key(Round,Round_Key);
     da6:	b3 01       	movw	r22, r6
     da8:	8a e0       	ldi	r24, 0x0A	; 10
     daa:	0e 94 b2 05 	call	0xb64	; 0xb64 <_ZL23AES_Calculate_Round_KeyhPh>

  //Add round Key
  AES_Add_Round_Key(Round_Key);
     dae:	c3 01       	movw	r24, r6
     db0:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL17AES_Add_Round_KeyPh>
     db4:	98 01       	movw	r18, r16
     db6:	20 5f       	subi	r18, 0xF0	; 240
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	d8 01       	movw	r26, r16
     dbc:	f7 01       	movw	r30, r14
     dbe:	80 e0       	ldi	r24, 0x00	; 0
  //Copy the State into the data array
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
    {
      Data[Row + (4*Collum)] = State[Row][Collum];
     dc0:	90 81       	ld	r25, Z
     dc2:	9d 93       	st	X+, r25
  AES_Add_Round_Key(Round_Key);

  //Copy the State into the data array
  for(Collum = 0; Collum < 4; Collum++)
  {
    for(Row = 0; Row < 4; Row++)
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
     dc6:	34 96       	adiw	r30, 0x04	; 4
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <lmic_aes_encrypt+0x1ac>
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	e8 1a       	sub	r14, r24
     dd0:	f8 0a       	sbc	r15, r24
     dd2:	0c 5f       	subi	r16, 0xFC	; 252
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255

  //Add round Key
  AES_Add_Round_Key(Round_Key);

  //Copy the State into the data array
  for(Collum = 0; Collum < 4; Collum++)
     dd6:	20 17       	cp	r18, r16
     dd8:	31 07       	cpc	r19, r17
     dda:	79 f7       	brne	.-34     	; 0xdba <lmic_aes_encrypt+0x1a6>
    {
      Data[Row + (4*Collum)] = State[Row][Collum];
    }
  }

}
     ddc:	68 96       	adiw	r28, 0x18	; 24
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	bf 90       	pop	r11
     dfa:	af 90       	pop	r10
     dfc:	9f 90       	pop	r9
     dfe:	8f 90       	pop	r8
     e00:	7f 90       	pop	r7
     e02:	6f 90       	pop	r6
     e04:	5f 90       	pop	r5
     e06:	4f 90       	pop	r4
     e08:	08 95       	ret

00000e0a <shift_left.constprop.0>:
// global area for passing parameters (aux, key)
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[16/sizeof(u4_t)];

// Shift the given buffer left one bit
static void shift_left(xref2u1_t buf, u1_t len) {
     e0a:	fc 01       	movw	r30, r24
    while (len--) {
        u1_t next = len ? buf[1] : 0;
     e0c:	20 e1       	ldi	r18, 0x10	; 16
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[16/sizeof(u4_t)];

// Shift the given buffer left one bit
static void shift_left(xref2u1_t buf, u1_t len) {
    while (len--) {
     e0e:	21 50       	subi	r18, 0x01	; 1
     e10:	50 f0       	brcs	.+20     	; 0xe26 <shift_left.constprop.0+0x1c>
        u1_t next = len ? buf[1] : 0;
     e12:	11 f0       	breq	.+4      	; 0xe18 <shift_left.constprop.0+0xe>
     e14:	81 81       	ldd	r24, Z+1	; 0x01
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <shift_left.constprop.0+0x10>
     e18:	80 e0       	ldi	r24, 0x00	; 0

        u1_t val = (*buf << 1);
     e1a:	90 81       	ld	r25, Z
     e1c:	99 0f       	add	r25, r25
        if (next & 0x80)
     e1e:	87 fd       	sbrc	r24, 7
            val |= 1;
     e20:	91 60       	ori	r25, 0x01	; 1
        *buf++ = val;
     e22:	91 93       	st	Z+, r25
     e24:	f4 cf       	rjmp	.-24     	; 0xe0e <shift_left.constprop.0+0x4>
    }
}
     e26:	08 95       	ret

00000e28 <os_aes>:
        // Increment the block index byte
        AESaux[15]++;
    }
}

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
     e28:	6f 92       	push	r6
     e2a:	7f 92       	push	r7
     e2c:	8f 92       	push	r8
     e2e:	9f 92       	push	r9
     e30:	af 92       	push	r10
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	60 97       	sbiw	r28, 0x10	; 16
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	7b 01       	movw	r14, r22
     e56:	8a 01       	movw	r16, r20
    switch (mode & ~AES_MICNOAUX) {
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	27 7f       	andi	r18, 0xF7	; 247
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	49 f0       	breq	.+18     	; 0xe76 <os_aes+0x4e>
     e64:	24 30       	cpi	r18, 0x04	; 4
     e66:	31 05       	cpc	r19, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <os_aes+0x44>
     e6a:	a0 c0       	rjmp	.+320    	; 0xfac <os_aes+0x184>
     e6c:	23 2b       	or	r18, r19
     e6e:	09 f0       	breq	.+2      	; 0xe72 <os_aes+0x4a>
     e70:	b6 c0       	rjmp	.+364    	; 0xfde <os_aes+0x1b6>
     e72:	d1 2c       	mov	r13, r1
     e74:	7b c0       	rjmp	.+246    	; 0xf6c <os_aes+0x144>

// Apply RFC4493 CMAC, using AESKEY as the key. If prepend_aux is true,
// AESAUX is prepended to the message. AESAUX is used as working memory
// in any case. The CMAC result is returned in AESAUX as well.
static void os_aes_cmac(xref2u1_t buf, u2_t len, u1_t prepend_aux) {
    if (prepend_aux)
     e76:	83 fd       	sbrc	r24, 3
     e78:	12 c0       	rjmp	.+36     	; 0xe9e <os_aes+0x76>
        lmic_aes_encrypt(AESaux, AESkey);
     e7a:	68 e8       	ldi	r22, 0x88	; 136
     e7c:	74 e0       	ldi	r23, 0x04	; 4
     e7e:	88 e9       	ldi	r24, 0x98	; 152
     e80:	94 e0       	ldi	r25, 0x04	; 4
     e82:	0e 94 0a 06 	call	0xc14	; 0xc14 <lmic_aes_encrypt>
        if (len == 0) {
            // Final block, xor with K1 or K2. K1 and K2 are calculated
            // by encrypting the all-zeroes block and then applying some
            // shifts and xor on that.
            u1_t final_key[16];
            memset(final_key, 0, sizeof(final_key));
     e86:	30 e1       	ldi	r19, 0x10	; 16
     e88:	63 2e       	mov	r6, r19
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	6c 01       	movw	r12, r24
     e90:	48 ea       	ldi	r20, 0xA8	; 168
     e92:	84 2e       	mov	r8, r20
     e94:	44 e0       	ldi	r20, 0x04	; 4
     e96:	94 2e       	mov	r9, r20
            // If the final block was not complete, calculate K2 from K1
            if (need_padding) {
                msb = final_key[0] & 0x80;
                shift_left(final_key, sizeof(final_key));
                if (msb)
                    final_key[sizeof(final_key)-1] ^= 0x87;
     e98:	57 e8       	ldi	r21, 0x87	; 135
     e9a:	75 2e       	mov	r7, r21
     e9c:	47 c0       	rjmp	.+142    	; 0xf2c <os_aes+0x104>
// in any case. The CMAC result is returned in AESAUX as well.
static void os_aes_cmac(xref2u1_t buf, u2_t len, u1_t prepend_aux) {
    if (prepend_aux)
        lmic_aes_encrypt(AESaux, AESkey);
    else
        memset (AESaux, 0, 16);
     e9e:	80 e1       	ldi	r24, 0x10	; 16
     ea0:	e8 e9       	ldi	r30, 0x98	; 152
     ea2:	f4 e0       	ldi	r31, 0x04	; 4
     ea4:	df 01       	movw	r26, r30
     ea6:	1d 92       	st	X+, r1
     ea8:	8a 95       	dec	r24
     eaa:	e9 f7       	brne	.-6      	; 0xea6 <os_aes+0x7e>
     eac:	ec cf       	rjmp	.-40     	; 0xe86 <os_aes+0x5e>
                // and leave AESAUX unchanged for them.
                AESaux[i] ^= 0x80;
                need_padding = 1;
                break;
            }
            AESaux[i] ^= *buf;
     eae:	fc 01       	movw	r30, r24
     eb0:	21 91       	ld	r18, Z+
     eb2:	cf 01       	movw	r24, r30
     eb4:	3c 91       	ld	r19, X
     eb6:	23 27       	eor	r18, r19
     eb8:	2d 93       	st	X+, r18
    else
        memset (AESaux, 0, 16);

    while (len > 0) {
        u1_t need_padding = 0;
        for (u1_t i = 0; i < 16; ++i, ++buf, --len) {
     eba:	4f 5f       	subi	r20, 0xFF	; 255
     ebc:	7f 01       	movw	r14, r30
     ebe:	01 50       	subi	r16, 0x01	; 1
     ec0:	11 09       	sbc	r17, r1
     ec2:	40 31       	cpi	r20, 0x10	; 16
     ec4:	f1 f1       	breq	.+124    	; 0xf42 <os_aes+0x11a>
            if (len == 0) {
     ec6:	01 15       	cp	r16, r1
     ec8:	11 05       	cpc	r17, r1
     eca:	89 f7       	brne	.-30     	; 0xeae <os_aes+0x86>
                // The message is padded with 0x80 and then zeroes.
                // Since zeroes are no-op for xor, we can just skip them
                // and leave AESAUX unchanged for them.
                AESaux[i] ^= 0x80;
     ecc:	e4 2f       	mov	r30, r20
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	e8 56       	subi	r30, 0x68	; 104
     ed2:	fb 4f       	sbci	r31, 0xFB	; 251
     ed4:	80 81       	ld	r24, Z
     ed6:	80 58       	subi	r24, 0x80	; 128
     ed8:	80 83       	st	Z, r24
                need_padding = 1;
     eda:	01 e0       	ldi	r16, 0x01	; 1
        if (len == 0) {
            // Final block, xor with K1 or K2. K1 and K2 are calculated
            // by encrypting the all-zeroes block and then applying some
            // shifts and xor on that.
            u1_t final_key[16];
            memset(final_key, 0, sizeof(final_key));
     edc:	d6 01       	movw	r26, r12
     ede:	e6 2d       	mov	r30, r6
     ee0:	1d 92       	st	X+, r1
     ee2:	ea 95       	dec	r30
     ee4:	e9 f7       	brne	.-6      	; 0xee0 <os_aes+0xb8>
            lmic_aes_encrypt(final_key, AESkey);
     ee6:	68 e8       	ldi	r22, 0x88	; 136
     ee8:	74 e0       	ldi	r23, 0x04	; 4
     eea:	c6 01       	movw	r24, r12
     eec:	0e 94 0a 06 	call	0xc14	; 0xc14 <lmic_aes_encrypt>

            // Calculate K1
            u1_t msb = final_key[0] & 0x80;
     ef0:	19 81       	ldd	r17, Y+1	; 0x01
     ef2:	10 78       	andi	r17, 0x80	; 128
            shift_left(final_key, sizeof(final_key));
     ef4:	c6 01       	movw	r24, r12
     ef6:	0e 94 05 07 	call	0xe0a	; 0xe0a <shift_left.constprop.0>
            if (msb)
     efa:	11 23       	and	r17, r17
     efc:	19 f0       	breq	.+6      	; 0xf04 <os_aes+0xdc>
                final_key[sizeof(final_key)-1] ^= 0x87;
     efe:	88 89       	ldd	r24, Y+16	; 0x10
     f00:	87 25       	eor	r24, r7
     f02:	88 8b       	std	Y+16, r24	; 0x10

            // If the final block was not complete, calculate K2 from K1
            if (need_padding) {
     f04:	01 11       	cpse	r16, r1
     f06:	22 c0       	rjmp	.+68     	; 0xf4c <os_aes+0x124>
     f08:	f6 01       	movw	r30, r12
                    final_key[sizeof(final_key)-1] ^= 0x87;
            }

            // Xor with K1 or K2
            for (u1_t i = 0; i < sizeof(final_key); ++i)
                AESaux[i] ^= final_key[i];
     f0a:	81 91       	ld	r24, Z+
     f0c:	d5 01       	movw	r26, r10
     f0e:	9c 91       	ld	r25, X
     f10:	89 27       	eor	r24, r25
     f12:	8d 93       	st	X+, r24
     f14:	5d 01       	movw	r10, r26
                if (msb)
                    final_key[sizeof(final_key)-1] ^= 0x87;
            }

            // Xor with K1 or K2
            for (u1_t i = 0; i < sizeof(final_key); ++i)
     f16:	8a 16       	cp	r8, r26
     f18:	9b 06       	cpc	r9, r27
     f1a:	b9 f7       	brne	.-18     	; 0xf0a <os_aes+0xe2>
     f1c:	00 e0       	ldi	r16, 0x00	; 0
     f1e:	10 e0       	ldi	r17, 0x00	; 0
                AESaux[i] ^= final_key[i];
        }

        lmic_aes_encrypt(AESaux, AESkey);
     f20:	68 e8       	ldi	r22, 0x88	; 136
     f22:	74 e0       	ldi	r23, 0x04	; 4
     f24:	88 e9       	ldi	r24, 0x98	; 152
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 0a 06 	call	0xc14	; 0xc14 <lmic_aes_encrypt>
    if (prepend_aux)
        lmic_aes_encrypt(AESaux, AESkey);
    else
        memset (AESaux, 0, 16);

    while (len > 0) {
     f2c:	01 15       	cp	r16, r1
     f2e:	11 05       	cpc	r17, r1
     f30:	c1 f0       	breq	.+48     	; 0xf62 <os_aes+0x13a>
     f32:	c7 01       	movw	r24, r14
     f34:	28 e9       	ldi	r18, 0x98	; 152
     f36:	a2 2e       	mov	r10, r18
     f38:	24 e0       	ldi	r18, 0x04	; 4
     f3a:	b2 2e       	mov	r11, r18
     f3c:	d5 01       	movw	r26, r10
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	b6 cf       	rjmp	.-148    	; 0xeae <os_aes+0x86>
                break;
            }
            AESaux[i] ^= *buf;
        }

        if (len == 0) {
     f42:	01 15       	cp	r16, r1
     f44:	11 05       	cpc	r17, r1
     f46:	61 f7       	brne	.-40     	; 0xf20 <os_aes+0xf8>
        lmic_aes_encrypt(AESaux, AESkey);
    else
        memset (AESaux, 0, 16);

    while (len > 0) {
        u1_t need_padding = 0;
     f48:	00 e0       	ldi	r16, 0x00	; 0
     f4a:	c8 cf       	rjmp	.-112    	; 0xedc <os_aes+0xb4>
            if (msb)
                final_key[sizeof(final_key)-1] ^= 0x87;

            // If the final block was not complete, calculate K2 from K1
            if (need_padding) {
                msb = final_key[0] & 0x80;
     f4c:	19 81       	ldd	r17, Y+1	; 0x01
     f4e:	10 78       	andi	r17, 0x80	; 128
                shift_left(final_key, sizeof(final_key));
     f50:	c6 01       	movw	r24, r12
     f52:	0e 94 05 07 	call	0xe0a	; 0xe0a <shift_left.constprop.0>
                if (msb)
     f56:	11 23       	and	r17, r17
     f58:	b9 f2       	breq	.-82     	; 0xf08 <os_aes+0xe0>
                    final_key[sizeof(final_key)-1] ^= 0x87;
     f5a:	88 89       	ldd	r24, Y+16	; 0x10
     f5c:	87 25       	eor	r24, r7
     f5e:	88 8b       	std	Y+16, r24	; 0x10
     f60:	d3 cf       	rjmp	.-90     	; 0xf08 <os_aes+0xe0>

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
    switch (mode & ~AES_MICNOAUX) {
        case AES_MIC:
            os_aes_cmac(buf, len, /* prepend_aux */ !(mode & AES_MICNOAUX));
            return os_rmsbf4(AESaux);
     f62:	88 e9       	ldi	r24, 0x98	; 152
     f64:	94 e0       	ldi	r25, 0x04	; 4
     f66:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <os_rmsbf4>
     f6a:	3c c0       	rjmp	.+120    	; 0xfe4 <os_aes+0x1bc>

        case AES_ENC:
            // TODO: Check / handle when len is not a multiple of 16
            for (u1_t i = 0; i < len; i += 16)
     f6c:	8d 2d       	mov	r24, r13
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	80 17       	cp	r24, r16
     f72:	91 07       	cpc	r25, r17
     f74:	a0 f5       	brcc	.+104    	; 0xfde <os_aes+0x1b6>
                lmic_aes_encrypt(buf+i, AESkey);
     f76:	68 e8       	ldi	r22, 0x88	; 136
     f78:	74 e0       	ldi	r23, 0x04	; 4
     f7a:	8e 0d       	add	r24, r14
     f7c:	9f 1d       	adc	r25, r15
     f7e:	0e 94 0a 06 	call	0xc14	; 0xc14 <lmic_aes_encrypt>
            os_aes_cmac(buf, len, /* prepend_aux */ !(mode & AES_MICNOAUX));
            return os_rmsbf4(AESaux);

        case AES_ENC:
            // TODO: Check / handle when len is not a multiple of 16
            for (u1_t i = 0; i < len; i += 16)
     f82:	b0 e1       	ldi	r27, 0x10	; 16
     f84:	db 0e       	add	r13, r27
     f86:	f2 cf       	rjmp	.-28     	; 0xf6c <os_aes+0x144>
        // Encrypt the counter block with the selected key
        memcpy(ctr, AESaux, sizeof(ctr));
        lmic_aes_encrypt(ctr, AESkey);

        // Xor the payload with the resulting ciphertext
        for (u1_t i = 0; i < 16 && len > 0; i++, len--, buf++)
     f88:	01 15       	cp	r16, r1
     f8a:	11 05       	cpc	r17, r1
     f8c:	51 f0       	breq	.+20     	; 0xfa2 <os_aes+0x17a>
            *buf ^= ctr[i];
     f8e:	8d 91       	ld	r24, X+
     f90:	90 81       	ld	r25, Z
     f92:	89 27       	eor	r24, r25
     f94:	81 93       	st	Z+, r24
        // Encrypt the counter block with the selected key
        memcpy(ctr, AESaux, sizeof(ctr));
        lmic_aes_encrypt(ctr, AESkey);

        // Xor the payload with the resulting ciphertext
        for (u1_t i = 0; i < 16 && len > 0; i++, len--, buf++)
     f96:	01 50       	subi	r16, 0x01	; 1
     f98:	11 09       	sbc	r17, r1
     f9a:	7f 01       	movw	r14, r30
     f9c:	e2 17       	cp	r30, r18
     f9e:	f3 07       	cpc	r31, r19
     fa0:	99 f7       	brne	.-26     	; 0xf88 <os_aes+0x160>
            *buf ^= ctr[i];

        // Increment the block index byte
        AESaux[15]++;
     fa2:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <AESAUX+0xf>
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <AESAUX+0xf>
// Run AES-CTR using the key in AESKEY and using AESAUX as the
// counter block. The last byte of the counter block will be incremented
// for every block. The given buffer will be encrypted in place.
static void os_aes_ctr (xref2u1_t buf, u2_t len) {
    u1_t ctr[16];
    while (len) {
     fac:	01 15       	cp	r16, r1
     fae:	11 05       	cpc	r17, r1
     fb0:	b1 f0       	breq	.+44     	; 0xfde <os_aes+0x1b6>
        // Encrypt the counter block with the selected key
        memcpy(ctr, AESaux, sizeof(ctr));
     fb2:	80 e1       	ldi	r24, 0x10	; 16
     fb4:	e8 e9       	ldi	r30, 0x98	; 152
     fb6:	f4 e0       	ldi	r31, 0x04	; 4
     fb8:	de 01       	movw	r26, r28
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	01 90       	ld	r0, Z+
     fbe:	0d 92       	st	X+, r0
     fc0:	8a 95       	dec	r24
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <os_aes+0x194>
        lmic_aes_encrypt(ctr, AESkey);
     fc4:	68 e8       	ldi	r22, 0x88	; 136
     fc6:	74 e0       	ldi	r23, 0x04	; 4
     fc8:	ce 01       	movw	r24, r28
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	0e 94 0a 06 	call	0xc14	; 0xc14 <lmic_aes_encrypt>
     fd0:	de 01       	movw	r26, r28
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	f7 01       	movw	r30, r14
     fd6:	97 01       	movw	r18, r14
     fd8:	20 5f       	subi	r18, 0xF0	; 240
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	d8 cf       	rjmp	.-80     	; 0xf8e <os_aes+0x166>

        case AES_CTR:
            os_aes_ctr(buf, len);
            break;
    }
    return 0;
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	cb 01       	movw	r24, r22
}
     fe4:	60 96       	adiw	r28, 0x10	; 16
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	9f 90       	pop	r9
    1006:	8f 90       	pop	r8
    1008:	7f 90       	pop	r7
    100a:	6f 90       	pop	r6
    100c:	08 95       	ret

0000100e <hal_pin_rxtx>:
    if (lmic_pins.dio[2] != LMIC_UNUSED_PIN)
        pinMode(lmic_pins.dio[2], INPUT);
}

// val == 1  => tx 1
void hal_pin_rxtx (u1_t val) {
    100e:	68 2f       	mov	r22, r24
    if (lmic_pins.rxtx != LMIC_UNUSED_PIN)
    1010:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lmic_pins+0x1>
    1014:	8f 3f       	cpi	r24, 0xFF	; 255
    1016:	11 f0       	breq	.+4      	; 0x101c <hal_pin_rxtx+0xe>
        digitalWrite(lmic_pins.rxtx, val);
    1018:	0c 94 a8 32 	jmp	0x6550	; 0x6550 <digitalWrite>
    101c:	08 95       	ret

0000101e <hal_pin_rst>:
}

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    if (lmic_pins.rst == LMIC_UNUSED_PIN)
    1022:	c0 91 95 01 	lds	r28, 0x0195	; 0x800195 <lmic_pins+0x2>
    1026:	cf 3f       	cpi	r28, 0xFF	; 255
    1028:	99 f0       	breq	.+38     	; 0x1050 <hal_pin_rst+0x32>
        return;

    if(val == 0 || val == 1) { // drive pin
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	58 f4       	brcc	.+22     	; 0x1044 <hal_pin_rst+0x26>
    102e:	d8 2f       	mov	r29, r24
        pinMode(lmic_pins.rst, OUTPUT);
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	8c 2f       	mov	r24, r28
    1034:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
        digitalWrite(lmic_pins.rst, val);
    1038:	6d 2f       	mov	r22, r29
    103a:	8c 2f       	mov	r24, r28
    } else { // keep pin floating
        pinMode(lmic_pins.rst, INPUT);
    }
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    if (lmic_pins.rst == LMIC_UNUSED_PIN)
        return;

    if(val == 0 || val == 1) { // drive pin
        pinMode(lmic_pins.rst, OUTPUT);
        digitalWrite(lmic_pins.rst, val);
    1040:	0c 94 a8 32 	jmp	0x6550	; 0x6550 <digitalWrite>
    } else { // keep pin floating
        pinMode(lmic_pins.rst, INPUT);
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	8c 2f       	mov	r24, r28
    }
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28

    if(val == 0 || val == 1) { // drive pin
        pinMode(lmic_pins.rst, OUTPUT);
        digitalWrite(lmic_pins.rst, val);
    } else { // keep pin floating
        pinMode(lmic_pins.rst, INPUT);
    104c:	0c 94 6c 32 	jmp	0x64d8	; 0x64d8 <pinMode>
    }
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <hal_pin_nss>:

static void hal_spi_init () {
    SPI.begin();
}

void hal_pin_nss (u1_t val) {
    1056:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <_ZN8SPIClass13interruptModeE>
    if (!val)
    105a:	81 11       	cpse	r24, r1
    105c:	1c c0       	rjmp	.+56     	; 0x1096 <hal_pin_nss+0x40>
    105e:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <_ZL8settings>
    1062:	40 91 be 02 	lds	r20, 0x02BE	; 0x8002be <_ZL8settings+0x1>

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1066:	99 23       	and	r25, r25
    1068:	99 f0       	breq	.+38     	; 0x1090 <hal_pin_nss+0x3a>
      uint8_t sreg = SREG;
    106a:	3f b7       	in	r19, 0x3f	; 63
      noInterrupts();
    106c:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    106e:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <_ZN8SPIClass13interruptModeE>
    1072:	91 30       	cpi	r25, 0x01	; 1
    1074:	59 f4       	brne	.+22     	; 0x108c <hal_pin_nss+0x36>
        interruptSave = SPI_AVR_EIMSK;
    1076:	9d b3       	in	r25, 0x1d	; 29
    1078:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    107c:	2d b3       	in	r18, 0x1d	; 29
    107e:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <_ZN8SPIClass13interruptMaskE>
    1082:	90 95       	com	r25
    1084:	92 23       	and	r25, r18
    1086:	9d bb       	out	0x1d, r25	; 29
        SREG = sreg;
    1088:	3f bf       	out	0x3f, r19	; 63
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <hal_pin_nss+0x3a>
      } else
      #endif
      {
        interruptSave = sreg;
    108c:	30 93 1a 03 	sts	0x031A, r19	; 0x80031a <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1090:	5c bd       	out	0x2c, r21	; 44
    SPSR = settings.spsr;
    1092:	4d bd       	out	0x2d, r20	; 45
    1094:	0e c0       	rjmp	.+28     	; 0x10b2 <hal_pin_nss+0x5c>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    1096:	99 23       	and	r25, r25
    1098:	61 f0       	breq	.+24     	; 0x10b2 <hal_pin_nss+0x5c>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    109a:	2f b7       	in	r18, 0x3f	; 63
      #endif
      noInterrupts();
    109c:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    109e:	30 91 1c 03 	lds	r19, 0x031C	; 0x80031c <_ZN8SPIClass13interruptModeE>
    10a2:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <_ZN8SPIClass13interruptSaveE>
    10a6:	31 30       	cpi	r19, 0x01	; 1
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <hal_pin_nss+0x5a>
        SPI_AVR_EIMSK = interruptSave;
    10aa:	9d bb       	out	0x1d, r25	; 29
        SREG = sreg;
    10ac:	2f bf       	out	0x3f, r18	; 63
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <hal_pin_nss+0x5c>
      } else
      #endif
      {
        SREG = interruptSave;
    10b0:	9f bf       	out	0x3f, r25	; 63
        SPI.beginTransaction(settings);
    else
        SPI.endTransaction();

    //Serial.println(val?">>":"<<");
    digitalWrite(lmic_pins.nss, val);
    10b2:	68 2f       	mov	r22, r24
    10b4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <lmic_pins>
    10b8:	0c 94 a8 32 	jmp	0x6550	; 0x6550 <digitalWrite>

000010bc <hal_spi>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    10bc:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    10be:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    10c0:	0d b4       	in	r0, 0x2d	; 45
    10c2:	07 fe       	sbrs	r0, 7
    10c4:	fd cf       	rjmp	.-6      	; 0x10c0 <hal_spi+0x4>
    return SPDR;
    10c6:	8e b5       	in	r24, 0x2e	; 46
    Serial.print(out, HEX);
    Serial.print("<");
    Serial.println(res, HEX);
    */
    return res;
}
    10c8:	08 95       	ret

000010ca <hal_ticks>:
    // efficient on AVR (which only has 1-bit shifts).
    static uint8_t overflow = 0;

    // Scaled down timestamp. The top US_PER_OSTICK_EXPONENT bits are 0,
    // the others will be the lower bits of our return value.
    uint32_t scaled = micros() >> US_PER_OSTICK_EXPONENT;
    10ca:	0e 94 9e 31 	call	0x633c	; 0x633c <micros>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	24 e0       	ldi	r18, 0x04	; 4
    10d4:	b6 95       	lsr	r27
    10d6:	a7 95       	ror	r26
    10d8:	97 95       	ror	r25
    10da:	87 95       	ror	r24
    10dc:	2a 95       	dec	r18
    10de:	d1 f7       	brne	.-12     	; 0x10d4 <hal_ticks+0xa>
    const uint8_t mask = (1 << (7 - US_PER_OSTICK_EXPONENT));
    // Update overflow. If the overlapping bit is different
    // between overflow and msb, it is added to the stored value,
    // so the overlapping bit becomes equal again and, if it changed
    // from 1 to 0, the upper bits are incremented.
    overflow += (msb ^ overflow) & mask;
    10e0:	30 91 bb 02 	lds	r19, 0x02BB	; 0x8002bb <_ZZ9hal_ticksE8overflow>
    10e4:	23 2f       	mov	r18, r19
    10e6:	2b 27       	eor	r18, r27
    10e8:	28 70       	andi	r18, 0x08	; 8
    10ea:	23 0f       	add	r18, r19
    10ec:	20 93 bb 02 	sts	0x02BB, r18	; 0x8002bb <_ZZ9hal_ticksE8overflow>

    // Return the scaled value with the upper bits of stored added. The
    // overlapping bit will be equal and the lower bits will be 0, so
    // bitwise or is a no-op for them.
    return scaled | ((uint32_t)overflow << 24);
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	92 2b       	or	r25, r18

    // 0 leads to correct, but overly complex code (it could just return
    // micros() unmodified), 8 leaves no room for the overlapping bit.
    static_assert(US_PER_OSTICK_EXPONENT > 0 && US_PER_OSTICK_EXPONENT < 8, "Invalid US_PER_OSTICK_EXPONENT value");
}
    10f6:	08 95       	ret

000010f8 <hal_waitUntil>:
// time has already passed.
static s4_t delta_time(u4_t time) {
    return (s4_t)(time - hal_ticks());
}

void hal_waitUntil (u4_t time) {
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	6b 01       	movw	r12, r22
    1102:	7c 01       	movw	r14, r24
}

// Returns the number of ticks until time. Negative values indicate that
// time has already passed.
static s4_t delta_time(u4_t time) {
    return (s4_t)(time - hal_ticks());
    1104:	0e 94 65 08 	call	0x10ca	; 0x10ca <hal_ticks>
    1108:	c6 1a       	sub	r12, r22
    110a:	d7 0a       	sbc	r13, r23
    110c:	e8 0a       	sbc	r14, r24
    110e:	f9 0a       	sbc	r15, r25

void hal_waitUntil (u4_t time) {
    s4_t delta = delta_time(time);
    // From delayMicroseconds docs: Currently, the largest value that
    // will produce an accurate delay is 16383.
    while (delta > (16000 / US_PER_OSTICK)) {
    1110:	89 ee       	ldi	r24, 0xE9	; 233
    1112:	c8 16       	cp	r12, r24
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	d8 06       	cpc	r13, r24
    1118:	e1 04       	cpc	r14, r1
    111a:	f1 04       	cpc	r15, r1
    111c:	6c f0       	brlt	.+26     	; 0x1138 <hal_waitUntil+0x40>
        delay(16);
    111e:	60 e1       	ldi	r22, 0x10	; 16
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 c3 31 	call	0x6386	; 0x6386 <delay>
        delta -= (16000 / US_PER_OSTICK);
    112a:	88 ee       	ldi	r24, 0xE8	; 232
    112c:	c8 1a       	sub	r12, r24
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	d8 0a       	sbc	r13, r24
    1132:	e1 08       	sbc	r14, r1
    1134:	f1 08       	sbc	r15, r1

void hal_waitUntil (u4_t time) {
    s4_t delta = delta_time(time);
    // From delayMicroseconds docs: Currently, the largest value that
    // will produce an accurate delay is 16383.
    while (delta > (16000 / US_PER_OSTICK)) {
    1136:	ec cf       	rjmp	.-40     	; 0x1110 <hal_waitUntil+0x18>
        delay(16);
        delta -= (16000 / US_PER_OSTICK);
    }
    if (delta > 0)
    1138:	1c 14       	cp	r1, r12
    113a:	1d 04       	cpc	r1, r13
    113c:	1e 04       	cpc	r1, r14
    113e:	1f 04       	cpc	r1, r15
    1140:	64 f4       	brge	.+24     	; 0x115a <hal_waitUntil+0x62>
        delayMicroseconds(delta * US_PER_OSTICK);
    1142:	c6 01       	movw	r24, r12
    1144:	24 e0       	ldi	r18, 0x04	; 4
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	2a 95       	dec	r18
    114c:	e1 f7       	brne	.-8      	; 0x1146 <hal_waitUntil+0x4e>
}
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    while (delta > (16000 / US_PER_OSTICK)) {
        delay(16);
        delta -= (16000 / US_PER_OSTICK);
    }
    if (delta > 0)
        delayMicroseconds(delta * US_PER_OSTICK);
    1156:	0c 94 ff 31 	jmp	0x63fe	; 0x63fe <delayMicroseconds>
}
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	08 95       	ret

00001164 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	6b 01       	movw	r12, r22
    116e:	7c 01       	movw	r14, r24
}

// Returns the number of ticks until time. Negative values indicate that
// time has already passed.
static s4_t delta_time(u4_t time) {
    return (s4_t)(time - hal_ticks());
    1170:	0e 94 65 08 	call	0x10ca	; 0x10ca <hal_ticks>
}

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
    // No need to schedule wakeup, since we're not sleeping
    return delta_time(time) <= 0;
    1174:	c6 1a       	sub	r12, r22
    1176:	d7 0a       	sbc	r13, r23
    1178:	e8 0a       	sbc	r14, r24
    117a:	f9 0a       	sbc	r15, r25
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	1c 14       	cp	r1, r12
    1180:	1d 04       	cpc	r1, r13
    1182:	1e 04       	cpc	r1, r14
    1184:	1f 04       	cpc	r1, r15
    1186:	0c f4       	brge	.+2      	; 0x118a <hal_checkTimer+0x26>
    1188:	80 e0       	ldi	r24, 0x00	; 0
}
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	08 95       	ret

00001194 <hal_disableIRQs>:

static uint8_t irqlevel = 0;

void hal_disableIRQs () {
    noInterrupts();
    1194:	f8 94       	cli
    irqlevel++;
    1196:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <_ZL8irqlevel>
    119a:	8f 5f       	subi	r24, 0xFF	; 255
    119c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <_ZL8irqlevel>
    11a0:	08 95       	ret

000011a2 <hal_enableIRQs>:
}

void hal_enableIRQs () {
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    if(--irqlevel == 0) {
    11b2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <_ZL8irqlevel>
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <_ZL8irqlevel>
    11bc:	81 11       	cpse	r24, r1
    11be:	21 c0       	rjmp	.+66     	; 0x1202 <hal_enableIRQs+0x60>
        interrupts();
    11c0:	78 94       	sei
    11c2:	86 e9       	ldi	r24, 0x96	; 150
    11c4:	c8 2e       	mov	r12, r24
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	d8 2e       	mov	r13, r24
    11ca:	cf eb       	ldi	r28, 0xBF	; 191
    11cc:	d2 e0       	ldi	r29, 0x02	; 2

static bool dio_states[NUM_DIO] = {0};

static void hal_io_check() {
    uint8_t i;
    for (i = 0; i < NUM_DIO; ++i) {
    11ce:	10 e0       	ldi	r17, 0x00	; 0
        if (lmic_pins.dio[i] == LMIC_UNUSED_PIN)
            continue;

        if (dio_states[i] != digitalRead(lmic_pins.dio[i])) {
            dio_states[i] = !dio_states[i];
    11d0:	01 e0       	ldi	r16, 0x01	; 1
static bool dio_states[NUM_DIO] = {0};

static void hal_io_check() {
    uint8_t i;
    for (i = 0; i < NUM_DIO; ++i) {
        if (lmic_pins.dio[i] == LMIC_UNUSED_PIN)
    11d2:	f6 01       	movw	r30, r12
    11d4:	81 91       	ld	r24, Z+
    11d6:	6f 01       	movw	r12, r30
    11d8:	8f 3f       	cpi	r24, 0xFF	; 255
    11da:	79 f0       	breq	.+30     	; 0x11fa <hal_enableIRQs+0x58>
            continue;

        if (dio_states[i] != digitalRead(lmic_pins.dio[i])) {
    11dc:	e8 80       	ld	r14, Y
    11de:	f1 2c       	mov	r15, r1
    11e0:	0e 94 d7 32 	call	0x65ae	; 0x65ae <digitalRead>
    11e4:	e8 16       	cp	r14, r24
    11e6:	f9 06       	cpc	r15, r25
    11e8:	41 f0       	breq	.+16     	; 0x11fa <hal_enableIRQs+0x58>
            dio_states[i] = !dio_states[i];
    11ea:	88 81       	ld	r24, Y
    11ec:	80 27       	eor	r24, r16
    11ee:	88 83       	st	Y, r24
            if (dio_states[i])
    11f0:	88 23       	and	r24, r24
    11f2:	19 f0       	breq	.+6      	; 0x11fa <hal_enableIRQs+0x58>
                radio_irq_handler(i);
    11f4:	81 2f       	mov	r24, r17
    11f6:	0e 94 b0 22 	call	0x4560	; 0x4560 <radio_irq_handler>

static bool dio_states[NUM_DIO] = {0};

static void hal_io_check() {
    uint8_t i;
    for (i = 0; i < NUM_DIO; ++i) {
    11fa:	1f 5f       	subi	r17, 0xFF	; 255
    11fc:	21 96       	adiw	r28, 0x01	; 1
    11fe:	13 30       	cpi	r17, 0x03	; 3
    1200:	41 f7       	brne	.-48     	; 0x11d2 <hal_enableIRQs+0x30>
        //
        // As an additional bonus, this prevents the can of worms that
        // we would otherwise get for running SPI transfers inside ISRs
        hal_io_check();
    }
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	08 95       	ret

00001214 <hal_sleep>:

void hal_sleep () {
    1214:	08 95       	ret

00001216 <_GLOBAL__sub_I_hal_pin_rxtx>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1216:	ed eb       	ldi	r30, 0xBD	; 189
    1218:	f2 e0       	ldi	r31, 0x02	; 2
    121a:	80 e5       	ldi	r24, 0x50	; 80
    121c:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	81 83       	std	Z+1, r24	; 0x01
    1222:	08 95       	ret

00001224 <hal_failed>:
    // printf support
    hal_printf_init();
#endif
}

void hal_failed (const char *file, u2_t line) {
    1224:	8c 01       	movw	r16, r24
    1226:	eb 01       	movw	r28, r22
#if defined(LMIC_FAILURE_TO)
    LMIC_FAILURE_TO.println("FAILURE ");
    1228:	69 e9       	ldi	r22, 0x99	; 153
    122a:	71 e0       	ldi	r23, 0x01	; 1
    122c:	82 ee       	ldi	r24, 0xE2	; 226
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	0e 94 73 30 	call	0x60e6	; 0x60e6 <_ZN5Print7printlnEPKc>
    LMIC_FAILURE_TO.print(file);
    1234:	b8 01       	movw	r22, r16
    1236:	82 ee       	ldi	r24, 0xE2	; 226
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	0e 94 42 30 	call	0x6084	; 0x6084 <_ZN5Print5printEPKc>
    LMIC_FAILURE_TO.print(':');
    123e:	6a e3       	ldi	r22, 0x3A	; 58
    1240:	82 ee       	ldi	r24, 0xE2	; 226
    1242:	93 e0       	ldi	r25, 0x03	; 3
    1244:	0e 94 44 30 	call	0x6088	; 0x6088 <_ZN5Print5printEc>
    LMIC_FAILURE_TO.println(line);
    1248:	4a e0       	ldi	r20, 0x0A	; 10
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	be 01       	movw	r22, r28
    124e:	82 ee       	ldi	r24, 0xE2	; 226
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <_ZN5Print7printlnEji>
    LMIC_FAILURE_TO.flush();
    1256:	82 ee       	ldi	r24, 0xE2	; 226
    1258:	93 e0       	ldi	r25, 0x03	; 3
    125a:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <_ZN14HardwareSerial5flushEv>
#endif
    hal_disableIRQs();
    125e:	0e 94 ca 08 	call	0x1194	; 0x1194 <hal_disableIRQs>
    1262:	ff cf       	rjmp	.-2      	; 0x1262 <hal_failed+0x3e>

00001264 <hal_init>:
    setbuf(stdout, nullptr);
}
#endif // !defined(__AVR__)
#endif // defined(LMIC_PRINTF_TO)

void hal_init () {
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
    // NSS and DIO0 are required, DIO1 is required for LoRa, DIO2 for FSK
    ASSERT(lmic_pins.nss != LMIC_UNUSED_PIN);
    126a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <lmic_pins>
    126e:	8f 3f       	cpi	r24, 0xFF	; 255
    1270:	19 f4       	brne	.+6      	; 0x1278 <hal_init+0x14>
    1272:	68 e1       	ldi	r22, 0x18	; 24
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	06 c0       	rjmp	.+12     	; 0x1284 <hal_init+0x20>
    ASSERT(lmic_pins.dio[0] != LMIC_UNUSED_PIN);
    1278:	10 91 96 01 	lds	r17, 0x0196	; 0x800196 <lmic_pins+0x3>
    127c:	1f 3f       	cpi	r17, 0xFF	; 255
    127e:	31 f4       	brne	.+12     	; 0x128c <hal_init+0x28>
    1280:	69 e1       	ldi	r22, 0x19	; 25
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	82 ea       	ldi	r24, 0xA2	; 162
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    ASSERT(lmic_pins.dio[1] != LMIC_UNUSED_PIN || lmic_pins.dio[2] != LMIC_UNUSED_PIN);
    128c:	d0 91 97 01 	lds	r29, 0x0197	; 0x800197 <lmic_pins+0x4>
    1290:	c0 91 98 01 	lds	r28, 0x0198	; 0x800198 <lmic_pins+0x5>
    1294:	df 3f       	cpi	r29, 0xFF	; 255
    1296:	29 f4       	brne	.+10     	; 0x12a2 <hal_init+0x3e>
    1298:	cf 3f       	cpi	r28, 0xFF	; 255
    129a:	19 f4       	brne	.+6      	; 0x12a2 <hal_init+0x3e>
    129c:	6a e1       	ldi	r22, 0x1A	; 26
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	f1 cf       	rjmp	.-30     	; 0x1284 <hal_init+0x20>

    pinMode(lmic_pins.nss, OUTPUT);
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    if (lmic_pins.rxtx != LMIC_UNUSED_PIN)
    12a8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lmic_pins+0x1>
    12ac:	8f 3f       	cpi	r24, 0xFF	; 255
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <hal_init+0x52>
        pinMode(lmic_pins.rxtx, OUTPUT);
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    if (lmic_pins.rst != LMIC_UNUSED_PIN)
    12b6:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <lmic_pins+0x2>
    12ba:	8f 3f       	cpi	r24, 0xFF	; 255
    12bc:	19 f0       	breq	.+6      	; 0x12c4 <hal_init+0x60>
        pinMode(lmic_pins.rst, OUTPUT);
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>

    pinMode(lmic_pins.dio[0], INPUT);
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	81 2f       	mov	r24, r17
    12c8:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    if (lmic_pins.dio[1] != LMIC_UNUSED_PIN)
    12cc:	df 3f       	cpi	r29, 0xFF	; 255
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <hal_init+0x74>
        pinMode(lmic_pins.dio[1], INPUT);
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	8d 2f       	mov	r24, r29
    12d4:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    if (lmic_pins.dio[2] != LMIC_UNUSED_PIN)
    12d8:	cf 3f       	cpi	r28, 0xFF	; 255
    12da:	21 f0       	breq	.+8      	; 0x12e4 <hal_init+0x80>
        pinMode(lmic_pins.dio[2], INPUT);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	8c 2f       	mov	r24, r28
    12e0:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    hal_time_init();
#if defined(LMIC_PRINTF_TO)
    // printf support
    hal_printf_init();
#endif
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
// SPI

static const SPISettings settings(10E6, MSBFIRST, SPI_MODE0);

static void hal_spi_init () {
    SPI.begin();
    12ea:	0c 94 65 28 	jmp	0x50ca	; 0x50ca <_ZN8SPIClass5beginEv>

000012ee <setBcnRxParams>:


// Check if other networks are around.
void LMIC_tryRejoin (void) {
    LMIC.opmode |= OP_REJOIN;
    engineUpdate();
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	c8 ea       	ldi	r28, 0xA8	; 168
    12f4:	d4 e0       	ldi	r29, 0x04	; 4
    12f6:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    12fa:	e0 91 2b 06 	lds	r30, 0x062B	; 0x80062b <LMIC+0x183>
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	e8 9f       	mul	r30, r24
    1302:	f0 01       	movw	r30, r0
    1304:	11 24       	eor	r1, r1
    1306:	e8 55       	subi	r30, 0x58	; 88
    1308:	fb 4f       	sbci	r31, 0xFB	; 251
    130a:	83 ad       	ldd	r24, Z+59	; 0x3b
    130c:	94 ad       	ldd	r25, Z+60	; 0x3c
    130e:	a5 ad       	ldd	r26, Z+61	; 0x3d
    1310:	b6 ad       	ldd	r27, Z+62	; 0x3e
    1312:	8c 7f       	andi	r24, 0xFC	; 252
    1314:	88 87       	std	Y+8, r24	; 0x08
    1316:	99 87       	std	Y+9, r25	; 0x09
    1318:	aa 87       	std	Y+10, r26	; 0x0a
    131a:	bb 87       	std	Y+11, r27	; 0x0b
    131c:	83 e8       	ldi	r24, 0x83	; 131
    131e:	91 e1       	ldi	r25, 0x11	; 17
    1320:	9f 87       	std	Y+15, r25	; 0x0f
    1322:	8e 87       	std	Y+14, r24	; 0x0e
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <stateJustJoined>:
    132a:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <LMIC+0x117>
    132e:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <LMIC+0x118>
    1332:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <LMIC+0x119>
    1336:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <LMIC+0x11a>
    133a:	10 92 bb 05 	sts	0x05BB, r1	; 0x8005bb <LMIC+0x113>
    133e:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <LMIC+0x114>
    1342:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <LMIC+0x115>
    1346:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <LMIC+0x116>
    134a:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <LMIC+0xad>
    134e:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <LMIC+0x121>
    1352:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <LMIC+0x120>
    1356:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <LMIC+0x11d>
    135a:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <LMIC+0x11b>
    135e:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <LMIC+0x125>
    1362:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <LMIC+0x12b>
    1366:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <LMIC+0x123>
    136a:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <LMIC+0x124>
    136e:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <LMIC+0x12e>
    1372:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <LMIC+0xa9>
    1376:	84 ef       	ldi	r24, 0xF4	; 244
    1378:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <LMIC+0x11c>
    137c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <LMIC+0x126>
    1380:	88 e0       	ldi	r24, 0x08	; 8
    1382:	96 ee       	ldi	r25, 0xE6	; 230
    1384:	a3 ed       	ldi	r26, 0xD3	; 211
    1386:	b3 e3       	ldi	r27, 0x33	; 51
    1388:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <LMIC+0x127>
    138c:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <LMIC+0x128>
    1390:	a0 93 d1 05 	sts	0x05D1, r26	; 0x8005d1 <LMIC+0x129>
    1394:	b0 93 d2 05 	sts	0x05D2, r27	; 0x8005d2 <LMIC+0x12a>
    1398:	25 e0       	ldi	r18, 0x05	; 5
    139a:	20 93 2b 06 	sts	0x062B, r18	; 0x80062b <LMIC+0x183>
    139e:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <LMIC+0x13b>
    13a2:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <LMIC+0x13c>
    13a6:	a0 93 e5 05 	sts	0x05E5, r26	; 0x8005e5 <LMIC+0x13d>
    13aa:	b0 93 e6 05 	sts	0x05E6, r27	; 0x8005e6 <LMIC+0x13e>
    13ae:	83 e0       	ldi	r24, 0x03	; 3
    13b0:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <LMIC+0x12f>
    13b4:	08 95       	ret

000013b6 <calcRxWindow>:
    13b6:	4f 92       	push	r4
    13b8:	5f 92       	push	r5
    13ba:	6f 92       	push	r6
    13bc:	7f 92       	push	r7
    13be:	8f 92       	push	r8
    13c0:	9f 92       	push	r9
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	c6 2f       	mov	r28, r22
    13d4:	a0 91 56 05 	lds	r26, 0x0556	; 0x800556 <LMIC+0xae>
    13d8:	b0 91 57 05 	lds	r27, 0x0557	; 0x800557 <LMIC+0xaf>
    13dc:	c0 90 58 05 	lds	r12, 0x0558	; 0x800558 <LMIC+0xb0>
    13e0:	d0 90 59 05 	lds	r13, 0x0559	; 0x800559 <LMIC+0xb1>
    13e4:	81 11       	cpse	r24, r1
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <calcRxWindow+0x44>
    13e8:	4d 01       	movw	r8, r26
    13ea:	bb 0f       	add	r27, r27
    13ec:	aa 08       	sbc	r10, r10
    13ee:	bb 08       	sbc	r11, r11
    13f0:	0d 2c       	mov	r0, r13
    13f2:	00 0c       	add	r0, r0
    13f4:	ee 08       	sbc	r14, r14
    13f6:	ff 08       	sbc	r15, r15
    13f8:	1a c0       	rjmp	.+52     	; 0x142e <calcRxWindow+0x78>
    13fa:	48 2f       	mov	r20, r24
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	9a 01       	movw	r18, r20
    1400:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__usmulhisi3>
    1404:	4b 01       	movw	r8, r22
    1406:	5c 01       	movw	r10, r24
    1408:	87 e0       	ldi	r24, 0x07	; 7
    140a:	b5 94       	asr	r11
    140c:	a7 94       	ror	r10
    140e:	97 94       	ror	r9
    1410:	87 94       	ror	r8
    1412:	8a 95       	dec	r24
    1414:	d1 f7       	brne	.-12     	; 0x140a <calcRxWindow+0x54>
    1416:	d6 01       	movw	r26, r12
    1418:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__usmulhisi3>
    141c:	6b 01       	movw	r12, r22
    141e:	7c 01       	movw	r14, r24
    1420:	97 e0       	ldi	r25, 0x07	; 7
    1422:	f5 94       	asr	r15
    1424:	e7 94       	ror	r14
    1426:	d7 94       	ror	r13
    1428:	c7 94       	ror	r12
    142a:	9a 95       	dec	r25
    142c:	d1 f7       	brne	.-12     	; 0x1422 <calcRxWindow+0x6c>
    142e:	a0 91 5a 05 	lds	r26, 0x055A	; 0x80055a <LMIC+0xb2>
    1432:	b0 91 5b 05 	lds	r27, 0x055B	; 0x80055b <LMIC+0xb3>
    1436:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <LMIC+0x12c>
    143a:	84 e0       	ldi	r24, 0x04	; 4
    143c:	c8 9f       	mul	r28, r24
    143e:	e0 01       	movw	r28, r0
    1440:	11 24       	eor	r1, r1
    1442:	cf 5c       	subi	r28, 0xCF	; 207
    1444:	db 4f       	sbci	r29, 0xFB	; 251
    1446:	fe 01       	movw	r30, r28
    1448:	45 90       	lpm	r4, Z+
    144a:	55 90       	lpm	r5, Z+
    144c:	65 90       	lpm	r6, Z+
    144e:	74 90       	lpm	r7, Z
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__usmulhisi3>
    1456:	6c 0d       	add	r22, r12
    1458:	7d 1d       	adc	r23, r13
    145a:	8e 1d       	adc	r24, r14
    145c:	9f 1d       	adc	r25, r15
    145e:	a3 01       	movw	r20, r6
    1460:	92 01       	movw	r18, r4
    1462:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <__divmodsi4>
    1466:	2b 5f       	subi	r18, 0xFB	; 251
    1468:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <LMIC+0x10>
    146c:	fe 01       	movw	r30, r28
    146e:	25 91       	lpm	r18, Z+
    1470:	35 91       	lpm	r19, Z+
    1472:	45 91       	lpm	r20, Z+
    1474:	54 91       	lpm	r21, Z
    1476:	ad ef       	ldi	r26, 0xFD	; 253
    1478:	bf ef       	ldi	r27, 0xFF	; 255
    147a:	0e 94 57 35 	call	0x6aae	; 0x6aae <__mulohisi3>
    147e:	68 0d       	add	r22, r8
    1480:	79 1d       	adc	r23, r9
    1482:	8a 1d       	adc	r24, r10
    1484:	9b 1d       	adc	r25, r11
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	9f 90       	pop	r9
    1498:	8f 90       	pop	r8
    149a:	7f 90       	pop	r7
    149c:	6f 90       	pop	r6
    149e:	5f 90       	pop	r5
    14a0:	4f 90       	pop	r4
    14a2:	08 95       	ret

000014a4 <rndDelay>:
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	d8 2f       	mov	r29, r24
    14b2:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    14b6:	c8 2f       	mov	r28, r24
    14b8:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    14bc:	2c 2f       	mov	r18, r28
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	32 2f       	mov	r19, r18
    14c2:	22 27       	eor	r18, r18
    14c4:	a9 01       	movw	r20, r18
    14c6:	48 2b       	or	r20, r24
    14c8:	ca 01       	movw	r24, r20
    14ca:	6c 01       	movw	r12, r24
    14cc:	85 32       	cpi	r24, 0x25	; 37
    14ce:	54 ef       	ldi	r21, 0xF4	; 244
    14d0:	95 07       	cpc	r25, r21
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <rndDelay+0x38>
    14d4:	24 e2       	ldi	r18, 0x24	; 36
    14d6:	c2 1a       	sub	r12, r18
    14d8:	24 ef       	ldi	r18, 0xF4	; 244
    14da:	d2 0a       	sbc	r13, r18
    14dc:	e1 2c       	mov	r14, r1
    14de:	f1 2c       	mov	r15, r1
    14e0:	dd 23       	and	r29, r29
    14e2:	71 f0       	breq	.+28     	; 0x1500 <rndDelay+0x5c>
    14e4:	99 27       	eor	r25, r25
    14e6:	6d 2f       	mov	r22, r29
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <__divmodhi4>
    14ee:	24 e2       	ldi	r18, 0x24	; 36
    14f0:	34 ef       	ldi	r19, 0xF4	; 244
    14f2:	dc 01       	movw	r26, r24
    14f4:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__usmulhisi3>
    14f8:	c6 0e       	add	r12, r22
    14fa:	d7 1e       	adc	r13, r23
    14fc:	e8 1e       	adc	r14, r24
    14fe:	f9 1e       	adc	r15, r25
    1500:	c7 01       	movw	r24, r14
    1502:	b6 01       	movw	r22, r12
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	08 95       	ret

00001512 <txDelay>:
    1512:	cf 92       	push	r12
    1514:	df 92       	push	r13
    1516:	ef 92       	push	r14
    1518:	ff 92       	push	r15
    151a:	6b 01       	movw	r12, r22
    151c:	7c 01       	movw	r14, r24
    151e:	84 2f       	mov	r24, r20
    1520:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <rndDelay>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	8c 0d       	add	r24, r12
    152a:	9d 1d       	adc	r25, r13
    152c:	ae 1d       	adc	r26, r14
    152e:	bf 1d       	adc	r27, r15
    1530:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <LMIC+0x9e>
    1534:	22 23       	and	r18, r18
    1536:	99 f0       	breq	.+38     	; 0x155e <txDelay+0x4c>
    1538:	c0 90 47 05 	lds	r12, 0x0547	; 0x800547 <LMIC+0x9f>
    153c:	d0 90 48 05 	lds	r13, 0x0548	; 0x800548 <LMIC+0xa0>
    1540:	e0 90 49 05 	lds	r14, 0x0549	; 0x800549 <LMIC+0xa1>
    1544:	f0 90 4a 05 	lds	r15, 0x054A	; 0x80054a <LMIC+0xa2>
    1548:	9c 01       	movw	r18, r24
    154a:	ad 01       	movw	r20, r26
    154c:	2c 19       	sub	r18, r12
    154e:	3d 09       	sbc	r19, r13
    1550:	4e 09       	sbc	r20, r14
    1552:	5f 09       	sbc	r21, r15
    1554:	12 16       	cp	r1, r18
    1556:	13 06       	cpc	r1, r19
    1558:	14 06       	cpc	r1, r20
    155a:	15 06       	cpc	r1, r21
    155c:	8c f4       	brge	.+34     	; 0x1580 <txDelay+0x6e>
    155e:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <LMIC+0x9f>
    1562:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <LMIC+0xa0>
    1566:	a0 93 49 05 	sts	0x0549, r26	; 0x800549 <LMIC+0xa1>
    156a:	b0 93 4a 05 	sts	0x054A, r27	; 0x80054a <LMIC+0xa2>
    156e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    1572:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    1576:	91 60       	ori	r25, 0x01	; 1
    1578:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    157c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	08 95       	ret

0000158a <schedRx12>:
    158a:	4f 92       	push	r4
    158c:	5f 92       	push	r5
    158e:	6f 92       	push	r6
    1590:	7f 92       	push	r7
    1592:	8f 92       	push	r8
    1594:	9f 92       	push	r9
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
    15ae:	ea 01       	movw	r28, r20
    15b0:	04 e0       	ldi	r16, 0x04	; 4
    15b2:	20 9f       	mul	r18, r16
    15b4:	f0 01       	movw	r30, r0
    15b6:	11 24       	eor	r1, r1
    15b8:	ef 5c       	subi	r30, 0xCF	; 207
    15ba:	fb 4f       	sbci	r31, 0xFB	; 251
    15bc:	85 90       	lpm	r8, Z+
    15be:	95 90       	lpm	r9, Z+
    15c0:	a5 90       	lpm	r10, Z+
    15c2:	b4 90       	lpm	r11, Z
    15c4:	85 e0       	ldi	r24, 0x05	; 5
    15c6:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <LMIC+0x10>
    15ca:	60 91 5c 05 	lds	r22, 0x055C	; 0x80055c <LMIC+0xb4>
    15ce:	70 91 5d 05 	lds	r23, 0x055D	; 0x80055d <LMIC+0xb5>
    15d2:	61 15       	cp	r22, r1
    15d4:	71 05       	cpc	r23, r1
    15d6:	09 f4       	brne	.+2      	; 0x15da <schedRx12+0x50>
    15d8:	47 c0       	rjmp	.+142    	; 0x1668 <schedRx12+0xde>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a7 01       	movw	r20, r14
    15e0:	96 01       	movw	r18, r12
    15e2:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <__mulsidi3>
    15e6:	72 2e       	mov	r7, r18
    15e8:	03 2f       	mov	r16, r19
    15ea:	14 2f       	mov	r17, r20
    15ec:	b5 2f       	mov	r27, r21
    15ee:	f6 2f       	mov	r31, r22
    15f0:	e7 2f       	mov	r30, r23
    15f2:	58 2e       	mov	r5, r24
    15f4:	69 2e       	mov	r6, r25
    15f6:	a0 e0       	ldi	r26, 0x00	; 0
    15f8:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <__cmpdi2_s8>
    15fc:	84 f4       	brge	.+32     	; 0x161e <schedRx12+0x94>
    15fe:	21 50       	subi	r18, 0x01	; 1
    1600:	31 09       	sbc	r19, r1
    1602:	4f 4f       	sbci	r20, 0xFF	; 255
    1604:	5f 4f       	sbci	r21, 0xFF	; 255
    1606:	6f 4f       	sbci	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	72 2e       	mov	r7, r18
    1610:	03 2f       	mov	r16, r19
    1612:	14 2f       	mov	r17, r20
    1614:	b5 2f       	mov	r27, r21
    1616:	f6 2f       	mov	r31, r22
    1618:	e7 2f       	mov	r30, r23
    161a:	58 2e       	mov	r5, r24
    161c:	69 2e       	mov	r6, r25
    161e:	27 2d       	mov	r18, r7
    1620:	30 2f       	mov	r19, r16
    1622:	41 2f       	mov	r20, r17
    1624:	5b 2f       	mov	r21, r27
    1626:	6f 2f       	mov	r22, r31
    1628:	7e 2f       	mov	r23, r30
    162a:	85 2d       	mov	r24, r5
    162c:	96 2d       	mov	r25, r6
    162e:	00 e1       	ldi	r16, 0x10	; 16
    1630:	0e 94 86 36 	call	0x6d0c	; 0x6d0c <__ashrdi3>
    1634:	29 01       	movw	r4, r18
    1636:	3a 01       	movw	r6, r20
    1638:	aa ef       	ldi	r26, 0xFA	; 250
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	a5 01       	movw	r20, r10
    163e:	94 01       	movw	r18, r8
    1640:	0e 94 49 35 	call	0x6a92	; 0x6a92 <__muluhisi3>
    1644:	64 15       	cp	r22, r4
    1646:	75 05       	cpc	r23, r5
    1648:	86 05       	cpc	r24, r6
    164a:	97 05       	cpc	r25, r7
    164c:	24 f4       	brge	.+8      	; 0x1656 <schedRx12+0xcc>
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <LMIC+0x10>
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <schedRx12+0xde>
    1656:	c3 01       	movw	r24, r6
    1658:	b2 01       	movw	r22, r4
    165a:	a5 01       	movw	r20, r10
    165c:	94 01       	movw	r18, r8
    165e:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <__divmodsi4>
    1662:	2b 5f       	subi	r18, 0xFB	; 251
    1664:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <LMIC+0x10>
    1668:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <LMIC>
    166c:	50 91 a9 04 	lds	r21, 0x04A9	; 0x8004a9 <LMIC+0x1>
    1670:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <LMIC+0x2>
    1674:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <LMIC+0x3>
    1678:	c4 0e       	add	r12, r20
    167a:	d5 1e       	adc	r13, r21
    167c:	e6 1e       	adc	r14, r22
    167e:	f7 1e       	adc	r15, r23
    1680:	d5 01       	movw	r26, r10
    1682:	c4 01       	movw	r24, r8
    1684:	23 e0       	ldi	r18, 0x03	; 3
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	aa 1f       	adc	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	2a 95       	dec	r18
    1690:	d1 f7       	brne	.-12     	; 0x1686 <schedRx12+0xfc>
    1692:	c8 0e       	add	r12, r24
    1694:	d9 1e       	adc	r13, r25
    1696:	ea 1e       	adc	r14, r26
    1698:	fb 1e       	adc	r15, r27
    169a:	a0 91 b8 04 	lds	r26, 0x04B8	; 0x8004b8 <LMIC+0x10>
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	a5 01       	movw	r20, r10
    16a2:	94 01       	movw	r18, r8
    16a4:	0e 94 49 35 	call	0x6a92	; 0x6a92 <__muluhisi3>
    16a8:	97 01       	movw	r18, r14
    16aa:	86 01       	movw	r16, r12
    16ac:	06 1b       	sub	r16, r22
    16ae:	17 0b       	sbc	r17, r23
    16b0:	28 0b       	sbc	r18, r24
    16b2:	39 0b       	sbc	r19, r25
    16b4:	b9 01       	movw	r22, r18
    16b6:	a8 01       	movw	r20, r16
    16b8:	00 93 ac 04 	sts	0x04AC, r16	; 0x8004ac <LMIC+0x4>
    16bc:	10 93 ad 04 	sts	0x04AD, r17	; 0x8004ad <LMIC+0x5>
    16c0:	20 93 ae 04 	sts	0x04AE, r18	; 0x8004ae <LMIC+0x6>
    16c4:	30 93 af 04 	sts	0x04AF, r19	; 0x8004af <LMIC+0x7>
    16c8:	4d 57       	subi	r20, 0x7D	; 125
    16ca:	51 09       	sbc	r21, r1
    16cc:	61 09       	sbc	r22, r1
    16ce:	71 09       	sbc	r23, r1
    16d0:	9e 01       	movw	r18, r28
    16d2:	8b eb       	ldi	r24, 0xBB	; 187
    16d4:	94 e0       	ldi	r25, 0x04	; 4
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	bf 90       	pop	r11
    16e8:	af 90       	pop	r10
    16ea:	9f 90       	pop	r9
    16ec:	8f 90       	pop	r8
    16ee:	7f 90       	pop	r7
    16f0:	6f 90       	pop	r6
    16f2:	5f 90       	pop	r5
    16f4:	4f 90       	pop	r4
    16f6:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <os_setTimedCallback>

000016fa <startRxBcn>:
    16fa:	81 e7       	ldi	r24, 0x71	; 113
    16fc:	9a e1       	ldi	r25, 0x1A	; 26
    16fe:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <LMIC+0x1a>
    1702:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <LMIC+0x19>
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <os_radio>

0000170c <startRxPing>:
    170c:	86 e6       	ldi	r24, 0x66	; 102
    170e:	9d e1       	ldi	r25, 0x1D	; 29
    1710:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <LMIC+0x1a>
    1714:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <LMIC+0x19>
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <os_radio>

0000171e <setupRx1>:
    171e:	e8 ea       	ldi	r30, 0xA8	; 168
    1720:	f4 e0       	ldi	r31, 0x04	; 4
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	20 93 e8 05 	sts	0x05E8, r18	; 0x8005e8 <LMIC+0x140>
    1728:	26 85       	ldd	r18, Z+14	; 0x0e
    172a:	37 85       	ldd	r19, Z+15	; 0x0f
    172c:	20 68       	ori	r18, 0x80	; 128
    172e:	37 87       	std	Z+15, r19	; 0x0f
    1730:	26 87       	std	Z+14, r18	; 0x0e
    1732:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    1736:	92 8f       	std	Z+26, r25	; 0x1a
    1738:	81 8f       	std	Z+25, r24	; 0x19
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <os_radio>

00001740 <setupRx1DnData>:
    1740:	85 e2       	ldi	r24, 0x25	; 37
    1742:	9e e1       	ldi	r25, 0x1E	; 30
    1744:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <setupRx1>

00001748 <setupRx1Jacc>:
    1748:	83 e4       	ldi	r24, 0x43	; 67
    174a:	9d e1       	ldi	r25, 0x1D	; 29
    174c:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <setupRx1>

00001750 <setupRx2>:
    1750:	a8 ea       	ldi	r26, 0xA8	; 168
    1752:	b4 e0       	ldi	r27, 0x04	; 4
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <LMIC+0x140>
    175a:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <LMIC+0x126>
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	ef 57       	subi	r30, 0x7F	; 127
    1762:	fb 4f       	sbci	r31, 0xFB	; 251
    1764:	e4 91       	lpm	r30, Z
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	ef 77       	andi	r30, 0x7F	; 127
    176a:	e0 68       	ori	r30, 0x80	; 128
    176c:	1f 96       	adiw	r26, 0x0f	; 15
    176e:	fc 93       	st	X, r31
    1770:	ee 93       	st	-X, r30
    1772:	1e 97       	sbiw	r26, 0x0e	; 14
    1774:	40 91 cf 05 	lds	r20, 0x05CF	; 0x8005cf <LMIC+0x127>
    1778:	50 91 d0 05 	lds	r21, 0x05D0	; 0x8005d0 <LMIC+0x128>
    177c:	60 91 d1 05 	lds	r22, 0x05D1	; 0x8005d1 <LMIC+0x129>
    1780:	70 91 d2 05 	lds	r23, 0x05D2	; 0x8005d2 <LMIC+0x12a>
    1784:	18 96       	adiw	r26, 0x08	; 8
    1786:	4d 93       	st	X+, r20
    1788:	5d 93       	st	X+, r21
    178a:	6d 93       	st	X+, r22
    178c:	7c 93       	st	X, r23
    178e:	1b 97       	sbiw	r26, 0x0b	; 11
    1790:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    1794:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <os_radio>

00001798 <setupRx2DnData>:
    1798:	8c e3       	ldi	r24, 0x3C	; 60
    179a:	9e e1       	ldi	r25, 0x1E	; 30
    179c:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <LMIC+0x1a>
    17a0:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <LMIC+0x19>
    17a4:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <setupRx2>

000017a8 <setupRx2Jacc>:
    17a8:	86 e5       	ldi	r24, 0x56	; 86
    17aa:	9d e1       	ldi	r25, 0x1D	; 29
    17ac:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <LMIC+0x1a>
    17b0:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <LMIC+0x19>
    17b4:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <setupRx2>

000017b8 <startScan>:
    17b8:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    17bc:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <LMIC+0x110>
    17c0:	a0 91 b9 05 	lds	r26, 0x05B9	; 0x8005b9 <LMIC+0x111>
    17c4:	b0 91 ba 05 	lds	r27, 0x05BA	; 0x8005ba <LMIC+0x112>
    17c8:	89 2b       	or	r24, r25
    17ca:	8a 2b       	or	r24, r26
    17cc:	8b 2b       	or	r24, r27
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <startScan+0x20>
    17d0:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    17d4:	82 ff       	sbrs	r24, 2
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <startScan+0x2c>
    17d8:	63 ef       	ldi	r22, 0xF3	; 243
    17da:	76 e0       	ldi	r23, 0x06	; 6
    17dc:	87 ed       	ldi	r24, 0xD7	; 215
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    17e4:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    17e8:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    17ec:	86 fd       	sbrc	r24, 6
    17ee:	2f c0       	rjmp	.+94     	; 0x184e <startScan+0x96>
    17f0:	10 92 37 06 	sts	0x0637, r1	; 0x800637 <LMIC+0x18f>
    17f4:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <LMIC+0x11b>
    17f8:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <LMIC+0x13f>
    17fc:	8e 77       	andi	r24, 0x7E	; 126
    17fe:	81 60       	ori	r24, 0x01	; 1
    1800:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    1804:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    1808:	0e 94 77 09 	call	0x12ee	; 0x12ee <setBcnRxParams>
    180c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    1810:	ab 01       	movw	r20, r22
    1812:	bc 01       	movw	r22, r24
    1814:	4c 5d       	subi	r20, 0xDC	; 220
    1816:	59 4f       	sbci	r21, 0xF9	; 249
    1818:	64 48       	sbci	r22, 0x84	; 132
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	40 93 31 06 	sts	0x0631, r20	; 0x800631 <LMIC+0x189>
    1820:	50 93 32 06 	sts	0x0632, r21	; 0x800632 <LMIC+0x18a>
    1824:	60 93 33 06 	sts	0x0633, r22	; 0x800633 <LMIC+0x18b>
    1828:	70 93 34 06 	sts	0x0634, r23	; 0x800634 <LMIC+0x18c>
    182c:	40 93 ac 04 	sts	0x04AC, r20	; 0x8004ac <LMIC+0x4>
    1830:	50 93 ad 04 	sts	0x04AD, r21	; 0x8004ad <LMIC+0x5>
    1834:	60 93 ae 04 	sts	0x04AE, r22	; 0x8004ae <LMIC+0x6>
    1838:	70 93 af 04 	sts	0x04AF, r23	; 0x8004af <LMIC+0x7>
    183c:	20 e1       	ldi	r18, 0x10	; 16
    183e:	3a e1       	ldi	r19, 0x1A	; 26
    1840:	8b eb       	ldi	r24, 0xBB	; 187
    1842:	94 e0       	ldi	r25, 0x04	; 4
    1844:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <os_setTimedCallback>
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <os_radio>
    184e:	08 95       	ret

00001850 <initDefaultChannels>:
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	90 e4       	ldi	r25, 0x40	; 64
    1856:	e3 ee       	ldi	r30, 0xE3	; 227
    1858:	f4 e0       	ldi	r31, 0x04	; 4
    185a:	df 01       	movw	r26, r30
    185c:	1d 92       	st	X+, r1
    185e:	9a 95       	dec	r25
    1860:	e9 f7       	brne	.-6      	; 0x185c <initDefaultChannels+0xc>
    1862:	90 e2       	ldi	r25, 0x20	; 32
    1864:	e3 e2       	ldi	r30, 0x23	; 35
    1866:	f5 e0       	ldi	r31, 0x05	; 5
    1868:	df 01       	movw	r26, r30
    186a:	29 2f       	mov	r18, r25
    186c:	1d 92       	st	X+, r1
    186e:	2a 95       	dec	r18
    1870:	e9 f7       	brne	.-6      	; 0x186c <initDefaultChannels+0x1c>
    1872:	e3 ec       	ldi	r30, 0xC3	; 195
    1874:	f4 e0       	ldi	r31, 0x04	; 4
    1876:	df 01       	movw	r26, r30
    1878:	1d 92       	st	X+, r1
    187a:	9a 95       	dec	r25
    187c:	e9 f7       	brne	.-6      	; 0x1878 <initDefaultChannels+0x28>
    187e:	27 e0       	ldi	r18, 0x07	; 7
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	30 93 44 05 	sts	0x0544, r19	; 0x800544 <LMIC+0x9c>
    1886:	20 93 43 05 	sts	0x0543, r18	; 0x800543 <LMIC+0x9b>
    188a:	81 11       	cpse	r24, r1
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <initDefaultChannels+0x42>
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <initDefaultChannels+0x44>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	c3 ee       	ldi	r28, 0xE3	; 227
    1896:	d4 e0       	ldi	r29, 0x04	; 4
    1898:	a3 e2       	ldi	r26, 0x23	; 35
    189a:	b5 e0       	ldi	r27, 0x05	; 5
    189c:	93 e0       	ldi	r25, 0x03	; 3
    189e:	98 0f       	add	r25, r24
    18a0:	2f e3       	ldi	r18, 0x3F	; 63
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	44 e0       	ldi	r20, 0x04	; 4
    18a6:	84 9f       	mul	r24, r20
    18a8:	f0 01       	movw	r30, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	e7 5e       	subi	r30, 0xE7	; 231
    18ae:	fb 4f       	sbci	r31, 0xFB	; 251
    18b0:	45 91       	lpm	r20, Z+
    18b2:	55 91       	lpm	r21, Z+
    18b4:	65 91       	lpm	r22, Z+
    18b6:	74 91       	lpm	r23, Z
    18b8:	49 93       	st	Y+, r20
    18ba:	59 93       	st	Y+, r21
    18bc:	69 93       	st	Y+, r22
    18be:	79 93       	st	Y+, r23
    18c0:	2d 93       	st	X+, r18
    18c2:	3d 93       	st	X+, r19
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	89 13       	cpse	r24, r25
    18c8:	ed cf       	rjmp	.-38     	; 0x18a4 <initDefaultChannels+0x54>
    18ca:	88 ee       	ldi	r24, 0xE8	; 232
    18cc:	93 e0       	ldi	r25, 0x03	; 3
    18ce:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <LMIC+0x1c>
    18d2:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <LMIC+0x1b>
    18d6:	ce e0       	ldi	r28, 0x0E	; 14
    18d8:	c0 93 c5 04 	sts	0x04C5, r28	; 0x8004c5 <LMIC+0x1d>
    18dc:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    18e0:	8f 70       	andi	r24, 0x0F	; 15
    18e2:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <LMIC+0x1e>
    18e6:	84 e6       	ldi	r24, 0x64	; 100
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <LMIC+0x24>
    18ee:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <LMIC+0x23>
    18f2:	c0 93 cd 04 	sts	0x04CD, r28	; 0x8004cd <LMIC+0x25>
    18f6:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    18fa:	8f 70       	andi	r24, 0x0F	; 15
    18fc:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <LMIC+0x26>
    1900:	8a e0       	ldi	r24, 0x0A	; 10
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <LMIC+0x2c>
    1908:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <LMIC+0x2b>
    190c:	8b e1       	ldi	r24, 0x1B	; 27
    190e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <LMIC+0x2d>
    1912:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    1916:	8f 70       	andi	r24, 0x0F	; 15
    1918:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <LMIC+0x2e>
    191c:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    1920:	60 93 d7 04 	sts	0x04D7, r22	; 0x8004d7 <LMIC+0x2f>
    1924:	70 93 d8 04 	sts	0x04D8, r23	; 0x8004d8 <LMIC+0x30>
    1928:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <LMIC+0x31>
    192c:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <LMIC+0x32>
    1930:	60 93 cf 04 	sts	0x04CF, r22	; 0x8004cf <LMIC+0x27>
    1934:	70 93 d0 04 	sts	0x04D0, r23	; 0x8004d0 <LMIC+0x28>
    1938:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <LMIC+0x29>
    193c:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <LMIC+0x2a>
    1940:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <LMIC+0x1f>
    1944:	70 93 c8 04 	sts	0x04C8, r23	; 0x8004c8 <LMIC+0x20>
    1948:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <LMIC+0x21>
    194c:	90 93 ca 04 	sts	0x04CA, r25	; 0x8004ca <LMIC+0x22>
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <setDrTxpow.isra.1>:
    1956:	60 38       	cpi	r22, 0x80	; 128
    1958:	11 f0       	breq	.+4      	; 0x195e <setDrTxpow.isra.1+0x8>
    195a:	60 93 52 05 	sts	0x0552, r22	; 0x800552 <LMIC+0xaa>
    195e:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <LMIC+0xab>
    1962:	98 17       	cp	r25, r24
    1964:	59 f0       	breq	.+22     	; 0x197c <setDrTxpow.isra.1+0x26>
    1966:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <LMIC+0xab>
    196a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    196e:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    1972:	98 60       	ori	r25, 0x08	; 8
    1974:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    1978:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    197c:	08 95       	ret

0000197e <os_rlsbf4>:
    197e:	fc 01       	movw	r30, r24
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	08 95       	ret

0000198a <convFreq>:
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    1994:	27 2f       	mov	r18, r23
    1996:	38 2f       	mov	r19, r24
    1998:	49 2f       	mov	r20, r25
    199a:	55 27       	eor	r21, r21
    199c:	a4 e6       	ldi	r26, 0x64	; 100
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	0e 94 49 35 	call	0x6a92	; 0x6a92 <__muluhisi3>
    19a4:	8b 01       	movw	r16, r22
    19a6:	9c 01       	movw	r18, r24
    19a8:	00 5c       	subi	r16, 0xC0	; 192
    19aa:	15 45       	sbci	r17, 0x55	; 85
    19ac:	20 47       	sbci	r18, 0x70	; 112
    19ae:	33 43       	sbci	r19, 0x33	; 51
    19b0:	01 3c       	cpi	r16, 0xC1	; 193
    19b2:	1f 4c       	sbci	r17, 0xCF	; 207
    19b4:	2a 46       	sbci	r18, 0x6A	; 106
    19b6:	31 05       	cpc	r19, r1
    19b8:	18 f0       	brcs	.+6      	; 0x19c0 <convFreq+0x36>
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	cb 01       	movw	r24, r22
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <os_rmsbf4>:
    19c6:	fc 01       	movw	r30, r24
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <__bswapsi2>
    19d4:	08 95       	ret

000019d6 <os_wlsbf4>:
    19d6:	fc 01       	movw	r30, r24
    19d8:	40 83       	st	Z, r20
    19da:	51 83       	std	Z+1, r21	; 0x01
    19dc:	62 83       	std	Z+2, r22	; 0x02
    19de:	73 83       	std	Z+3, r23	; 0x03
    19e0:	08 95       	ret

000019e2 <aes_cipher.part.3>:
    19e2:	4f 92       	push	r4
    19e4:	5f 92       	push	r5
    19e6:	6f 92       	push	r6
    19e8:	7f 92       	push	r7
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	ec 01       	movw	r28, r24
    1a00:	28 01       	movw	r4, r16
    1a02:	39 01       	movw	r6, r18
    1a04:	80 e1       	ldi	r24, 0x10	; 16
    1a06:	e8 e9       	ldi	r30, 0x98	; 152
    1a08:	f4 e0       	ldi	r31, 0x04	; 4
    1a0a:	df 01       	movw	r26, r30
    1a0c:	1d 92       	st	X+, r1
    1a0e:	8a 95       	dec	r24
    1a10:	e9 f7       	brne	.-6      	; 0x1a0c <aes_cipher.part.3+0x2a>
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <AESAUX+0xf>
    1a18:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <AESAUX>
    1a1c:	ef 28       	or	r14, r15
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <aes_cipher.part.3+0x40>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <AESAUX+0x5>
    1a26:	8e e9       	ldi	r24, 0x9E	; 158
    1a28:	94 e0       	ldi	r25, 0x04	; 4
    1a2a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    1a2e:	b3 01       	movw	r22, r6
    1a30:	a2 01       	movw	r20, r4
    1a32:	82 ea       	ldi	r24, 0xA2	; 162
    1a34:	94 e0       	ldi	r25, 0x04	; 4
    1a36:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    1a3a:	80 e1       	ldi	r24, 0x10	; 16
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	a8 e8       	ldi	r26, 0x88	; 136
    1a40:	b4 e0       	ldi	r27, 0x04	; 4
    1a42:	01 90       	ld	r0, Z+
    1a44:	0d 92       	st	X+, r0
    1a46:	8a 95       	dec	r24
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <aes_cipher.part.3+0x60>
    1a4a:	a5 01       	movw	r20, r10
    1a4c:	b6 01       	movw	r22, r12
    1a4e:	84 e0       	ldi	r24, 0x04	; 4
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	df 90       	pop	r13
    1a5e:	cf 90       	pop	r12
    1a60:	bf 90       	pop	r11
    1a62:	af 90       	pop	r10
    1a64:	7f 90       	pop	r7
    1a66:	6f 90       	pop	r6
    1a68:	5f 90       	pop	r5
    1a6a:	4f 90       	pop	r4
    1a6c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <os_aes>

00001a70 <rxschedInit.constprop.10>:
    1a70:	cf 92       	push	r12
    1a72:	df 92       	push	r13
    1a74:	ef 92       	push	r14
    1a76:	ff 92       	push	r15
    1a78:	80 e1       	ldi	r24, 0x10	; 16
    1a7a:	e8 e8       	ldi	r30, 0x88	; 136
    1a7c:	f4 e0       	ldi	r31, 0x04	; 4
    1a7e:	df 01       	movw	r26, r30
    1a80:	1d 92       	st	X+, r1
    1a82:	8a 95       	dec	r24
    1a84:	e9 f7       	brne	.-6      	; 0x1a80 <rxschedInit.constprop.10+0x10>
    1a86:	88 e0       	ldi	r24, 0x08	; 8
    1a88:	e3 ef       	ldi	r30, 0xF3	; 243
    1a8a:	f5 e0       	ldi	r31, 0x05	; 5
    1a8c:	df 01       	movw	r26, r30
    1a8e:	1d 92       	st	X+, r1
    1a90:	8a 95       	dec	r24
    1a92:	e9 f7       	brne	.-6      	; 0x1a8e <rxschedInit.constprop.10+0x1e>
    1a94:	40 91 38 06 	lds	r20, 0x0638	; 0x800638 <LMIC+0x190>
    1a98:	50 91 39 06 	lds	r21, 0x0639	; 0x800639 <LMIC+0x191>
    1a9c:	60 91 3a 06 	lds	r22, 0x063A	; 0x80063a <LMIC+0x192>
    1aa0:	70 91 3b 06 	lds	r23, 0x063B	; 0x80063b <LMIC+0x193>
    1aa4:	8b ee       	ldi	r24, 0xEB	; 235
    1aa6:	95 e0       	ldi	r25, 0x05	; 5
    1aa8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    1aac:	40 91 b7 05 	lds	r20, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    1ab0:	50 91 b8 05 	lds	r21, 0x05B8	; 0x8005b8 <LMIC+0x110>
    1ab4:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <LMIC+0x111>
    1ab8:	70 91 ba 05 	lds	r23, 0x05BA	; 0x8005ba <LMIC+0x112>
    1abc:	8f ee       	ldi	r24, 0xEF	; 239
    1abe:	95 e0       	ldi	r25, 0x05	; 5
    1ac0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    1ac4:	40 e1       	ldi	r20, 0x10	; 16
    1ac6:	50 e0       	ldi	r21, 0x00	; 0
    1ac8:	6b ee       	ldi	r22, 0xEB	; 235
    1aca:	75 e0       	ldi	r23, 0x05	; 5
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    1ad2:	40 91 d8 05 	lds	r20, 0x05D8	; 0x8005d8 <LMIC+0x130>
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	84 1b       	sub	r24, r20
    1adc:	91 09       	sbc	r25, r1
    1ade:	2f ef       	ldi	r18, 0xFF	; 255
    1ae0:	3f e0       	ldi	r19, 0x0F	; 15
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <rxschedInit.constprop.10+0x78>
    1ae4:	35 95       	asr	r19
    1ae6:	27 95       	ror	r18
    1ae8:	8a 95       	dec	r24
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <rxschedInit.constprop.10+0x74>
    1aec:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <LMIC+0x143>
    1af0:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <LMIC+0x144>
    1af4:	28 23       	and	r18, r24
    1af6:	39 23       	and	r19, r25
    1af8:	c0 90 31 06 	lds	r12, 0x0631	; 0x800631 <LMIC+0x189>
    1afc:	d0 90 32 06 	lds	r13, 0x0632	; 0x800632 <LMIC+0x18a>
    1b00:	e0 90 33 06 	lds	r14, 0x0633	; 0x800633 <LMIC+0x18b>
    1b04:	f0 90 34 06 	lds	r15, 0x0634	; 0x800634 <LMIC+0x18c>
    1b08:	b4 e9       	ldi	r27, 0x94	; 148
    1b0a:	cb 0e       	add	r12, r27
    1b0c:	b5 e0       	ldi	r27, 0x05	; 5
    1b0e:	db 1e       	adc	r13, r27
    1b10:	b2 e0       	ldi	r27, 0x02	; 2
    1b12:	eb 1e       	adc	r14, r27
    1b14:	f1 1c       	adc	r15, r1
    1b16:	a3 e5       	ldi	r26, 0x53	; 83
    1b18:	b7 e0       	ldi	r27, 0x07	; 7
    1b1a:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__umulhisi3>
    1b1e:	c6 0e       	add	r12, r22
    1b20:	d7 1e       	adc	r13, r23
    1b22:	e8 1e       	adc	r14, r24
    1b24:	f9 1e       	adc	r15, r25
    1b26:	c0 92 db 05 	sts	0x05DB, r12	; 0x8005db <LMIC+0x133>
    1b2a:	d0 92 dc 05 	sts	0x05DC, r13	; 0x8005dc <LMIC+0x134>
    1b2e:	e0 92 dd 05 	sts	0x05DD, r14	; 0x8005dd <LMIC+0x135>
    1b32:	f0 92 de 05 	sts	0x05DE, r15	; 0x8005de <LMIC+0x136>
    1b36:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <LMIC+0x131>
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	01 c0       	rjmp	.+2      	; 0x1b42 <rxschedInit.constprop.10+0xd2>
    1b40:	88 0f       	add	r24, r24
    1b42:	4a 95       	dec	r20
    1b44:	ea f7       	brpl	.-6      	; 0x1b40 <rxschedInit.constprop.10+0xd0>
    1b46:	60 91 d7 05 	lds	r22, 0x05D7	; 0x8005d7 <LMIC+0x12f>
    1b4a:	8e 5f       	subi	r24, 0xFE	; 254
    1b4c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <calcRxWindow>
    1b50:	c6 1a       	sub	r12, r22
    1b52:	d7 0a       	sbc	r13, r23
    1b54:	e8 0a       	sbc	r14, r24
    1b56:	f9 0a       	sbc	r15, r25
    1b58:	c0 92 df 05 	sts	0x05DF, r12	; 0x8005df <LMIC+0x137>
    1b5c:	d0 92 e0 05 	sts	0x05E0, r13	; 0x8005e0 <LMIC+0x138>
    1b60:	e0 92 e1 05 	sts	0x05E1, r14	; 0x8005e1 <LMIC+0x139>
    1b64:	f0 92 e2 05 	sts	0x05E2, r15	; 0x8005e2 <LMIC+0x13a>
    1b68:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <LMIC+0x10>
    1b6c:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <LMIC+0x132>
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	08 95       	ret

00001b7a <txDone>:
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	6b 01       	movw	r12, r22
    1b88:	7c 01       	movw	r14, r24
    1b8a:	ea 01       	movw	r28, r20
    1b8c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    1b90:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    1b94:	82 70       	andi	r24, 0x02	; 2
    1b96:	96 70       	andi	r25, 0x06	; 6
    1b98:	82 30       	cpi	r24, 0x02	; 2
    1b9a:	94 40       	sbci	r25, 0x04	; 4
    1b9c:	59 f4       	brne	.+22     	; 0x1bb4 <txDone+0x3a>
    1b9e:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <rxschedInit.constprop.10>
    1ba2:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    1ba6:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    1baa:	92 60       	ori	r25, 0x02	; 2
    1bac:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    1bb0:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    1bb4:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <LMIC+0x10>
    1bb8:	87 30       	cpi	r24, 0x07	; 7
    1bba:	59 f5       	brne	.+86     	; 0x1c12 <txDone+0x98>
    1bbc:	40 91 a8 04 	lds	r20, 0x04A8	; 0x8004a8 <LMIC>
    1bc0:	50 91 a9 04 	lds	r21, 0x04A9	; 0x8004a9 <LMIC+0x1>
    1bc4:	60 91 aa 04 	lds	r22, 0x04AA	; 0x8004aa <LMIC+0x2>
    1bc8:	70 91 ab 04 	lds	r23, 0x04AB	; 0x8004ab <LMIC+0x3>
    1bcc:	4c 0d       	add	r20, r12
    1bce:	5d 1d       	adc	r21, r13
    1bd0:	6e 1d       	adc	r22, r14
    1bd2:	7f 1d       	adc	r23, r15
    1bd4:	db 01       	movw	r26, r22
    1bd6:	ca 01       	movw	r24, r20
    1bd8:	0a 97       	sbiw	r24, 0x0a	; 10
    1bda:	a1 09       	sbc	r26, r1
    1bdc:	b1 09       	sbc	r27, r1
    1bde:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <LMIC+0x4>
    1be2:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <LMIC+0x5>
    1be6:	a0 93 ae 04 	sts	0x04AE, r26	; 0x8004ae <LMIC+0x6>
    1bea:	b0 93 af 04 	sts	0x04AF, r27	; 0x8004af <LMIC+0x7>
    1bee:	88 e0       	ldi	r24, 0x08	; 8
    1bf0:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <LMIC+0x10>
    1bf4:	47 58       	subi	r20, 0x87	; 135
    1bf6:	51 09       	sbc	r21, r1
    1bf8:	61 09       	sbc	r22, r1
    1bfa:	71 09       	sbc	r23, r1
    1bfc:	9e 01       	movw	r18, r28
    1bfe:	8b eb       	ldi	r24, 0xBB	; 187
    1c00:	94 e0       	ldi	r25, 0x04	; 4
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <os_setTimedCallback>
    1c12:	20 91 b9 04 	lds	r18, 0x04B9	; 0x8004b9 <LMIC+0x11>
    1c16:	ae 01       	movw	r20, r28
    1c18:	c7 01       	movw	r24, r14
    1c1a:	b6 01       	movw	r22, r12
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <schedRx12>

00001c2c <updataDone>:
    1c2c:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <LMIC+0x11e>
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	a4 e2       	ldi	r26, 0x24	; 36
    1c34:	b4 ef       	ldi	r27, 0xF4	; 244
    1c36:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__umulhisi3>
    1c3a:	40 ea       	ldi	r20, 0xA0	; 160
    1c3c:	5b e0       	ldi	r21, 0x0B	; 11
    1c3e:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <txDone>

00001c42 <jreqDone>:
    1c42:	44 ea       	ldi	r20, 0xA4	; 164
    1c44:	5b e0       	ldi	r21, 0x0B	; 11
    1c46:	64 eb       	ldi	r22, 0xB4	; 180
    1c48:	74 ec       	ldi	r23, 0xC4	; 196
    1c4a:	84 e0       	ldi	r24, 0x04	; 4
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <txDone>

00001c52 <os_wmsbf4>:
    1c52:	fc 01       	movw	r30, r24
    1c54:	43 83       	std	Z+3, r20	; 0x03
    1c56:	52 83       	std	Z+2, r21	; 0x02
    1c58:	61 83       	std	Z+1, r22	; 0x01
    1c5a:	70 83       	st	Z, r23
    1c5c:	08 95       	ret

00001c5e <os_crc16>:
    1c5e:	fc 01       	movw	r30, r24
    1c60:	68 0f       	add	r22, r24
    1c62:	79 1f       	adc	r23, r25
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	e6 17       	cp	r30, r22
    1c6a:	f7 07       	cpc	r31, r23
    1c6c:	91 f0       	breq	.+36     	; 0x1c92 <os_crc16+0x34>
    1c6e:	21 91       	ld	r18, Z+
    1c70:	92 27       	eor	r25, r18
    1c72:	28 e0       	ldi	r18, 0x08	; 8
    1c74:	ac 01       	movw	r20, r24
    1c76:	44 0f       	add	r20, r20
    1c78:	55 1f       	adc	r21, r21
    1c7a:	97 ff       	sbrs	r25, 7
    1c7c:	06 c0       	rjmp	.+12     	; 0x1c8a <os_crc16+0x2c>
    1c7e:	ca 01       	movw	r24, r20
    1c80:	31 e2       	ldi	r19, 0x21	; 33
    1c82:	83 27       	eor	r24, r19
    1c84:	30 e1       	ldi	r19, 0x10	; 16
    1c86:	93 27       	eor	r25, r19
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <os_crc16+0x2e>
    1c8a:	ca 01       	movw	r24, r20
    1c8c:	21 50       	subi	r18, 0x01	; 1
    1c8e:	91 f7       	brne	.-28     	; 0x1c74 <os_crc16+0x16>
    1c90:	eb cf       	rjmp	.-42     	; 0x1c68 <os_crc16+0xa>
    1c92:	08 95       	ret

00001c94 <decodeBeacon>:
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    1c9e:	81 31       	cpi	r24, 0x11	; 17
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <decodeBeacon+0x1a>
    1ca2:	67 ee       	ldi	r22, 0xE7	; 231
    1ca4:	73 e0       	ldi	r23, 0x03	; 3
    1ca6:	87 ed       	ldi	r24, 0xD7	; 215
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    1cae:	67 e0       	ldi	r22, 0x07	; 7
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	8b ee       	ldi	r24, 0xEB	; 235
    1cb4:	95 e0       	ldi	r25, 0x05	; 5
    1cb6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <os_crc16>
    1cba:	20 91 f2 05 	lds	r18, 0x05F2	; 0x8005f2 <LMIC+0x14a>
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	99 27       	eor	r25, r25
    1cc2:	28 17       	cp	r18, r24
    1cc4:	39 07       	cpc	r19, r25
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <decodeBeacon+0x36>
    1cc8:	81 c0       	rjmp	.+258    	; 0x1dcc <decodeBeacon+0x138>
    1cca:	8b ee       	ldi	r24, 0xEB	; 235
    1ccc:	95 e0       	ldi	r25, 0x05	; 5
    1cce:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	bb 27       	eor	r27, r27
    1cd8:	00 91 4b 05 	lds	r16, 0x054B	; 0x80054b <LMIC+0xa3>
    1cdc:	10 91 4c 05 	lds	r17, 0x054C	; 0x80054c <LMIC+0xa4>
    1ce0:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <LMIC+0xa5>
    1ce4:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <LMIC+0xa6>
    1ce8:	80 17       	cp	r24, r16
    1cea:	91 07       	cpc	r25, r17
    1cec:	a2 07       	cpc	r26, r18
    1cee:	b3 07       	cpc	r27, r19
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <decodeBeacon+0x60>
    1cf2:	6f c0       	rjmp	.+222    	; 0x1dd2 <decodeBeacon+0x13e>
    1cf4:	c0 91 37 06 	lds	r28, 0x0637	; 0x800637 <LMIC+0x18f>
    1cf8:	cc 7f       	andi	r28, 0xFC	; 252
    1cfa:	c0 93 37 06 	sts	0x0637, r28	; 0x800637 <LMIC+0x18f>
    1cfe:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <LMIC+0xd>
    1d02:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <LMIC+0x18e>
    1d06:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <LMIC+0xc>
    1d0a:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <LMIC+0x18d>
    1d0e:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <LMIC+0x4>
    1d12:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <LMIC+0x5>
    1d16:	a0 91 ae 04 	lds	r26, 0x04AE	; 0x8004ae <LMIC+0x6>
    1d1a:	b0 91 af 04 	lds	r27, 0x04AF	; 0x8004af <LMIC+0x7>
    1d1e:	80 54       	subi	r24, 0x40	; 64
    1d20:	93 42       	sbci	r25, 0x23	; 35
    1d22:	a1 09       	sbc	r26, r1
    1d24:	b1 09       	sbc	r27, r1
    1d26:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <LMIC+0x189>
    1d2a:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <LMIC+0x18a>
    1d2e:	a0 93 33 06 	sts	0x0633, r26	; 0x800633 <LMIC+0x18b>
    1d32:	b0 93 34 06 	sts	0x0634, r27	; 0x800634 <LMIC+0x18c>
    1d36:	8e ee       	ldi	r24, 0xEE	; 238
    1d38:	95 e0       	ldi	r25, 0x05	; 5
    1d3a:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    1d3e:	60 93 38 06 	sts	0x0638, r22	; 0x800638 <LMIC+0x190>
    1d42:	70 93 39 06 	sts	0x0639, r23	; 0x800639 <LMIC+0x191>
    1d46:	80 93 3a 06 	sts	0x063A, r24	; 0x80063a <LMIC+0x192>
    1d4a:	90 93 3b 06 	sts	0x063B, r25	; 0x80063b <LMIC+0x193>
    1d4e:	8c 2f       	mov	r24, r28
    1d50:	81 60       	ori	r24, 0x01	; 1
    1d52:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <LMIC+0x18f>
    1d56:	00 91 fa 05 	lds	r16, 0x05FA	; 0x8005fa <LMIC+0x152>
    1d5a:	10 91 fb 05 	lds	r17, 0x05FB	; 0x8005fb <LMIC+0x153>
    1d5e:	6f e0       	ldi	r22, 0x0F	; 15
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	8b ee       	ldi	r24, 0xEB	; 235
    1d64:	95 e0       	ldi	r25, 0x05	; 5
    1d66:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <os_crc16>
    1d6a:	08 17       	cp	r16, r24
    1d6c:	19 07       	cpc	r17, r25
    1d6e:	a1 f5       	brne	.+104    	; 0x1dd8 <decodeBeacon+0x144>
    1d70:	83 ef       	ldi	r24, 0xF3	; 243
    1d72:	95 e0       	ldi	r25, 0x05	; 5
    1d74:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    1d78:	bb 27       	eor	r27, r27
    1d7a:	97 fd       	sbrc	r25, 7
    1d7c:	ba 95       	dec	r27
    1d7e:	a9 2f       	mov	r26, r25
    1d80:	98 2f       	mov	r25, r24
    1d82:	87 2f       	mov	r24, r23
    1d84:	80 93 3d 06 	sts	0x063D, r24	; 0x80063d <LMIC+0x195>
    1d88:	90 93 3e 06 	sts	0x063E, r25	; 0x80063e <LMIC+0x196>
    1d8c:	a0 93 3f 06 	sts	0x063F, r26	; 0x80063f <LMIC+0x197>
    1d90:	b0 93 40 06 	sts	0x0640, r27	; 0x800640 <LMIC+0x198>
    1d94:	86 ef       	ldi	r24, 0xF6	; 246
    1d96:	95 e0       	ldi	r25, 0x05	; 5
    1d98:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    1d9c:	bb 27       	eor	r27, r27
    1d9e:	97 fd       	sbrc	r25, 7
    1da0:	ba 95       	dec	r27
    1da2:	a9 2f       	mov	r26, r25
    1da4:	98 2f       	mov	r25, r24
    1da6:	87 2f       	mov	r24, r23
    1da8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <LMIC+0x199>
    1dac:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <LMIC+0x19a>
    1db0:	a0 93 43 06 	sts	0x0643, r26	; 0x800643 <LMIC+0x19b>
    1db4:	b0 93 44 06 	sts	0x0644, r27	; 0x800644 <LMIC+0x19c>
    1db8:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <LMIC+0x14b>
    1dbc:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <LMIC+0x194>
    1dc0:	c3 60       	ori	r28, 0x03	; 3
    1dc2:	c0 93 37 06 	sts	0x0637, r28	; 0x800637 <LMIC+0x18f>
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	08 c0       	rjmp	.+16     	; 0x1ddc <decodeBeacon+0x148>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <decodeBeacon+0x148>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <decodeBeacon+0x148>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <getSensitivity>:
    1de4:	28 2f       	mov	r18, r24
    1de6:	27 70       	andi	r18, 0x07	; 7
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	f9 01       	movw	r30, r18
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
    1df4:	e5 5a       	subi	r30, 0xA5	; 165
    1df6:	fb 4f       	sbci	r31, 0xFB	; 251
    1df8:	53 e0       	ldi	r21, 0x03	; 3
    1dfa:	96 95       	lsr	r25
    1dfc:	87 95       	ror	r24
    1dfe:	5a 95       	dec	r21
    1e00:	e1 f7       	brne	.-8      	; 0x1dfa <getSensitivity+0x16>
    1e02:	83 70       	andi	r24, 0x03	; 3
    1e04:	e8 0f       	add	r30, r24
    1e06:	f1 1d       	adc	r31, r1
    1e08:	84 91       	lpm	r24, Z
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	8d 58       	subi	r24, 0x8D	; 141
    1e0e:	91 09       	sbc	r25, r1
    1e10:	08 95       	ret

00001e12 <calcAirTime>:
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	38 2f       	mov	r19, r24
    1e1e:	37 70       	andi	r19, 0x07	; 7
    1e20:	a6 2f       	mov	r26, r22
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	79 f4       	brne	.+30     	; 0x1e44 <calcAirTime+0x32>
    1e26:	1b 96       	adiw	r26, 0x0b	; 11
    1e28:	03 e0       	ldi	r16, 0x03	; 3
    1e2a:	aa 0f       	add	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	0a 95       	dec	r16
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <calcAirTime+0x18>
    1e32:	24 e2       	ldi	r18, 0x24	; 36
    1e34:	34 ef       	ldi	r19, 0xF4	; 244
    1e36:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__usmulhisi3>
    1e3a:	20 e5       	ldi	r18, 0x50	; 80
    1e3c:	33 ec       	ldi	r19, 0xC3	; 195
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	87 c0       	rjmp	.+270    	; 0x1f52 <calcAirTime+0x140>
    1e44:	63 2f       	mov	r22, r19
    1e46:	66 0f       	add	r22, r22
    1e48:	66 0f       	add	r22, r22
    1e4a:	68 5e       	subi	r22, 0xE8	; 232
    1e4c:	35 30       	cpi	r19, 0x05	; 5
    1e4e:	10 f4       	brcc	.+4      	; 0x1e54 <calcAirTime+0x42>
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <calcAirTime+0x44>
    1e54:	28 e0       	ldi	r18, 0x08	; 8
    1e56:	13 e0       	ldi	r17, 0x03	; 3
    1e58:	aa 0f       	add	r26, r26
    1e5a:	bb 1f       	adc	r27, r27
    1e5c:	1a 95       	dec	r17
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <calcAirTime+0x46>
    1e60:	cd 01       	movw	r24, r26
    1e62:	86 1b       	sub	r24, r22
    1e64:	91 09       	sbc	r25, r1
    1e66:	dc 01       	movw	r26, r24
    1e68:	5c 96       	adiw	r26, 0x1c	; 28
    1e6a:	e7 fd       	sbrc	r30, 7
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <calcAirTime+0x62>
    1e6e:	80 e1       	ldi	r24, 0x10	; 16
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <calcAirTime+0x66>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	8a 0f       	add	r24, r26
    1e7a:	9b 1f       	adc	r25, r27
    1e7c:	4f 2f       	mov	r20, r31
    1e7e:	55 27       	eor	r21, r21
    1e80:	45 2b       	or	r20, r21
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <calcAirTime+0x78>
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <calcAirTime+0x7c>
    1e8a:	44 e1       	ldi	r20, 0x14	; 20
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	84 1b       	sub	r24, r20
    1e90:	95 0b       	sbc	r25, r21
    1e92:	18 16       	cp	r1, r24
    1e94:	19 06       	cpc	r1, r25
    1e96:	d4 f4       	brge	.+52     	; 0x1ecc <calcAirTime+0xba>
    1e98:	62 1b       	sub	r22, r18
    1e9a:	70 e0       	ldi	r23, 0x00	; 0
    1e9c:	86 0f       	add	r24, r22
    1e9e:	97 1f       	adc	r25, r23
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <__divmodhi4>
    1ea6:	af 01       	movw	r20, r30
    1ea8:	a5 e0       	ldi	r26, 0x05	; 5
    1eaa:	56 95       	lsr	r21
    1eac:	47 95       	ror	r20
    1eae:	aa 95       	dec	r26
    1eb0:	e1 f7       	brne	.-8      	; 0x1eaa <calcAirTime+0x98>
    1eb2:	43 70       	andi	r20, 0x03	; 3
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	4b 5f       	subi	r20, 0xFB	; 251
    1eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eba:	46 9f       	mul	r20, r22
    1ebc:	c0 01       	movw	r24, r0
    1ebe:	47 9f       	mul	r20, r23
    1ec0:	90 0d       	add	r25, r0
    1ec2:	56 9f       	mul	r21, r22
    1ec4:	90 0d       	add	r25, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	08 96       	adiw	r24, 0x08	; 8
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <calcAirTime+0xbe>
    1ecc:	88 e0       	ldi	r24, 0x08	; 8
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	c1 96       	adiw	r24, 0x31	; 49
    1eda:	3f 5f       	subi	r19, 0xFF	; 255
    1edc:	63 e0       	ldi	r22, 0x03	; 3
    1ede:	f6 95       	lsr	r31
    1ee0:	e7 95       	ror	r30
    1ee2:	6a 95       	dec	r22
    1ee4:	e1 f7       	brne	.-8      	; 0x1ede <calcAirTime+0xcc>
    1ee6:	e3 70       	andi	r30, 0x03	; 3
    1ee8:	3e 1b       	sub	r19, r30
    1eea:	35 30       	cpi	r19, 0x05	; 5
    1eec:	50 f0       	brcs	.+20     	; 0x1f02 <calcAirTime+0xf0>
    1eee:	34 50       	subi	r19, 0x04	; 4
    1ef0:	e9 e0       	ldi	r30, 0x09	; 9
    1ef2:	fd e3       	ldi	r31, 0x3D	; 61
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <calcAirTime+0xe8>
    1ef6:	f5 95       	asr	r31
    1ef8:	e7 95       	ror	r30
    1efa:	3a 95       	dec	r19
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <calcAirTime+0xe4>
    1efe:	34 e0       	ldi	r19, 0x04	; 4
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <calcAirTime+0xf4>
    1f02:	e9 e0       	ldi	r30, 0x09	; 9
    1f04:	fd e3       	ldi	r31, 0x3D	; 61
    1f06:	09 2e       	mov	r0, r25
    1f08:	00 0c       	add	r0, r0
    1f0a:	aa 0b       	sbc	r26, r26
    1f0c:	bb 0b       	sbc	r27, r27
    1f0e:	7c 01       	movw	r14, r24
    1f10:	8d 01       	movw	r16, r26
    1f12:	04 c0       	rjmp	.+8      	; 0x1f1c <calcAirTime+0x10a>
    1f14:	ee 0c       	add	r14, r14
    1f16:	ff 1c       	adc	r15, r15
    1f18:	00 1f       	adc	r16, r16
    1f1a:	11 1f       	adc	r17, r17
    1f1c:	3a 95       	dec	r19
    1f1e:	d2 f7       	brpl	.-12     	; 0x1f14 <calcAirTime+0x102>
    1f20:	a8 01       	movw	r20, r16
    1f22:	97 01       	movw	r18, r14
    1f24:	a4 e2       	ldi	r26, 0x24	; 36
    1f26:	b4 ef       	ldi	r27, 0xF4	; 244
    1f28:	0e 94 49 35 	call	0x6a92	; 0x6a92 <__muluhisi3>
    1f2c:	9f 01       	movw	r18, r30
    1f2e:	f7 ff       	sbrs	r31, 7
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <calcAirTime+0x124>
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	35 95       	asr	r19
    1f38:	27 95       	ror	r18
    1f3a:	89 01       	movw	r16, r18
    1f3c:	33 0f       	add	r19, r19
    1f3e:	22 0b       	sbc	r18, r18
    1f40:	33 0b       	sbc	r19, r19
    1f42:	60 0f       	add	r22, r16
    1f44:	71 1f       	adc	r23, r17
    1f46:	82 1f       	adc	r24, r18
    1f48:	93 1f       	adc	r25, r19
    1f4a:	9f 01       	movw	r18, r30
    1f4c:	ff 0f       	add	r31, r31
    1f4e:	44 0b       	sbc	r20, r20
    1f50:	55 0b       	sbc	r21, r21
    1f52:	0e 94 07 35 	call	0x6a0e	; 0x6a0e <__divmodsi4>
    1f56:	ca 01       	movw	r24, r20
    1f58:	b9 01       	movw	r22, r18
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	08 95       	ret

00001f64 <LMIC_setupChannel>:
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	0f 93       	push	r16
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	a8 2f       	mov	r26, r24
    1f74:	80 31       	cpi	r24, 0x10	; 16
    1f76:	08 f0       	brcs	.+2      	; 0x1f7a <LMIC_setupChannel+0x16>
    1f78:	74 c0       	rjmp	.+232    	; 0x2062 <LMIC_setupChannel+0xfe>
    1f7a:	0f 3f       	cpi	r16, 0xFF	; 255
    1f7c:	c1 f5       	brne	.+112    	; 0x1fee <LMIC_setupChannel+0x8a>
    1f7e:	6a 01       	movw	r12, r20
    1f80:	7b 01       	movw	r14, r22
    1f82:	80 ec       	ldi	r24, 0xC0	; 192
    1f84:	c8 1a       	sub	r12, r24
    1f86:	8d ef       	ldi	r24, 0xFD	; 253
    1f88:	d8 0a       	sbc	r13, r24
    1f8a:	81 ed       	ldi	r24, 0xD1	; 209
    1f8c:	e8 0a       	sbc	r14, r24
    1f8e:	83 e3       	ldi	r24, 0x33	; 51
    1f90:	f8 0a       	sbc	r15, r24
    1f92:	81 e9       	ldi	r24, 0x91	; 145
    1f94:	c8 16       	cp	r12, r24
    1f96:	80 ed       	ldi	r24, 0xD0	; 208
    1f98:	d8 06       	cpc	r13, r24
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	e8 06       	cpc	r14, r24
    1f9e:	f1 04       	cpc	r15, r1
    1fa0:	10 f4       	brcc	.+4      	; 0x1fa6 <LMIC_setupChannel+0x42>
    1fa2:	42 60       	ori	r20, 0x02	; 2
    1fa4:	30 c0       	rjmp	.+96     	; 0x2006 <LMIC_setupChannel+0xa2>
    1fa6:	6a 01       	movw	r12, r20
    1fa8:	7b 01       	movw	r14, r22
    1faa:	81 ea       	ldi	r24, 0xA1	; 161
    1fac:	d8 1a       	sub	r13, r24
    1fae:	8c eb       	ldi	r24, 0xBC	; 188
    1fb0:	e8 0a       	sbc	r14, r24
    1fb2:	83 e3       	ldi	r24, 0x33	; 51
    1fb4:	f8 0a       	sbc	r15, r24
    1fb6:	81 ec       	ldi	r24, 0xC1	; 193
    1fb8:	c8 16       	cp	r12, r24
    1fba:	87 e2       	ldi	r24, 0x27	; 39
    1fbc:	d8 06       	cpc	r13, r24
    1fbe:	89 e0       	ldi	r24, 0x09	; 9
    1fc0:	e8 06       	cpc	r14, r24
    1fc2:	f1 04       	cpc	r15, r1
    1fc4:	90 f0       	brcs	.+36     	; 0x1fea <LMIC_setupChannel+0x86>
    1fc6:	6a 01       	movw	r12, r20
    1fc8:	7b 01       	movw	r14, r22
    1fca:	80 ea       	ldi	r24, 0xA0	; 160
    1fcc:	c8 1a       	sub	r12, r24
    1fce:	81 e9       	ldi	r24, 0x91	; 145
    1fd0:	d8 0a       	sbc	r13, r24
    1fd2:	86 ed       	ldi	r24, 0xD6	; 214
    1fd4:	e8 0a       	sbc	r14, r24
    1fd6:	83 e3       	ldi	r24, 0x33	; 51
    1fd8:	f8 0a       	sbc	r15, r24
    1fda:	81 ee       	ldi	r24, 0xE1	; 225
    1fdc:	c8 16       	cp	r12, r24
    1fde:	83 e9       	ldi	r24, 0x93	; 147
    1fe0:	d8 06       	cpc	r13, r24
    1fe2:	84 e0       	ldi	r24, 0x04	; 4
    1fe4:	e8 06       	cpc	r14, r24
    1fe6:	f1 04       	cpc	r15, r1
    1fe8:	70 f4       	brcc	.+28     	; 0x2006 <LMIC_setupChannel+0xa2>
    1fea:	41 60       	ori	r20, 0x01	; 1
    1fec:	0c c0       	rjmp	.+24     	; 0x2006 <LMIC_setupChannel+0xa2>
    1fee:	04 30       	cpi	r16, 0x04	; 4
    1ff0:	c4 f5       	brge	.+112    	; 0x2062 <LMIC_setupChannel+0xfe>
    1ff2:	4c 7f       	andi	r20, 0xFC	; 252
    1ff4:	c0 2e       	mov	r12, r16
    1ff6:	00 0f       	add	r16, r16
    1ff8:	dd 08       	sbc	r13, r13
    1ffa:	ee 08       	sbc	r14, r14
    1ffc:	ff 08       	sbc	r15, r15
    1ffe:	4c 29       	or	r20, r12
    2000:	5d 29       	or	r21, r13
    2002:	6e 29       	or	r22, r14
    2004:	7f 29       	or	r23, r15
    2006:	ea 2f       	mov	r30, r26
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	ef 01       	movw	r28, r30
    200c:	cc 0f       	add	r28, r28
    200e:	dd 1f       	adc	r29, r29
    2010:	cc 0f       	add	r28, r28
    2012:	dd 1f       	adc	r29, r29
    2014:	c8 55       	subi	r28, 0x58	; 88
    2016:	db 4f       	sbci	r29, 0xFB	; 251
    2018:	4b af       	std	Y+59, r20	; 0x3b
    201a:	5c af       	std	Y+60, r21	; 0x3c
    201c:	6d af       	std	Y+61, r22	; 0x3d
    201e:	7e af       	std	Y+62, r23	; 0x3e
    2020:	21 15       	cp	r18, r1
    2022:	31 05       	cpc	r19, r1
    2024:	19 f0       	breq	.+6      	; 0x202c <LMIC_setupChannel+0xc8>
    2026:	92 2f       	mov	r25, r18
    2028:	83 2f       	mov	r24, r19
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <LMIC_setupChannel+0xcc>
    202c:	9f e3       	ldi	r25, 0x3F	; 63
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	ee 0f       	add	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	ed 5d       	subi	r30, 0xDD	; 221
    2036:	fa 4f       	sbci	r31, 0xFA	; 250
    2038:	90 83       	st	Z, r25
    203a:	81 83       	std	Z+1, r24	; 0x01
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <LMIC_setupChannel+0xe2>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	aa 95       	dec	r26
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <LMIC_setupChannel+0xde>
    204a:	20 91 43 05 	lds	r18, 0x0543	; 0x800543 <LMIC+0x9b>
    204e:	30 91 44 05 	lds	r19, 0x0544	; 0x800544 <LMIC+0x9c>
    2052:	82 2b       	or	r24, r18
    2054:	93 2b       	or	r25, r19
    2056:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <LMIC+0x9c>
    205a:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <LMIC+0x9b>
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <LMIC_setupChannel+0x100>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	df 90       	pop	r13
    2070:	cf 90       	pop	r12
    2072:	08 95       	ret

00002074 <decodeFrame>:
    2074:	2f 92       	push	r2
    2076:	3f 92       	push	r3
    2078:	4f 92       	push	r4
    207a:	5f 92       	push	r5
    207c:	6f 92       	push	r6
    207e:	7f 92       	push	r7
    2080:	8f 92       	push	r8
    2082:	9f 92       	push	r9
    2084:	af 92       	push	r10
    2086:	bf 92       	push	r11
    2088:	cf 92       	push	r12
    208a:	df 92       	push	r13
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	29 97       	sbiw	r28, 0x09	; 9
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	e0 90 ea 05 	lds	r14, 0x05EA	; 0x8005ea <LMIC+0x142>
    20ac:	f1 2c       	mov	r15, r1
    20ae:	2c e0       	ldi	r18, 0x0C	; 12
    20b0:	e2 16       	cp	r14, r18
    20b2:	f1 04       	cpc	r15, r1
    20b4:	24 f4       	brge	.+8      	; 0x20be <decodeFrame+0x4a>
    20b6:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	35 c3       	rjmp	.+1642   	; 0x2728 <decodeFrame+0x6b4>
    20be:	30 91 eb 05 	lds	r19, 0x05EB	; 0x8005eb <LMIC+0x143>
    20c2:	39 83       	std	Y+1, r19	; 0x01
    20c4:	13 2f       	mov	r17, r19
    20c6:	13 70       	andi	r17, 0x03	; 3
    20c8:	b1 f7       	brne	.-20     	; 0x20b6 <decodeFrame+0x42>
    20ca:	30 7e       	andi	r19, 0xE0	; 224
    20cc:	3e 83       	std	Y+6, r19	; 0x06
    20ce:	30 36       	cpi	r19, 0x60	; 96
    20d0:	11 f0       	breq	.+4      	; 0x20d6 <decodeFrame+0x62>
    20d2:	30 3a       	cpi	r19, 0xA0	; 160
    20d4:	81 f7       	brne	.-32     	; 0x20b6 <decodeFrame+0x42>
    20d6:	8c ee       	ldi	r24, 0xEC	; 236
    20d8:	95 e0       	ldi	r25, 0x05	; 5
    20da:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    20de:	ab 01       	movw	r20, r22
    20e0:	bc 01       	movw	r22, r24
    20e2:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    20e6:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <LMIC+0x110>
    20ea:	a0 91 b9 05 	lds	r26, 0x05B9	; 0x8005b9 <LMIC+0x111>
    20ee:	b0 91 ba 05 	lds	r27, 0x05BA	; 0x8005ba <LMIC+0x112>
    20f2:	48 17       	cp	r20, r24
    20f4:	59 07       	cpc	r21, r25
    20f6:	6a 07       	cpc	r22, r26
    20f8:	7b 07       	cpc	r23, r27
    20fa:	e9 f6       	brne	.-70     	; 0x20b6 <decodeFrame+0x42>
    20fc:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <LMIC+0x148>
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8f 70       	andi	r24, 0x0F	; 15
    2104:	a8 2f       	mov	r26, r24
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	bd 83       	std	Y+5, r27	; 0x05
    210a:	ac 83       	std	Y+4, r26	; 0x04
    210c:	4d 01       	movw	r8, r26
    210e:	b8 e0       	ldi	r27, 0x08	; 8
    2110:	8b 0e       	add	r8, r27
    2112:	91 1c       	adc	r9, r1
    2114:	17 01       	movw	r2, r14
    2116:	24 e0       	ldi	r18, 0x04	; 4
    2118:	22 1a       	sub	r2, r18
    211a:	31 08       	sbc	r3, r1
    211c:	28 14       	cp	r2, r8
    211e:	39 04       	cpc	r3, r9
    2120:	54 f2       	brlt	.-108    	; 0x20b6 <decodeFrame+0x42>
    2122:	82 14       	cp	r8, r2
    2124:	93 04       	cpc	r9, r3
    2126:	74 f4       	brge	.+28     	; 0x2144 <decodeFrame+0xd0>
    2128:	f4 01       	movw	r30, r8
    212a:	e5 51       	subi	r30, 0x15	; 21
    212c:	fa 4f       	sbci	r31, 0xFA	; 250
    212e:	80 81       	ld	r24, Z
    2130:	a8 2f       	mov	r26, r24
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	ba 83       	std	Y+2, r27	; 0x02
    2136:	a9 83       	std	Y+1, r26	; 0x01
    2138:	2c 81       	ldd	r18, Y+4	; 0x04
    213a:	3d 81       	ldd	r19, Y+5	; 0x05
    213c:	27 5f       	subi	r18, 0xF7	; 247
    213e:	3f 4f       	sbci	r19, 0xFF	; 255
    2140:	49 01       	movw	r8, r18
    2142:	04 c0       	rjmp	.+8      	; 0x214c <decodeFrame+0xd8>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	9f ef       	ldi	r25, 0xFF	; 255
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	40 90 bb 05 	lds	r4, 0x05BB	; 0x8005bb <LMIC+0x113>
    2150:	50 90 bc 05 	lds	r5, 0x05BC	; 0x8005bc <LMIC+0x114>
    2154:	60 90 bd 05 	lds	r6, 0x05BD	; 0x8005bd <LMIC+0x115>
    2158:	70 90 be 05 	lds	r7, 0x05BE	; 0x8005be <LMIC+0x116>
    215c:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <LMIC+0x149>
    2160:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <LMIC+0x14a>
    2164:	84 19       	sub	r24, r4
    2166:	95 09       	sbc	r25, r5
    2168:	48 0e       	add	r4, r24
    216a:	59 1e       	adc	r5, r25
    216c:	61 1c       	adc	r6, r1
    216e:	71 1c       	adc	r7, r1
    2170:	e8 e9       	ldi	r30, 0x98	; 152
    2172:	f4 e0       	ldi	r31, 0x04	; 4
    2174:	df 01       	movw	r26, r30
    2176:	20 e1       	ldi	r18, 0x10	; 16
    2178:	1d 92       	st	X+, r1
    217a:	2a 95       	dec	r18
    217c:	e9 f7       	brne	.-6      	; 0x2178 <decodeFrame+0x104>
    217e:	89 e4       	ldi	r24, 0x49	; 73
    2180:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <AESAUX>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <AESAUX+0x5>
    218a:	20 92 a7 04 	sts	0x04A7, r2	; 0x8004a7 <AESAUX+0xf>
    218e:	8e e9       	ldi	r24, 0x9E	; 158
    2190:	94 e0       	ldi	r25, 0x04	; 4
    2192:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    2196:	b3 01       	movw	r22, r6
    2198:	a2 01       	movw	r20, r4
    219a:	82 ea       	ldi	r24, 0xA2	; 162
    219c:	94 e0       	ldi	r25, 0x04	; 4
    219e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    21a2:	e7 e9       	ldi	r30, 0x97	; 151
    21a4:	f5 e0       	ldi	r31, 0x05	; 5
    21a6:	a8 e8       	ldi	r26, 0x88	; 136
    21a8:	b4 e0       	ldi	r27, 0x04	; 4
    21aa:	30 e1       	ldi	r19, 0x10	; 16
    21ac:	01 90       	ld	r0, Z+
    21ae:	0d 92       	st	X+, r0
    21b0:	3a 95       	dec	r19
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <decodeFrame+0x138>
    21b4:	a1 01       	movw	r20, r2
    21b6:	6b ee       	ldi	r22, 0xEB	; 235
    21b8:	75 e0       	ldi	r23, 0x05	; 5
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    21c0:	6b 01       	movw	r12, r22
    21c2:	7c 01       	movw	r14, r24
    21c4:	c1 01       	movw	r24, r2
    21c6:	85 51       	subi	r24, 0x15	; 21
    21c8:	9a 4f       	sbci	r25, 0xFA	; 250
    21ca:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <os_rmsbf4>
    21ce:	c6 16       	cp	r12, r22
    21d0:	d7 06       	cpc	r13, r23
    21d2:	e8 06       	cpc	r14, r24
    21d4:	f9 06       	cpc	r15, r25
    21d6:	09 f0       	breq	.+2      	; 0x21da <decodeFrame+0x166>
    21d8:	6e cf       	rjmp	.-292    	; 0x20b6 <decodeFrame+0x42>
    21da:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <LMIC+0x113>
    21de:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <LMIC+0x114>
    21e2:	a0 91 bd 05 	lds	r26, 0x05BD	; 0x8005bd <LMIC+0x115>
    21e6:	b0 91 be 05 	lds	r27, 0x05BE	; 0x8005be <LMIC+0x116>
    21ea:	48 16       	cp	r4, r24
    21ec:	59 06       	cpc	r5, r25
    21ee:	6a 06       	cpc	r6, r26
    21f0:	7b 06       	cpc	r7, r27
    21f2:	e8 f4       	brcc	.+58     	; 0x222e <decodeFrame+0x1ba>
    21f4:	84 15       	cp	r24, r4
    21f6:	95 05       	cpc	r25, r5
    21f8:	a6 05       	cpc	r26, r6
    21fa:	b7 05       	cpc	r27, r7
    21fc:	0c f4       	brge	.+2      	; 0x2200 <decodeFrame+0x18c>
    21fe:	5b cf       	rjmp	.-330    	; 0x20b6 <decodeFrame+0x42>
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	a1 09       	sbc	r26, r1
    2204:	b1 09       	sbc	r27, r1
    2206:	48 16       	cp	r4, r24
    2208:	59 06       	cpc	r5, r25
    220a:	6a 06       	cpc	r6, r26
    220c:	7b 06       	cpc	r7, r27
    220e:	09 f0       	breq	.+2      	; 0x2212 <decodeFrame+0x19e>
    2210:	52 cf       	rjmp	.-348    	; 0x20b6 <decodeFrame+0x42>
    2212:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <LMIC+0x11b>
    2216:	88 23       	and	r24, r24
    2218:	09 f4       	brne	.+2      	; 0x221c <decodeFrame+0x1a8>
    221a:	4d cf       	rjmp	.-358    	; 0x20b6 <decodeFrame+0x42>
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	80 3a       	cpi	r24, 0xA0	; 160
    2220:	09 f0       	breq	.+2      	; 0x2224 <decodeFrame+0x1b0>
    2222:	49 cf       	rjmp	.-366    	; 0x20b6 <decodeFrame+0x42>
    2224:	a1 e0       	ldi	r26, 0x01	; 1
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	bf 83       	std	Y+7, r27	; 0x07
    222a:	ae 83       	std	Y+6, r26	; 0x06
    222c:	17 c0       	rjmp	.+46     	; 0x225c <decodeFrame+0x1e8>
    222e:	d3 01       	movw	r26, r6
    2230:	c2 01       	movw	r24, r4
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	a1 1d       	adc	r26, r1
    2236:	b1 1d       	adc	r27, r1
    2238:	80 93 bb 05 	sts	0x05BB, r24	; 0x8005bb <LMIC+0x113>
    223c:	90 93 bc 05 	sts	0x05BC, r25	; 0x8005bc <LMIC+0x114>
    2240:	a0 93 bd 05 	sts	0x05BD, r26	; 0x8005bd <LMIC+0x115>
    2244:	b0 93 be 05 	sts	0x05BE, r27	; 0x8005be <LMIC+0x116>
    2248:	be 81       	ldd	r27, Y+6	; 0x06
    224a:	b0 3a       	cpi	r27, 0xA0	; 160
    224c:	11 f4       	brne	.+4      	; 0x2252 <decodeFrame+0x1de>
    224e:	80 e2       	ldi	r24, 0x20	; 32
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <decodeFrame+0x1e0>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <LMIC+0x11b>
    2258:	1f 82       	std	Y+7, r1	; 0x07
    225a:	1e 82       	std	Y+6, r1	; 0x06
    225c:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <LMIC+0x11b>
    2260:	81 11       	cpse	r24, r1
    2262:	03 c0       	rjmp	.+6      	; 0x226a <decodeFrame+0x1f6>
    2264:	2b 81       	ldd	r18, Y+3	; 0x03
    2266:	24 ff       	sbrs	r18, 4
    2268:	09 c0       	rjmp	.+18     	; 0x227c <decodeFrame+0x208>
    226a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    226e:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    2272:	80 61       	ori	r24, 0x10	; 16
    2274:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    2278:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    227c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <LMIC+0xad>
    2280:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <LMIC+0x11d>
    2284:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <LMIC+0x11c>
    2288:	80 38       	cpi	r24, 0x80	; 128
    228a:	19 f0       	breq	.+6      	; 0x2292 <decodeFrame+0x21e>
    228c:	84 ef       	ldi	r24, 0xF4	; 244
    228e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <LMIC+0x11c>
    2292:	30 91 b4 04 	lds	r19, 0x04B4	; 0x8004b4 <LMIC+0xc>
    2296:	83 2f       	mov	r24, r19
    2298:	08 2e       	mov	r0, r24
    229a:	00 0c       	add	r0, r0
    229c:	99 0b       	sbc	r25, r25
    229e:	80 54       	subi	r24, 0x40	; 64
    22a0:	91 09       	sbc	r25, r1
    22a2:	99 87       	std	Y+9, r25	; 0x09
    22a4:	88 87       	std	Y+8, r24	; 0x08
    22a6:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <LMIC+0xe>
    22aa:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <LMIC+0xf>
    22ae:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <getSensitivity>
    22b2:	a8 85       	ldd	r26, Y+8	; 0x08
    22b4:	b9 85       	ldd	r27, Y+9	; 0x09
    22b6:	a8 1b       	sub	r26, r24
    22b8:	b9 0b       	sbc	r27, r25
    22ba:	b9 87       	std	Y+9, r27	; 0x09
    22bc:	a8 87       	std	Y+8, r26	; 0x08
    22be:	b7 fd       	sbrc	r27, 7
    22c0:	08 c0       	rjmp	.+16     	; 0x22d2 <decodeFrame+0x25e>
    22c2:	af 3f       	cpi	r26, 0xFF	; 255
    22c4:	b1 05       	cpc	r27, r1
    22c6:	24 f0       	brlt	.+8      	; 0x22d0 <decodeFrame+0x25c>
    22c8:	8e ef       	ldi	r24, 0xFE	; 254
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	99 87       	std	Y+9, r25	; 0x09
    22ce:	88 87       	std	Y+8, r24	; 0x08
    22d0:	18 85       	ldd	r17, Y+8	; 0x08
    22d2:	10 93 c7 05 	sts	0x05C7, r17	; 0x8005c7 <LMIC+0x11f>
    22d6:	19 86       	std	Y+9, r1	; 0x09
    22d8:	18 86       	std	Y+8, r1	; 0x08
    22da:	a8 85       	ldd	r26, Y+8	; 0x08
    22dc:	b9 85       	ldd	r27, Y+9	; 0x09
    22de:	2c 81       	ldd	r18, Y+4	; 0x04
    22e0:	3d 81       	ldd	r19, Y+5	; 0x05
    22e2:	a2 17       	cp	r26, r18
    22e4:	b3 07       	cpc	r27, r19
    22e6:	0c f0       	brlt	.+2      	; 0x22ea <decodeFrame+0x276>
    22e8:	bb c1       	rjmp	.+886    	; 0x2660 <decodeFrame+0x5ec>
    22ea:	e8 85       	ldd	r30, Y+8	; 0x08
    22ec:	f9 85       	ldd	r31, Y+9	; 0x09
    22ee:	ed 50       	subi	r30, 0x0D	; 13
    22f0:	fa 4f       	sbci	r31, 0xFA	; 250
    22f2:	e0 81       	ld	r30, Z
    22f4:	8e 2f       	mov	r24, r30
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	fc 01       	movw	r30, r24
    22fa:	32 97       	sbiw	r30, 0x02	; 2
    22fc:	e1 31       	cpi	r30, 0x11	; 17
    22fe:	f1 05       	cpc	r31, r1
    2300:	08 f0       	brcs	.+2      	; 0x2304 <decodeFrame+0x290>
    2302:	ae c1       	rjmp	.+860    	; 0x2660 <decodeFrame+0x5ec>
    2304:	ed 5b       	subi	r30, 0xBD	; 189
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	0c 94 26 35 	jmp	0x6a4c	; 0x6a4c <__tablejump2__>
    230c:	a8 85       	ldd	r26, Y+8	; 0x08
    230e:	b9 85       	ldd	r27, Y+9	; 0x09
    2310:	13 96       	adiw	r26, 0x03	; 3
    2312:	29 c1       	rjmp	.+594    	; 0x2566 <decodeFrame+0x4f2>
    2314:	e8 85       	ldd	r30, Y+8	; 0x08
    2316:	f9 85       	ldd	r31, Y+9	; 0x09
    2318:	ec 50       	subi	r30, 0x0C	; 12
    231a:	fa 4f       	sbci	r31, 0xFA	; 250
    231c:	10 81       	ld	r17, Z
    231e:	e8 85       	ldd	r30, Y+8	; 0x08
    2320:	f9 85       	ldd	r31, Y+9	; 0x09
    2322:	eb 50       	subi	r30, 0x0B	; 11
    2324:	fa 4f       	sbci	r31, 0xFA	; 250
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	e8 85       	ldd	r30, Y+8	; 0x08
    232c:	f9 85       	ldd	r31, Y+9	; 0x09
    232e:	e9 50       	subi	r30, 0x09	; 9
    2330:	fa 4f       	sbci	r31, 0xFA	; 250
    2332:	00 81       	ld	r16, Z
    2334:	28 85       	ldd	r18, Y+8	; 0x08
    2336:	39 85       	ldd	r19, Y+9	; 0x09
    2338:	2b 5f       	subi	r18, 0xFB	; 251
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	39 87       	std	Y+9, r19	; 0x09
    233e:	28 87       	std	Y+8, r18	; 0x08
    2340:	37 e8       	ldi	r19, 0x87	; 135
    2342:	30 93 c8 05 	sts	0x05C8, r19	; 0x8005c8 <LMIC+0x120>
    2346:	20 2f       	mov	r18, r16
    2348:	20 7f       	andi	r18, 0xF0	; 240
    234a:	09 f0       	breq	.+2      	; 0x234e <decodeFrame+0x2da>
    234c:	db c1       	rjmp	.+950    	; 0x2704 <decodeFrame+0x690>
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	09 f4       	brne	.+2      	; 0x2354 <decodeFrame+0x2e0>
    2352:	d8 c1       	rjmp	.+944    	; 0x2704 <decodeFrame+0x690>
    2354:	20 91 43 05 	lds	r18, 0x0543	; 0x800543 <LMIC+0x9b>
    2358:	30 91 44 05 	lds	r19, 0x0544	; 0x800544 <LMIC+0x9c>
    235c:	20 95       	com	r18
    235e:	30 95       	com	r19
    2360:	28 23       	and	r18, r24
    2362:	39 23       	and	r19, r25
    2364:	23 2b       	or	r18, r19
    2366:	09 f0       	breq	.+2      	; 0x236a <decodeFrame+0x2f6>
    2368:	cd c1       	rjmp	.+922    	; 0x2704 <decodeFrame+0x690>
    236a:	a8 ea       	ldi	r26, 0xA8	; 168
    236c:	b4 e0       	ldi	r27, 0x04	; 4
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	02 2e       	mov	r0, r18
    2378:	02 c0       	rjmp	.+4      	; 0x237e <decodeFrame+0x30a>
    237a:	44 0f       	add	r20, r20
    237c:	55 1f       	adc	r21, r21
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <decodeFrame+0x306>
    2382:	ba 01       	movw	r22, r20
    2384:	68 23       	and	r22, r24
    2386:	79 23       	and	r23, r25
    2388:	67 2b       	or	r22, r23
    238a:	71 f0       	breq	.+28     	; 0x23a8 <decodeFrame+0x334>
    238c:	db 96       	adiw	r26, 0x3b	; 59
    238e:	cd 90       	ld	r12, X+
    2390:	dd 90       	ld	r13, X+
    2392:	ed 90       	ld	r14, X+
    2394:	fc 90       	ld	r15, X
    2396:	de 97       	sbiw	r26, 0x3e	; 62
    2398:	cd 28       	or	r12, r13
    239a:	ce 28       	or	r12, r14
    239c:	cf 28       	or	r12, r15
    239e:	21 f4       	brne	.+8      	; 0x23a8 <decodeFrame+0x334>
    23a0:	40 95       	com	r20
    23a2:	50 95       	com	r21
    23a4:	84 23       	and	r24, r20
    23a6:	95 23       	and	r25, r21
    23a8:	2f 5f       	subi	r18, 0xFF	; 255
    23aa:	3f 4f       	sbci	r19, 0xFF	; 255
    23ac:	14 96       	adiw	r26, 0x04	; 4
    23ae:	20 31       	cpi	r18, 0x10	; 16
    23b0:	31 05       	cpc	r19, r1
    23b2:	f9 f6       	brne	.-66     	; 0x2372 <decodeFrame+0x2fe>
    23b4:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <LMIC+0x9c>
    23b8:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <LMIC+0x9b>
    23bc:	81 2f       	mov	r24, r17
    23be:	82 95       	swap	r24
    23c0:	8f 70       	andi	r24, 0x0F	; 15
    23c2:	e8 2f       	mov	r30, r24
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	ef 57       	subi	r30, 0x7F	; 127
    23c8:	fb 4f       	sbci	r31, 0xFB	; 251
    23ca:	e4 91       	lpm	r30, Z
    23cc:	ef 3f       	cpi	r30, 0xFF	; 255
    23ce:	29 f4       	brne	.+10     	; 0x23da <decodeFrame+0x366>
    23d0:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <LMIC+0x120>
    23d4:	9d 7f       	andi	r25, 0xFD	; 253
    23d6:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <LMIC+0x120>
    23da:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <LMIC+0x120>
    23de:	9f 77       	andi	r25, 0x7F	; 127
    23e0:	97 30       	cpi	r25, 0x07	; 7
    23e2:	59 f4       	brne	.+22     	; 0x23fa <decodeFrame+0x386>
    23e4:	0f 70       	andi	r16, 0x0F	; 15
    23e6:	00 93 51 05 	sts	0x0551, r16	; 0x800551 <LMIC+0xa9>
    23ea:	1f 70       	andi	r17, 0x0F	; 15
    23ec:	e1 2f       	mov	r30, r17
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	e0 59       	subi	r30, 0x90	; 144
    23f2:	fb 4f       	sbci	r31, 0xFB	; 251
    23f4:	64 91       	lpm	r22, Z
    23f6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <setDrTxpow.isra.1>
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <LMIC+0x11d>
    2400:	6c cf       	rjmp	.-296    	; 0x22da <decodeFrame+0x266>
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <LMIC+0x121>
    2408:	a8 85       	ldd	r26, Y+8	; 0x08
    240a:	b9 85       	ldd	r27, Y+9	; 0x09
    240c:	11 96       	adiw	r26, 0x01	; 1
    240e:	ab c0       	rjmp	.+342    	; 0x2566 <decodeFrame+0x4f2>
    2410:	e8 85       	ldd	r30, Y+8	; 0x08
    2412:	f9 85       	ldd	r31, Y+9	; 0x09
    2414:	ec 50       	subi	r30, 0x0C	; 12
    2416:	fa 4f       	sbci	r31, 0xFA	; 250
    2418:	10 81       	ld	r17, Z
    241a:	1f 70       	andi	r17, 0x0F	; 15
    241c:	88 85       	ldd	r24, Y+8	; 0x08
    241e:	99 85       	ldd	r25, Y+9	; 0x09
    2420:	8b 50       	subi	r24, 0x0B	; 11
    2422:	9a 4f       	sbci	r25, 0xFA	; 250
    2424:	0e 94 c5 0c 	call	0x198a	; 0x198a <convFreq>
    2428:	e1 2f       	mov	r30, r17
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	ef 57       	subi	r30, 0x7F	; 127
    242e:	fb 4f       	sbci	r31, 0xFB	; 251
    2430:	e4 91       	lpm	r30, Z
    2432:	ef 3f       	cpi	r30, 0xFF	; 255
    2434:	49 f0       	breq	.+18     	; 0x2448 <decodeFrame+0x3d4>
    2436:	b2 e8       	ldi	r27, 0x82	; 130
    2438:	b0 93 d3 05 	sts	0x05D3, r27	; 0x8005d3 <LMIC+0x12b>
    243c:	61 15       	cp	r22, r1
    243e:	71 05       	cpc	r23, r1
    2440:	81 05       	cpc	r24, r1
    2442:	91 05       	cpc	r25, r1
    2444:	59 f0       	breq	.+22     	; 0x245c <decodeFrame+0x3e8>
    2446:	62 c1       	rjmp	.+708    	; 0x270c <decodeFrame+0x698>
    2448:	30 e8       	ldi	r19, 0x80	; 128
    244a:	30 93 d3 05 	sts	0x05D3, r19	; 0x8005d3 <LMIC+0x12b>
    244e:	67 2b       	or	r22, r23
    2450:	68 2b       	or	r22, r24
    2452:	69 2b       	or	r22, r25
    2454:	19 f0       	breq	.+6      	; 0x245c <decodeFrame+0x3e8>
    2456:	21 e8       	ldi	r18, 0x81	; 129
    2458:	20 93 d3 05 	sts	0x05D3, r18	; 0x8005d3 <LMIC+0x12b>
    245c:	88 85       	ldd	r24, Y+8	; 0x08
    245e:	99 85       	ldd	r25, Y+9	; 0x09
    2460:	05 96       	adiw	r24, 0x05	; 5
    2462:	fb c0       	rjmp	.+502    	; 0x265a <decodeFrame+0x5e6>
    2464:	e8 85       	ldd	r30, Y+8	; 0x08
    2466:	f9 85       	ldd	r31, Y+9	; 0x09
    2468:	ec 50       	subi	r30, 0x0C	; 12
    246a:	fa 4f       	sbci	r31, 0xFA	; 250
    246c:	20 81       	ld	r18, Z
    246e:	2f 3f       	cpi	r18, 0xFF	; 255
    2470:	49 f4       	brne	.+18     	; 0x2484 <decodeFrame+0x410>
    2472:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    2476:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    247a:	80 64       	ori	r24, 0x40	; 64
    247c:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    2480:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    2484:	2f 70       	andi	r18, 0x0F	; 15
    2486:	20 93 46 05 	sts	0x0546, r18	; 0x800546 <LMIC+0x9e>
    248a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    248e:	60 93 47 05 	sts	0x0547, r22	; 0x800547 <LMIC+0x9f>
    2492:	70 93 48 05 	sts	0x0548, r23	; 0x800548 <LMIC+0xa0>
    2496:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <LMIC+0xa1>
    249a:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <LMIC+0xa2>
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <LMIC+0x124>
    24a4:	a8 85       	ldd	r26, Y+8	; 0x08
    24a6:	b9 85       	ldd	r27, Y+9	; 0x09
    24a8:	12 96       	adiw	r26, 0x02	; 2
    24aa:	5d c0       	rjmp	.+186    	; 0x2566 <decodeFrame+0x4f2>
    24ac:	e8 85       	ldd	r30, Y+8	; 0x08
    24ae:	f9 85       	ldd	r31, Y+9	; 0x09
    24b0:	ec 50       	subi	r30, 0x0C	; 12
    24b2:	fa 4f       	sbci	r31, 0xFA	; 250
    24b4:	d0 80       	ld	r13, Z
    24b6:	88 85       	ldd	r24, Y+8	; 0x08
    24b8:	99 85       	ldd	r25, Y+9	; 0x09
    24ba:	8b 50       	subi	r24, 0x0B	; 11
    24bc:	9a 4f       	sbci	r25, 0xFA	; 250
    24be:	0e 94 c5 0c 	call	0x198a	; 0x198a <convFreq>
    24c2:	ab 01       	movw	r20, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	e8 85       	ldd	r30, Y+8	; 0x08
    24c8:	f9 85       	ldd	r31, Y+9	; 0x09
    24ca:	e8 50       	subi	r30, 0x08	; 8
    24cc:	fa 4f       	sbci	r31, 0xFA	; 250
    24ce:	e0 81       	ld	r30, Z
    24d0:	b0 e8       	ldi	r27, 0x80	; 128
    24d2:	b0 93 cd 05 	sts	0x05CD, r27	; 0x8005cd <LMIC+0x125>
    24d6:	41 15       	cp	r20, r1
    24d8:	51 05       	cpc	r21, r1
    24da:	61 05       	cpc	r22, r1
    24dc:	71 05       	cpc	r23, r1
    24de:	21 f1       	breq	.+72     	; 0x2528 <decodeFrame+0x4b4>
    24e0:	8e 2f       	mov	r24, r30
    24e2:	82 95       	swap	r24
    24e4:	8f 70       	andi	r24, 0x0F	; 15
    24e6:	2f e0       	ldi	r18, 0x0F	; 15
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	28 1b       	sub	r18, r24
    24ec:	31 09       	sbc	r19, r1
    24ee:	c9 01       	movw	r24, r18
    24f0:	2f ef       	ldi	r18, 0xFF	; 255
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <decodeFrame+0x486>
    24f6:	36 95       	lsr	r19
    24f8:	27 95       	ror	r18
    24fa:	8a 95       	dec	r24
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <decodeFrame+0x482>
    24fe:	ef 70       	andi	r30, 0x0F	; 15
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	9f ef       	ldi	r25, 0xFF	; 255
    2504:	02 c0       	rjmp	.+4      	; 0x250a <decodeFrame+0x496>
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	ea 95       	dec	r30
    250c:	e2 f7       	brpl	.-8      	; 0x2506 <decodeFrame+0x492>
    250e:	28 23       	and	r18, r24
    2510:	39 23       	and	r19, r25
    2512:	0f ef       	ldi	r16, 0xFF	; 255
    2514:	8d 2d       	mov	r24, r13
    2516:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LMIC_setupChannel>
    251a:	88 23       	and	r24, r24
    251c:	29 f0       	breq	.+10     	; 0x2528 <decodeFrame+0x4b4>
    251e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <LMIC+0x125>
    2522:	83 60       	ori	r24, 0x03	; 3
    2524:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <LMIC+0x125>
    2528:	88 85       	ldd	r24, Y+8	; 0x08
    252a:	99 85       	ldd	r25, Y+9	; 0x09
    252c:	06 96       	adiw	r24, 0x06	; 6
    252e:	95 c0       	rjmp	.+298    	; 0x265a <decodeFrame+0x5e6>
    2530:	88 85       	ldd	r24, Y+8	; 0x08
    2532:	99 85       	ldd	r25, Y+9	; 0x09
    2534:	8c 50       	subi	r24, 0x0C	; 12
    2536:	9a 4f       	sbci	r25, 0xFA	; 250
    2538:	0e 94 c5 0c 	call	0x198a	; 0x198a <convFreq>
    253c:	61 15       	cp	r22, r1
    253e:	71 05       	cpc	r23, r1
    2540:	81 05       	cpc	r24, r1
    2542:	91 05       	cpc	r25, r1
    2544:	51 f0       	breq	.+20     	; 0x255a <decodeFrame+0x4e6>
    2546:	60 93 e3 05 	sts	0x05E3, r22	; 0x8005e3 <LMIC+0x13b>
    254a:	70 93 e4 05 	sts	0x05E4, r23	; 0x8005e4 <LMIC+0x13c>
    254e:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <LMIC+0x13d>
    2552:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <LMIC+0x13e>
    2556:	81 e8       	ldi	r24, 0x81	; 129
    2558:	01 c0       	rjmp	.+2      	; 0x255c <decodeFrame+0x4e8>
    255a:	80 e8       	ldi	r24, 0x80	; 128
    255c:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <LMIC+0x12e>
    2560:	a8 85       	ldd	r26, Y+8	; 0x08
    2562:	b9 85       	ldd	r27, Y+9	; 0x09
    2564:	14 96       	adiw	r26, 0x04	; 4
    2566:	b9 87       	std	Y+9, r27	; 0x09
    2568:	a8 87       	std	Y+8, r26	; 0x08
    256a:	b7 ce       	rjmp	.-658    	; 0x22da <decodeFrame+0x266>
    256c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    2570:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    2574:	81 fd       	sbrc	r24, 1
    2576:	6e c0       	rjmp	.+220    	; 0x2654 <decodeFrame+0x5e0>
    2578:	e8 85       	ldd	r30, Y+8	; 0x08
    257a:	f9 85       	ldd	r31, Y+9	; 0x09
    257c:	ea 50       	subi	r30, 0x0A	; 10
    257e:	fa 4f       	sbci	r31, 0xFA	; 250
    2580:	20 81       	ld	r18, Z
    2582:	20 93 2b 06 	sts	0x062B, r18	; 0x80062b <LMIC+0x183>
    2586:	82 60       	ori	r24, 0x02	; 2
    2588:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    258c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    2590:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <LMIC+0x12d>
    2594:	81 11       	cpse	r24, r1
    2596:	06 c0       	rjmp	.+12     	; 0x25a4 <decodeFrame+0x530>
    2598:	63 ee       	ldi	r22, 0xE3	; 227
    259a:	74 e0       	ldi	r23, 0x04	; 4
    259c:	87 ed       	ldi	r24, 0xD7	; 215
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    25a4:	e8 85       	ldd	r30, Y+8	; 0x08
    25a6:	f9 85       	ldd	r31, Y+9	; 0x09
    25a8:	ec 50       	subi	r30, 0x0C	; 12
    25aa:	fa 4f       	sbci	r31, 0xFA	; 250
    25ac:	80 81       	ld	r24, Z
    25ae:	91 81       	ldd	r25, Z+1	; 0x01
    25b0:	be e1       	ldi	r27, 0x1E	; 30
    25b2:	b8 9f       	mul	r27, r24
    25b4:	b0 01       	movw	r22, r0
    25b6:	b9 9f       	mul	r27, r25
    25b8:	70 0d       	add	r23, r0
    25ba:	11 24       	eor	r1, r1
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	24 e2       	ldi	r18, 0x24	; 36
    25c2:	34 ef       	ldi	r19, 0xF4	; 244
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <__umulsidi3>
    25cc:	e8 ee       	ldi	r30, 0xE8	; 232
    25ce:	ae 2e       	mov	r10, r30
    25d0:	f3 e0       	ldi	r31, 0x03	; 3
    25d2:	bf 2e       	mov	r11, r31
    25d4:	c1 2c       	mov	r12, r1
    25d6:	d1 2c       	mov	r13, r1
    25d8:	e1 2c       	mov	r14, r1
    25da:	f1 2c       	mov	r15, r1
    25dc:	00 e0       	ldi	r16, 0x00	; 0
    25de:	10 e0       	ldi	r17, 0x00	; 0
    25e0:	0e 94 98 35 	call	0x6b30	; 0x6b30 <__divdi3>
    25e4:	59 01       	movw	r10, r18
    25e6:	6a 01       	movw	r12, r20
    25e8:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <LMIC+0x4>
    25ec:	90 91 ad 04 	lds	r25, 0x04AD	; 0x8004ad <LMIC+0x5>
    25f0:	a0 91 ae 04 	lds	r26, 0x04AE	; 0x8004ae <LMIC+0x6>
    25f4:	b0 91 af 04 	lds	r27, 0x04AF	; 0x8004af <LMIC+0x7>
    25f8:	8a 0d       	add	r24, r10
    25fa:	9b 1d       	adc	r25, r11
    25fc:	ac 1d       	adc	r26, r12
    25fe:	bd 1d       	adc	r27, r13
    2600:	ac 01       	movw	r20, r24
    2602:	bd 01       	movw	r22, r26
    2604:	46 55       	subi	r20, 0x56	; 86
    2606:	5e 40       	sbci	r21, 0x0E	; 14
    2608:	6a 47       	sbci	r22, 0x7A	; 122
    260a:	71 09       	sbc	r23, r1
    260c:	40 93 31 06 	sts	0x0631, r20	; 0x800631 <LMIC+0x189>
    2610:	50 93 32 06 	sts	0x0632, r21	; 0x800632 <LMIC+0x18a>
    2614:	60 93 33 06 	sts	0x0633, r22	; 0x800633 <LMIC+0x18b>
    2618:	70 93 34 06 	sts	0x0634, r23	; 0x800634 <LMIC+0x18c>
    261c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <LMIC+0xaf>
    2620:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <LMIC+0xae>
    2624:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <LMIC+0xb3>
    2628:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <LMIC+0xb2>
    262c:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <LMIC+0x12c>
    2630:	2c e0       	ldi	r18, 0x0C	; 12
    2632:	20 93 37 06 	sts	0x0637, r18	; 0x800637 <LMIC+0x18f>
    2636:	33 e1       	ldi	r19, 0x13	; 19
    2638:	30 93 2c 06 	sts	0x062C, r19	; 0x80062c <LMIC+0x184>
    263c:	86 5d       	subi	r24, 0xD6	; 214
    263e:	91 40       	sbci	r25, 0x01	; 1
    2640:	a1 09       	sbc	r26, r1
    2642:	b1 09       	sbc	r27, r1
    2644:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <LMIC+0x185>
    2648:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <LMIC+0x186>
    264c:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <LMIC+0x187>
    2650:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <LMIC+0x188>
    2654:	88 85       	ldd	r24, Y+8	; 0x08
    2656:	99 85       	ldd	r25, Y+9	; 0x09
    2658:	04 96       	adiw	r24, 0x04	; 4
    265a:	99 87       	std	Y+9, r25	; 0x09
    265c:	88 87       	std	Y+8, r24	; 0x08
    265e:	3d ce       	rjmp	.-902    	; 0x22da <decodeFrame+0x266>
    2660:	8e 81       	ldd	r24, Y+6	; 0x06
    2662:	9f 81       	ldd	r25, Y+7	; 0x07
    2664:	89 2b       	or	r24, r25
    2666:	31 f5       	brne	.+76     	; 0x26b4 <decodeFrame+0x640>
    2668:	a9 81       	ldd	r26, Y+1	; 0x01
    266a:	ba 81       	ldd	r27, Y+2	; 0x02
    266c:	af 3f       	cpi	r26, 0xFF	; 255
    266e:	2f ef       	ldi	r18, 0xFF	; 255
    2670:	b2 07       	cpc	r27, r18
    2672:	01 f1       	breq	.+64     	; 0x26b4 <decodeFrame+0x640>
    2674:	51 01       	movw	r10, r2
    2676:	a8 18       	sub	r10, r8
    2678:	b9 08       	sbc	r11, r9
    267a:	1a 14       	cp	r1, r10
    267c:	1b 04       	cpc	r1, r11
    267e:	d4 f4       	brge	.+52     	; 0x26b4 <decodeFrame+0x640>
    2680:	c4 01       	movw	r24, r8
    2682:	85 51       	subi	r24, 0x15	; 21
    2684:	9a 4f       	sbci	r25, 0xFA	; 250
    2686:	6c 01       	movw	r12, r24
    2688:	40 91 b7 05 	lds	r20, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    268c:	50 91 b8 05 	lds	r21, 0x05B8	; 0x8005b8 <LMIC+0x110>
    2690:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <LMIC+0x111>
    2694:	70 91 ba 05 	lds	r23, 0x05BA	; 0x8005ba <LMIC+0x112>
    2698:	ab 2b       	or	r26, r27
    269a:	19 f4       	brne	.+6      	; 0x26a2 <decodeFrame+0x62e>
    269c:	87 e9       	ldi	r24, 0x97	; 151
    269e:	95 e0       	ldi	r25, 0x05	; 5
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <decodeFrame+0x632>
    26a2:	87 ea       	ldi	r24, 0xA7	; 167
    26a4:	95 e0       	ldi	r25, 0x05	; 5
    26a6:	ee 24       	eor	r14, r14
    26a8:	e3 94       	inc	r14
    26aa:	f1 2c       	mov	r15, r1
    26ac:	93 01       	movw	r18, r6
    26ae:	82 01       	movw	r16, r4
    26b0:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <aes_cipher.part.3>
    26b4:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <LMIC+0x13f>
    26b8:	88 23       	and	r24, r24
    26ba:	59 f0       	breq	.+22     	; 0x26d2 <decodeFrame+0x65e>
    26bc:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <LMIC+0x140>
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	95 ff       	sbrs	r25, 5
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <decodeFrame+0x656>
    26c6:	90 e8       	ldi	r25, 0x80	; 128
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <decodeFrame+0x658>
    26ca:	90 e4       	ldi	r25, 0x40	; 64
    26cc:	89 2b       	or	r24, r25
    26ce:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <LMIC+0x140>
    26d2:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <LMIC+0x140>
    26d6:	a9 81       	ldd	r26, Y+1	; 0x01
    26d8:	ba 81       	ldd	r27, Y+2	; 0x02
    26da:	11 96       	adiw	r26, 0x01	; 1
    26dc:	41 f4       	brne	.+16     	; 0x26ee <decodeFrame+0x67a>
    26de:	80 62       	ori	r24, 0x20	; 32
    26e0:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <LMIC+0x140>
    26e4:	80 92 e9 05 	sts	0x05E9, r8	; 0x8005e9 <LMIC+0x141>
    26e8:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    26ec:	09 c0       	rjmp	.+18     	; 0x2700 <decodeFrame+0x68c>
    26ee:	80 61       	ori	r24, 0x10	; 16
    26f0:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <LMIC+0x140>
    26f4:	80 92 e9 05 	sts	0x05E9, r8	; 0x8005e9 <LMIC+0x141>
    26f8:	82 2d       	mov	r24, r2
    26fa:	88 19       	sub	r24, r8
    26fc:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <LMIC+0x142>
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	12 c0       	rjmp	.+36     	; 0x2728 <decodeFrame+0x6b4>
    2704:	86 e8       	ldi	r24, 0x86	; 134
    2706:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <LMIC+0x120>
    270a:	58 ce       	rjmp	.-848    	; 0x23bc <decodeFrame+0x348>
    270c:	a3 e8       	ldi	r26, 0x83	; 131
    270e:	a0 93 d3 05 	sts	0x05D3, r26	; 0x8005d3 <LMIC+0x12b>
    2712:	10 93 ce 05 	sts	0x05CE, r17	; 0x8005ce <LMIC+0x126>
    2716:	60 93 cf 05 	sts	0x05CF, r22	; 0x8005cf <LMIC+0x127>
    271a:	70 93 d0 05 	sts	0x05D0, r23	; 0x8005d0 <LMIC+0x128>
    271e:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <LMIC+0x129>
    2722:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <LMIC+0x12a>
    2726:	9a ce       	rjmp	.-716    	; 0x245c <decodeFrame+0x3e8>
    2728:	29 96       	adiw	r28, 0x09	; 9
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	df 91       	pop	r29
    2736:	cf 91       	pop	r28
    2738:	1f 91       	pop	r17
    273a:	0f 91       	pop	r16
    273c:	ff 90       	pop	r15
    273e:	ef 90       	pop	r14
    2740:	df 90       	pop	r13
    2742:	cf 90       	pop	r12
    2744:	bf 90       	pop	r11
    2746:	af 90       	pop	r10
    2748:	9f 90       	pop	r9
    274a:	8f 90       	pop	r8
    274c:	7f 90       	pop	r7
    274e:	6f 90       	pop	r6
    2750:	5f 90       	pop	r5
    2752:	4f 90       	pop	r4
    2754:	3f 90       	pop	r3
    2756:	2f 90       	pop	r2
    2758:	08 95       	ret

0000275a <LMIC_disableChannel>:
    275a:	48 2f       	mov	r20, r24
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	f9 01       	movw	r30, r18
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	e8 55       	subi	r30, 0x58	; 88
    276c:	fb 4f       	sbci	r31, 0xFB	; 251
    276e:	13 ae       	std	Z+59, r1	; 0x3b
    2770:	14 ae       	std	Z+60, r1	; 0x3c
    2772:	15 ae       	std	Z+61, r1	; 0x3d
    2774:	16 ae       	std	Z+62, r1	; 0x3e
    2776:	22 0f       	add	r18, r18
    2778:	33 1f       	adc	r19, r19
    277a:	f9 01       	movw	r30, r18
    277c:	ed 5d       	subi	r30, 0xDD	; 221
    277e:	fa 4f       	sbci	r31, 0xFA	; 250
    2780:	11 82       	std	Z+1, r1	; 0x01
    2782:	10 82       	st	Z, r1
    2784:	e3 e4       	ldi	r30, 0x43	; 67
    2786:	f5 e0       	ldi	r31, 0x05	; 5
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <LMIC_disableChannel+0x38>
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	4a 95       	dec	r20
    2794:	e2 f7       	brpl	.-8      	; 0x278e <LMIC_disableChannel+0x34>
    2796:	80 95       	com	r24
    2798:	90 95       	com	r25
    279a:	20 81       	ld	r18, Z
    279c:	31 81       	ldd	r19, Z+1	; 0x01
    279e:	82 23       	and	r24, r18
    27a0:	93 23       	and	r25, r19
    27a2:	91 83       	std	Z+1, r25	; 0x01
    27a4:	80 83       	st	Z, r24
    27a6:	08 95       	ret

000027a8 <LMIC_startJoining>:
    27a8:	cf 92       	push	r12
    27aa:	df 92       	push	r13
    27ac:	ef 92       	push	r14
    27ae:	ff 92       	push	r15
    27b0:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    27b4:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <LMIC+0x110>
    27b8:	a0 91 b9 05 	lds	r26, 0x05B9	; 0x8005b9 <LMIC+0x111>
    27bc:	b0 91 ba 05 	lds	r27, 0x05BA	; 0x8005ba <LMIC+0x112>
    27c0:	89 2b       	or	r24, r25
    27c2:	8a 2b       	or	r24, r26
    27c4:	8b 2b       	or	r24, r27
    27c6:	09 f0       	breq	.+2      	; 0x27ca <LMIC_startJoining+0x22>
    27c8:	64 c0       	rjmp	.+200    	; 0x2892 <LMIC_startJoining+0xea>
    27ca:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    27ce:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    27d2:	80 79       	andi	r24, 0x90	; 144
    27d4:	99 27       	eor	r25, r25
    27d6:	89 2b       	or	r24, r25
    27d8:	31 f0       	breq	.+12     	; 0x27e6 <LMIC_startJoining+0x3e>
    27da:	69 e3       	ldi	r22, 0x39	; 57
    27dc:	77 e0       	ldi	r23, 0x07	; 7
    27de:	87 ed       	ldi	r24, 0xD7	; 215
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    27e6:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <LMIC+0x9e>
    27ea:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    27ee:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    27f2:	8e 7d       	andi	r24, 0xDE	; 222
    27f4:	97 7e       	andi	r25, 0xE7	; 231
    27f6:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    27fa:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    27fe:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <LMIC+0x13f>
    2802:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <LMIC+0xad>
    2806:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    280a:	63 e0       	ldi	r22, 0x03	; 3
    280c:	0e 94 c5 34 	call	0x698a	; 0x698a <__udivmodqi4>
    2810:	90 93 45 05 	sts	0x0545, r25	; 0x800545 <LMIC+0x9d>
    2814:	8e e0       	ldi	r24, 0x0E	; 14
    2816:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <LMIC+0xaa>
    281a:	85 e0       	ldi	r24, 0x05	; 5
    281c:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <LMIC+0xab>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	0e 94 28 0c 	call	0x1850	; 0x1850 <initDefaultChannels>
    2826:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    282a:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    282e:	93 ff       	sbrs	r25, 3
    2830:	06 c0       	rjmp	.+12     	; 0x283e <LMIC_startJoining+0x96>
    2832:	6a eb       	ldi	r22, 0xBA	; 186
    2834:	72 e0       	ldi	r23, 0x02	; 2
    2836:	87 ed       	ldi	r24, 0xD7	; 215
    2838:	91 e0       	ldi	r25, 0x01	; 1
    283a:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    283e:	c0 90 c7 04 	lds	r12, 0x04C7	; 0x8004c7 <LMIC+0x1f>
    2842:	d0 90 c8 04 	lds	r13, 0x04C8	; 0x8004c8 <LMIC+0x20>
    2846:	e0 90 c9 04 	lds	r14, 0x04C9	; 0x8004c9 <LMIC+0x21>
    284a:	f0 90 ca 04 	lds	r15, 0x04CA	; 0x8004ca <LMIC+0x22>
    284e:	88 e0       	ldi	r24, 0x08	; 8
    2850:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <rndDelay>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8c 0d       	add	r24, r12
    285a:	9d 1d       	adc	r25, r13
    285c:	ae 1d       	adc	r26, r14
    285e:	bf 1d       	adc	r27, r15
    2860:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <LMIC>
    2864:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <LMIC+0x1>
    2868:	a0 93 aa 04 	sts	0x04AA, r26	; 0x8004aa <LMIC+0x2>
    286c:	b0 93 ab 04 	sts	0x04AB, r27	; 0x8004ab <LMIC+0x3>
    2870:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    2874:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    2878:	84 60       	ori	r24, 0x04	; 4
    287a:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    287e:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    2882:	61 e6       	ldi	r22, 0x61	; 97
    2884:	7d e1       	ldi	r23, 0x1D	; 29
    2886:	8b eb       	ldi	r24, 0xBB	; 187
    2888:	94 e0       	ldi	r25, 0x04	; 4
    288a:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <os_setCallback>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <LMIC_startJoining+0xec>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	cf 90       	pop	r12
    289c:	08 95       	ret

0000289e <engineUpdate>:
    289e:	2f 92       	push	r2
    28a0:	3f 92       	push	r3
    28a2:	4f 92       	push	r4
    28a4:	5f 92       	push	r5
    28a6:	6f 92       	push	r6
    28a8:	7f 92       	push	r7
    28aa:	8f 92       	push	r8
    28ac:	9f 92       	push	r9
    28ae:	af 92       	push	r10
    28b0:	bf 92       	push	r11
    28b2:	cf 92       	push	r12
    28b4:	df 92       	push	r13
    28b6:	ef 92       	push	r14
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	62 97       	sbiw	r28, 0x12	; 18
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    28d6:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    28da:	9c 01       	movw	r18, r24
    28dc:	21 7c       	andi	r18, 0xC1	; 193
    28de:	33 27       	eor	r19, r19
    28e0:	23 2b       	or	r18, r19
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <engineUpdate+0x48>
    28e4:	80 c5       	rjmp	.+2816   	; 0x33e6 <engineUpdate+0xb48>
    28e6:	40 91 b7 05 	lds	r20, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    28ea:	50 91 b8 05 	lds	r21, 0x05B8	; 0x8005b8 <LMIC+0x110>
    28ee:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <LMIC+0x111>
    28f2:	70 91 ba 05 	lds	r23, 0x05BA	; 0x8005ba <LMIC+0x112>
    28f6:	45 2b       	or	r20, r21
    28f8:	46 2b       	or	r20, r22
    28fa:	47 2b       	or	r20, r23
    28fc:	e1 f4       	brne	.+56     	; 0x2936 <engineUpdate+0x98>
    28fe:	82 fd       	sbrc	r24, 2
    2900:	1a c0       	rjmp	.+52     	; 0x2936 <engineUpdate+0x98>
    2902:	62 96       	adiw	r28, 0x12	; 18
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	ff 90       	pop	r15
    2918:	ef 90       	pop	r14
    291a:	df 90       	pop	r13
    291c:	cf 90       	pop	r12
    291e:	bf 90       	pop	r11
    2920:	af 90       	pop	r10
    2922:	9f 90       	pop	r9
    2924:	8f 90       	pop	r8
    2926:	7f 90       	pop	r7
    2928:	6f 90       	pop	r6
    292a:	5f 90       	pop	r5
    292c:	4f 90       	pop	r4
    292e:	3f 90       	pop	r3
    2930:	2f 90       	pop	r2
    2932:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <LMIC_startJoining>
    2936:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    293a:	2b 01       	movw	r4, r22
    293c:	3c 01       	movw	r6, r24
    293e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    2942:	81 ff       	sbrs	r24, 1
    2944:	30 c0       	rjmp	.+96     	; 0x29a6 <engineUpdate+0x108>
    2946:	40 91 2d 06 	lds	r20, 0x062D	; 0x80062d <LMIC+0x185>
    294a:	50 91 2e 06 	lds	r21, 0x062E	; 0x80062e <LMIC+0x186>
    294e:	60 91 2f 06 	lds	r22, 0x062F	; 0x80062f <LMIC+0x187>
    2952:	70 91 30 06 	lds	r23, 0x0630	; 0x800630 <LMIC+0x188>
    2956:	d3 01       	movw	r26, r6
    2958:	c2 01       	movw	r24, r4
    295a:	83 58       	subi	r24, 0x83	; 131
    295c:	9f 4f       	sbci	r25, 0xFF	; 255
    295e:	af 4f       	sbci	r26, 0xFF	; 255
    2960:	bf 4f       	sbci	r27, 0xFF	; 255
    2962:	84 1b       	sub	r24, r20
    2964:	95 0b       	sbc	r25, r21
    2966:	a6 0b       	sbc	r26, r22
    2968:	b7 0b       	sbc	r27, r23
    296a:	18 16       	cp	r1, r24
    296c:	19 06       	cpc	r1, r25
    296e:	1a 06       	cpc	r1, r26
    2970:	1b 06       	cpc	r1, r27
    2972:	34 f4       	brge	.+12     	; 0x2980 <engineUpdate+0xe2>
    2974:	68 e0       	ldi	r22, 0x08	; 8
    2976:	78 e0       	ldi	r23, 0x08	; 8
    2978:	87 ed       	ldi	r24, 0xD7	; 215
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    2980:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <LMIC+0x185>
    2984:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <LMIC+0x186>
    2988:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <LMIC+0x187>
    298c:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <LMIC+0x188>
    2990:	8c 01       	movw	r16, r24
    2992:	9d 01       	movw	r18, r26
    2994:	0d 57       	subi	r16, 0x7D	; 125
    2996:	11 09       	sbc	r17, r1
    2998:	21 09       	sbc	r18, r1
    299a:	31 09       	sbc	r19, r1
    299c:	09 83       	std	Y+1, r16	; 0x01
    299e:	1a 83       	std	Y+2, r17	; 0x02
    29a0:	2b 83       	std	Y+3, r18	; 0x03
    29a2:	3c 83       	std	Y+4, r19	; 0x04
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <engineUpdate+0x110>
    29a6:	19 82       	std	Y+1, r1	; 0x01
    29a8:	1a 82       	std	Y+2, r1	; 0x02
    29aa:	1b 82       	std	Y+3, r1	; 0x03
    29ac:	1c 82       	std	Y+4, r1	; 0x04
    29ae:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <LMIC+0xa7>
    29b2:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <LMIC+0xa8>
    29b6:	3a 8b       	std	Y+18, r19	; 0x12
    29b8:	29 8b       	std	Y+17, r18	; 0x11
    29ba:	c9 01       	movw	r24, r18
    29bc:	8c 73       	andi	r24, 0x3C	; 60
    29be:	99 27       	eor	r25, r25
    29c0:	89 2b       	or	r24, r25
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <engineUpdate+0x128>
    29c4:	ca c3       	rjmp	.+1940   	; 0x315a <engineUpdate+0x8bc>
    29c6:	19 01       	movw	r2, r18
    29c8:	34 e2       	ldi	r19, 0x24	; 36
    29ca:	23 22       	and	r2, r19
    29cc:	33 24       	eor	r3, r3
    29ce:	49 89       	ldd	r20, Y+17	; 0x11
    29d0:	5a 89       	ldd	r21, Y+18	; 0x12
    29d2:	53 ff       	sbrs	r21, 3
    29d4:	b9 c0       	rjmp	.+370    	; 0x2b48 <engineUpdate+0x2aa>
    29d6:	60 91 43 05 	lds	r22, 0x0543	; 0x800543 <LMIC+0x9b>
    29da:	70 91 44 05 	lds	r23, 0x0544	; 0x800544 <LMIC+0x9c>
    29de:	7a 87       	std	Y+10, r23	; 0x0a
    29e0:	69 87       	std	Y+9, r22	; 0x09
    29e2:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <LMIC+0xab>
    29e6:	8f 70       	andi	r24, 0x0F	; 15
    29e8:	21 e0       	ldi	r18, 0x01	; 1
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	d9 01       	movw	r26, r18
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <engineUpdate+0x156>
    29f0:	aa 0f       	add	r26, r26
    29f2:	bb 1f       	adc	r27, r27
    29f4:	8a 95       	dec	r24
    29f6:	e2 f7       	brpl	.-8      	; 0x29f0 <engineUpdate+0x152>
    29f8:	bc 87       	std	Y+12, r27	; 0x0c
    29fa:	ab 87       	std	Y+11, r26	; 0x0b
    29fc:	af e0       	ldi	r26, 0x0F	; 15
    29fe:	93 01       	movw	r18, r6
    2a00:	82 01       	movw	r16, r4
    2a02:	1e 52       	subi	r17, 0x2E	; 46
    2a04:	26 4b       	sbci	r18, 0xB6	; 182
    2a06:	34 49       	sbci	r19, 0x94	; 148
    2a08:	0d 87       	std	Y+13, r16	; 0x0d
    2a0a:	1e 87       	std	Y+14, r17	; 0x0e
    2a0c:	2f 87       	std	Y+15, r18	; 0x0f
    2a0e:	38 8b       	std	Y+16, r19	; 0x10
    2a10:	cd 84       	ldd	r12, Y+13	; 0x0d
    2a12:	de 84       	ldd	r13, Y+14	; 0x0e
    2a14:	ef 84       	ldd	r14, Y+15	; 0x0f
    2a16:	f8 88       	ldd	r15, Y+16	; 0x10
    2a18:	e8 ea       	ldi	r30, 0xA8	; 168
    2a1a:	f4 e0       	ldi	r31, 0x04	; 4
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	2a 2f       	mov	r18, r26
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	a9 01       	movw	r20, r18
    2a28:	08 2e       	mov	r0, r24
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <engineUpdate+0x192>
    2a2c:	55 95       	asr	r21
    2a2e:	47 95       	ror	r20
    2a30:	0a 94       	dec	r0
    2a32:	e2 f7       	brpl	.-8      	; 0x2a2c <engineUpdate+0x18e>
    2a34:	40 ff       	sbrs	r20, 0
    2a36:	12 c0       	rjmp	.+36     	; 0x2a5c <engineUpdate+0x1be>
    2a38:	47 8d       	ldd	r20, Z+31	; 0x1f
    2a3a:	50 a1       	ldd	r21, Z+32	; 0x20
    2a3c:	61 a1       	ldd	r22, Z+33	; 0x21
    2a3e:	72 a1       	ldd	r23, Z+34	; 0x22
    2a40:	46 01       	movw	r8, r12
    2a42:	57 01       	movw	r10, r14
    2a44:	84 1a       	sub	r8, r20
    2a46:	95 0a       	sbc	r9, r21
    2a48:	a6 0a       	sbc	r10, r22
    2a4a:	b7 0a       	sbc	r11, r23
    2a4c:	18 14       	cp	r1, r8
    2a4e:	19 04       	cpc	r1, r9
    2a50:	1a 04       	cpc	r1, r10
    2a52:	1b 04       	cpc	r1, r11
    2a54:	1c f4       	brge	.+6      	; 0x2a5c <engineUpdate+0x1be>
    2a56:	b8 2f       	mov	r27, r24
    2a58:	6a 01       	movw	r12, r20
    2a5a:	7b 01       	movw	r14, r22
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	38 96       	adiw	r30, 0x08	; 8
    2a60:	84 30       	cpi	r24, 0x04	; 4
    2a62:	91 05       	cpc	r25, r1
    2a64:	01 f7       	brne	.-64     	; 0x2a26 <engineUpdate+0x188>
    2a66:	2b 2f       	mov	r18, r27
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	3e 83       	std	Y+6, r19	; 0x06
    2a6c:	2d 83       	std	Y+5, r18	; 0x05
    2a6e:	89 01       	movw	r16, r18
    2a70:	63 e0       	ldi	r22, 0x03	; 3
    2a72:	00 0f       	add	r16, r16
    2a74:	11 1f       	adc	r17, r17
    2a76:	6a 95       	dec	r22
    2a78:	e1 f7       	brne	.-8      	; 0x2a72 <engineUpdate+0x1d4>
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	e8 55       	subi	r30, 0x58	; 88
    2a7e:	fb 4f       	sbci	r31, 0xFB	; 251
    2a80:	26 8d       	ldd	r18, Z+30	; 0x1e
    2a82:	90 e1       	ldi	r25, 0x10	; 16
    2a84:	8b 2e       	mov	r8, r27
    2a86:	91 2c       	mov	r9, r1
    2a88:	a1 2c       	mov	r10, r1
    2a8a:	b1 2c       	mov	r11, r1
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	82 0f       	add	r24, r18
    2a90:	80 31       	cpi	r24, 0x10	; 16
    2a92:	10 f0       	brcs	.+4      	; 0x2a98 <engineUpdate+0x1fa>
    2a94:	81 ef       	ldi	r24, 0xF1	; 241
    2a96:	82 0f       	add	r24, r18
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	41 e0       	ldi	r20, 0x01	; 1
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	08 2e       	mov	r0, r24
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <engineUpdate+0x20a>
    2aa4:	44 0f       	add	r20, r20
    2aa6:	55 1f       	adc	r21, r21
    2aa8:	0a 94       	dec	r0
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <engineUpdate+0x206>
    2aac:	69 85       	ldd	r22, Y+9	; 0x09
    2aae:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ab0:	46 23       	and	r20, r22
    2ab2:	57 23       	and	r21, r23
    2ab4:	45 2b       	or	r20, r21
    2ab6:	41 f1       	breq	.+80     	; 0x2b08 <engineUpdate+0x26a>
    2ab8:	f9 01       	movw	r30, r18
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	ed 5d       	subi	r30, 0xDD	; 221
    2ac0:	fa 4f       	sbci	r31, 0xFA	; 250
    2ac2:	40 81       	ld	r20, Z
    2ac4:	51 81       	ldd	r21, Z+1	; 0x01
    2ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aca:	46 23       	and	r20, r22
    2acc:	57 23       	and	r21, r23
    2ace:	45 2b       	or	r20, r21
    2ad0:	d9 f0       	breq	.+54     	; 0x2b08 <engineUpdate+0x26a>
    2ad2:	22 0f       	add	r18, r18
    2ad4:	33 1f       	adc	r19, r19
    2ad6:	22 0f       	add	r18, r18
    2ad8:	33 1f       	adc	r19, r19
    2ada:	f9 01       	movw	r30, r18
    2adc:	e8 55       	subi	r30, 0x58	; 88
    2ade:	fb 4f       	sbci	r31, 0xFB	; 251
    2ae0:	43 ad       	ldd	r20, Z+59	; 0x3b
    2ae2:	54 ad       	ldd	r21, Z+60	; 0x3c
    2ae4:	65 ad       	ldd	r22, Z+61	; 0x3d
    2ae6:	76 ad       	ldd	r23, Z+62	; 0x3e
    2ae8:	43 70       	andi	r20, 0x03	; 3
    2aea:	55 27       	eor	r21, r21
    2aec:	66 27       	eor	r22, r22
    2aee:	77 27       	eor	r23, r23
    2af0:	84 16       	cp	r8, r20
    2af2:	95 06       	cpc	r9, r21
    2af4:	a6 06       	cpc	r10, r22
    2af6:	b7 06       	cpc	r11, r23
    2af8:	39 f4       	brne	.+14     	; 0x2b08 <engineUpdate+0x26a>
    2afa:	f8 01       	movw	r30, r16
    2afc:	e8 55       	subi	r30, 0x58	; 88
    2afe:	fb 4f       	sbci	r31, 0xFB	; 251
    2b00:	86 8f       	std	Z+30, r24	; 0x1e
    2b02:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <LMIC+0x9d>
    2b06:	10 c0       	rjmp	.+32     	; 0x2b28 <engineUpdate+0x28a>
    2b08:	91 50       	subi	r25, 0x01	; 1
    2b0a:	11 f0       	breq	.+4      	; 0x2b10 <engineUpdate+0x272>
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	be cf       	rjmp	.-132    	; 0x2a8c <engineUpdate+0x1ee>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	0d 80       	ldd	r0, Y+5	; 0x05
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <engineUpdate+0x27e>
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	0a 94       	dec	r0
    2b1e:	e2 f7       	brpl	.-8      	; 0x2b18 <engineUpdate+0x27a>
    2b20:	80 95       	com	r24
    2b22:	a8 23       	and	r26, r24
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <engineUpdate+0x28a>
    2b26:	74 cf       	rjmp	.-280    	; 0x2a10 <engineUpdate+0x172>
    2b28:	c0 92 a8 04 	sts	0x04A8, r12	; 0x8004a8 <LMIC>
    2b2c:	d0 92 a9 04 	sts	0x04A9, r13	; 0x8004a9 <LMIC+0x1>
    2b30:	e0 92 aa 04 	sts	0x04AA, r14	; 0x8004aa <LMIC+0x2>
    2b34:	f0 92 ab 04 	sts	0x04AB, r15	; 0x8004ab <LMIC+0x3>
    2b38:	89 89       	ldd	r24, Y+17	; 0x11
    2b3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b3c:	97 7f       	andi	r25, 0xF7	; 247
    2b3e:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    2b42:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    2b46:	08 c0       	rjmp	.+16     	; 0x2b58 <engineUpdate+0x2ba>
    2b48:	c0 90 a8 04 	lds	r12, 0x04A8	; 0x8004a8 <LMIC>
    2b4c:	d0 90 a9 04 	lds	r13, 0x04A9	; 0x8004a9 <LMIC+0x1>
    2b50:	e0 90 aa 04 	lds	r14, 0x04AA	; 0x8004aa <LMIC+0x2>
    2b54:	f0 90 ab 04 	lds	r15, 0x04AB	; 0x8004ab <LMIC+0x3>
    2b58:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <LMIC+0x9e>
    2b5c:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    2b60:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    2b64:	21 11       	cpse	r18, r1
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <engineUpdate+0x2ce>
    2b68:	90 ff       	sbrs	r25, 0
    2b6a:	12 c0       	rjmp	.+36     	; 0x2b90 <engineUpdate+0x2f2>
    2b6c:	40 91 47 05 	lds	r20, 0x0547	; 0x800547 <LMIC+0x9f>
    2b70:	50 91 48 05 	lds	r21, 0x0548	; 0x800548 <LMIC+0xa0>
    2b74:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <LMIC+0xa1>
    2b78:	70 91 4a 05 	lds	r23, 0x054A	; 0x80054a <LMIC+0xa2>
    2b7c:	97 01       	movw	r18, r14
    2b7e:	86 01       	movw	r16, r12
    2b80:	04 1b       	sub	r16, r20
    2b82:	15 0b       	sbc	r17, r21
    2b84:	26 0b       	sbc	r18, r22
    2b86:	37 0b       	sbc	r19, r23
    2b88:	37 ff       	sbrs	r19, 7
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <engineUpdate+0x2f2>
    2b8c:	6a 01       	movw	r12, r20
    2b8e:	7b 01       	movw	r14, r22
    2b90:	9c 01       	movw	r18, r24
    2b92:	22 70       	andi	r18, 0x02	; 2
    2b94:	33 27       	eor	r19, r19
    2b96:	81 ff       	sbrs	r24, 1
    2b98:	27 c0       	rjmp	.+78     	; 0x2be8 <engineUpdate+0x34a>
    2b9a:	21 14       	cp	r2, r1
    2b9c:	31 04       	cpc	r3, r1
    2b9e:	29 f4       	brne	.+10     	; 0x2baa <engineUpdate+0x30c>
    2ba0:	48 ed       	ldi	r20, 0xD8	; 216
    2ba2:	58 eb       	ldi	r21, 0xB8	; 184
    2ba4:	65 e0       	ldi	r22, 0x05	; 5
    2ba6:	70 e0       	ldi	r23, 0x00	; 0
    2ba8:	04 c0       	rjmp	.+8      	; 0x2bb2 <engineUpdate+0x314>
    2baa:	44 e4       	ldi	r20, 0x44	; 68
    2bac:	55 e9       	ldi	r21, 0x95	; 149
    2bae:	68 e0       	ldi	r22, 0x08	; 8
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	4c 0d       	add	r20, r12
    2bb4:	5d 1d       	adc	r21, r13
    2bb6:	6e 1d       	adc	r22, r14
    2bb8:	7f 1d       	adc	r23, r15
    2bba:	89 80       	ldd	r8, Y+1	; 0x01
    2bbc:	9a 80       	ldd	r9, Y+2	; 0x02
    2bbe:	ab 80       	ldd	r10, Y+3	; 0x03
    2bc0:	bc 80       	ldd	r11, Y+4	; 0x04
    2bc2:	48 19       	sub	r20, r8
    2bc4:	59 09       	sbc	r21, r9
    2bc6:	6a 09       	sbc	r22, r10
    2bc8:	7b 09       	sbc	r23, r11
    2bca:	14 16       	cp	r1, r20
    2bcc:	15 06       	cpc	r1, r21
    2bce:	16 06       	cpc	r1, r22
    2bd0:	17 06       	cpc	r1, r23
    2bd2:	54 f4       	brge	.+20     	; 0x2be8 <engineUpdate+0x34a>
    2bd4:	40 e1       	ldi	r20, 0x10	; 16
    2bd6:	c5 01       	movw	r24, r10
    2bd8:	b4 01       	movw	r22, r8
    2bda:	6c 56       	subi	r22, 0x6C	; 108
    2bdc:	7a 4f       	sbci	r23, 0xFA	; 250
    2bde:	8d 4f       	sbci	r24, 0xFD	; 253
    2be0:	9f 4f       	sbci	r25, 0xFF	; 255
    2be2:	0e 94 89 0a 	call	0x1512	; 0x1512 <txDelay>
    2be6:	bc c2       	rjmp	.+1400   	; 0x3160 <engineUpdate+0x8c2>
    2be8:	b3 01       	movw	r22, r6
    2bea:	a2 01       	movw	r20, r4
    2bec:	43 58       	subi	r20, 0x83	; 131
    2bee:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf0:	6f 4f       	sbci	r22, 0xFF	; 255
    2bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf4:	46 01       	movw	r8, r12
    2bf6:	57 01       	movw	r10, r14
    2bf8:	84 1a       	sub	r8, r20
    2bfa:	95 0a       	sbc	r9, r21
    2bfc:	a6 0a       	sbc	r10, r22
    2bfe:	b7 0a       	sbc	r11, r23
    2c00:	b7 fe       	sbrs	r11, 7
    2c02:	9e c2       	rjmp	.+1340   	; 0x3140 <engineUpdate+0x8a2>
    2c04:	90 90 53 05 	lds	r9, 0x0553	; 0x800553 <LMIC+0xab>
    2c08:	23 28       	or	r2, r3
    2c0a:	09 f4       	brne	.+2      	; 0x2c0e <engineUpdate+0x370>
    2c0c:	44 c0       	rjmp	.+136    	; 0x2c96 <engineUpdate+0x3f8>
    2c0e:	85 ff       	sbrs	r24, 5
    2c10:	0f c0       	rjmp	.+30     	; 0x2c30 <engineUpdate+0x392>
    2c12:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <LMIC+0xad>
    2c16:	81 50       	subi	r24, 0x01	; 1
    2c18:	48 f0       	brcs	.+18     	; 0x2c2c <engineUpdate+0x38e>
    2c1a:	e9 2d       	mov	r30, r9
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	e0 58       	subi	r30, 0x80	; 128
    2c20:	fb 4f       	sbci	r31, 0xFB	; 251
    2c22:	e4 91       	lpm	r30, Z
    2c24:	ef 3f       	cpi	r30, 0xFF	; 255
    2c26:	b9 f3       	breq	.-18     	; 0x2c16 <engineUpdate+0x378>
    2c28:	9a 94       	dec	r9
    2c2a:	f5 cf       	rjmp	.-22     	; 0x2c16 <engineUpdate+0x378>
    2c2c:	80 ec       	ldi	r24, 0xC0	; 192
    2c2e:	01 c0       	rjmp	.+2      	; 0x2c32 <engineUpdate+0x394>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <LMIC+0x143>
    2c36:	8c ee       	ldi	r24, 0xEC	; 236
    2c38:	95 e0       	ldi	r25, 0x05	; 5
    2c3a:	0e 94 a9 02 	call	0x552	; 0x552 <os_getArtEui>
    2c3e:	84 ef       	ldi	r24, 0xF4	; 244
    2c40:	95 e0       	ldi	r25, 0x05	; 5
    2c42:	0e 94 aa 02 	call	0x554	; 0x554 <os_getDevEui>
    2c46:	90 91 95 05 	lds	r25, 0x0595	; 0x800595 <LMIC+0xed>
    2c4a:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <LMIC+0xee>
    2c4e:	90 93 fc 05 	sts	0x05FC, r25	; 0x8005fc <LMIC+0x154>
    2c52:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <LMIC+0x155>
    2c56:	88 e8       	ldi	r24, 0x88	; 136
    2c58:	94 e0       	ldi	r25, 0x04	; 4
    2c5a:	0e 94 ab 02 	call	0x556	; 0x556 <os_getDevKey>
    2c5e:	43 e1       	ldi	r20, 0x13	; 19
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	6b ee       	ldi	r22, 0xEB	; 235
    2c64:	75 e0       	ldi	r23, 0x05	; 5
    2c66:	8a e0       	ldi	r24, 0x0A	; 10
    2c68:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    2c6c:	ab 01       	movw	r20, r22
    2c6e:	bc 01       	movw	r22, r24
    2c70:	8e ef       	ldi	r24, 0xFE	; 254
    2c72:	95 e0       	ldi	r25, 0x05	; 5
    2c74:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <os_wmsbf4>
    2c78:	87 e1       	ldi	r24, 0x17	; 23
    2c7a:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <LMIC+0x142>
    2c7e:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <LMIC+0xed>
    2c82:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <LMIC+0xee>
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <LMIC+0xee>
    2c8c:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <LMIC+0xed>
    2c90:	81 e2       	ldi	r24, 0x21	; 33
    2c92:	9e e0       	ldi	r25, 0x0E	; 14
    2c94:	dc c1       	rjmp	.+952    	; 0x304e <engineUpdate+0x7b0>
    2c96:	40 91 bb 05 	lds	r20, 0x05BB	; 0x8005bb <LMIC+0x113>
    2c9a:	50 91 bc 05 	lds	r21, 0x05BC	; 0x8005bc <LMIC+0x114>
    2c9e:	60 91 bd 05 	lds	r22, 0x05BD	; 0x8005bd <LMIC+0x115>
    2ca2:	70 91 be 05 	lds	r23, 0x05BE	; 0x8005be <LMIC+0x116>
    2ca6:	40 38       	cpi	r20, 0x80	; 128
    2ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    2caa:	6f 4f       	sbci	r22, 0xFF	; 255
    2cac:	7f 4f       	sbci	r23, 0xFF	; 255
    2cae:	f0 f0       	brcs	.+60     	; 0x2cec <engineUpdate+0x44e>
    2cb0:	69 e9       	ldi	r22, 0x99	; 153
    2cb2:	7e e1       	ldi	r23, 0x1E	; 30
    2cb4:	8b eb       	ldi	r24, 0xBB	; 187
    2cb6:	94 e0       	ldi	r25, 0x04	; 4
    2cb8:	62 96       	adiw	r28, 0x12	; 18
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	ff 90       	pop	r15
    2cce:	ef 90       	pop	r14
    2cd0:	df 90       	pop	r13
    2cd2:	cf 90       	pop	r12
    2cd4:	bf 90       	pop	r11
    2cd6:	af 90       	pop	r10
    2cd8:	9f 90       	pop	r9
    2cda:	8f 90       	pop	r8
    2cdc:	7f 90       	pop	r7
    2cde:	6f 90       	pop	r6
    2ce0:	5f 90       	pop	r5
    2ce2:	4f 90       	pop	r4
    2ce4:	3f 90       	pop	r3
    2ce6:	2f 90       	pop	r2
    2ce8:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <os_setCallback>
    2cec:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <LMIC+0x13f>
    2cf0:	21 11       	cpse	r18, r1
    2cf2:	0d c0       	rjmp	.+26     	; 0x2d0e <engineUpdate+0x470>
    2cf4:	40 91 bf 05 	lds	r20, 0x05BF	; 0x8005bf <LMIC+0x117>
    2cf8:	50 91 c0 05 	lds	r21, 0x05C0	; 0x8005c0 <LMIC+0x118>
    2cfc:	60 91 c1 05 	lds	r22, 0x05C1	; 0x8005c1 <LMIC+0x119>
    2d00:	70 91 c2 05 	lds	r23, 0x05C2	; 0x8005c2 <LMIC+0x11a>
    2d04:	4f 3f       	cpi	r20, 0xFF	; 255
    2d06:	5f 4f       	sbci	r21, 0xFF	; 255
    2d08:	6f 4f       	sbci	r22, 0xFF	; 255
    2d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0c:	89 f2       	breq	.-94     	; 0x2cb0 <engineUpdate+0x412>
    2d0e:	9c 01       	movw	r18, r24
    2d10:	28 71       	andi	r18, 0x18	; 24
    2d12:	33 27       	eor	r19, r19
    2d14:	20 31       	cpi	r18, 0x10	; 16
    2d16:	31 05       	cpc	r19, r1
    2d18:	21 f0       	breq	.+8      	; 0x2d22 <engineUpdate+0x484>
    2d1a:	80 90 60 05 	lds	r8, 0x0560	; 0x800560 <LMIC+0xb8>
    2d1e:	8d 82       	std	Y+5, r8	; 0x05
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <engineUpdate+0x486>
    2d22:	1d 82       	std	Y+5, r1	; 0x05
    2d24:	82 70       	andi	r24, 0x02	; 2
    2d26:	94 70       	andi	r25, 0x04	; 4
    2d28:	82 30       	cpi	r24, 0x02	; 2
    2d2a:	94 40       	sbci	r25, 0x04	; 4
    2d2c:	89 f4       	brne	.+34     	; 0x2d50 <engineUpdate+0x4b2>
    2d2e:	80 e1       	ldi	r24, 0x10	; 16
    2d30:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <LMIC+0x14b>
    2d34:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <LMIC+0x130>
    2d38:	10 e1       	ldi	r17, 0x10	; 16
    2d3a:	81 9f       	mul	r24, r17
    2d3c:	c0 01       	movw	r24, r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <LMIC+0x12f>
    2d44:	89 2b       	or	r24, r25
    2d46:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <LMIC+0x14c>
    2d4a:	0a e0       	ldi	r16, 0x0A	; 10
    2d4c:	10 e0       	ldi	r17, 0x00	; 0
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <engineUpdate+0x4b6>
    2d50:	08 e0       	ldi	r16, 0x08	; 8
    2d52:	10 e0       	ldi	r17, 0x00	; 0
    2d54:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <LMIC+0x124>
    2d58:	88 23       	and	r24, r24
    2d5a:	49 f0       	breq	.+18     	; 0x2d6e <engineUpdate+0x4d0>
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	e5 51       	subi	r30, 0x15	; 21
    2d60:	fa 4f       	sbci	r31, 0xFA	; 250
    2d62:	84 e0       	ldi	r24, 0x04	; 4
    2d64:	80 83       	st	Z, r24
    2d66:	0f 5f       	subi	r16, 0xFF	; 255
    2d68:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6a:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <LMIC+0x124>
    2d6e:	40 91 d3 05 	lds	r20, 0x05D3	; 0x8005d3 <LMIC+0x12b>
    2d72:	44 23       	and	r20, r20
    2d74:	79 f0       	breq	.+30     	; 0x2d94 <engineUpdate+0x4f6>
    2d76:	c8 01       	movw	r24, r16
    2d78:	88 55       	subi	r24, 0x58	; 88
    2d7a:	9b 4f       	sbci	r25, 0xFB	; 251
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	ed 5b       	subi	r30, 0xBD	; 189
    2d80:	fe 4f       	sbci	r31, 0xFE	; 254
    2d82:	55 e0       	ldi	r21, 0x05	; 5
    2d84:	50 83       	st	Z, r21
    2d86:	31 96       	adiw	r30, 0x01	; 1
    2d88:	43 70       	andi	r20, 0x03	; 3
    2d8a:	40 83       	st	Z, r20
    2d8c:	0e 5f       	subi	r16, 0xFE	; 254
    2d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d90:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <LMIC+0x12b>
    2d94:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <LMIC+0x121>
    2d98:	88 23       	and	r24, r24
    2d9a:	99 f0       	breq	.+38     	; 0x2dc2 <engineUpdate+0x524>
    2d9c:	c8 01       	movw	r24, r16
    2d9e:	88 55       	subi	r24, 0x58	; 88
    2da0:	9b 4f       	sbci	r25, 0xFB	; 251
    2da2:	fc 01       	movw	r30, r24
    2da4:	ed 5b       	subi	r30, 0xBD	; 189
    2da6:	fe 4f       	sbci	r31, 0xFE	; 254
    2da8:	46 e0       	ldi	r20, 0x06	; 6
    2daa:	40 83       	st	Z, r20
    2dac:	31 96       	adiw	r30, 0x01	; 1
    2dae:	4f ef       	ldi	r20, 0xFF	; 255
    2db0:	40 83       	st	Z, r20
    2db2:	31 96       	adiw	r30, 0x01	; 1
    2db4:	40 91 c7 05 	lds	r20, 0x05C7	; 0x8005c7 <LMIC+0x11f>
    2db8:	40 83       	st	Z, r20
    2dba:	0d 5f       	subi	r16, 0xFD	; 253
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <LMIC+0x121>
    2dc2:	40 91 c8 05 	lds	r20, 0x05C8	; 0x8005c8 <LMIC+0x120>
    2dc6:	44 23       	and	r20, r20
    2dc8:	79 f0       	breq	.+30     	; 0x2de8 <engineUpdate+0x54a>
    2dca:	c8 01       	movw	r24, r16
    2dcc:	88 55       	subi	r24, 0x58	; 88
    2dce:	9b 4f       	sbci	r25, 0xFB	; 251
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	ed 5b       	subi	r30, 0xBD	; 189
    2dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd6:	53 e0       	ldi	r21, 0x03	; 3
    2dd8:	50 83       	st	Z, r21
    2dda:	31 96       	adiw	r30, 0x01	; 1
    2ddc:	47 70       	andi	r20, 0x07	; 7
    2dde:	40 83       	st	Z, r20
    2de0:	0e 5f       	subi	r16, 0xFE	; 254
    2de2:	1f 4f       	sbci	r17, 0xFF	; 255
    2de4:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <LMIC+0x120>
    2de8:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <LMIC+0x12d>
    2dec:	88 23       	and	r24, r24
    2dee:	39 f0       	breq	.+14     	; 0x2dfe <engineUpdate+0x560>
    2df0:	f8 01       	movw	r30, r16
    2df2:	e5 51       	subi	r30, 0x15	; 21
    2df4:	fa 4f       	sbci	r31, 0xFA	; 250
    2df6:	82 e1       	ldi	r24, 0x12	; 18
    2df8:	80 83       	st	Z, r24
    2dfa:	0f 5f       	subi	r16, 0xFF	; 255
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <LMIC+0x11d>
    2e02:	88 23       	and	r24, r24
    2e04:	39 f0       	breq	.+14     	; 0x2e14 <engineUpdate+0x576>
    2e06:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <LMIC+0x11c>
    2e0a:	87 fd       	sbrc	r24, 7
    2e0c:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <LMIC+0x11c>
    2e10:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <LMIC+0x11d>
    2e14:	40 91 d6 05 	lds	r20, 0x05D6	; 0x8005d6 <LMIC+0x12e>
    2e18:	44 23       	and	r20, r20
    2e1a:	79 f0       	breq	.+30     	; 0x2e3a <engineUpdate+0x59c>
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	88 55       	subi	r24, 0x58	; 88
    2e20:	9b 4f       	sbci	r25, 0xFB	; 251
    2e22:	fc 01       	movw	r30, r24
    2e24:	ed 5b       	subi	r30, 0xBD	; 189
    2e26:	fe 4f       	sbci	r31, 0xFE	; 254
    2e28:	51 e1       	ldi	r21, 0x11	; 17
    2e2a:	50 83       	st	Z, r21
    2e2c:	31 96       	adiw	r30, 0x01	; 1
    2e2e:	41 70       	andi	r20, 0x01	; 1
    2e30:	40 83       	st	Z, r20
    2e32:	0e 5f       	subi	r16, 0xFE	; 254
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <LMIC+0x12e>
    2e3a:	40 91 cd 05 	lds	r20, 0x05CD	; 0x8005cd <LMIC+0x125>
    2e3e:	44 23       	and	r20, r20
    2e40:	79 f0       	breq	.+30     	; 0x2e60 <engineUpdate+0x5c2>
    2e42:	c8 01       	movw	r24, r16
    2e44:	88 55       	subi	r24, 0x58	; 88
    2e46:	9b 4f       	sbci	r25, 0xFB	; 251
    2e48:	fc 01       	movw	r30, r24
    2e4a:	ed 5b       	subi	r30, 0xBD	; 189
    2e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4e:	57 e0       	ldi	r21, 0x07	; 7
    2e50:	50 83       	st	Z, r21
    2e52:	31 96       	adiw	r30, 0x01	; 1
    2e54:	43 70       	andi	r20, 0x03	; 3
    2e56:	40 83       	st	Z, r20
    2e58:	0e 5f       	subi	r16, 0xFE	; 254
    2e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5c:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <LMIC+0x125>
    2e60:	20 31       	cpi	r18, 0x10	; 16
    2e62:	31 05       	cpc	r19, r1
    2e64:	21 f0       	breq	.+8      	; 0x2e6e <engineUpdate+0x5d0>
    2e66:	4d 81       	ldd	r20, Y+5	; 0x05
    2e68:	4b 5f       	subi	r20, 0xFB	; 251
    2e6a:	49 83       	std	Y+1, r20	; 0x01
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <engineUpdate+0x5d4>
    2e6e:	54 e0       	ldi	r21, 0x04	; 4
    2e70:	59 83       	std	Y+1, r21	; 0x01
    2e72:	40 2f       	mov	r20, r16
    2e74:	89 80       	ldd	r8, Y+1	; 0x01
    2e76:	80 0e       	add	r8, r16
    2e78:	89 82       	std	Y+1, r8	; 0x01
    2e7a:	58 2d       	mov	r21, r8
    2e7c:	51 34       	cpi	r21, 0x41	; 65
    2e7e:	30 f4       	brcc	.+12     	; 0x2e8c <engineUpdate+0x5ee>
    2e80:	ff 24       	eor	r15, r15
    2e82:	f3 94       	inc	r15
    2e84:	20 31       	cpi	r18, 0x10	; 16
    2e86:	31 05       	cpc	r19, r1
    2e88:	31 f4       	brne	.+12     	; 0x2e96 <engineUpdate+0x5f8>
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <engineUpdate+0x5f6>
    2e8c:	94 e0       	ldi	r25, 0x04	; 4
    2e8e:	89 2e       	mov	r8, r25
    2e90:	80 0e       	add	r8, r16
    2e92:	89 82       	std	Y+1, r8	; 0x01
    2e94:	f1 2c       	mov	r15, r1
    2e96:	80 e4       	ldi	r24, 0x40	; 64
    2e98:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <LMIC+0x143>
    2e9c:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <LMIC+0x11b>
    2ea0:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <LMIC+0x122>
    2ea4:	29 2b       	or	r18, r25
    2ea6:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <LMIC+0x11c>
    2eaa:	90 95       	com	r25
    2eac:	89 2f       	mov	r24, r25
    2eae:	88 1f       	adc	r24, r24
    2eb0:	88 27       	eor	r24, r24
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	82 95       	swap	r24
    2eb6:	88 0f       	add	r24, r24
    2eb8:	88 0f       	add	r24, r24
    2eba:	80 7c       	andi	r24, 0xC0	; 192
    2ebc:	98 ef       	ldi	r25, 0xF8	; 248
    2ebe:	94 0f       	add	r25, r20
    2ec0:	92 2b       	or	r25, r18
    2ec2:	89 2b       	or	r24, r25
    2ec4:	80 93 f0 05 	sts	0x05F0, r24	; 0x8005f0 <LMIC+0x148>
    2ec8:	40 91 b7 05 	lds	r20, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    2ecc:	50 91 b8 05 	lds	r21, 0x05B8	; 0x8005b8 <LMIC+0x110>
    2ed0:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <LMIC+0x111>
    2ed4:	70 91 ba 05 	lds	r23, 0x05BA	; 0x8005ba <LMIC+0x112>
    2ed8:	8c ee       	ldi	r24, 0xEC	; 236
    2eda:	95 e0       	ldi	r25, 0x05	; 5
    2edc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    2ee0:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <LMIC+0x13f>
    2ee4:	21 11       	cpse	r18, r1
    2ee6:	13 c0       	rjmp	.+38     	; 0x2f0e <engineUpdate+0x670>
    2ee8:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <LMIC+0x117>
    2eec:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <LMIC+0x118>
    2ef0:	a0 91 c1 05 	lds	r26, 0x05C1	; 0x8005c1 <LMIC+0x119>
    2ef4:	b0 91 c2 05 	lds	r27, 0x05C2	; 0x8005c2 <LMIC+0x11a>
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	a1 1d       	adc	r26, r1
    2efc:	b1 1d       	adc	r27, r1
    2efe:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <LMIC+0x117>
    2f02:	90 93 c0 05 	sts	0x05C0, r25	; 0x8005c0 <LMIC+0x118>
    2f06:	a0 93 c1 05 	sts	0x05C1, r26	; 0x8005c1 <LMIC+0x119>
    2f0a:	b0 93 c2 05 	sts	0x05C2, r27	; 0x8005c2 <LMIC+0x11a>
    2f0e:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <LMIC+0x117>
    2f12:	90 91 c0 05 	lds	r25, 0x05C0	; 0x8005c0 <LMIC+0x118>
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <LMIC+0x149>
    2f1c:	90 93 f2 05 	sts	0x05F2, r25	; 0x8005f2 <LMIC+0x14a>
    2f20:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <LMIC+0x11b>
    2f24:	ff 20       	and	r15, r15
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <engineUpdate+0x68c>
    2f28:	43 c0       	rjmp	.+134    	; 0x2fb0 <engineUpdate+0x712>
    2f2a:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <LMIC+0xb7>
    2f2e:	88 23       	and	r24, r24
    2f30:	41 f0       	breq	.+16     	; 0x2f42 <engineUpdate+0x6a4>
    2f32:	80 e8       	ldi	r24, 0x80	; 128
    2f34:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <LMIC+0x143>
    2f38:	21 11       	cpse	r18, r1
    2f3a:	03 c0       	rjmp	.+6      	; 0x2f42 <engineUpdate+0x6a4>
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <LMIC+0x13f>
    2f42:	f8 01       	movw	r30, r16
    2f44:	e5 51       	subi	r30, 0x15	; 21
    2f46:	fa 4f       	sbci	r31, 0xFA	; 250
    2f48:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <LMIC+0xb6>
    2f4c:	80 83       	st	Z, r24
    2f4e:	98 01       	movw	r18, r16
    2f50:	24 51       	subi	r18, 0x14	; 20
    2f52:	3a 4f       	sbci	r19, 0xFA	; 250
    2f54:	69 01       	movw	r12, r18
    2f56:	8d 80       	ldd	r8, Y+5	; 0x05
    2f58:	a8 2c       	mov	r10, r8
    2f5a:	b1 2c       	mov	r11, r1
    2f5c:	a5 01       	movw	r20, r10
    2f5e:	61 e6       	ldi	r22, 0x61	; 97
    2f60:	75 e0       	ldi	r23, 0x05	; 5
    2f62:	c9 01       	movw	r24, r18
    2f64:	0e 94 04 39 	call	0x7208	; 0x7208 <memcpy>
    2f68:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <LMIC+0xb6>
    2f6c:	88 23       	and	r24, r24
    2f6e:	19 f0       	breq	.+6      	; 0x2f76 <engineUpdate+0x6d8>
    2f70:	87 ea       	ldi	r24, 0xA7	; 167
    2f72:	95 e0       	ldi	r25, 0x05	; 5
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <engineUpdate+0x6dc>
    2f76:	87 e9       	ldi	r24, 0x97	; 151
    2f78:	95 e0       	ldi	r25, 0x05	; 5
    2f7a:	a1 14       	cp	r10, r1
    2f7c:	b1 04       	cpc	r11, r1
    2f7e:	c1 f0       	breq	.+48     	; 0x2fb0 <engineUpdate+0x712>
    2f80:	00 91 bf 05 	lds	r16, 0x05BF	; 0x8005bf <LMIC+0x117>
    2f84:	10 91 c0 05 	lds	r17, 0x05C0	; 0x8005c0 <LMIC+0x118>
    2f88:	20 91 c1 05 	lds	r18, 0x05C1	; 0x8005c1 <LMIC+0x119>
    2f8c:	30 91 c2 05 	lds	r19, 0x05C2	; 0x8005c2 <LMIC+0x11a>
    2f90:	01 50       	subi	r16, 0x01	; 1
    2f92:	11 09       	sbc	r17, r1
    2f94:	21 09       	sbc	r18, r1
    2f96:	31 09       	sbc	r19, r1
    2f98:	40 91 b7 05 	lds	r20, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    2f9c:	50 91 b8 05 	lds	r21, 0x05B8	; 0x8005b8 <LMIC+0x110>
    2fa0:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <LMIC+0x111>
    2fa4:	70 91 ba 05 	lds	r23, 0x05BA	; 0x8005ba <LMIC+0x112>
    2fa8:	e1 2c       	mov	r14, r1
    2faa:	f1 2c       	mov	r15, r1
    2fac:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <aes_cipher.part.3>
    2fb0:	89 80       	ldd	r8, Y+1	; 0x01
    2fb2:	08 2d       	mov	r16, r8
    2fb4:	10 e0       	ldi	r17, 0x00	; 0
    2fb6:	04 50       	subi	r16, 0x04	; 4
    2fb8:	11 09       	sbc	r17, r1
    2fba:	c0 90 bf 05 	lds	r12, 0x05BF	; 0x8005bf <LMIC+0x117>
    2fbe:	d0 90 c0 05 	lds	r13, 0x05C0	; 0x8005c0 <LMIC+0x118>
    2fc2:	e0 90 c1 05 	lds	r14, 0x05C1	; 0x8005c1 <LMIC+0x119>
    2fc6:	f0 90 c2 05 	lds	r15, 0x05C2	; 0x8005c2 <LMIC+0x11a>
    2fca:	21 e0       	ldi	r18, 0x01	; 1
    2fcc:	c2 1a       	sub	r12, r18
    2fce:	d1 08       	sbc	r13, r1
    2fd0:	e1 08       	sbc	r14, r1
    2fd2:	f1 08       	sbc	r15, r1
    2fd4:	40 91 b7 05 	lds	r20, 0x05B7	; 0x8005b7 <LMIC+0x10f>
    2fd8:	50 91 b8 05 	lds	r21, 0x05B8	; 0x8005b8 <LMIC+0x110>
    2fdc:	60 91 b9 05 	lds	r22, 0x05B9	; 0x8005b9 <LMIC+0x111>
    2fe0:	70 91 ba 05 	lds	r23, 0x05BA	; 0x8005ba <LMIC+0x112>
    2fe4:	e8 e9       	ldi	r30, 0x98	; 152
    2fe6:	f4 e0       	ldi	r31, 0x04	; 4
    2fe8:	df 01       	movw	r26, r30
    2fea:	e0 e1       	ldi	r30, 0x10	; 16
    2fec:	8e 2e       	mov	r8, r30
    2fee:	1d 92       	st	X+, r1
    2ff0:	8a 94       	dec	r8
    2ff2:	e9 f7       	brne	.-6      	; 0x2fee <engineUpdate+0x750>
    2ff4:	89 e4       	ldi	r24, 0x49	; 73
    2ff6:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <AESAUX>
    2ffa:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <AESAUX+0x5>
    2ffe:	00 93 a7 04 	sts	0x04A7, r16	; 0x8004a7 <AESAUX+0xf>
    3002:	8e e9       	ldi	r24, 0x9E	; 158
    3004:	94 e0       	ldi	r25, 0x04	; 4
    3006:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    300a:	b7 01       	movw	r22, r14
    300c:	a6 01       	movw	r20, r12
    300e:	82 ea       	ldi	r24, 0xA2	; 162
    3010:	94 e0       	ldi	r25, 0x04	; 4
    3012:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <os_wlsbf4>
    3016:	e7 e9       	ldi	r30, 0x97	; 151
    3018:	f5 e0       	ldi	r31, 0x05	; 5
    301a:	a8 e8       	ldi	r26, 0x88	; 136
    301c:	b4 e0       	ldi	r27, 0x04	; 4
    301e:	80 e1       	ldi	r24, 0x10	; 16
    3020:	a8 2e       	mov	r10, r24
    3022:	01 90       	ld	r0, Z+
    3024:	0d 92       	st	X+, r0
    3026:	aa 94       	dec	r10
    3028:	e1 f7       	brne	.-8      	; 0x3022 <engineUpdate+0x784>
    302a:	a8 01       	movw	r20, r16
    302c:	6b ee       	ldi	r22, 0xEB	; 235
    302e:	75 e0       	ldi	r23, 0x05	; 5
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    3036:	ab 01       	movw	r20, r22
    3038:	bc 01       	movw	r22, r24
    303a:	c8 01       	movw	r24, r16
    303c:	85 51       	subi	r24, 0x15	; 21
    303e:	9a 4f       	sbci	r25, 0xFA	; 250
    3040:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <os_wmsbf4>
    3044:	89 80       	ldd	r8, Y+1	; 0x01
    3046:	80 92 ea 05 	sts	0x05EA, r8	; 0x8005ea <LMIC+0x142>
    304a:	86 e1       	ldi	r24, 0x16	; 22
    304c:	9e e0       	ldi	r25, 0x0E	; 14
    304e:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <LMIC+0x1a>
    3052:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <LMIC+0x19>
    3056:	e9 2d       	mov	r30, r9
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	ef 57       	subi	r30, 0x7F	; 127
    305c:	fb 4f       	sbci	r31, 0xFB	; 251
    305e:	e4 91       	lpm	r30, Z
    3060:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <LMIC+0xac>
    3064:	00 e2       	ldi	r16, 0x20	; 32
    3066:	80 9f       	mul	r24, r16
    3068:	c0 01       	movw	r24, r0
    306a:	11 24       	eor	r1, r1
    306c:	ef 79       	andi	r30, 0x9F	; 159
    306e:	8e 2b       	or	r24, r30
    3070:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <LMIC+0xf>
    3074:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <LMIC+0xe>
    3078:	90 92 b9 04 	sts	0x04B9, r9	; 0x8004b9 <LMIC+0x11>
    307c:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <LMIC+0xa7>
    3080:	30 91 50 05 	lds	r19, 0x0550	; 0x800550 <LMIC+0xa8>
    3084:	2f 76       	andi	r18, 0x6F	; 111
    3086:	36 7f       	andi	r19, 0xF6	; 246
    3088:	20 68       	ori	r18, 0x80	; 128
    308a:	38 60       	ori	r19, 0x08	; 8
    308c:	30 93 50 05 	sts	0x0550, r19	; 0x800550 <LMIC+0xa8>
    3090:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <LMIC+0xa7>
    3094:	e0 91 45 05 	lds	r30, 0x0545	; 0x800545 <LMIC+0x9d>
    3098:	14 e0       	ldi	r17, 0x04	; 4
    309a:	e1 9f       	mul	r30, r17
    309c:	f0 01       	movw	r30, r0
    309e:	11 24       	eor	r1, r1
    30a0:	e8 55       	subi	r30, 0x58	; 88
    30a2:	fb 4f       	sbci	r31, 0xFB	; 251
    30a4:	83 ac       	ldd	r8, Z+59	; 0x3b
    30a6:	94 ac       	ldd	r9, Z+60	; 0x3c
    30a8:	a5 ac       	ldd	r10, Z+61	; 0x3d
    30aa:	b6 ac       	ldd	r11, Z+62	; 0x3e
    30ac:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <LMIC+0x142>
    30b0:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <calcAirTime>
    30b4:	6b 01       	movw	r12, r22
    30b6:	7c 01       	movw	r14, r24
    30b8:	d5 01       	movw	r26, r10
    30ba:	c4 01       	movw	r24, r8
    30bc:	83 70       	andi	r24, 0x03	; 3
    30be:	99 27       	eor	r25, r25
    30c0:	aa 27       	eor	r26, r26
    30c2:	bb 27       	eor	r27, r27
    30c4:	2c ef       	ldi	r18, 0xFC	; 252
    30c6:	82 22       	and	r8, r18
    30c8:	80 92 b0 04 	sts	0x04B0, r8	; 0x8004b0 <LMIC+0x8>
    30cc:	90 92 b1 04 	sts	0x04B1, r9	; 0x8004b1 <LMIC+0x9>
    30d0:	a0 92 b2 04 	sts	0x04B2, r10	; 0x8004b2 <LMIC+0xa>
    30d4:	b0 92 b3 04 	sts	0x04B3, r11	; 0x8004b3 <LMIC+0xb>
    30d8:	43 e0       	ldi	r20, 0x03	; 3
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	4a 95       	dec	r20
    30e0:	e1 f7       	brne	.-8      	; 0x30da <engineUpdate+0x83c>
    30e2:	fc 01       	movw	r30, r24
    30e4:	e8 55       	subi	r30, 0x58	; 88
    30e6:	fb 4f       	sbci	r31, 0xFB	; 251
    30e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    30ea:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <LMIC+0x12>
    30ee:	a3 8d       	ldd	r26, Z+27	; 0x1b
    30f0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    30f2:	a7 01       	movw	r20, r14
    30f4:	96 01       	movw	r18, r12
    30f6:	0e 94 49 35 	call	0x6a92	; 0x6a92 <__muluhisi3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	84 0d       	add	r24, r4
    3100:	95 1d       	adc	r25, r5
    3102:	a6 1d       	adc	r26, r6
    3104:	b7 1d       	adc	r27, r7
    3106:	87 8f       	std	Z+31, r24	; 0x1f
    3108:	90 a3       	std	Z+32, r25	; 0x20
    310a:	a1 a3       	std	Z+33, r26	; 0x21
    310c:	b2 a3       	std	Z+34, r27	; 0x22
    310e:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <LMIC+0x9e>
    3112:	88 23       	and	r24, r24
    3114:	99 f0       	breq	.+38     	; 0x313c <engineUpdate+0x89e>
    3116:	04 c0       	rjmp	.+8      	; 0x3120 <engineUpdate+0x882>
    3118:	cc 0c       	add	r12, r12
    311a:	dd 1c       	adc	r13, r13
    311c:	ee 1c       	adc	r14, r14
    311e:	ff 1c       	adc	r15, r15
    3120:	8a 95       	dec	r24
    3122:	d2 f7       	brpl	.-12     	; 0x3118 <engineUpdate+0x87a>
    3124:	c4 0c       	add	r12, r4
    3126:	d5 1c       	adc	r13, r5
    3128:	e6 1c       	adc	r14, r6
    312a:	f7 1c       	adc	r15, r7
    312c:	c0 92 47 05 	sts	0x0547, r12	; 0x800547 <LMIC+0x9f>
    3130:	d0 92 48 05 	sts	0x0548, r13	; 0x800548 <LMIC+0xa0>
    3134:	e0 92 49 05 	sts	0x0549, r14	; 0x800549 <LMIC+0xa1>
    3138:	f0 92 4a 05 	sts	0x054A, r15	; 0x80054a <LMIC+0xa2>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	b8 c0       	rjmp	.+368    	; 0x32b0 <engineUpdate+0xa12>
    3140:	23 2b       	or	r18, r19
    3142:	09 f4       	brne	.+2      	; 0x3146 <engineUpdate+0x8a8>
    3144:	dc c0       	rjmp	.+440    	; 0x32fe <engineUpdate+0xa60>
    3146:	c1 14       	cp	r12, r1
    3148:	d1 04       	cpc	r13, r1
    314a:	e1 04       	cpc	r14, r1
    314c:	f1 04       	cpc	r15, r1
    314e:	59 f4       	brne	.+22     	; 0x3166 <engineUpdate+0x8c8>
    3150:	c1 2c       	mov	r12, r1
    3152:	d1 2c       	mov	r13, r1
    3154:	76 01       	movw	r14, r12
    3156:	c3 94       	inc	r12
    3158:	06 c0       	rjmp	.+12     	; 0x3166 <engineUpdate+0x8c8>
    315a:	39 89       	ldd	r19, Y+17	; 0x11
    315c:	31 ff       	sbrs	r19, 1
    315e:	43 c1       	rjmp	.+646    	; 0x33e6 <engineUpdate+0xb48>
    3160:	c1 2c       	mov	r12, r1
    3162:	d1 2c       	mov	r13, r1
    3164:	76 01       	movw	r14, r12
    3166:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    316a:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    316e:	91 ff       	sbrs	r25, 1
    3170:	65 c0       	rjmp	.+202    	; 0x323c <engineUpdate+0x99e>
    3172:	b3 01       	movw	r22, r6
    3174:	a2 01       	movw	r20, r4
    3176:	43 58       	subi	r20, 0x83	; 131
    3178:	5f 4f       	sbci	r21, 0xFF	; 255
    317a:	6f 4f       	sbci	r22, 0xFF	; 255
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	4d 83       	std	Y+5, r20	; 0x05
    3180:	5e 83       	std	Y+6, r21	; 0x06
    3182:	6f 83       	std	Y+7, r22	; 0x07
    3184:	78 87       	std	Y+8, r23	; 0x08
    3186:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <LMIC+0x137>
    318a:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <LMIC+0x138>
    318e:	a0 91 e1 05 	lds	r26, 0x05E1	; 0x8005e1 <LMIC+0x139>
    3192:	b0 91 e2 05 	lds	r27, 0x05E2	; 0x8005e2 <LMIC+0x13a>
    3196:	ac 01       	movw	r20, r24
    3198:	bd 01       	movw	r22, r26
    319a:	8d 80       	ldd	r8, Y+5	; 0x05
    319c:	9e 80       	ldd	r9, Y+6	; 0x06
    319e:	af 80       	ldd	r10, Y+7	; 0x07
    31a0:	b8 84       	ldd	r11, Y+8	; 0x08
    31a2:	48 19       	sub	r20, r8
    31a4:	59 09       	sbc	r21, r9
    31a6:	6a 09       	sbc	r22, r10
    31a8:	7b 09       	sbc	r23, r11
    31aa:	77 ff       	sbrs	r23, 7
    31ac:	9b c0       	rjmp	.+310    	; 0x32e4 <engineUpdate+0xa46>
    31ae:	10 91 d9 05 	lds	r17, 0x05D9	; 0x8005d9 <LMIC+0x131>
    31b2:	17 fd       	sbrc	r17, 7
    31b4:	43 c0       	rjmp	.+134    	; 0x323c <engineUpdate+0x99e>
    31b6:	e1 e0       	ldi	r30, 0x01	; 1
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	00 90 d8 05 	lds	r0, 0x05D8	; 0x8005d8 <LMIC+0x130>
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <engineUpdate+0x926>
    31c0:	ee 0f       	add	r30, r30
    31c2:	ff 1f       	adc	r31, r31
    31c4:	0a 94       	dec	r0
    31c6:	e2 f7       	brpl	.-8      	; 0x31c0 <engineUpdate+0x922>
    31c8:	1e 0f       	add	r17, r30
    31ca:	10 93 d9 05 	sts	0x05D9, r17	; 0x8005d9 <LMIC+0x131>
    31ce:	17 fd       	sbrc	r17, 7
    31d0:	35 c0       	rjmp	.+106    	; 0x323c <engineUpdate+0x99e>
    31d2:	a1 2f       	mov	r26, r17
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e3       	ldi	r19, 0x30	; 48
    31da:	45 e7       	ldi	r20, 0x75	; 117
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	0e 94 49 35 	call	0x6a92	; 0x6a92 <__muluhisi3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	27 e0       	ldi	r18, 0x07	; 7
    31e8:	b5 95       	asr	r27
    31ea:	a7 95       	ror	r26
    31ec:	97 95       	ror	r25
    31ee:	87 95       	ror	r24
    31f0:	2a 95       	dec	r18
    31f2:	d1 f7       	brne	.-12     	; 0x31e8 <engineUpdate+0x94a>
    31f4:	80 90 db 05 	lds	r8, 0x05DB	; 0x8005db <LMIC+0x133>
    31f8:	90 90 dc 05 	lds	r9, 0x05DC	; 0x8005dc <LMIC+0x134>
    31fc:	a0 90 dd 05 	lds	r10, 0x05DD	; 0x8005dd <LMIC+0x135>
    3200:	b0 90 de 05 	lds	r11, 0x05DE	; 0x8005de <LMIC+0x136>
    3204:	88 0e       	add	r8, r24
    3206:	99 1e       	adc	r9, r25
    3208:	aa 1e       	adc	r10, r26
    320a:	bb 1e       	adc	r11, r27
    320c:	82 e0       	ldi	r24, 0x02	; 2
    320e:	8e 0f       	add	r24, r30
    3210:	60 91 d7 05 	lds	r22, 0x05D7	; 0x8005d7 <LMIC+0x12f>
    3214:	81 0f       	add	r24, r17
    3216:	0e 94 db 09 	call	0x13b6	; 0x13b6 <calcRxWindow>
    321a:	86 1a       	sub	r8, r22
    321c:	97 0a       	sbc	r9, r23
    321e:	a8 0a       	sbc	r10, r24
    3220:	b9 0a       	sbc	r11, r25
    3222:	80 92 df 05 	sts	0x05DF, r8	; 0x8005df <LMIC+0x137>
    3226:	90 92 e0 05 	sts	0x05E0, r9	; 0x8005e0 <LMIC+0x138>
    322a:	a0 92 e1 05 	sts	0x05E1, r10	; 0x8005e1 <LMIC+0x139>
    322e:	b0 92 e2 05 	sts	0x05E2, r11	; 0x8005e2 <LMIC+0x13a>
    3232:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <LMIC+0x10>
    3236:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <LMIC+0x132>
    323a:	a5 cf       	rjmp	.-182    	; 0x3186 <engineUpdate+0x8e8>
    323c:	c1 14       	cp	r12, r1
    323e:	d1 04       	cpc	r13, r1
    3240:	e1 04       	cpc	r14, r1
    3242:	f1 04       	cpc	r15, r1
    3244:	61 f0       	breq	.+24     	; 0x325e <engineUpdate+0x9c0>
    3246:	d7 01       	movw	r26, r14
    3248:	c6 01       	movw	r24, r12
    324a:	89 80       	ldd	r8, Y+1	; 0x01
    324c:	9a 80       	ldd	r9, Y+2	; 0x02
    324e:	ab 80       	ldd	r10, Y+3	; 0x03
    3250:	bc 80       	ldd	r11, Y+4	; 0x04
    3252:	88 19       	sub	r24, r8
    3254:	99 09       	sbc	r25, r9
    3256:	aa 09       	sbc	r26, r10
    3258:	bb 09       	sbc	r27, r11
    325a:	b7 fd       	sbrc	r27, 7
    325c:	50 c0       	rjmp	.+160    	; 0x32fe <engineUpdate+0xa60>
    325e:	0e 94 77 09 	call	0x12ee	; 0x12ee <setBcnRxParams>
    3262:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <LMIC+0x184>
    3266:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <LMIC+0x10>
    326a:	80 91 2d 06 	lds	r24, 0x062D	; 0x80062d <LMIC+0x185>
    326e:	90 91 2e 06 	lds	r25, 0x062E	; 0x80062e <LMIC+0x186>
    3272:	a0 91 2f 06 	lds	r26, 0x062F	; 0x80062f <LMIC+0x187>
    3276:	b0 91 30 06 	lds	r27, 0x0630	; 0x800630 <LMIC+0x188>
    327a:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <LMIC+0x4>
    327e:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <LMIC+0x5>
    3282:	a0 93 ae 04 	sts	0x04AE, r26	; 0x8004ae <LMIC+0x6>
    3286:	b0 93 af 04 	sts	0x04AF, r27	; 0x8004af <LMIC+0x7>
    328a:	d3 01       	movw	r26, r6
    328c:	c2 01       	movw	r24, r4
    328e:	89 80       	ldd	r8, Y+1	; 0x01
    3290:	9a 80       	ldd	r9, Y+2	; 0x02
    3292:	ab 80       	ldd	r10, Y+3	; 0x03
    3294:	bc 80       	ldd	r11, Y+4	; 0x04
    3296:	88 19       	sub	r24, r8
    3298:	99 09       	sbc	r25, r9
    329a:	aa 09       	sbc	r26, r10
    329c:	bb 09       	sbc	r27, r11
    329e:	b7 fd       	sbrc	r27, 7
    32a0:	52 c0       	rjmp	.+164    	; 0x3346 <engineUpdate+0xaa8>
    32a2:	81 e7       	ldi	r24, 0x71	; 113
    32a4:	9a e1       	ldi	r25, 0x1A	; 26
    32a6:	90 93 c2 04 	sts	0x04C2, r25	; 0x8004c2 <LMIC+0x1a>
    32aa:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <LMIC+0x19>
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	62 96       	adiw	r28, 0x12	; 18
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	ff 90       	pop	r15
    32c6:	ef 90       	pop	r14
    32c8:	df 90       	pop	r13
    32ca:	cf 90       	pop	r12
    32cc:	bf 90       	pop	r11
    32ce:	af 90       	pop	r10
    32d0:	9f 90       	pop	r9
    32d2:	8f 90       	pop	r8
    32d4:	7f 90       	pop	r7
    32d6:	6f 90       	pop	r6
    32d8:	5f 90       	pop	r5
    32da:	4f 90       	pop	r4
    32dc:	3f 90       	pop	r3
    32de:	2f 90       	pop	r2
    32e0:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <os_radio>
    32e4:	c1 14       	cp	r12, r1
    32e6:	d1 04       	cpc	r13, r1
    32e8:	e1 04       	cpc	r14, r1
    32ea:	f1 04       	cpc	r15, r1
    32ec:	99 f1       	breq	.+102    	; 0x3354 <engineUpdate+0xab6>
    32ee:	b7 01       	movw	r22, r14
    32f0:	a6 01       	movw	r20, r12
    32f2:	48 1b       	sub	r20, r24
    32f4:	59 0b       	sbc	r21, r25
    32f6:	6a 0b       	sbc	r22, r26
    32f8:	7b 0b       	sbc	r23, r27
    32fa:	77 ff       	sbrs	r23, 7
    32fc:	2b c0       	rjmp	.+86     	; 0x3354 <engineUpdate+0xab6>
    32fe:	b7 01       	movw	r22, r14
    3300:	a6 01       	movw	r20, r12
    3302:	4d 57       	subi	r20, 0x7D	; 125
    3304:	51 09       	sbc	r21, r1
    3306:	61 09       	sbc	r22, r1
    3308:	71 09       	sbc	r23, r1
    330a:	24 e6       	ldi	r18, 0x64	; 100
    330c:	3d e1       	ldi	r19, 0x1D	; 29
    330e:	8b eb       	ldi	r24, 0xBB	; 187
    3310:	94 e0       	ldi	r25, 0x04	; 4
    3312:	62 96       	adiw	r28, 0x12	; 18
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	1f 91       	pop	r17
    3324:	0f 91       	pop	r16
    3326:	ff 90       	pop	r15
    3328:	ef 90       	pop	r14
    332a:	df 90       	pop	r13
    332c:	cf 90       	pop	r12
    332e:	bf 90       	pop	r11
    3330:	af 90       	pop	r10
    3332:	9f 90       	pop	r9
    3334:	8f 90       	pop	r8
    3336:	7f 90       	pop	r7
    3338:	6f 90       	pop	r6
    333a:	5f 90       	pop	r5
    333c:	4f 90       	pop	r4
    333e:	3f 90       	pop	r3
    3340:	2f 90       	pop	r2
    3342:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <os_setTimedCallback>
    3346:	2d e7       	ldi	r18, 0x7D	; 125
    3348:	3b e0       	ldi	r19, 0x0B	; 11
    334a:	49 81       	ldd	r20, Y+1	; 0x01
    334c:	5a 81       	ldd	r21, Y+2	; 0x02
    334e:	6b 81       	ldd	r22, Y+3	; 0x03
    3350:	7c 81       	ldd	r23, Y+4	; 0x04
    3352:	dd cf       	rjmp	.-70     	; 0x330e <engineUpdate+0xa70>
    3354:	20 91 da 05 	lds	r18, 0x05DA	; 0x8005da <LMIC+0x132>
    3358:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <LMIC+0x10>
    335c:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <LMIC+0x4>
    3360:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <LMIC+0x5>
    3364:	a0 93 ae 04 	sts	0x04AE, r26	; 0x8004ae <LMIC+0x6>
    3368:	b0 93 af 04 	sts	0x04AF, r27	; 0x8004af <LMIC+0x7>
    336c:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <LMIC+0x13b>
    3370:	50 91 e4 05 	lds	r21, 0x05E4	; 0x8005e4 <LMIC+0x13c>
    3374:	60 91 e5 05 	lds	r22, 0x05E5	; 0x8005e5 <LMIC+0x13d>
    3378:	70 91 e6 05 	lds	r23, 0x05E6	; 0x8005e6 <LMIC+0x13e>
    337c:	40 93 b0 04 	sts	0x04B0, r20	; 0x8004b0 <LMIC+0x8>
    3380:	50 93 b1 04 	sts	0x04B1, r21	; 0x8004b1 <LMIC+0x9>
    3384:	60 93 b2 04 	sts	0x04B2, r22	; 0x8004b2 <LMIC+0xa>
    3388:	70 93 b3 04 	sts	0x04B3, r23	; 0x8004b3 <LMIC+0xb>
    338c:	e0 91 d7 05 	lds	r30, 0x05D7	; 0x8005d7 <LMIC+0x12f>
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	ef 57       	subi	r30, 0x7F	; 127
    3394:	fb 4f       	sbci	r31, 0xFB	; 251
    3396:	e4 91       	lpm	r30, Z
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	ef 77       	andi	r30, 0x7F	; 127
    339c:	e0 68       	ori	r30, 0x80	; 128
    339e:	f0 93 b7 04 	sts	0x04B7, r31	; 0x8004b7 <LMIC+0xf>
    33a2:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <LMIC+0xe>
    33a6:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    33aa:	84 19       	sub	r24, r4
    33ac:	95 09       	sbc	r25, r5
    33ae:	a6 09       	sbc	r26, r6
    33b0:	b7 09       	sbc	r27, r7
    33b2:	83 38       	cpi	r24, 0x83	; 131
    33b4:	9f 4f       	sbci	r25, 0xFF	; 255
    33b6:	af 4f       	sbci	r26, 0xFF	; 255
    33b8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ba:	34 f4       	brge	.+12     	; 0x33c8 <engineUpdate+0xb2a>
    33bc:	6e e8       	ldi	r22, 0x8E	; 142
    33be:	78 e0       	ldi	r23, 0x08	; 8
    33c0:	87 ed       	ldi	r24, 0xD7	; 215
    33c2:	91 e0       	ldi	r25, 0x01	; 1
    33c4:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    33c8:	40 91 ac 04 	lds	r20, 0x04AC	; 0x8004ac <LMIC+0x4>
    33cc:	50 91 ad 04 	lds	r21, 0x04AD	; 0x8004ad <LMIC+0x5>
    33d0:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <LMIC+0x6>
    33d4:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <LMIC+0x7>
    33d8:	4d 57       	subi	r20, 0x7D	; 125
    33da:	51 09       	sbc	r21, r1
    33dc:	61 09       	sbc	r22, r1
    33de:	71 09       	sbc	r23, r1
    33e0:	26 e8       	ldi	r18, 0x86	; 134
    33e2:	3b e0       	ldi	r19, 0x0B	; 11
    33e4:	94 cf       	rjmp	.-216    	; 0x330e <engineUpdate+0xa70>
    33e6:	62 96       	adiw	r28, 0x12	; 18
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	1f 91       	pop	r17
    33f8:	0f 91       	pop	r16
    33fa:	ff 90       	pop	r15
    33fc:	ef 90       	pop	r14
    33fe:	df 90       	pop	r13
    3400:	cf 90       	pop	r12
    3402:	bf 90       	pop	r11
    3404:	af 90       	pop	r10
    3406:	9f 90       	pop	r9
    3408:	8f 90       	pop	r8
    340a:	7f 90       	pop	r7
    340c:	6f 90       	pop	r6
    340e:	5f 90       	pop	r5
    3410:	4f 90       	pop	r4
    3412:	3f 90       	pop	r3
    3414:	2f 90       	pop	r2
    3416:	08 95       	ret

00003418 <reportEvent>:
    3418:	0e 94 70 04 	call	0x8e0	; 0x8e0 <onEvent>
    341c:	0c 94 4f 14 	jmp	0x289e	; 0x289e <engineUpdate>

00003420 <onBcnRx>:
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	0e 94 65 23 	call	0x46ca	; 0x46ca <os_radio>
    3426:	8b eb       	ldi	r24, 0xBB	; 187
    3428:	94 e0       	ldi	r25, 0x04	; 4
    342a:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <os_clearCallback>
    342e:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3432:	81 11       	cpse	r24, r1
    3434:	0b c0       	rjmp	.+22     	; 0x344c <onBcnRx+0x2c>
    3436:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    343a:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    343e:	8c 7f       	andi	r24, 0xFC	; 252
    3440:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3444:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	49 c0       	rjmp	.+146    	; 0x34de <onBcnRx+0xbe>
    344c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <decodeBeacon>
    3450:	18 16       	cp	r1, r24
    3452:	19 06       	cpc	r1, r25
    3454:	9c f0       	brlt	.+38     	; 0x347c <onBcnRx+0x5c>
    3456:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    345a:	83 e0       	ldi	r24, 0x03	; 3
    345c:	0e 94 65 23 	call	0x46ca	; 0x46ca <os_radio>
    3460:	40 91 31 06 	lds	r20, 0x0631	; 0x800631 <LMIC+0x189>
    3464:	50 91 32 06 	lds	r21, 0x0632	; 0x800632 <LMIC+0x18a>
    3468:	60 91 33 06 	lds	r22, 0x0633	; 0x800633 <LMIC+0x18b>
    346c:	70 91 34 06 	lds	r23, 0x0634	; 0x800634 <LMIC+0x18c>
    3470:	20 e1       	ldi	r18, 0x10	; 16
    3472:	3a e1       	ldi	r19, 0x1A	; 26
    3474:	8b eb       	ldi	r24, 0xBB	; 187
    3476:	94 e0       	ldi	r25, 0x04	; 4
    3478:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <os_setTimedCallback>
    347c:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <LMIC+0xaf>
    3480:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <LMIC+0xae>
    3484:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <LMIC+0xb3>
    3488:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <LMIC+0xb2>
    348c:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <LMIC+0x12c>
    3490:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <LMIC+0x18f>
    3494:	8c 60       	ori	r24, 0x0C	; 12
    3496:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <LMIC+0x18f>
    349a:	8b e0       	ldi	r24, 0x0B	; 11
    349c:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <LMIC+0x184>
    34a0:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <LMIC+0x189>
    34a4:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <LMIC+0x18a>
    34a8:	a0 91 33 06 	lds	r26, 0x0633	; 0x800633 <LMIC+0x18b>
    34ac:	b0 91 34 06 	lds	r27, 0x0634	; 0x800634 <LMIC+0x18c>
    34b0:	80 58       	subi	r24, 0x80	; 128
    34b2:	9f 4e       	sbci	r25, 0xEF	; 239
    34b4:	a5 48       	sbci	r26, 0x85	; 133
    34b6:	bf 4f       	sbci	r27, 0xFF	; 255
    34b8:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <LMIC+0x185>
    34bc:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <LMIC+0x186>
    34c0:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <LMIC+0x187>
    34c4:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <LMIC+0x188>
    34c8:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    34cc:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    34d0:	8e 7f       	andi	r24, 0xFE	; 254
    34d2:	82 60       	ori	r24, 0x02	; 2
    34d4:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    34d8:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <reportEvent>

000034e2 <processBeacon>:
    34e2:	cf 92       	push	r12
    34e4:	df 92       	push	r13
    34e6:	ef 92       	push	r14
    34e8:	ff 92       	push	r15
    34ea:	cf 93       	push	r28
    34ec:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    34f0:	88 23       	and	r24, r24
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <processBeacon+0x14>
    34f4:	7f c0       	rjmp	.+254    	; 0x35f4 <processBeacon+0x112>
    34f6:	c0 90 31 06 	lds	r12, 0x0631	; 0x800631 <LMIC+0x189>
    34fa:	d0 90 32 06 	lds	r13, 0x0632	; 0x800632 <LMIC+0x18a>
    34fe:	e0 90 33 06 	lds	r14, 0x0633	; 0x800633 <LMIC+0x18b>
    3502:	f0 90 34 06 	lds	r15, 0x0634	; 0x800634 <LMIC+0x18c>
    3506:	c0 91 37 06 	lds	r28, 0x0637	; 0x800637 <LMIC+0x18f>
    350a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <decodeBeacon>
    350e:	18 16       	cp	r1, r24
    3510:	19 06       	cpc	r1, r25
    3512:	0c f0       	brlt	.+2      	; 0x3516 <processBeacon+0x34>
    3514:	6f c0       	rjmp	.+222    	; 0x35f4 <processBeacon+0x112>
    3516:	c3 70       	andi	r28, 0x03	; 3
    3518:	c9 f4       	brne	.+50     	; 0x354c <processBeacon+0x6a>
    351a:	8b e0       	ldi	r24, 0x0B	; 11
    351c:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <LMIC+0x184>
    3520:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <LMIC+0x189>
    3524:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <LMIC+0x18a>
    3528:	a0 91 33 06 	lds	r26, 0x0633	; 0x800633 <LMIC+0x18b>
    352c:	b0 91 34 06 	lds	r27, 0x0634	; 0x800634 <LMIC+0x18c>
    3530:	80 58       	subi	r24, 0x80	; 128
    3532:	9f 4e       	sbci	r25, 0xEF	; 239
    3534:	a5 48       	sbci	r26, 0x85	; 133
    3536:	bf 4f       	sbci	r27, 0xFF	; 255
    3538:	80 93 2d 06 	sts	0x062D, r24	; 0x80062d <LMIC+0x185>
    353c:	90 93 2e 06 	sts	0x062E, r25	; 0x80062e <LMIC+0x186>
    3540:	a0 93 2f 06 	sts	0x062F, r26	; 0x80062f <LMIC+0x187>
    3544:	b0 93 30 06 	sts	0x0630, r27	; 0x800630 <LMIC+0x188>
    3548:	c4 e0       	ldi	r28, 0x04	; 4
    354a:	de c0       	rjmp	.+444    	; 0x3708 <processBeacon+0x226>
    354c:	2e ee       	ldi	r18, 0xEE	; 238
    354e:	d2 1a       	sub	r13, r18
    3550:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <LMIC+0x189>
    3554:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <LMIC+0x18a>
    3558:	c8 1a       	sub	r12, r24
    355a:	d9 0a       	sbc	r13, r25
    355c:	60 91 d4 05 	lds	r22, 0x05D4	; 0x8005d4 <LMIC+0x12c>
    3560:	66 23       	and	r22, r22
    3562:	79 f0       	breq	.+30     	; 0x3582 <processBeacon+0xa0>
    3564:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <LMIC+0xae>
    3568:	30 91 57 05 	lds	r19, 0x0557	; 0x800557 <LMIC+0xaf>
    356c:	c6 01       	movw	r24, r12
    356e:	82 1b       	sub	r24, r18
    3570:	93 0b       	sbc	r25, r19
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	6f 5f       	subi	r22, 0xFF	; 255
    3576:	7f 4f       	sbci	r23, 0xFF	; 255
    3578:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <__divmodhi4>
    357c:	69 01       	movw	r12, r18
    357e:	c6 0e       	add	r12, r22
    3580:	d7 1e       	adc	r13, r23
    3582:	20 91 37 06 	lds	r18, 0x0637	; 0x800637 <LMIC+0x18f>
    3586:	22 fd       	sbrc	r18, 2
    3588:	1d c0       	rjmp	.+58     	; 0x35c4 <processBeacon+0xe2>
    358a:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <LMIC+0xae>
    358e:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <LMIC+0xaf>
    3592:	8c 19       	sub	r24, r12
    3594:	9d 09       	sbc	r25, r13
    3596:	97 ff       	sbrs	r25, 7
    3598:	03 c0       	rjmp	.+6      	; 0x35a0 <processBeacon+0xbe>
    359a:	91 95       	neg	r25
    359c:	81 95       	neg	r24
    359e:	91 09       	sbc	r25, r1
    35a0:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <LMIC+0xb1>
    35a4:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <LMIC+0xb0>
    35a8:	40 91 5a 05 	lds	r20, 0x055A	; 0x80055a <LMIC+0xb2>
    35ac:	50 91 5b 05 	lds	r21, 0x055B	; 0x80055b <LMIC+0xb3>
    35b0:	48 17       	cp	r20, r24
    35b2:	59 07       	cpc	r21, r25
    35b4:	24 f4       	brge	.+8      	; 0x35be <processBeacon+0xdc>
    35b6:	90 93 5b 05 	sts	0x055B, r25	; 0x80055b <LMIC+0xb3>
    35ba:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <LMIC+0xb2>
    35be:	27 7f       	andi	r18, 0xF7	; 247
    35c0:	20 93 37 06 	sts	0x0637, r18	; 0x800637 <LMIC+0x18f>
    35c4:	d0 92 57 05 	sts	0x0557, r13	; 0x800557 <LMIC+0xaf>
    35c8:	c0 92 56 05 	sts	0x0556, r12	; 0x800556 <LMIC+0xae>
    35cc:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <LMIC+0xad>
    35d0:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <LMIC+0x12c>
    35d4:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <LMIC+0x18f>
    35d8:	98 2f       	mov	r25, r24
    35da:	9b 7f       	andi	r25, 0xFB	; 251
    35dc:	90 93 37 06 	sts	0x0637, r25	; 0x800637 <LMIC+0x18f>
    35e0:	83 70       	andi	r24, 0x03	; 3
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <processBeacon+0x104>
    35e4:	6d c0       	rjmp	.+218    	; 0x36c0 <processBeacon+0x1de>
    35e6:	64 ec       	ldi	r22, 0xC4	; 196
    35e8:	77 e0       	ldi	r23, 0x07	; 7
    35ea:	87 ed       	ldi	r24, 0xD7	; 215
    35ec:	91 e0       	ldi	r25, 0x01	; 1
    35ee:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    35f2:	66 c0       	rjmp	.+204    	; 0x36c0 <processBeacon+0x1de>
    35f4:	c0 90 56 05 	lds	r12, 0x0556	; 0x800556 <LMIC+0xae>
    35f8:	d0 90 57 05 	lds	r13, 0x0557	; 0x800557 <LMIC+0xaf>
    35fc:	0d 2c       	mov	r0, r13
    35fe:	00 0c       	add	r0, r0
    3600:	ee 08       	sbc	r14, r14
    3602:	ff 08       	sbc	r15, r15
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	92 e1       	ldi	r25, 0x12	; 18
    3608:	aa e7       	ldi	r26, 0x7A	; 122
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	ac 01       	movw	r20, r24
    360e:	bd 01       	movw	r22, r26
    3610:	4c 19       	sub	r20, r12
    3612:	5d 09       	sbc	r21, r13
    3614:	6e 09       	sbc	r22, r14
    3616:	7f 09       	sbc	r23, r15
    3618:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <LMIC+0x189>
    361c:	90 91 32 06 	lds	r25, 0x0632	; 0x800632 <LMIC+0x18a>
    3620:	a0 91 33 06 	lds	r26, 0x0633	; 0x800633 <LMIC+0x18b>
    3624:	b0 91 34 06 	lds	r27, 0x0634	; 0x800634 <LMIC+0x18c>
    3628:	84 0f       	add	r24, r20
    362a:	95 1f       	adc	r25, r21
    362c:	a6 1f       	adc	r26, r22
    362e:	b7 1f       	adc	r27, r23
    3630:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <LMIC+0x189>
    3634:	90 93 32 06 	sts	0x0632, r25	; 0x800632 <LMIC+0x18a>
    3638:	a0 93 33 06 	sts	0x0633, r26	; 0x800633 <LMIC+0x18b>
    363c:	b0 93 34 06 	sts	0x0634, r27	; 0x800634 <LMIC+0x18c>
    3640:	c0 90 38 06 	lds	r12, 0x0638	; 0x800638 <LMIC+0x190>
    3644:	d0 90 39 06 	lds	r13, 0x0639	; 0x800639 <LMIC+0x191>
    3648:	e0 90 3a 06 	lds	r14, 0x063A	; 0x80063a <LMIC+0x192>
    364c:	f0 90 3b 06 	lds	r15, 0x063B	; 0x80063b <LMIC+0x193>
    3650:	20 e8       	ldi	r18, 0x80	; 128
    3652:	c2 0e       	add	r12, r18
    3654:	d1 1c       	adc	r13, r1
    3656:	e1 1c       	adc	r14, r1
    3658:	f1 1c       	adc	r15, r1
    365a:	c0 92 38 06 	sts	0x0638, r12	; 0x800638 <LMIC+0x190>
    365e:	d0 92 39 06 	sts	0x0639, r13	; 0x800639 <LMIC+0x191>
    3662:	e0 92 3a 06 	sts	0x063A, r14	; 0x80063a <LMIC+0x192>
    3666:	f0 92 3b 06 	sts	0x063B, r15	; 0x80063b <LMIC+0x193>
    366a:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <LMIC+0x12c>
    366e:	2f 5f       	subi	r18, 0xFF	; 255
    3670:	20 93 d4 05 	sts	0x05D4, r18	; 0x8005d4 <LMIC+0x12c>
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	6c 56       	subi	r22, 0x6C	; 108
    367a:	7a 4f       	sbci	r23, 0xFA	; 250
    367c:	8d 4f       	sbci	r24, 0xFD	; 253
    367e:	9f 4f       	sbci	r25, 0xFF	; 255
    3680:	44 e0       	ldi	r20, 0x04	; 4
    3682:	0e 94 89 0a 	call	0x1512	; 0x1512 <txDelay>
    3686:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <LMIC+0x12c>
    368a:	85 31       	cpi	r24, 0x15	; 21
    368c:	48 f0       	brcs	.+18     	; 0x36a0 <processBeacon+0x1be>
    368e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3692:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3696:	80 62       	ori	r24, 0x20	; 32
    3698:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    369c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    36a0:	80 91 2c 06 	lds	r24, 0x062C	; 0x80062c <LMIC+0x184>
    36a4:	85 36       	cpi	r24, 0x65	; 101
    36a6:	70 f0       	brcs	.+28     	; 0x36c4 <processBeacon+0x1e2>
    36a8:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    36ac:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    36b0:	8d 7d       	andi	r24, 0xDD	; 221
    36b2:	99 7f       	andi	r25, 0xF9	; 249
    36b4:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    36b8:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    36bc:	8b e0       	ldi	r24, 0x0B	; 11
    36be:	2c c0       	rjmp	.+88     	; 0x3718 <processBeacon+0x236>
    36c0:	c4 e0       	ldi	r28, 0x04	; 4
    36c2:	01 c0       	rjmp	.+2      	; 0x36c6 <processBeacon+0x1e4>
    36c4:	c3 e0       	ldi	r28, 0x03	; 3
    36c6:	c0 90 31 06 	lds	r12, 0x0631	; 0x800631 <LMIC+0x189>
    36ca:	d0 90 32 06 	lds	r13, 0x0632	; 0x800632 <LMIC+0x18a>
    36ce:	e0 90 33 06 	lds	r14, 0x0633	; 0x800633 <LMIC+0x18b>
    36d2:	f0 90 34 06 	lds	r15, 0x0634	; 0x800634 <LMIC+0x18c>
    36d6:	82 e1       	ldi	r24, 0x12	; 18
    36d8:	d8 0e       	add	r13, r24
    36da:	8a e7       	ldi	r24, 0x7A	; 122
    36dc:	e8 1e       	adc	r14, r24
    36de:	f1 1c       	adc	r15, r1
    36e0:	63 e0       	ldi	r22, 0x03	; 3
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <calcRxWindow>
    36e8:	c6 1a       	sub	r12, r22
    36ea:	d7 0a       	sbc	r13, r23
    36ec:	e8 0a       	sbc	r14, r24
    36ee:	f9 0a       	sbc	r15, r25
    36f0:	c0 92 2d 06 	sts	0x062D, r12	; 0x80062d <LMIC+0x185>
    36f4:	d0 92 2e 06 	sts	0x062E, r13	; 0x80062e <LMIC+0x186>
    36f8:	e0 92 2f 06 	sts	0x062F, r14	; 0x80062f <LMIC+0x187>
    36fc:	f0 92 30 06 	sts	0x0630, r15	; 0x800630 <LMIC+0x188>
    3700:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <LMIC+0x10>
    3704:	80 93 2c 06 	sts	0x062C, r24	; 0x80062c <LMIC+0x184>
    3708:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    370c:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3710:	91 fd       	sbrc	r25, 1
    3712:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <rxschedInit.constprop.10>
    3716:	8c 2f       	mov	r24, r28
    3718:	cf 91       	pop	r28
    371a:	ff 90       	pop	r15
    371c:	ef 90       	pop	r14
    371e:	df 90       	pop	r13
    3720:	cf 90       	pop	r12
    3722:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <reportEvent>

00003726 <processJoinAccept>:
    3726:	cf 92       	push	r12
    3728:	df 92       	push	r13
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <LMIC+0x140>
    373a:	81 30       	cpi	r24, 0x01	; 1
    373c:	51 f4       	brne	.+20     	; 0x3752 <processJoinAccept+0x2c>
    373e:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3742:	81 11       	cpse	r24, r1
    3744:	06 c0       	rjmp	.+12     	; 0x3752 <processJoinAccept+0x2c>
    3746:	6c e9       	ldi	r22, 0x9C	; 156
    3748:	75 e0       	ldi	r23, 0x05	; 5
    374a:	87 ed       	ldi	r24, 0xD7	; 215
    374c:	91 e0       	ldi	r25, 0x01	; 1
    374e:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    3752:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3756:	87 fd       	sbrc	r24, 7
    3758:	06 c0       	rjmp	.+12     	; 0x3766 <processJoinAccept+0x40>
    375a:	6d e9       	ldi	r22, 0x9D	; 157
    375c:	75 e0       	ldi	r23, 0x05	; 5
    375e:	87 ed       	ldi	r24, 0xD7	; 215
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    3766:	10 91 ea 05 	lds	r17, 0x05EA	; 0x8005ea <LMIC+0x142>
    376a:	11 11       	cpse	r17, r1
    376c:	94 c0       	rjmp	.+296    	; 0x3896 <processJoinAccept+0x170>
    376e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3772:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3776:	82 fd       	sbrc	r24, 2
    3778:	1a c0       	rjmp	.+52     	; 0x37ae <processJoinAccept+0x88>
    377a:	85 fd       	sbrc	r24, 5
    377c:	06 c0       	rjmp	.+12     	; 0x378a <processJoinAccept+0x64>
    377e:	62 ea       	ldi	r22, 0xA2	; 162
    3780:	75 e0       	ldi	r23, 0x05	; 5
    3782:	87 ed       	ldi	r24, 0xD7	; 215
    3784:	91 e0       	ldi	r25, 0x01	; 1
    3786:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    378a:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    378e:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3792:	8f 75       	andi	r24, 0x5F	; 95
    3794:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3798:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    379c:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <LMIC+0xad>
    37a0:	8a 30       	cpi	r24, 0x0A	; 10
    37a2:	18 f4       	brcc	.+6      	; 0x37aa <processJoinAccept+0x84>
    37a4:	8f 5f       	subi	r24, 0xFF	; 255
    37a6:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <LMIC+0xad>
    37aa:	89 e0       	ldi	r24, 0x09	; 9
    37ac:	60 c1       	rjmp	.+704    	; 0x3a6e <processJoinAccept+0x348>
    37ae:	20 91 45 05 	lds	r18, 0x0545	; 0x800545 <LMIC+0x9d>
    37b2:	2f 5f       	subi	r18, 0xFF	; 255
    37b4:	23 30       	cpi	r18, 0x03	; 3
    37b6:	19 f0       	breq	.+6      	; 0x37be <processJoinAccept+0x98>
    37b8:	20 93 45 05 	sts	0x0545, r18	; 0x800545 <LMIC+0x9d>
    37bc:	02 c0       	rjmp	.+4      	; 0x37c2 <processJoinAccept+0x9c>
    37be:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <LMIC+0x9d>
    37c2:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <LMIC+0x13f>
    37c6:	2f 5f       	subi	r18, 0xFF	; 255
    37c8:	20 93 e7 05 	sts	0x05E7, r18	; 0x8005e7 <LMIC+0x13f>
    37cc:	20 fd       	sbrc	r18, 0
    37ce:	0e c0       	rjmp	.+28     	; 0x37ec <processJoinAccept+0xc6>
    37d0:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <LMIC+0xab>
    37d4:	22 23       	and	r18, r18
    37d6:	61 f0       	breq	.+24     	; 0x37f0 <processJoinAccept+0xca>
    37d8:	e2 2f       	mov	r30, r18
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	e0 58       	subi	r30, 0x80	; 128
    37de:	fb 4f       	sbci	r31, 0xFB	; 251
    37e0:	e4 91       	lpm	r30, Z
    37e2:	ef 3f       	cpi	r30, 0xFF	; 255
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <processJoinAccept+0xc2>
    37e6:	21 50       	subi	r18, 0x01	; 1
    37e8:	20 93 53 05 	sts	0x0553, r18	; 0x800553 <LMIC+0xab>
    37ec:	c0 e0       	ldi	r28, 0x00	; 0
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <processJoinAccept+0xcc>
    37f0:	c1 e0       	ldi	r28, 0x01	; 1
    37f2:	8f 77       	andi	r24, 0x7F	; 127
    37f4:	97 7f       	andi	r25, 0xF7	; 247
    37f6:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    37fa:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    37fe:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    3802:	6b 01       	movw	r12, r22
    3804:	7c 01       	movw	r14, r24
    3806:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <LMIC+0x1f>
    380a:	90 91 c8 04 	lds	r25, 0x04C8	; 0x8004c8 <LMIC+0x20>
    380e:	a0 91 c9 04 	lds	r26, 0x04C9	; 0x8004c9 <LMIC+0x21>
    3812:	b0 91 ca 04 	lds	r27, 0x04CA	; 0x8004ca <LMIC+0x22>
    3816:	b7 01       	movw	r22, r14
    3818:	a6 01       	movw	r20, r12
    381a:	48 1b       	sub	r20, r24
    381c:	59 0b       	sbc	r21, r25
    381e:	6a 0b       	sbc	r22, r26
    3820:	7b 0b       	sbc	r23, r27
    3822:	77 ff       	sbrs	r23, 7
    3824:	02 c0       	rjmp	.+4      	; 0x382a <processJoinAccept+0x104>
    3826:	6c 01       	movw	r12, r24
    3828:	7d 01       	movw	r14, r26
    382a:	8f ef       	ldi	r24, 0xFF	; 255
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	00 90 53 05 	lds	r0, 0x0553	; 0x800553 <LMIC+0xab>
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <processJoinAccept+0x112>
    3834:	95 95       	asr	r25
    3836:	87 95       	ror	r24
    3838:	0a 94       	dec	r0
    383a:	e2 f7       	brpl	.-8      	; 0x3834 <processJoinAccept+0x10e>
    383c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <rndDelay>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	84 59       	subi	r24, 0x94	; 148
    3846:	93 42       	sbci	r25, 0x23	; 35
    3848:	ad 4f       	sbci	r26, 0xFD	; 253
    384a:	bf 4f       	sbci	r27, 0xFF	; 255
    384c:	c8 0e       	add	r12, r24
    384e:	d9 1e       	adc	r13, r25
    3850:	ea 1e       	adc	r14, r26
    3852:	fb 1e       	adc	r15, r27
    3854:	c0 92 a8 04 	sts	0x04A8, r12	; 0x8004a8 <LMIC>
    3858:	d0 92 a9 04 	sts	0x04A9, r13	; 0x8004a9 <LMIC+0x1>
    385c:	e0 92 aa 04 	sts	0x04AA, r14	; 0x8004aa <LMIC+0x2>
    3860:	f0 92 ab 04 	sts	0x04AB, r15	; 0x8004ab <LMIC+0x3>
    3864:	cc 2e       	mov	r12, r28
    3866:	d1 2c       	mov	r13, r1
    3868:	e1 2c       	mov	r14, r1
    386a:	f1 2c       	mov	r15, r1
    386c:	c1 11       	cpse	r28, r1
    386e:	03 c0       	rjmp	.+6      	; 0x3876 <processJoinAccept+0x150>
    3870:	c4 e6       	ldi	r28, 0x64	; 100
    3872:	dd e1       	ldi	r29, 0x1D	; 29
    3874:	02 c0       	rjmp	.+4      	; 0x387a <processJoinAccept+0x154>
    3876:	ce e5       	ldi	r28, 0x5E	; 94
    3878:	dd e1       	ldi	r29, 0x1D	; 29
    387a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    387e:	ab 01       	movw	r20, r22
    3880:	bc 01       	movw	r22, r24
    3882:	4c 0d       	add	r20, r12
    3884:	5d 1d       	adc	r21, r13
    3886:	6e 1d       	adc	r22, r14
    3888:	7f 1d       	adc	r23, r15
    388a:	9e 01       	movw	r18, r28
    388c:	8b eb       	ldi	r24, 0xBB	; 187
    388e:	94 e0       	ldi	r25, 0x04	; 4
    3890:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <os_setTimedCallback>
    3894:	ee c0       	rjmp	.+476    	; 0x3a72 <processJoinAccept+0x34c>
    3896:	11 31       	cpi	r17, 0x11	; 17
    3898:	41 f0       	breq	.+16     	; 0x38aa <processJoinAccept+0x184>
    389a:	11 32       	cpi	r17, 0x21	; 33
    389c:	31 f0       	breq	.+12     	; 0x38aa <processJoinAccept+0x184>
    389e:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <LMIC+0x140>
    38a2:	80 ff       	sbrs	r24, 0
    38a4:	64 cf       	rjmp	.-312    	; 0x376e <processJoinAccept+0x48>
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	e5 c0       	rjmp	.+458    	; 0x3a74 <processJoinAccept+0x34e>
    38aa:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <LMIC+0x143>
    38ae:	83 7e       	andi	r24, 0xE3	; 227
    38b0:	80 32       	cpi	r24, 0x20	; 32
    38b2:	a9 f7       	brne	.-22     	; 0x389e <processJoinAccept+0x178>
    38b4:	c1 2f       	mov	r28, r17
    38b6:	d0 e0       	ldi	r29, 0x00	; 0
    38b8:	88 e8       	ldi	r24, 0x88	; 136
    38ba:	94 e0       	ldi	r25, 0x04	; 4
    38bc:	0e 94 ab 02 	call	0x556	; 0x556 <os_getDevKey>
    38c0:	ae 01       	movw	r20, r28
    38c2:	41 50       	subi	r20, 0x01	; 1
    38c4:	51 09       	sbc	r21, r1
    38c6:	6c ee       	ldi	r22, 0xEC	; 236
    38c8:	75 e0       	ldi	r23, 0x05	; 5
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    38d0:	88 e8       	ldi	r24, 0x88	; 136
    38d2:	94 e0       	ldi	r25, 0x04	; 4
    38d4:	0e 94 ab 02 	call	0x556	; 0x556 <os_getDevKey>
    38d8:	24 97       	sbiw	r28, 0x04	; 4
    38da:	ae 01       	movw	r20, r28
    38dc:	6b ee       	ldi	r22, 0xEB	; 235
    38de:	75 e0       	ldi	r23, 0x05	; 5
    38e0:	8a e0       	ldi	r24, 0x0A	; 10
    38e2:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    38e6:	6b 01       	movw	r12, r22
    38e8:	7c 01       	movw	r14, r24
    38ea:	ce 01       	movw	r24, r28
    38ec:	85 51       	subi	r24, 0x15	; 21
    38ee:	9a 4f       	sbci	r25, 0xFA	; 250
    38f0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <os_rmsbf4>
    38f4:	c6 16       	cp	r12, r22
    38f6:	d7 06       	cpc	r13, r23
    38f8:	e8 06       	cpc	r14, r24
    38fa:	f9 06       	cpc	r15, r25
    38fc:	81 f6       	brne	.-96     	; 0x389e <processJoinAccept+0x178>
    38fe:	82 ef       	ldi	r24, 0xF2	; 242
    3900:	95 e0       	ldi	r25, 0x05	; 5
    3902:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    3906:	60 93 b7 05 	sts	0x05B7, r22	; 0x8005b7 <LMIC+0x10f>
    390a:	70 93 b8 05 	sts	0x05B8, r23	; 0x8005b8 <LMIC+0x110>
    390e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <LMIC+0x111>
    3912:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <LMIC+0x112>
    3916:	8f ee       	ldi	r24, 0xEF	; 239
    3918:	95 e0       	ldi	r25, 0x05	; 5
    391a:	0e 94 bf 0c 	call	0x197e	; 0x197e <os_rlsbf4>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	bb 27       	eor	r27, r27
    3924:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <LMIC+0xa3>
    3928:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <LMIC+0xa4>
    392c:	a0 93 4d 05 	sts	0x054D, r26	; 0x80054d <LMIC+0xa5>
    3930:	b0 93 4e 05 	sts	0x054E, r27	; 0x80054e <LMIC+0xa6>
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	0e 94 28 0c 	call	0x1850	; 0x1850 <initDefaultChannels>
    393a:	12 31       	cpi	r17, 0x12	; 18
    393c:	08 f0       	brcs	.+2      	; 0x3940 <processJoinAccept+0x21a>
    393e:	4d c0       	rjmp	.+154    	; 0x39da <processJoinAccept+0x2b4>
    3940:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <LMIC+0xed>
    3944:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <LMIC+0xee>
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	20 e1       	ldi	r18, 0x10	; 16
    394c:	e7 e9       	ldi	r30, 0x97	; 151
    394e:	f5 e0       	ldi	r31, 0x05	; 5
    3950:	df 01       	movw	r26, r30
    3952:	32 2f       	mov	r19, r18
    3954:	1d 92       	st	X+, r1
    3956:	3a 95       	dec	r19
    3958:	e9 f7       	brne	.-6      	; 0x3954 <processJoinAccept+0x22e>
    395a:	31 e0       	ldi	r19, 0x01	; 1
    395c:	30 93 97 05 	sts	0x0597, r19	; 0x800597 <LMIC+0xef>
    3960:	36 e0       	ldi	r19, 0x06	; 6
    3962:	ec ee       	ldi	r30, 0xEC	; 236
    3964:	f5 e0       	ldi	r31, 0x05	; 5
    3966:	a8 e9       	ldi	r26, 0x98	; 152
    3968:	b5 e0       	ldi	r27, 0x05	; 5
    396a:	01 90       	ld	r0, Z+
    396c:	0d 92       	st	X+, r0
    396e:	3a 95       	dec	r19
    3970:	e1 f7       	brne	.-8      	; 0x396a <processJoinAccept+0x244>
    3972:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <LMIC+0xf6>
    3976:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <LMIC+0xf7>
    397a:	e7 e9       	ldi	r30, 0x97	; 151
    397c:	f5 e0       	ldi	r31, 0x05	; 5
    397e:	a7 ea       	ldi	r26, 0xA7	; 167
    3980:	b5 e0       	ldi	r27, 0x05	; 5
    3982:	01 90       	ld	r0, Z+
    3984:	0d 92       	st	X+, r0
    3986:	2a 95       	dec	r18
    3988:	e1 f7       	brne	.-8      	; 0x3982 <processJoinAccept+0x25c>
    398a:	82 e0       	ldi	r24, 0x02	; 2
    398c:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <LMIC+0xff>
    3990:	88 e8       	ldi	r24, 0x88	; 136
    3992:	94 e0       	ldi	r25, 0x04	; 4
    3994:	0e 94 ab 02 	call	0x556	; 0x556 <os_getDevKey>
    3998:	40 e1       	ldi	r20, 0x10	; 16
    399a:	50 e0       	ldi	r21, 0x00	; 0
    399c:	67 e9       	ldi	r22, 0x97	; 151
    399e:	75 e0       	ldi	r23, 0x05	; 5
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    39a6:	88 e8       	ldi	r24, 0x88	; 136
    39a8:	94 e0       	ldi	r25, 0x04	; 4
    39aa:	0e 94 ab 02 	call	0x556	; 0x556 <os_getDevKey>
    39ae:	40 e1       	ldi	r20, 0x10	; 16
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	67 ea       	ldi	r22, 0xA7	; 167
    39b4:	75 e0       	ldi	r23, 0x05	; 5
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    39bc:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    39c0:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    39c4:	84 72       	andi	r24, 0x24	; 36
    39c6:	99 27       	eor	r25, r25
    39c8:	89 2b       	or	r24, r25
    39ca:	19 f5       	brne	.+70     	; 0x3a12 <processJoinAccept+0x2ec>
    39cc:	66 ef       	ldi	r22, 0xF6	; 246
    39ce:	75 e0       	ldi	r23, 0x05	; 5
    39d0:	87 ed       	ldi	r24, 0xD7	; 215
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    39d8:	1c c0       	rjmp	.+56     	; 0x3a12 <processJoinAccept+0x2ec>
    39da:	88 ef       	ldi	r24, 0xF8	; 248
    39dc:	e8 2e       	mov	r14, r24
    39de:	85 e0       	ldi	r24, 0x05	; 5
    39e0:	f8 2e       	mov	r15, r24
    39e2:	c3 e0       	ldi	r28, 0x03	; 3
    39e4:	c7 01       	movw	r24, r14
    39e6:	0e 94 c5 0c 	call	0x198a	; 0x198a <convFreq>
    39ea:	ab 01       	movw	r20, r22
    39ec:	bc 01       	movw	r22, r24
    39ee:	41 15       	cp	r20, r1
    39f0:	51 05       	cpc	r21, r1
    39f2:	61 05       	cpc	r22, r1
    39f4:	71 05       	cpc	r23, r1
    39f6:	31 f0       	breq	.+12     	; 0x3a04 <processJoinAccept+0x2de>
    39f8:	0f ef       	ldi	r16, 0xFF	; 255
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	8c 2f       	mov	r24, r28
    3a00:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <LMIC_setupChannel>
    3a04:	cf 5f       	subi	r28, 0xFF	; 255
    3a06:	83 e0       	ldi	r24, 0x03	; 3
    3a08:	e8 0e       	add	r14, r24
    3a0a:	f1 1c       	adc	r15, r1
    3a0c:	c8 30       	cpi	r28, 0x08	; 8
    3a0e:	51 f7       	brne	.-44     	; 0x39e4 <processJoinAccept+0x2be>
    3a10:	97 cf       	rjmp	.-210    	; 0x3940 <processJoinAccept+0x21a>
    3a12:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3a16:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3a1a:	85 ff       	sbrs	r24, 5
    3a1c:	11 c0       	rjmp	.+34     	; 0x3a40 <processJoinAccept+0x31a>
    3a1e:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <LMIC+0xad>
    3a22:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <LMIC+0xab>
    3a26:	31 50       	subi	r19, 0x01	; 1
    3a28:	48 f0       	brcs	.+18     	; 0x3a3c <processJoinAccept+0x316>
    3a2a:	e2 2f       	mov	r30, r18
    3a2c:	f0 e0       	ldi	r31, 0x00	; 0
    3a2e:	e0 58       	subi	r30, 0x80	; 128
    3a30:	fb 4f       	sbci	r31, 0xFB	; 251
    3a32:	e4 91       	lpm	r30, Z
    3a34:	ef 3f       	cpi	r30, 0xFF	; 255
    3a36:	b9 f3       	breq	.-18     	; 0x3a26 <processJoinAccept+0x300>
    3a38:	21 50       	subi	r18, 0x01	; 1
    3a3a:	f5 cf       	rjmp	.-22     	; 0x3a26 <processJoinAccept+0x300>
    3a3c:	20 93 53 05 	sts	0x0553, r18	; 0x800553 <LMIC+0xab>
    3a40:	89 75       	andi	r24, 0x59	; 89
    3a42:	9d 7f       	andi	r25, 0xFD	; 253
    3a44:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3a48:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    3a4c:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <LMIC+0x13f>
    3a50:	0e 94 95 09 	call	0x132a	; 0x132a <stateJustJoined>
    3a54:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <LMIC+0x14e>
    3a58:	8f 70       	andi	r24, 0x0F	; 15
    3a5a:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <LMIC+0x126>
    3a5e:	80 91 f7 05 	lds	r24, 0x05F7	; 0x8005f7 <LMIC+0x14f>
    3a62:	81 11       	cpse	r24, r1
    3a64:	01 c0       	rjmp	.+2      	; 0x3a68 <processJoinAccept+0x342>
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <LMIC+0x11e>
    3a6c:	86 e0       	ldi	r24, 0x06	; 6
    3a6e:	0e 94 0c 1a 	call	0x3418	; 0x3418 <reportEvent>
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	df 91       	pop	r29
    3a76:	cf 91       	pop	r28
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	ef 90       	pop	r14
    3a80:	df 90       	pop	r13
    3a82:	cf 90       	pop	r12
    3a84:	08 95       	ret

00003a86 <processRx1Jacc>:
    3a86:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3a8a:	81 11       	cpse	r24, r1
    3a8c:	0a c0       	rjmp	.+20     	; 0x3aa2 <processRx1Jacc+0x1c>
    3a8e:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <LMIC+0x126>
    3a92:	44 ed       	ldi	r20, 0xD4	; 212
    3a94:	5b e0       	ldi	r21, 0x0B	; 11
    3a96:	68 ed       	ldi	r22, 0xD8	; 216
    3a98:	78 eb       	ldi	r23, 0xB8	; 184
    3a9a:	85 e0       	ldi	r24, 0x05	; 5
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <schedRx12>
    3aa2:	0e 94 93 1b 	call	0x3726	; 0x3726 <processJoinAccept>
    3aa6:	88 23       	and	r24, r24
    3aa8:	91 f3       	breq	.-28     	; 0x3a8e <processRx1Jacc+0x8>
    3aaa:	08 95       	ret

00003aac <processRx2Jacc>:
    3aac:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3ab0:	81 11       	cpse	r24, r1
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <processRx2Jacc+0xc>
    3ab4:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <LMIC+0x140>
    3ab8:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <processJoinAccept>

00003abc <onJoinFailed>:
    3abc:	88 e0       	ldi	r24, 0x08	; 8
    3abe:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <reportEvent>

00003ac2 <startJoining>:
    3ac2:	85 e0       	ldi	r24, 0x05	; 5
    3ac4:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <reportEvent>

00003ac8 <runEngineUpdate>:
    3ac8:	0c 94 4f 14 	jmp	0x289e	; 0x289e <engineUpdate>

00003acc <processPingRx>:
    3acc:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3ad0:	88 23       	and	r24, r24
    3ad2:	51 f0       	breq	.+20     	; 0x3ae8 <processPingRx+0x1c>
    3ad4:	84 e0       	ldi	r24, 0x04	; 4
    3ad6:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <LMIC+0x140>
    3ada:	0e 94 3a 10 	call	0x2074	; 0x2074 <decodeFrame>
    3ade:	88 23       	and	r24, r24
    3ae0:	19 f0       	breq	.+6      	; 0x3ae8 <processPingRx+0x1c>
    3ae2:	8d e0       	ldi	r24, 0x0D	; 13
    3ae4:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <reportEvent>
    3ae8:	0c 94 4f 14 	jmp	0x289e	; 0x289e <engineUpdate>

00003aec <processDnData>:
    3aec:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3af0:	87 fd       	sbrc	r24, 7
    3af2:	06 c0       	rjmp	.+12     	; 0x3b00 <processDnData+0x14>
    3af4:	61 e6       	ldi	r22, 0x61	; 97
    3af6:	77 e0       	ldi	r23, 0x07	; 7
    3af8:	87 ed       	ldi	r24, 0xD7	; 215
    3afa:	91 e0       	ldi	r25, 0x01	; 1
    3afc:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    3b00:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3b04:	81 11       	cpse	r24, r1
    3b06:	98 c0       	rjmp	.+304    	; 0x3c38 <processDnData+0x14c>
    3b08:	e0 91 e7 05 	lds	r30, 0x05E7	; 0x8005e7 <LMIC+0x13f>
    3b0c:	ee 23       	and	r30, r30
    3b0e:	91 f1       	breq	.+100    	; 0x3b74 <processDnData+0x88>
    3b10:	e8 30       	cpi	r30, 0x08	; 8
    3b12:	70 f5       	brcc	.+92     	; 0x3b70 <processDnData+0x84>
    3b14:	ef 5f       	subi	r30, 0xFF	; 255
    3b16:	e0 93 e7 05 	sts	0x05E7, r30	; 0x8005e7 <LMIC+0x13f>
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	ef 5a       	subi	r30, 0xAF	; 175
    3b1e:	fb 4f       	sbci	r31, 0xFB	; 251
    3b20:	94 91       	lpm	r25, Z
    3b22:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <LMIC+0xab>
    3b26:	91 50       	subi	r25, 0x01	; 1
    3b28:	48 f0       	brcs	.+18     	; 0x3b3c <processDnData+0x50>
    3b2a:	e8 2f       	mov	r30, r24
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	e0 58       	subi	r30, 0x80	; 128
    3b30:	fb 4f       	sbci	r31, 0xFB	; 251
    3b32:	e4 91       	lpm	r30, Z
    3b34:	ef 3f       	cpi	r30, 0xFF	; 255
    3b36:	b9 f3       	breq	.-18     	; 0x3b26 <processDnData+0x3a>
    3b38:	81 50       	subi	r24, 0x01	; 1
    3b3a:	f5 cf       	rjmp	.-22     	; 0x3b26 <processDnData+0x3a>
    3b3c:	60 e8       	ldi	r22, 0x80	; 128
    3b3e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <setDrTxpow.isra.1>
    3b42:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <LMIC+0x4>
    3b46:	70 91 ad 04 	lds	r23, 0x04AD	; 0x8004ad <LMIC+0x5>
    3b4a:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <LMIC+0x6>
    3b4e:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <LMIC+0x7>
    3b52:	43 e0       	ldi	r20, 0x03	; 3
    3b54:	0e 94 89 0a 	call	0x1512	; 0x1512 <txDelay>
    3b58:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3b5c:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3b60:	8f 77       	andi	r24, 0x7F	; 127
    3b62:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3b66:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    3b6a:	0e 94 4f 14 	call	0x289e	; 0x289e <engineUpdate>
    3b6e:	62 c0       	rjmp	.+196    	; 0x3c34 <processDnData+0x148>
    3b70:	80 e6       	ldi	r24, 0x60	; 96
    3b72:	01 c0       	rjmp	.+2      	; 0x3b76 <processDnData+0x8a>
    3b74:	80 e2       	ldi	r24, 0x20	; 32
    3b76:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <LMIC+0x140>
    3b7a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <LMIC+0x11c>
    3b7e:	80 38       	cpi	r24, 0x80	; 128
    3b80:	19 f0       	breq	.+6      	; 0x3b88 <processDnData+0x9c>
    3b82:	8f 5f       	subi	r24, 0xFF	; 255
    3b84:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <LMIC+0x11c>
    3b88:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    3b8c:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <LMIC+0x141>
    3b90:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3b94:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3b98:	9c 01       	movw	r18, r24
    3b9a:	27 77       	andi	r18, 0x77	; 119
    3b9c:	30 93 50 05 	sts	0x0550, r19	; 0x800550 <LMIC+0xa8>
    3ba0:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <LMIC+0xa7>
    3ba4:	20 91 e8 05 	lds	r18, 0x05E8	; 0x8005e8 <LMIC+0x140>
    3ba8:	27 70       	andi	r18, 0x07	; 7
    3baa:	59 f0       	breq	.+22     	; 0x3bc2 <processDnData+0xd6>
    3bac:	94 ff       	sbrs	r25, 4
    3bae:	09 c0       	rjmp	.+18     	; 0x3bc2 <processDnData+0xd6>
    3bb0:	87 77       	andi	r24, 0x77	; 119
    3bb2:	9f 7e       	andi	r25, 0xEF	; 239
    3bb4:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3bb8:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    3bbc:	8f e0       	ldi	r24, 0x0F	; 15
    3bbe:	0e 94 0c 1a 	call	0x3418	; 0x3418 <reportEvent>
    3bc2:	8a e0       	ldi	r24, 0x0A	; 10
    3bc4:	0e 94 0c 1a 	call	0x3418	; 0x3418 <reportEvent>
    3bc8:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <LMIC+0x11c>
    3bcc:	89 31       	cpi	r24, 0x19	; 25
    3bce:	ec f0       	brlt	.+58     	; 0x3c0a <processDnData+0x11e>
    3bd0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <LMIC+0xab>
    3bd4:	e8 2f       	mov	r30, r24
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	e0 58       	subi	r30, 0x80	; 128
    3bda:	fb 4f       	sbci	r31, 0xFB	; 251
    3bdc:	e4 91       	lpm	r30, Z
    3bde:	ef 3f       	cpi	r30, 0xFF	; 255
    3be0:	09 f0       	breq	.+2      	; 0x3be4 <processDnData+0xf8>
    3be2:	81 50       	subi	r24, 0x01	; 1
    3be4:	60 e8       	ldi	r22, 0x80	; 128
    3be6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <setDrTxpow.isra.1>
    3bea:	8c e0       	ldi	r24, 0x0C	; 12
    3bec:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <LMIC+0x11c>
    3bf0:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3bf4:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3bf8:	80 62       	ori	r24, 0x20	; 32
    3bfa:	90 61       	ori	r25, 0x10	; 16
    3bfc:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3c00:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    3c04:	8e e0       	ldi	r24, 0x0E	; 14
    3c06:	0e 94 0c 1a 	call	0x3418	; 0x3418 <reportEvent>
    3c0a:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <LMIC+0x12d>
    3c0e:	88 23       	and	r24, r24
    3c10:	89 f0       	breq	.+34     	; 0x3c34 <processDnData+0x148>
    3c12:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <LMIC+0xa7>
    3c16:	91 ff       	sbrs	r25, 1
    3c18:	06 c0       	rjmp	.+12     	; 0x3c26 <processDnData+0x13a>
    3c1a:	82 e0       	ldi	r24, 0x02	; 2
    3c1c:	0e 94 0c 1a 	call	0x3418	; 0x3418 <reportEvent>
    3c20:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <LMIC+0x12d>
    3c24:	07 c0       	rjmp	.+14     	; 0x3c34 <processDnData+0x148>
    3c26:	81 50       	subi	r24, 0x01	; 1
    3c28:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <LMIC+0x12d>
    3c2c:	81 11       	cpse	r24, r1
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <processDnData+0x148>
    3c30:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <startScan>
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	08 95       	ret
    3c38:	0e 94 3a 10 	call	0x2074	; 0x2074 <decodeFrame>
    3c3c:	81 11       	cpse	r24, r1
    3c3e:	a8 cf       	rjmp	.-176    	; 0x3b90 <processDnData+0xa4>
    3c40:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <LMIC+0x140>
    3c44:	90 ff       	sbrs	r25, 0
    3c46:	60 cf       	rjmp	.-320    	; 0x3b08 <processDnData+0x1c>
    3c48:	08 95       	ret

00003c4a <processRx1DnData>:
    3c4a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3c4e:	81 11       	cpse	r24, r1
    3c50:	0e c0       	rjmp	.+28     	; 0x3c6e <processRx1DnData+0x24>
    3c52:	a0 91 c6 05 	lds	r26, 0x05C6	; 0x8005c6 <LMIC+0x11e>
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	11 96       	adiw	r26, 0x01	; 1
    3c5a:	24 e2       	ldi	r18, 0x24	; 36
    3c5c:	34 ef       	ldi	r19, 0xF4	; 244
    3c5e:	0e 94 42 35 	call	0x6a84	; 0x6a84 <__usmulhisi3>
    3c62:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <LMIC+0x126>
    3c66:	4c ec       	ldi	r20, 0xCC	; 204
    3c68:	5b e0       	ldi	r21, 0x0B	; 11
    3c6a:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <schedRx12>
    3c6e:	0e 94 76 1d 	call	0x3aec	; 0x3aec <processDnData>
    3c72:	88 23       	and	r24, r24
    3c74:	71 f3       	breq	.-36     	; 0x3c52 <processRx1DnData+0x8>
    3c76:	08 95       	ret

00003c78 <processRx2DnData>:
    3c78:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	0b c0       	rjmp	.+22     	; 0x3c96 <processRx2DnData+0x1e>
    3c80:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <LMIC+0x140>
    3c84:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    3c88:	64 59       	subi	r22, 0x94	; 148
    3c8a:	73 42       	sbci	r23, 0x23	; 35
    3c8c:	8d 4f       	sbci	r24, 0xFD	; 253
    3c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c90:	42 e0       	ldi	r20, 0x02	; 2
    3c92:	0e 94 89 0a 	call	0x1512	; 0x1512 <txDelay>
    3c96:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <processDnData>

00003c9a <LMIC_setDrTxpow>:
    3c9a:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <setDrTxpow.isra.1>

00003c9e <LMIC_reset>:
    3c9e:	cf 93       	push	r28
    3ca0:	80 e0       	ldi	r24, 0x00	; 0
    3ca2:	0e 94 65 23 	call	0x46ca	; 0x46ca <os_radio>
    3ca6:	8b eb       	ldi	r24, 0xBB	; 187
    3ca8:	94 e0       	ldi	r25, 0x04	; 4
    3caa:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <os_clearCallback>
    3cae:	8d e9       	ldi	r24, 0x9D	; 157
    3cb0:	91 e0       	ldi	r25, 0x01	; 1
    3cb2:	e8 ea       	ldi	r30, 0xA8	; 168
    3cb4:	f4 e0       	ldi	r31, 0x04	; 4
    3cb6:	df 01       	movw	r26, r30
    3cb8:	9c 01       	movw	r18, r24
    3cba:	1d 92       	st	X+, r1
    3cbc:	21 50       	subi	r18, 0x01	; 1
    3cbe:	30 40       	sbci	r19, 0x00	; 0
    3cc0:	e1 f7       	brne	.-8      	; 0x3cba <LMIC_reset+0x1c>
    3cc2:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    3cc6:	c8 2f       	mov	r28, r24
    3cc8:	0e 94 90 22 	call	0x4520	; 0x4520 <radio_rand1>
    3ccc:	2c 2f       	mov	r18, r28
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	32 2f       	mov	r19, r18
    3cd2:	22 27       	eor	r18, r18
    3cd4:	28 2b       	or	r18, r24
    3cd6:	30 93 96 05 	sts	0x0596, r19	; 0x800596 <LMIC+0xee>
    3cda:	20 93 95 05 	sts	0x0595, r18	; 0x800595 <LMIC+0xed>
    3cde:	10 92 50 05 	sts	0x0550, r1	; 0x800550 <LMIC+0xa8>
    3ce2:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <LMIC+0xa7>
    3ce6:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <LMIC+0xac>
    3cea:	80 e8       	ldi	r24, 0x80	; 128
    3cec:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <LMIC+0x122>
    3cf0:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <LMIC+0x126>
    3cf4:	88 e0       	ldi	r24, 0x08	; 8
    3cf6:	96 ee       	ldi	r25, 0xE6	; 230
    3cf8:	a3 ed       	ldi	r26, 0xD3	; 211
    3cfa:	b3 e3       	ldi	r27, 0x33	; 51
    3cfc:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <LMIC+0x127>
    3d00:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <LMIC+0x128>
    3d04:	a0 93 d1 05 	sts	0x05D1, r26	; 0x8005d1 <LMIC+0x129>
    3d08:	b0 93 d2 05 	sts	0x05D2, r27	; 0x8005d2 <LMIC+0x12a>
    3d0c:	21 e0       	ldi	r18, 0x01	; 1
    3d0e:	20 93 c6 05 	sts	0x05C6, r18	; 0x8005c6 <LMIC+0x11e>
    3d12:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <LMIC+0x13b>
    3d16:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <LMIC+0x13c>
    3d1a:	a0 93 e5 05 	sts	0x05E5, r26	; 0x8005e5 <LMIC+0x13d>
    3d1e:	b0 93 e6 05 	sts	0x05E6, r27	; 0x8005e6 <LMIC+0x13e>
    3d22:	83 e0       	ldi	r24, 0x03	; 3
    3d24:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <LMIC+0x12f>
    3d28:	8f ef       	ldi	r24, 0xFF	; 255
    3d2a:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <LMIC+0x130>
    3d2e:	cf 91       	pop	r28
    3d30:	08 95       	ret

00003d32 <runReset>:
    3d32:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <LMIC_reset>
    3d36:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LMIC_startJoining>
    3d3a:	8c e0       	ldi	r24, 0x0C	; 12
    3d3c:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <reportEvent>

00003d40 <LMIC_init>:
    3d40:	80 e4       	ldi	r24, 0x40	; 64
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3d48:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    3d4c:	08 95       	ret

00003d4e <LMIC_setTxData>:
    3d4e:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3d52:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3d56:	9c 01       	movw	r18, r24
    3d58:	28 60       	ori	r18, 0x08	; 8
    3d5a:	30 93 50 05 	sts	0x0550, r19	; 0x800550 <LMIC+0xa8>
    3d5e:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <LMIC+0xa7>
    3d62:	82 ff       	sbrs	r24, 2
    3d64:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <LMIC+0x13f>
    3d68:	0c 94 4f 14 	jmp	0x289e	; 0x289e <engineUpdate>

00003d6c <LMIC_setTxData2>:
    3d6c:	1f 93       	push	r17
    3d6e:	cf 93       	push	r28
    3d70:	df 93       	push	r29
    3d72:	45 33       	cpi	r20, 0x35	; 53
    3d74:	b0 f4       	brcc	.+44     	; 0x3da2 <LMIC_setTxData2+0x36>
    3d76:	12 2f       	mov	r17, r18
    3d78:	c4 2f       	mov	r28, r20
    3d7a:	d8 2f       	mov	r29, r24
    3d7c:	61 15       	cp	r22, r1
    3d7e:	71 05       	cpc	r23, r1
    3d80:	29 f0       	breq	.+10     	; 0x3d8c <LMIC_setTxData2+0x20>
    3d82:	50 e0       	ldi	r21, 0x00	; 0
    3d84:	81 e6       	ldi	r24, 0x61	; 97
    3d86:	95 e0       	ldi	r25, 0x05	; 5
    3d88:	0e 94 04 39 	call	0x7208	; 0x7208 <memcpy>
    3d8c:	10 93 5f 05 	sts	0x055F, r17	; 0x80055f <LMIC+0xb7>
    3d90:	d0 93 5e 05 	sts	0x055E, r29	; 0x80055e <LMIC+0xb6>
    3d94:	c0 93 60 05 	sts	0x0560, r28	; 0x800560 <LMIC+0xb8>
    3d98:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <LMIC_setTxData>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <LMIC_setTxData2+0x3a>
    3da2:	8e ef       	ldi	r24, 0xFE	; 254
    3da4:	9f ef       	ldi	r25, 0xFF	; 255
    3da6:	df 91       	pop	r29
    3da8:	cf 91       	pop	r28
    3daa:	1f 91       	pop	r17
    3dac:	08 95       	ret

00003dae <LMIC_setSession>:
//!    to ensure that different devices use different numbers with high probability.
//! \param nwkKey  the 16 byte network session key used for message integrity.
//!     If NULL the caller has copied the key into `LMIC.nwkKey` before.
//! \param artKey  the 16 byte application router session key used for message confidentiality.
//!     If NULL the caller has copied the key into `LMIC.artKey` before.
void LMIC_setSession (u4_t netid, devaddr_t devaddr, xref2u1_t nwkKey, xref2u1_t artKey) {
    3dae:	ef 92       	push	r14
    3db0:	ff 92       	push	r15
    3db2:	0f 93       	push	r16
    3db4:	1f 93       	push	r17
    LMIC.netid = netid;
    3db6:	60 93 4b 05 	sts	0x054B, r22	; 0x80054b <LMIC+0xa3>
    3dba:	70 93 4c 05 	sts	0x054C, r23	; 0x80054c <LMIC+0xa4>
    3dbe:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <LMIC+0xa5>
    3dc2:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <LMIC+0xa6>
    LMIC.devaddr = devaddr;
    3dc6:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <LMIC+0x10f>
    3dca:	30 93 b8 05 	sts	0x05B8, r19	; 0x8005b8 <LMIC+0x110>
    3dce:	40 93 b9 05 	sts	0x05B9, r20	; 0x8005b9 <LMIC+0x111>
    3dd2:	50 93 ba 05 	sts	0x05BA, r21	; 0x8005ba <LMIC+0x112>
    if( nwkKey != (xref2u1_t)0 )
    3dd6:	01 15       	cp	r16, r1
    3dd8:	11 05       	cpc	r17, r1
    3dda:	41 f0       	breq	.+16     	; 0x3dec <LMIC_setSession+0x3e>
        os_copyMem(LMIC.nwkKey, nwkKey, 16);
    3ddc:	80 e1       	ldi	r24, 0x10	; 16
    3dde:	f8 01       	movw	r30, r16
    3de0:	a7 e9       	ldi	r26, 0x97	; 151
    3de2:	b5 e0       	ldi	r27, 0x05	; 5
    3de4:	01 90       	ld	r0, Z+
    3de6:	0d 92       	st	X+, r0
    3de8:	8a 95       	dec	r24
    3dea:	e1 f7       	brne	.-8      	; 0x3de4 <LMIC_setSession+0x36>
    if( artKey != (xref2u1_t)0 )
    3dec:	e1 14       	cp	r14, r1
    3dee:	f1 04       	cpc	r15, r1
    3df0:	41 f0       	breq	.+16     	; 0x3e02 <LMIC_setSession+0x54>
        os_copyMem(LMIC.artKey, artKey, 16);
    3df2:	80 e1       	ldi	r24, 0x10	; 16
    3df4:	f7 01       	movw	r30, r14
    3df6:	a7 ea       	ldi	r26, 0xA7	; 167
    3df8:	b5 e0       	ldi	r27, 0x05	; 5
    3dfa:	01 90       	ld	r0, Z+
    3dfc:	0d 92       	st	X+, r0
    3dfe:	8a 95       	dec	r24
    3e00:	e1 f7       	brne	.-8      	; 0x3dfa <LMIC_setSession+0x4c>

#if defined(CFG_eu868)
    initDefaultChannels(0);
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	0e 94 28 0c 	call	0x1850	; 0x1850 <initDefaultChannels>
#endif

    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    3e08:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <LMIC+0xa7>
    3e0c:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <LMIC+0xa8>
    3e10:	89 75       	andi	r24, 0x59	; 89
    3e12:	9d 7f       	andi	r25, 0xFD	; 253
    3e14:	98 60       	ori	r25, 0x08	; 8
    3e16:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <LMIC+0xa8>
    3e1a:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <LMIC+0xa7>
    DO_DEVDB(LMIC.devaddr, devaddr);
    DO_DEVDB(LMIC.nwkKey,  nwkkey);
    DO_DEVDB(LMIC.artKey,  artkey);
    DO_DEVDB(LMIC.seqnoUp, seqnoUp);
    DO_DEVDB(LMIC.seqnoDn, seqnoDn);
}
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	ff 90       	pop	r15
    3e24:	ef 90       	pop	r14
    initDefaultChannels(0);
#endif

    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    stateJustJoined();
    3e26:	0c 94 95 09 	jmp	0x132a	; 0x132a <stateJustJoined>

00003e2a <LMIC_setLinkCheckMode>:
// then the datarate is lowered and a LINK_DEAD event is generated.
// This mode can be disabled and no connectivity prove (ADRACKREQ) is requested
// nor is the datarate changed.
// This must be called only if a session is established (e.g. after EV_JOINED)
void LMIC_setLinkCheckMode (bit_t enabled) {
    LMIC.adrChanged = 0;
    3e2a:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <LMIC+0x11d>
    LMIC.adrAckReq = enabled ? LINK_CHECK_INIT : LINK_CHECK_OFF;
    3e2e:	81 11       	cpse	r24, r1
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <LMIC_setLinkCheckMode+0xc>
    3e32:	80 e8       	ldi	r24, 0x80	; 128
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <LMIC_setLinkCheckMode+0xe>
    3e36:	84 ef       	ldi	r24, 0xF4	; 244
    3e38:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <LMIC+0x11c>
    3e3c:	08 95       	ret

00003e3e <os_init>:
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
    memset(&OS, 0x00, sizeof(OS));
    3e3e:	84 e0       	ldi	r24, 0x04	; 4
    3e40:	e2 ec       	ldi	r30, 0xC2	; 194
    3e42:	f2 e0       	ldi	r31, 0x02	; 2
    3e44:	df 01       	movw	r26, r30
    3e46:	1d 92       	st	X+, r1
    3e48:	8a 95       	dec	r24
    3e4a:	e9 f7       	brne	.-6      	; 0x3e46 <os_init+0x8>
    hal_init();
    3e4c:	0e 94 32 09 	call	0x1264	; 0x1264 <hal_init>
    radio_init();
    3e50:	0e 94 21 22 	call	0x4442	; 0x4442 <radio_init>
    LMIC_init();
    3e54:	0c 94 a0 1e 	jmp	0x3d40	; 0x3d40 <LMIC_init>

00003e58 <os_getTime>:
}

ostime_t os_getTime () {
    return hal_ticks();
    3e58:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <hal_ticks>

00003e5c <os_clearCallback>:
    }
    return 0;
}

// clear scheduled job
void os_clearCallback (osjob_t* job) {
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	ec 01       	movw	r28, r24
    hal_disableIRQs();
    3e62:	0e 94 ca 08 	call	0x1194	; 0x1194 <hal_disableIRQs>
    3e66:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <OS>
    3e6a:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <OS+0x1>
    3e6e:	a2 ec       	ldi	r26, 0xC2	; 194
    3e70:	b2 e0       	ldi	r27, 0x02	; 2
ostime_t os_getTime () {
    return hal_ticks();
}

static u1_t unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    3e72:	30 97       	sbiw	r30, 0x00	; 0
    3e74:	69 f0       	breq	.+26     	; 0x3e90 <os_clearCallback+0x34>
        if(*pnext == job) { // unlink
    3e76:	ce 17       	cp	r28, r30
    3e78:	df 07       	cpc	r29, r31
    3e7a:	29 f4       	brne	.+10     	; 0x3e86 <os_clearCallback+0x2a>
            *pnext = job->next;
    3e7c:	88 81       	ld	r24, Y
    3e7e:	99 81       	ldd	r25, Y+1	; 0x01
    3e80:	8d 93       	st	X+, r24
    3e82:	9c 93       	st	X, r25
    3e84:	15 c0       	rjmp	.+42     	; 0x3eb0 <os_clearCallback+0x54>
ostime_t os_getTime () {
    return hal_ticks();
}

static u1_t unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    3e86:	df 01       	movw	r26, r30
    3e88:	01 90       	ld	r0, Z+
    3e8a:	f0 81       	ld	r31, Z
    3e8c:	e0 2d       	mov	r30, r0
    3e8e:	f1 cf       	rjmp	.-30     	; 0x3e72 <os_clearCallback+0x16>
    3e90:	e4 ec       	ldi	r30, 0xC4	; 196
    3e92:	f2 e0       	ldi	r31, 0x02	; 2
    3e94:	80 81       	ld	r24, Z
    3e96:	91 81       	ldd	r25, Z+1	; 0x01
    3e98:	00 97       	sbiw	r24, 0x00	; 0
    3e9a:	51 f0       	breq	.+20     	; 0x3eb0 <os_clearCallback+0x54>
        if(*pnext == job) { // unlink
    3e9c:	c8 17       	cp	r28, r24
    3e9e:	d9 07       	cpc	r29, r25
    3ea0:	29 f4       	brne	.+10     	; 0x3eac <os_clearCallback+0x50>
            *pnext = job->next;
    3ea2:	88 81       	ld	r24, Y
    3ea4:	99 81       	ldd	r25, Y+1	; 0x01
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	80 83       	st	Z, r24
    3eaa:	02 c0       	rjmp	.+4      	; 0x3eb0 <os_clearCallback+0x54>
ostime_t os_getTime () {
    return hal_ticks();
}

static u1_t unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    3eac:	fc 01       	movw	r30, r24
    3eae:	f2 cf       	rjmp	.-28     	; 0x3e94 <os_clearCallback+0x38>
    hal_enableIRQs();
    #if LMIC_DEBUG_LEVEL > 1
        if (res)
            lmic_printf("%lu: Cleared job %p\n", os_getTime(), job);
    #endif
}
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28

// clear scheduled job
void os_clearCallback (osjob_t* job) {
    hal_disableIRQs();
    u1_t res = unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
    hal_enableIRQs();
    3eb4:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <hal_enableIRQs>

00003eb8 <os_setCallback>:
            lmic_printf("%lu: Cleared job %p\n", os_getTime(), job);
    #endif
}

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	ec 01       	movw	r28, r24
    3ec2:	8b 01       	movw	r16, r22
    osjob_t** pnext;
    hal_disableIRQs();
    3ec4:	0e 94 ca 08 	call	0x1194	; 0x1194 <hal_disableIRQs>
    // remove if job was already queued
    os_clearCallback(job);
    3ec8:	ce 01       	movw	r24, r28
    3eca:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <os_clearCallback>
    // fill-in job
    job->func = cb;
    3ece:	1f 83       	std	Y+7, r17	; 0x07
    3ed0:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    3ed2:	19 82       	std	Y+1, r1	; 0x01
    3ed4:	18 82       	st	Y, r1
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    3ed6:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <OS+0x2>
    3eda:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <OS+0x3>
    3ede:	a4 ec       	ldi	r26, 0xC4	; 196
    3ee0:	b2 e0       	ldi	r27, 0x02	; 2
    3ee2:	30 97       	sbiw	r30, 0x00	; 0
    3ee4:	29 f0       	breq	.+10     	; 0x3ef0 <os_setCallback+0x38>
    3ee6:	df 01       	movw	r26, r30
    3ee8:	01 90       	ld	r0, Z+
    3eea:	f0 81       	ld	r31, Z
    3eec:	e0 2d       	mov	r30, r0
    3eee:	f9 cf       	rjmp	.-14     	; 0x3ee2 <os_setCallback+0x2a>
    *pnext = job;
    3ef0:	cd 93       	st	X+, r28
    3ef2:	dc 93       	st	X, r29
    hal_enableIRQs();
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p ASAP\n", os_getTime(), job, cb);
    #endif
}
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    job->func = cb;
    job->next = NULL;
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    *pnext = job;
    hal_enableIRQs();
    3efc:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <hal_enableIRQs>

00003f00 <os_setTimedCallback>:
        lmic_printf("%lu: Scheduled job %p, cb %p ASAP\n", os_getTime(), job, cb);
    #endif
}

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
    3f00:	cf 92       	push	r12
    3f02:	df 92       	push	r13
    3f04:	ef 92       	push	r14
    3f06:	ff 92       	push	r15
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
    3f10:	ec 01       	movw	r28, r24
    3f12:	6a 01       	movw	r12, r20
    3f14:	7b 01       	movw	r14, r22
    3f16:	89 01       	movw	r16, r18
    osjob_t** pnext;
    hal_disableIRQs();
    3f18:	0e 94 ca 08 	call	0x1194	; 0x1194 <hal_disableIRQs>
    // remove if job was already queued
    os_clearCallback(job);
    3f1c:	ce 01       	movw	r24, r28
    3f1e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <os_clearCallback>
    // fill-in job
    job->deadline = time;
    3f22:	ca 82       	std	Y+2, r12	; 0x02
    3f24:	db 82       	std	Y+3, r13	; 0x03
    3f26:	ec 82       	std	Y+4, r14	; 0x04
    3f28:	fd 82       	std	Y+5, r15	; 0x05
    job->func = cb;
    3f2a:	1f 83       	std	Y+7, r17	; 0x07
    3f2c:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    3f2e:	19 82       	std	Y+1, r1	; 0x01
    3f30:	18 82       	st	Y, r1
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    3f32:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <OS>
    3f36:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <OS+0x1>
    3f3a:	22 ec       	ldi	r18, 0xC2	; 194
    3f3c:	32 e0       	ldi	r19, 0x02	; 2
    3f3e:	30 97       	sbiw	r30, 0x00	; 0
    3f40:	a9 f0       	breq	.+42     	; 0x3f6c <os_setTimedCallback+0x6c>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	a4 81       	ldd	r26, Z+4	; 0x04
    3f48:	b5 81       	ldd	r27, Z+5	; 0x05
    3f4a:	8c 19       	sub	r24, r12
    3f4c:	9d 09       	sbc	r25, r13
    3f4e:	ae 09       	sbc	r26, r14
    3f50:	bf 09       	sbc	r27, r15
    3f52:	18 16       	cp	r1, r24
    3f54:	19 06       	cpc	r1, r25
    3f56:	1a 06       	cpc	r1, r26
    3f58:	1b 06       	cpc	r1, r27
    3f5a:	1c f4       	brge	.+6      	; 0x3f62 <os_setTimedCallback+0x62>
            // enqueue before next element and stop
            job->next = *pnext;
    3f5c:	f9 83       	std	Y+1, r31	; 0x01
    3f5e:	e8 83       	st	Y, r30
            break;
    3f60:	05 c0       	rjmp	.+10     	; 0x3f6c <os_setTimedCallback+0x6c>
    // fill-in job
    job->deadline = time;
    job->func = cb;
    job->next = NULL;
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    3f62:	9f 01       	movw	r18, r30
    3f64:	01 90       	ld	r0, Z+
    3f66:	f0 81       	ld	r31, Z
    3f68:	e0 2d       	mov	r30, r0
    3f6a:	e9 cf       	rjmp	.-46     	; 0x3f3e <os_setTimedCallback+0x3e>
            // enqueue before next element and stop
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    3f6c:	f9 01       	movw	r30, r18
    3f6e:	d1 83       	std	Z+1, r29	; 0x01
    3f70:	c0 83       	st	Z, r28
    hal_enableIRQs();
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p at %lu\n", os_getTime(), job, cb, time);
    #endif
}
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	0f 91       	pop	r16
    3f7a:	ff 90       	pop	r15
    3f7c:	ef 90       	pop	r14
    3f7e:	df 90       	pop	r13
    3f80:	cf 90       	pop	r12
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    hal_enableIRQs();
    3f82:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <hal_enableIRQs>

00003f86 <os_runloop_once>:
    while(1) {
        os_runloop_once();
    }
}

void os_runloop_once() {
    3f86:	cf 93       	push	r28
    3f88:	df 93       	push	r29
    #if LMIC_DEBUG_LEVEL > 1
        bool has_deadline = false;
    #endif
    osjob_t* j = NULL;
    hal_disableIRQs();
    3f8a:	0e 94 ca 08 	call	0x1194	; 0x1194 <hal_disableIRQs>
    // check for runnable jobs
    if(OS.runnablejobs) {
    3f8e:	c0 91 c4 02 	lds	r28, 0x02C4	; 0x8002c4 <OS+0x2>
    3f92:	d0 91 c5 02 	lds	r29, 0x02C5	; 0x8002c5 <OS+0x3>
    3f96:	20 97       	sbiw	r28, 0x00	; 0
    3f98:	39 f0       	breq	.+14     	; 0x3fa8 <os_runloop_once+0x22>
        j = OS.runnablejobs;
        OS.runnablejobs = j->next;
    3f9a:	88 81       	ld	r24, Y
    3f9c:	99 81       	ldd	r25, Y+1	; 0x01
    3f9e:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <OS+0x3>
    3fa2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <OS+0x2>
    3fa6:	1b c0       	rjmp	.+54     	; 0x3fde <os_runloop_once+0x58>
    } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
    3fa8:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <OS>
    3fac:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <OS+0x1>
    3fb0:	30 97       	sbiw	r30, 0x00	; 0
    3fb2:	99 f0       	breq	.+38     	; 0x3fda <os_runloop_once+0x54>
    3fb4:	62 81       	ldd	r22, Z+2	; 0x02
    3fb6:	73 81       	ldd	r23, Z+3	; 0x03
    3fb8:	84 81       	ldd	r24, Z+4	; 0x04
    3fba:	95 81       	ldd	r25, Z+5	; 0x05
    3fbc:	0e 94 b2 08 	call	0x1164	; 0x1164 <hal_checkTimer>
    3fc0:	88 23       	and	r24, r24
    3fc2:	59 f0       	breq	.+22     	; 0x3fda <os_runloop_once+0x54>
        j = OS.scheduledjobs;
    3fc4:	c0 91 c2 02 	lds	r28, 0x02C2	; 0x8002c2 <OS>
    3fc8:	d0 91 c3 02 	lds	r29, 0x02C3	; 0x8002c3 <OS+0x1>
        OS.scheduledjobs = j->next;
    3fcc:	88 81       	ld	r24, Y
    3fce:	99 81       	ldd	r25, Y+1	; 0x01
    3fd0:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <OS+0x1>
    3fd4:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <OS>
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <os_runloop_once+0x58>
        #if LMIC_DEBUG_LEVEL > 1
            has_deadline = true;
        #endif
    } else { // nothing pending
        hal_sleep(); // wake by irq (timer already restarted)
    3fda:	0e 94 0a 09 	call	0x1214	; 0x1214 <hal_sleep>
    }
    hal_enableIRQs();
    3fde:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <hal_enableIRQs>
    if(j) { // run job callback
    3fe2:	20 97       	sbiw	r28, 0x00	; 0
    3fe4:	31 f0       	breq	.+12     	; 0x3ff2 <os_runloop_once+0x6c>
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: Running job %p, cb %p, deadline %lu\n", os_getTime(), j, j->func, has_deadline ? j->deadline : 0);
        #endif
        j->func(j);
    3fe6:	ee 81       	ldd	r30, Y+6	; 0x06
    3fe8:	ff 81       	ldd	r31, Y+7	; 0x07
    3fea:	ce 01       	movw	r24, r28
    }
}
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    hal_enableIRQs();
    if(j) { // run job callback
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: Running job %p, cb %p, deadline %lu\n", os_getTime(), j, j->func, has_deadline ? j->deadline : 0);
        #endif
        j->func(j);
    3ff0:	09 94       	ijmp
    }
}
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	08 95       	ret

00003ff8 <writeReg>:
u1_t radio_rssi () {
    hal_disableIRQs();
    u1_t r = readReg(LORARegRssiValue);
    hal_enableIRQs();
    return r;
}
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	d8 2f       	mov	r29, r24
    3ffe:	c6 2f       	mov	r28, r22
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	0e 94 2b 08 	call	0x1056	; 0x1056 <hal_pin_nss>
    4006:	8d 2f       	mov	r24, r29
    4008:	80 68       	ori	r24, 0x80	; 128
    400a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    400e:	8c 2f       	mov	r24, r28
    4010:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	df 91       	pop	r29
    4018:	cf 91       	pop	r28
    401a:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <hal_pin_nss>

0000401e <configLoraModem>:
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <LMIC+0xe>
    4026:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <LMIC+0xf>
    402a:	d8 2f       	mov	r29, r24
    402c:	d7 70       	andi	r29, 0x07	; 7
    402e:	53 e0       	ldi	r21, 0x03	; 3
    4030:	96 95       	lsr	r25
    4032:	87 95       	ror	r24
    4034:	5a 95       	dec	r21
    4036:	e1 f7       	brne	.-8      	; 0x4030 <configLoraModem+0x12>
    4038:	83 70       	andi	r24, 0x03	; 3
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	29 f0       	breq	.+10     	; 0x4048 <configLoraModem+0x2a>
    403e:	70 f0       	brcs	.+28     	; 0x405c <configLoraModem+0x3e>
    4040:	82 30       	cpi	r24, 0x02	; 2
    4042:	21 f4       	brne	.+8      	; 0x404c <configLoraModem+0x2e>
    4044:	80 e9       	ldi	r24, 0x90	; 144
    4046:	0b c0       	rjmp	.+22     	; 0x405e <configLoraModem+0x40>
    4048:	80 e8       	ldi	r24, 0x80	; 128
    404a:	09 c0       	rjmp	.+18     	; 0x405e <configLoraModem+0x40>
    404c:	68 e4       	ldi	r22, 0x48	; 72
    404e:	71 e0       	ldi	r23, 0x01	; 1
    4050:	8c e0       	ldi	r24, 0x0C	; 12
    4052:	92 e0       	ldi	r25, 0x02	; 2
    4054:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	01 c0       	rjmp	.+2      	; 0x405e <configLoraModem+0x40>
    405c:	80 e7       	ldi	r24, 0x70	; 112
    405e:	60 91 b6 04 	lds	r22, 0x04B6	; 0x8004b6 <LMIC+0xe>
    4062:	70 91 b7 04 	lds	r23, 0x04B7	; 0x8004b7 <LMIC+0xf>
    4066:	9b 01       	movw	r18, r22
    4068:	45 e0       	ldi	r20, 0x05	; 5
    406a:	36 95       	lsr	r19
    406c:	27 95       	ror	r18
    406e:	4a 95       	dec	r20
    4070:	e1 f7       	brne	.-8      	; 0x406a <configLoraModem+0x4c>
    4072:	23 70       	andi	r18, 0x03	; 3
    4074:	c8 2f       	mov	r28, r24
    4076:	22 30       	cpi	r18, 0x02	; 2
    4078:	41 f0       	breq	.+16     	; 0x408a <configLoraModem+0x6c>
    407a:	23 30       	cpi	r18, 0x03	; 3
    407c:	41 f0       	breq	.+16     	; 0x408e <configLoraModem+0x70>
    407e:	21 30       	cpi	r18, 0x01	; 1
    4080:	11 f0       	breq	.+4      	; 0x4086 <configLoraModem+0x68>
    4082:	c2 60       	ori	r28, 0x02	; 2
    4084:	05 c0       	rjmp	.+10     	; 0x4090 <configLoraModem+0x72>
    4086:	c4 60       	ori	r28, 0x04	; 4
    4088:	03 c0       	rjmp	.+6      	; 0x4090 <configLoraModem+0x72>
    408a:	c6 60       	ori	r28, 0x06	; 6
    408c:	01 c0       	rjmp	.+2      	; 0x4090 <configLoraModem+0x72>
    408e:	c8 60       	ori	r28, 0x08	; 8
    4090:	67 2f       	mov	r22, r23
    4092:	77 27       	eor	r23, r23
    4094:	61 15       	cp	r22, r1
    4096:	71 05       	cpc	r23, r1
    4098:	21 f0       	breq	.+8      	; 0x40a2 <configLoraModem+0x84>
    409a:	c1 60       	ori	r28, 0x01	; 1
    409c:	82 e2       	ldi	r24, 0x22	; 34
    409e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    40a2:	6c 2f       	mov	r22, r28
    40a4:	8d e1       	ldi	r24, 0x1D	; 29
    40a6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    40aa:	6d 2f       	mov	r22, r29
    40ac:	62 95       	swap	r22
    40ae:	60 7f       	andi	r22, 0xF0	; 240
    40b0:	60 5a       	subi	r22, 0xA0	; 160
    40b2:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <LMIC+0xe>
    40b6:	87 ff       	sbrs	r24, 7
    40b8:	64 60       	ori	r22, 0x04	; 4
    40ba:	8e e1       	ldi	r24, 0x1E	; 30
    40bc:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    40c0:	d5 50       	subi	r29, 0x05	; 5
    40c2:	d2 30       	cpi	r29, 0x02	; 2
    40c4:	68 f4       	brcc	.+26     	; 0x40e0 <configLoraModem+0xc2>
    40c6:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <LMIC+0xe>
    40ca:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <LMIC+0xf>
    40ce:	23 e0       	ldi	r18, 0x03	; 3
    40d0:	96 95       	lsr	r25
    40d2:	87 95       	ror	r24
    40d4:	2a 95       	dec	r18
    40d6:	e1 f7       	brne	.-8      	; 0x40d0 <configLoraModem+0xb2>
    40d8:	83 70       	andi	r24, 0x03	; 3
    40da:	11 f4       	brne	.+4      	; 0x40e0 <configLoraModem+0xc2>
    40dc:	6c e0       	ldi	r22, 0x0C	; 12
    40de:	01 c0       	rjmp	.+2      	; 0x40e2 <configLoraModem+0xc4>
    40e0:	64 e0       	ldi	r22, 0x04	; 4
    40e2:	86 e2       	ldi	r24, 0x26	; 38
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <writeReg>

000040ec <configChannel>:
    40ec:	af 92       	push	r10
    40ee:	bf 92       	push	r11
    40f0:	cf 92       	push	r12
    40f2:	df 92       	push	r13
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <LMIC+0x8>
    4104:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <LMIC+0x9>
    4108:	a0 91 b2 04 	lds	r26, 0x04B2	; 0x8004b2 <LMIC+0xa>
    410c:	b0 91 b3 04 	lds	r27, 0x04B3	; 0x8004b3 <LMIC+0xb>
    4110:	9c 01       	movw	r18, r24
    4112:	ad 01       	movw	r20, r26
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	70 e0       	ldi	r23, 0x00	; 0
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	03 e1       	ldi	r16, 0x13	; 19
    411e:	0e 94 6d 36 	call	0x6cda	; 0x6cda <__ashldi3>
    4122:	a1 2c       	mov	r10, r1
    4124:	e8 e4       	ldi	r30, 0x48	; 72
    4126:	be 2e       	mov	r11, r30
    4128:	f8 ee       	ldi	r31, 0xE8	; 232
    412a:	cf 2e       	mov	r12, r31
    412c:	dd 24       	eor	r13, r13
    412e:	d3 94       	inc	r13
    4130:	e1 2c       	mov	r14, r1
    4132:	f1 2c       	mov	r15, r1
    4134:	00 e0       	ldi	r16, 0x00	; 0
    4136:	10 e0       	ldi	r17, 0x00	; 0
    4138:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__udivdi3>
    413c:	c2 2f       	mov	r28, r18
    413e:	b3 2e       	mov	r11, r19
    4140:	6a 01       	movw	r12, r20
    4142:	7b 01       	movw	r14, r22
    4144:	18 2f       	mov	r17, r24
    4146:	d9 2f       	mov	r29, r25
    4148:	00 e1       	ldi	r16, 0x10	; 16
    414a:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__lshrdi3>
    414e:	62 2f       	mov	r22, r18
    4150:	86 e0       	ldi	r24, 0x06	; 6
    4152:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4156:	2c 2f       	mov	r18, r28
    4158:	3b 2d       	mov	r19, r11
    415a:	a6 01       	movw	r20, r12
    415c:	b7 01       	movw	r22, r14
    415e:	81 2f       	mov	r24, r17
    4160:	9d 2f       	mov	r25, r29
    4162:	08 e0       	ldi	r16, 0x08	; 8
    4164:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__lshrdi3>
    4168:	62 2f       	mov	r22, r18
    416a:	87 e0       	ldi	r24, 0x07	; 7
    416c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4170:	6c 2f       	mov	r22, r28
    4172:	88 e0       	ldi	r24, 0x08	; 8
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	1f 91       	pop	r17
    417a:	0f 91       	pop	r16
    417c:	ff 90       	pop	r15
    417e:	ef 90       	pop	r14
    4180:	df 90       	pop	r13
    4182:	cf 90       	pop	r12
    4184:	bf 90       	pop	r11
    4186:	af 90       	pop	r10
    4188:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <writeReg>

0000418c <readReg>:
    418c:	cf 93       	push	r28
    418e:	c8 2f       	mov	r28, r24
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	0e 94 2b 08 	call	0x1056	; 0x1056 <hal_pin_nss>
    4196:	8c 2f       	mov	r24, r28
    4198:	8f 77       	andi	r24, 0x7F	; 127
    419a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    41a4:	c8 2f       	mov	r28, r24
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	0e 94 2b 08 	call	0x1056	; 0x1056 <hal_pin_nss>
    41ac:	8c 2f       	mov	r24, r28
    41ae:	cf 91       	pop	r28
    41b0:	08 95       	ret

000041b2 <opmode>:
    41b2:	cf 93       	push	r28
    41b4:	c8 2f       	mov	r28, r24
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    41bc:	88 7f       	andi	r24, 0xF8	; 248
    41be:	68 2f       	mov	r22, r24
    41c0:	6c 2b       	or	r22, r28
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	cf 91       	pop	r28
    41c6:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <writeReg>

000041ca <rxlora>:
    41ca:	cf 93       	push	r28
    41cc:	c8 2f       	mov	r28, r24
    41ce:	68 e8       	ldi	r22, 0x88	; 136
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    41dc:	87 fd       	sbrc	r24, 7
    41de:	06 c0       	rjmp	.+12     	; 0x41ec <rxlora+0x22>
    41e0:	61 e2       	ldi	r22, 0x21	; 33
    41e2:	72 e0       	ldi	r23, 0x02	; 2
    41e4:	8c e0       	ldi	r24, 0x0C	; 12
    41e6:	92 e0       	ldi	r25, 0x02	; 2
    41e8:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    41f2:	c2 30       	cpi	r28, 0x02	; 2
    41f4:	49 f4       	brne	.+18     	; 0x4208 <rxlora+0x3e>
    41f6:	6a e0       	ldi	r22, 0x0A	; 10
    41f8:	8d e1       	ldi	r24, 0x1D	; 29
    41fa:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    41fe:	60 e7       	ldi	r22, 0x70	; 112
    4200:	8e e1       	ldi	r24, 0x1E	; 30
    4202:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4206:	04 c0       	rjmp	.+8      	; 0x4210 <rxlora+0x46>
    4208:	0e 94 0f 20 	call	0x401e	; 0x401e <configLoraModem>
    420c:	0e 94 76 20 	call	0x40ec	; 0x40ec <configChannel>
    4210:	61 e2       	ldi	r22, 0x21	; 33
    4212:	8c e0       	ldi	r24, 0x0C	; 12
    4214:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4218:	60 e4       	ldi	r22, 0x40	; 64
    421a:	83 e2       	ldi	r24, 0x23	; 35
    421c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4220:	83 e3       	ldi	r24, 0x33	; 51
    4222:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    4226:	68 2f       	mov	r22, r24
    4228:	60 64       	ori	r22, 0x40	; 64
    422a:	83 e3       	ldi	r24, 0x33	; 51
    422c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4230:	60 91 b8 04 	lds	r22, 0x04B8	; 0x8004b8 <LMIC+0x10>
    4234:	8f e1       	ldi	r24, 0x1F	; 31
    4236:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    423a:	64 e3       	ldi	r22, 0x34	; 52
    423c:	89 e3       	ldi	r24, 0x39	; 57
    423e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4242:	60 ec       	ldi	r22, 0xC0	; 192
    4244:	80 e4       	ldi	r24, 0x40	; 64
    4246:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    424a:	6f ef       	ldi	r22, 0xFF	; 255
    424c:	82 e1       	ldi	r24, 0x12	; 18
    424e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4252:	ec 2f       	mov	r30, r28
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	e8 56       	subi	r30, 0x68	; 104
    4258:	fb 4f       	sbci	r31, 0xFB	; 251
    425a:	64 91       	lpm	r22, Z
    425c:	60 95       	com	r22
    425e:	81 e1       	ldi	r24, 0x11	; 17
    4260:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	0e 94 07 08 	call	0x100e	; 0x100e <hal_pin_rxtx>
    426a:	c1 11       	cpse	r28, r1
    426c:	0c c0       	rjmp	.+24     	; 0x4286 <rxlora+0xbc>
    426e:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <LMIC+0x4>
    4272:	70 91 ad 04 	lds	r23, 0x04AD	; 0x8004ad <LMIC+0x5>
    4276:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <LMIC+0x6>
    427a:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <LMIC+0x7>
    427e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <hal_waitUntil>
    4282:	86 e0       	ldi	r24, 0x06	; 6
    4284:	01 c0       	rjmp	.+2      	; 0x4288 <rxlora+0xbe>
    4286:	85 e0       	ldi	r24, 0x05	; 5
    4288:	cf 91       	pop	r28
    428a:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <opmode>

0000428e <configPower>:
    428e:	60 91 ba 04 	lds	r22, 0x04BA	; 0x8004ba <LMIC+0x12>
    4292:	61 31       	cpi	r22, 0x11	; 17
    4294:	24 f4       	brge	.+8      	; 0x429e <configPower+0x10>
    4296:	62 30       	cpi	r22, 0x02	; 2
    4298:	1c f4       	brge	.+6      	; 0x42a0 <configPower+0x12>
    429a:	62 e0       	ldi	r22, 0x02	; 2
    429c:	01 c0       	rjmp	.+2      	; 0x42a0 <configPower+0x12>
    429e:	6f e0       	ldi	r22, 0x0F	; 15
    42a0:	6f 70       	andi	r22, 0x0F	; 15
    42a2:	60 68       	ori	r22, 0x80	; 128
    42a4:	89 e0       	ldi	r24, 0x09	; 9
    42a6:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    42aa:	8a e5       	ldi	r24, 0x5A	; 90
    42ac:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    42b0:	68 2f       	mov	r22, r24
    42b2:	64 60       	ori	r22, 0x04	; 4
    42b4:	8a e5       	ldi	r24, 0x5A	; 90
    42b6:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <writeReg>

000042ba <startrx>:
    42ba:	cf 93       	push	r28
    42bc:	c8 2f       	mov	r28, r24
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    42c4:	87 70       	andi	r24, 0x07	; 7
    42c6:	31 f0       	breq	.+12     	; 0x42d4 <startrx+0x1a>
    42c8:	64 e9       	ldi	r22, 0x94	; 148
    42ca:	72 e0       	ldi	r23, 0x02	; 2
    42cc:	8c e0       	ldi	r24, 0x0C	; 12
    42ce:	92 e0       	ldi	r25, 0x02	; 2
    42d0:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    42d4:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <LMIC+0xe>
    42d8:	87 70       	andi	r24, 0x07	; 7
    42da:	09 f0       	breq	.+2      	; 0x42de <startrx+0x24>
    42dc:	71 c0       	rjmp	.+226    	; 0x43c0 <startrx+0x106>
    42de:	cc 23       	and	r28, r28
    42e0:	31 f0       	breq	.+12     	; 0x42ee <startrx+0x34>
    42e2:	62 e6       	ldi	r22, 0x62	; 98
    42e4:	72 e0       	ldi	r23, 0x02	; 2
    42e6:	8c e0       	ldi	r24, 0x0C	; 12
    42e8:	92 e0       	ldi	r25, 0x02	; 2
    42ea:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    42ee:	68 e0       	ldi	r22, 0x08	; 8
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    42fc:	87 ff       	sbrs	r24, 7
    42fe:	06 c0       	rjmp	.+12     	; 0x430c <startrx+0x52>
    4300:	66 e6       	ldi	r22, 0x66	; 102
    4302:	72 e0       	ldi	r23, 0x02	; 2
    4304:	8c e0       	ldi	r24, 0x0C	; 12
    4306:	92 e0       	ldi	r25, 0x02	; 2
    4308:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    4312:	0e 94 76 20 	call	0x40ec	; 0x40ec <configChannel>
    4316:	61 e2       	ldi	r22, 0x21	; 33
    4318:	8c e0       	ldi	r24, 0x0C	; 12
    431a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    431e:	6e e1       	ldi	r22, 0x1E	; 30
    4320:	8d e0       	ldi	r24, 0x0D	; 13
    4322:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4326:	6b e0       	ldi	r22, 0x0B	; 11
    4328:	82 e1       	ldi	r24, 0x12	; 18
    432a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    432e:	62 e1       	ldi	r22, 0x12	; 18
    4330:	83 e1       	ldi	r24, 0x13	; 19
    4332:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4336:	6a ea       	ldi	r22, 0xAA	; 170
    4338:	8f e1       	ldi	r24, 0x1F	; 31
    433a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    433e:	62 e1       	ldi	r22, 0x12	; 18
    4340:	87 e2       	ldi	r24, 0x27	; 39
    4342:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4346:	68 ed       	ldi	r22, 0xD8	; 216
    4348:	80 e3       	ldi	r24, 0x30	; 48
    434a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    434e:	60 e4       	ldi	r22, 0x40	; 64
    4350:	81 e3       	ldi	r24, 0x31	; 49
    4352:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4356:	61 ec       	ldi	r22, 0xC1	; 193
    4358:	88 e2       	ldi	r24, 0x28	; 40
    435a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    435e:	64 e9       	ldi	r22, 0x94	; 148
    4360:	89 e2       	ldi	r24, 0x29	; 41
    4362:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4366:	61 ec       	ldi	r22, 0xC1	; 193
    4368:	8a e2       	ldi	r24, 0x2A	; 42
    436a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    436e:	6f ef       	ldi	r22, 0xFF	; 255
    4370:	81 e2       	ldi	r24, 0x21	; 33
    4372:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4376:	62 e0       	ldi	r22, 0x02	; 2
    4378:	82 e0       	ldi	r24, 0x02	; 2
    437a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    437e:	60 e8       	ldi	r22, 0x80	; 128
    4380:	83 e0       	ldi	r24, 0x03	; 3
    4382:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4386:	61 e0       	ldi	r22, 0x01	; 1
    4388:	84 e0       	ldi	r24, 0x04	; 4
    438a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    438e:	69 e9       	ldi	r22, 0x99	; 153
    4390:	85 e0       	ldi	r24, 0x05	; 5
    4392:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4396:	68 e3       	ldi	r22, 0x38	; 56
    4398:	80 e4       	ldi	r24, 0x40	; 64
    439a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	0e 94 07 08 	call	0x100e	; 0x100e <hal_pin_rxtx>
    43a4:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <LMIC+0x4>
    43a8:	70 91 ad 04 	lds	r23, 0x04AD	; 0x8004ad <LMIC+0x5>
    43ac:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <LMIC+0x6>
    43b0:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <LMIC+0x7>
    43b4:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <hal_waitUntil>
    43b8:	85 e0       	ldi	r24, 0x05	; 5
    43ba:	cf 91       	pop	r28
    43bc:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <opmode>
    43c0:	8c 2f       	mov	r24, r28
    43c2:	cf 91       	pop	r28
    43c4:	0c 94 e5 20 	jmp	0x41ca	; 0x41ca <rxlora>

000043c8 <readBuf.constprop.0>:
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	cf 93       	push	r28
    43ce:	df 93       	push	r29
    43d0:	d8 2f       	mov	r29, r24
    43d2:	80 e0       	ldi	r24, 0x00	; 0
    43d4:	0e 94 2b 08 	call	0x1056	; 0x1056 <hal_pin_nss>
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    43de:	0b ee       	ldi	r16, 0xEB	; 235
    43e0:	15 e0       	ldi	r17, 0x05	; 5
    43e2:	c0 e0       	ldi	r28, 0x00	; 0
    43e4:	cd 17       	cp	r28, r29
    43e6:	41 f0       	breq	.+16     	; 0x43f8 <readBuf.constprop.0+0x30>
    43e8:	80 e0       	ldi	r24, 0x00	; 0
    43ea:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    43ee:	f8 01       	movw	r30, r16
    43f0:	81 93       	st	Z+, r24
    43f2:	8f 01       	movw	r16, r30
    43f4:	cf 5f       	subi	r28, 0xFF	; 255
    43f6:	f6 cf       	rjmp	.-20     	; 0x43e4 <readBuf.constprop.0+0x1c>
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	df 91       	pop	r29
    43fc:	cf 91       	pop	r28
    43fe:	1f 91       	pop	r17
    4400:	0f 91       	pop	r16
    4402:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <hal_pin_nss>

00004406 <writeBuf.constprop.1>:
    4406:	0f 93       	push	r16
    4408:	1f 93       	push	r17
    440a:	cf 93       	push	r28
    440c:	df 93       	push	r29
    440e:	d8 2f       	mov	r29, r24
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	0e 94 2b 08 	call	0x1056	; 0x1056 <hal_pin_nss>
    4416:	80 e8       	ldi	r24, 0x80	; 128
    4418:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    441c:	0b ee       	ldi	r16, 0xEB	; 235
    441e:	15 e0       	ldi	r17, 0x05	; 5
    4420:	c0 e0       	ldi	r28, 0x00	; 0
    4422:	cd 17       	cp	r28, r29
    4424:	39 f0       	breq	.+14     	; 0x4434 <writeBuf.constprop.1+0x2e>
    4426:	f8 01       	movw	r30, r16
    4428:	81 91       	ld	r24, Z+
    442a:	8f 01       	movw	r16, r30
    442c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <hal_spi>
    4430:	cf 5f       	subi	r28, 0xFF	; 255
    4432:	f7 cf       	rjmp	.-18     	; 0x4422 <writeBuf.constprop.1+0x1c>
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	df 91       	pop	r29
    4438:	cf 91       	pop	r28
    443a:	1f 91       	pop	r17
    443c:	0f 91       	pop	r16
    443e:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <hal_pin_nss>

00004442 <radio_init>:
    4442:	af 92       	push	r10
    4444:	bf 92       	push	r11
    4446:	cf 92       	push	r12
    4448:	df 92       	push	r13
    444a:	ef 92       	push	r14
    444c:	ff 92       	push	r15
    444e:	1f 93       	push	r17
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	0e 94 ca 08 	call	0x1194	; 0x1194 <hal_disableIRQs>
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	0e 94 0f 08 	call	0x101e	; 0x101e <hal_pin_rst>
    445e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    4462:	62 5c       	subi	r22, 0xC2	; 194
    4464:	7f 4f       	sbci	r23, 0xFF	; 255
    4466:	8f 4f       	sbci	r24, 0xFF	; 255
    4468:	9f 4f       	sbci	r25, 0xFF	; 255
    446a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <hal_waitUntil>
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	0e 94 0f 08 	call	0x101e	; 0x101e <hal_pin_rst>
    4474:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    4478:	68 5c       	subi	r22, 0xC8	; 200
    447a:	7e 4f       	sbci	r23, 0xFE	; 254
    447c:	8f 4f       	sbci	r24, 0xFF	; 255
    447e:	9f 4f       	sbci	r25, 0xFF	; 255
    4480:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <hal_waitUntil>
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    448a:	82 e4       	ldi	r24, 0x42	; 66
    448c:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    4490:	82 31       	cpi	r24, 0x12	; 18
    4492:	31 f0       	breq	.+12     	; 0x44a0 <radio_init+0x5e>
    4494:	61 eb       	ldi	r22, 0xB1	; 177
    4496:	72 e0       	ldi	r23, 0x02	; 2
    4498:	8c e0       	ldi	r24, 0x0C	; 12
    449a:	92 e0       	ldi	r25, 0x02	; 2
    449c:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    44a0:	82 e0       	ldi	r24, 0x02	; 2
    44a2:	0e 94 e5 20 	call	0x41ca	; 0x41ca <rxlora>
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    44ac:	87 70       	andi	r24, 0x07	; 7
    44ae:	85 30       	cpi	r24, 0x05	; 5
    44b0:	d1 f7       	brne	.-12     	; 0x44a6 <radio_init+0x64>
    44b2:	c6 ec       	ldi	r28, 0xC6	; 198
    44b4:	d2 e0       	ldi	r29, 0x02	; 2
    44b6:	95 ed       	ldi	r25, 0xD5	; 213
    44b8:	a9 2e       	mov	r10, r25
    44ba:	92 e0       	ldi	r25, 0x02	; 2
    44bc:	b9 2e       	mov	r11, r25
    44be:	88 e0       	ldi	r24, 0x08	; 8
    44c0:	e8 2e       	mov	r14, r24
    44c2:	f1 2c       	mov	r15, r1
    44c4:	8c e2       	ldi	r24, 0x2C	; 44
    44c6:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    44ca:	18 2f       	mov	r17, r24
    44cc:	11 70       	andi	r17, 0x01	; 1
    44ce:	8c e2       	ldi	r24, 0x2C	; 44
    44d0:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    44d4:	21 2f       	mov	r18, r17
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	80 fb       	bst	r24, 0
    44da:	cc 24       	eor	r12, r12
    44dc:	c0 f8       	bld	r12, 0
    44de:	d1 2c       	mov	r13, r1
    44e0:	2c 15       	cp	r18, r12
    44e2:	3d 05       	cpc	r19, r13
    44e4:	79 f3       	breq	.-34     	; 0x44c4 <radio_init+0x82>
    44e6:	89 81       	ldd	r24, Y+1	; 0x01
    44e8:	88 0f       	add	r24, r24
    44ea:	18 2b       	or	r17, r24
    44ec:	19 83       	std	Y+1, r17	; 0x01
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	e8 1a       	sub	r14, r24
    44f2:	f1 08       	sbc	r15, r1
    44f4:	39 f7       	brne	.-50     	; 0x44c4 <radio_init+0x82>
    44f6:	21 96       	adiw	r28, 0x01	; 1
    44f8:	ac 16       	cp	r10, r28
    44fa:	bd 06       	cpc	r11, r29
    44fc:	01 f7       	brne	.-64     	; 0x44be <radio_init+0x7c>
    44fe:	80 e1       	ldi	r24, 0x10	; 16
    4500:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <randbuf>
    4504:	80 e0       	ldi	r24, 0x00	; 0
    4506:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    450a:	df 91       	pop	r29
    450c:	cf 91       	pop	r28
    450e:	1f 91       	pop	r17
    4510:	ff 90       	pop	r15
    4512:	ef 90       	pop	r14
    4514:	df 90       	pop	r13
    4516:	cf 90       	pop	r12
    4518:	bf 90       	pop	r11
    451a:	af 90       	pop	r10
    451c:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <hal_enableIRQs>

00004520 <radio_rand1>:
    4520:	cf 93       	push	r28
    4522:	c0 91 c6 02 	lds	r28, 0x02C6	; 0x8002c6 <randbuf>
    4526:	c1 11       	cpse	r28, r1
    4528:	07 c0       	rjmp	.+14     	; 0x4538 <radio_rand1+0x18>
    452a:	6f ed       	ldi	r22, 0xDF	; 223
    452c:	72 e0       	ldi	r23, 0x02	; 2
    452e:	8c e0       	ldi	r24, 0x0C	; 12
    4530:	92 e0       	ldi	r25, 0x02	; 2
    4532:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    4536:	0a c0       	rjmp	.+20     	; 0x454c <radio_rand1+0x2c>
    4538:	c0 31       	cpi	r28, 0x10	; 16
    453a:	41 f4       	brne	.+16     	; 0x454c <radio_rand1+0x2c>
    453c:	40 e1       	ldi	r20, 0x10	; 16
    453e:	50 e0       	ldi	r21, 0x00	; 0
    4540:	66 ec       	ldi	r22, 0xC6	; 198
    4542:	72 e0       	ldi	r23, 0x02	; 2
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	0e 94 14 07 	call	0xe28	; 0xe28 <os_aes>
    454a:	c0 e0       	ldi	r28, 0x00	; 0
    454c:	ec 2f       	mov	r30, r28
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	ea 53       	subi	r30, 0x3A	; 58
    4552:	fd 4f       	sbci	r31, 0xFD	; 253
    4554:	80 81       	ld	r24, Z
    4556:	cf 5f       	subi	r28, 0xFF	; 255
    4558:	c0 93 c6 02 	sts	0x02C6, r28	; 0x8002c6 <randbuf>
    455c:	cf 91       	pop	r28
    455e:	08 95       	ret

00004560 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
    4560:	cf 92       	push	r12
    4562:	df 92       	push	r13
    4564:	ef 92       	push	r14
    4566:	ff 92       	push	r15
    4568:	cf 93       	push	r28
    ostime_t now = os_getTime();
    456a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <os_getTime>
    456e:	6b 01       	movw	r12, r22
    4570:	7c 01       	movw	r14, r24
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    4578:	87 ff       	sbrs	r24, 7
    457a:	64 c0       	rjmp	.+200    	; 0x4644 <radio_irq_handler+0xe4>
        u1_t flags = readReg(LORARegIrqFlags);
    457c:	82 e1       	ldi	r24, 0x12	; 18
    457e:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
#if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: irq: dio: 0x%x flags: 0x%x\n", now, dio, flags);
#endif
        if( flags & IRQ_LORA_TXDONE_MASK ) {
    4582:	83 ff       	sbrs	r24, 3
    4584:	0e c0       	rjmp	.+28     	; 0x45a2 <radio_irq_handler+0x42>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
    4586:	82 e0       	ldi	r24, 0x02	; 2
    4588:	c8 1a       	sub	r12, r24
    458a:	d1 08       	sbc	r13, r1
    458c:	e1 08       	sbc	r14, r1
    458e:	f1 08       	sbc	r15, r1
    4590:	c0 92 a8 04 	sts	0x04A8, r12	; 0x8004a8 <LMIC>
    4594:	d0 92 a9 04 	sts	0x04A9, r13	; 0x8004a9 <LMIC+0x1>
    4598:	e0 92 aa 04 	sts	0x04AA, r14	; 0x8004aa <LMIC+0x2>
    459c:	f0 92 ab 04 	sts	0x04AB, r15	; 0x8004ab <LMIC+0x3>
    45a0:	48 c0       	rjmp	.+144    	; 0x4632 <radio_irq_handler+0xd2>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
    45a2:	86 ff       	sbrs	r24, 6
    45a4:	43 c0       	rjmp	.+134    	; 0x462c <radio_irq_handler+0xcc>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
    45a6:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <LMIC+0xe>
    45aa:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <LMIC+0xf>
    45ae:	cf 01       	movw	r24, r30
    45b0:	23 e0       	ldi	r18, 0x03	; 3
    45b2:	96 95       	lsr	r25
    45b4:	87 95       	ror	r24
    45b6:	2a 95       	dec	r18
    45b8:	e1 f7       	brne	.-8      	; 0x45b2 <radio_irq_handler+0x52>
    45ba:	83 70       	andi	r24, 0x03	; 3
    45bc:	61 f4       	brne	.+24     	; 0x45d6 <radio_irq_handler+0x76>
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    45be:	e7 70       	andi	r30, 0x07	; 7
            return pgm_read_ ## pgm_type(&table[index]); \
        }

    TABLE_GETTER(_u1, u1_t, byte);
    TABLE_GETTER(_s1, s1_t, byte);
    TABLE_GETTER(_u2, u2_t, word);
    45c0:	f0 e0       	ldi	r31, 0x00	; 0
    45c2:	ee 0f       	add	r30, r30
    45c4:	ff 1f       	adc	r31, r31
    45c6:	e6 57       	subi	r30, 0x76	; 118
    45c8:	fb 4f       	sbci	r31, 0xFB	; 251
    45ca:	85 91       	lpm	r24, Z+
    45cc:	94 91       	lpm	r25, Z
                now -= TABLE_GET_U2(LORA_RXDONE_FIXUP, getSf(LMIC.rps));
    45ce:	c8 1a       	sub	r12, r24
    45d0:	d9 0a       	sbc	r13, r25
    45d2:	e1 08       	sbc	r14, r1
    45d4:	f1 08       	sbc	r15, r1
            }
            LMIC.rxtime = now;
    45d6:	c0 92 ac 04 	sts	0x04AC, r12	; 0x8004ac <LMIC+0x4>
    45da:	d0 92 ad 04 	sts	0x04AD, r13	; 0x8004ad <LMIC+0x5>
    45de:	e0 92 ae 04 	sts	0x04AE, r14	; 0x8004ae <LMIC+0x6>
    45e2:	f0 92 af 04 	sts	0x04AF, r15	; 0x8004af <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
    45e6:	8d e1       	ldi	r24, 0x1D	; 29
    45e8:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    45ec:	82 ff       	sbrs	r24, 2
    45ee:	02 c0       	rjmp	.+4      	; 0x45f4 <radio_irq_handler+0x94>
    45f0:	82 e2       	ldi	r24, 0x22	; 34
    45f2:	01 c0       	rjmp	.+2      	; 0x45f6 <radio_irq_handler+0x96>
    45f4:	83 e1       	ldi	r24, 0x13	; 19
    45f6:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    45fa:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <LMIC+0x142>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
    45fe:	80 e1       	ldi	r24, 0x10	; 16
    4600:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    4604:	68 2f       	mov	r22, r24
    4606:	8d e0       	ldi	r24, 0x0D	; 13
    4608:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    460c:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    4610:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
    4614:	89 e1       	ldi	r24, 0x19	; 25
    4616:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    461a:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <LMIC+0xd>
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
    461e:	8a e1       	ldi	r24, 0x1A	; 26
    4620:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    4624:	8d 53       	subi	r24, 0x3D	; 61
    4626:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <LMIC+0xc>
    462a:	03 c0       	rjmp	.+6      	; 0x4632 <radio_irq_handler+0xd2>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
    462c:	87 fd       	sbrc	r24, 7
            // indicate timeout
            LMIC.dataLen = 0;
    462e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
    4632:	6f ef       	ldi	r22, 0xFF	; 255
    4634:	81 e1       	ldi	r24, 0x11	; 17
    4636:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
    463a:	6f ef       	ldi	r22, 0xFF	; 255
    463c:	82 e1       	ldi	r24, 0x12	; 18
    463e:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    4642:	33 c0       	rjmp	.+102    	; 0x46aa <radio_irq_handler+0x14a>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
    4644:	8e e3       	ldi	r24, 0x3E	; 62
    4646:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    464a:	c8 2f       	mov	r28, r24
        u1_t flags2 = readReg(FSKRegIrqFlags2);
    464c:	8f e3       	ldi	r24, 0x3F	; 63
    464e:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
    4652:	83 ff       	sbrs	r24, 3
    4654:	09 c0       	rjmp	.+18     	; 0x4668 <radio_irq_handler+0x108>
            // save exact tx time
            LMIC.txend = now;
    4656:	c0 92 a8 04 	sts	0x04A8, r12	; 0x8004a8 <LMIC>
    465a:	d0 92 a9 04 	sts	0x04A9, r13	; 0x8004a9 <LMIC+0x1>
    465e:	e0 92 aa 04 	sts	0x04AA, r14	; 0x8004aa <LMIC+0x2>
    4662:	f0 92 ab 04 	sts	0x04AB, r15	; 0x8004ab <LMIC+0x3>
    4666:	21 c0       	rjmp	.+66     	; 0x46aa <radio_irq_handler+0x14a>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
    4668:	82 ff       	sbrs	r24, 2
    466a:	14 c0       	rjmp	.+40     	; 0x4694 <radio_irq_handler+0x134>
            // save exact rx time
            LMIC.rxtime = now;
    466c:	c0 92 ac 04 	sts	0x04AC, r12	; 0x8004ac <LMIC+0x4>
    4670:	d0 92 ad 04 	sts	0x04AD, r13	; 0x8004ad <LMIC+0x5>
    4674:	e0 92 ae 04 	sts	0x04AE, r14	; 0x8004ae <LMIC+0x6>
    4678:	f0 92 af 04 	sts	0x04AF, r15	; 0x8004af <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
    467c:	82 e3       	ldi	r24, 0x32	; 50
    467e:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    4682:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <LMIC+0x142>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    4686:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
    468a:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <LMIC+0xd>
            LMIC.rssi = 0; // determine rssi
    468e:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <LMIC+0xc>
    4692:	0b c0       	rjmp	.+22     	; 0x46aa <radio_irq_handler+0x14a>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
    4694:	c2 ff       	sbrs	r28, 2
    4696:	03 c0       	rjmp	.+6      	; 0x469e <radio_irq_handler+0x13e>
            // indicate timeout
            LMIC.dataLen = 0;
    4698:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <LMIC+0x142>
    469c:	06 c0       	rjmp	.+12     	; 0x46aa <radio_irq_handler+0x14a>
        } else {
            ASSERT(0);
    469e:	62 e3       	ldi	r22, 0x32	; 50
    46a0:	73 e0       	ldi	r23, 0x03	; 3
    46a2:	8c e0       	ldi	r24, 0x0C	; 12
    46a4:	92 e0       	ldi	r25, 0x02	; 2
    46a6:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    46b0:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <LMIC+0x19>
    46b4:	70 91 c2 04 	lds	r23, 0x04C2	; 0x8004c2 <LMIC+0x1a>
    46b8:	8b eb       	ldi	r24, 0xBB	; 187
    46ba:	94 e0       	ldi	r25, 0x04	; 4
}
    46bc:	cf 91       	pop	r28
    46be:	ff 90       	pop	r15
    46c0:	ef 90       	pop	r14
    46c2:	df 90       	pop	r13
    46c4:	cf 90       	pop	r12
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    46c6:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <os_setCallback>

000046ca <os_radio>:
}

void os_radio (u1_t mode) {
    46ca:	cf 93       	push	r28
    46cc:	c8 2f       	mov	r28, r24
    hal_disableIRQs();
    46ce:	0e 94 ca 08 	call	0x1194	; 0x1194 <hal_disableIRQs>
    switch (mode) {
    46d2:	c1 30       	cpi	r28, 0x01	; 1
    46d4:	59 f0       	breq	.+22     	; 0x46ec <os_radio+0x22>
    46d6:	40 f0       	brcs	.+16     	; 0x46e8 <os_radio+0x1e>
    46d8:	c2 30       	cpi	r28, 0x02	; 2
    46da:	09 f4       	brne	.+2      	; 0x46de <os_radio+0x14>
    46dc:	b4 c0       	rjmp	.+360    	; 0x4846 <os_radio+0x17c>
    46de:	c3 30       	cpi	r28, 0x03	; 3
    46e0:	09 f0       	breq	.+2      	; 0x46e4 <os_radio+0x1a>
    46e2:	b4 c0       	rjmp	.+360    	; 0x484c <os_radio+0x182>
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	b0 c0       	rjmp	.+352    	; 0x4848 <os_radio+0x17e>
void os_radio (u1_t mode) {
    hal_disableIRQs();
    switch (mode) {
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	6d c0       	rjmp	.+218    	; 0x47c6 <os_radio+0xfc>
#endif
}

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    46f2:	87 70       	andi	r24, 0x07	; 7
    46f4:	31 f0       	breq	.+12     	; 0x4702 <os_radio+0x38>
    46f6:	6b e0       	ldi	r22, 0x0B	; 11
    46f8:	72 e0       	ldi	r23, 0x02	; 2
    46fa:	8c e0       	ldi	r24, 0x0C	; 12
    46fc:	92 e0       	ldi	r25, 0x02	; 2
    46fe:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
    4702:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <LMIC+0xe>
    4706:	87 70       	andi	r24, 0x07	; 7
    4708:	09 f0       	breq	.+2      	; 0x470c <os_radio+0x42>
    470a:	60 c0       	rjmp	.+192    	; 0x47cc <os_radio+0x102>
#endif /* CFG_sx1272_radio */
}

static void txfsk () {
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
    470c:	60 e1       	ldi	r22, 0x10	; 16
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
    4714:	81 e0       	ldi	r24, 0x01	; 1
    4716:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    471a:	80 31       	cpi	r24, 0x10	; 16
    471c:	31 f0       	breq	.+12     	; 0x472a <os_radio+0x60>
    471e:	6d ea       	ldi	r22, 0xAD	; 173
    4720:	71 e0       	ldi	r23, 0x01	; 1
    4722:	8c e0       	ldi	r24, 0x0C	; 12
    4724:	92 e0       	ldi	r25, 0x02	; 2
    4726:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
    4730:	62 e0       	ldi	r22, 0x02	; 2
    4732:	82 e0       	ldi	r24, 0x02	; 2
    4734:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
    4738:	60 e8       	ldi	r22, 0x80	; 128
    473a:	83 e0       	ldi	r24, 0x03	; 3
    473c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
    4740:	61 e0       	ldi	r22, 0x01	; 1
    4742:	84 e0       	ldi	r24, 0x04	; 4
    4744:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
    4748:	69 e9       	ldi	r22, 0x99	; 153
    474a:	85 e0       	ldi	r24, 0x05	; 5
    474c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
    4750:	60 e0       	ldi	r22, 0x00	; 0
    4752:	85 e2       	ldi	r24, 0x25	; 37
    4754:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
    4758:	65 e0       	ldi	r22, 0x05	; 5
    475a:	86 e2       	ldi	r24, 0x26	; 38
    475c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
    4760:	62 e1       	ldi	r22, 0x12	; 18
    4762:	87 e2       	ldi	r24, 0x27	; 39
    4764:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
    4768:	60 ed       	ldi	r22, 0xD0	; 208
    476a:	80 e3       	ldi	r24, 0x30	; 48
    476c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
    4770:	60 e4       	ldi	r22, 0x40	; 64
    4772:	81 e3       	ldi	r24, 0x31	; 49
    4774:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
    4778:	61 ec       	ldi	r22, 0xC1	; 193
    477a:	88 e2       	ldi	r24, 0x28	; 40
    477c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
    4780:	64 e9       	ldi	r22, 0x94	; 148
    4782:	89 e2       	ldi	r24, 0x29	; 41
    4784:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
    4788:	61 ec       	ldi	r22, 0xC1	; 193
    478a:	8a e2       	ldi	r24, 0x2A	; 42
    478c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    // configure frequency
    configChannel();
    4790:	0e 94 76 20 	call	0x40ec	; 0x40ec <configChannel>
    // configure output power
    configPower();
    4794:	0e 94 47 21 	call	0x428e	; 0x428e <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
    4798:	64 e3       	ldi	r22, 0x34	; 52
    479a:	80 e4       	ldi	r24, 0x40	; 64
    479c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>

    // initialize the payload size and address pointers
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
    47a0:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <LMIC+0x142>
    47a4:	6f 5f       	subi	r22, 0xFF	; 255
    47a6:	82 e3       	ldi	r24, 0x32	; 50
    47a8:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
    47ac:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <LMIC+0x142>
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    47b6:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <LMIC+0x142>
    47ba:	0e 94 03 22 	call	0x4406	; 0x4406 <writeBuf.constprop.1>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	0e 94 07 08 	call	0x100e	; 0x100e <hal_pin_rxtx>

    // now we actually start the transmission
    opmode(OPMODE_TX);
    47c4:	83 e0       	ldi	r24, 0x03	; 3
    47c6:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    47ca:	40 c0       	rjmp	.+128    	; 0x484c <os_radio+0x182>
static void opmodeLora() {
    u1_t u = OPMODE_LORA;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    47cc:	68 e8       	ldi	r22, 0x88	; 136
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>

static void txlora () {
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    47da:	87 fd       	sbrc	r24, 7
    47dc:	06 c0       	rjmp	.+12     	; 0x47ea <os_radio+0x120>
    47de:	69 ed       	ldi	r22, 0xD9	; 217
    47e0:	71 e0       	ldi	r23, 0x01	; 1
    47e2:	8c e0       	ldi	r24, 0x0C	; 12
    47e4:	92 e0       	ldi	r25, 0x02	; 2
    47e6:	0e 94 12 09 	call	0x1224	; 0x1224 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
    47f0:	0e 94 0f 20 	call	0x401e	; 0x401e <configLoraModem>
    // configure frequency
    configChannel();
    47f4:	0e 94 76 20 	call	0x40ec	; 0x40ec <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
    47f8:	8a e0       	ldi	r24, 0x0A	; 10
    47fa:	0e 94 c6 20 	call	0x418c	; 0x418c <readReg>
    47fe:	80 7f       	andi	r24, 0xF0	; 240
    4800:	68 2f       	mov	r22, r24
    4802:	68 60       	ori	r22, 0x08	; 8
    4804:	8a e0       	ldi	r24, 0x0A	; 10
    4806:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    configPower();
    480a:	0e 94 47 21 	call	0x428e	; 0x428e <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
    480e:	64 e3       	ldi	r22, 0x34	; 52
    4810:	89 e3       	ldi	r24, 0x39	; 57
    4812:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>

    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
    4816:	60 ef       	ldi	r22, 0xF0	; 240
    4818:	80 e4       	ldi	r24, 0x40	; 64
    481a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
    481e:	6f ef       	ldi	r22, 0xFF	; 255
    4820:	82 e1       	ldi	r24, 0x12	; 18
    4822:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
    4826:	67 ef       	ldi	r22, 0xF7	; 247
    4828:	81 e1       	ldi	r24, 0x11	; 17
    482a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>

    // initialize the payload size and address pointers
    writeReg(LORARegFifoTxBaseAddr, 0x00);
    482e:	60 e0       	ldi	r22, 0x00	; 0
    4830:	8e e0       	ldi	r24, 0x0E	; 14
    4832:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
    4836:	60 e0       	ldi	r22, 0x00	; 0
    4838:	8d e0       	ldi	r24, 0x0D	; 13
    483a:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
    483e:	60 91 ea 05 	lds	r22, 0x05EA	; 0x8005ea <LMIC+0x142>
    4842:	82 e2       	ldi	r24, 0x22	; 34
    4844:	b6 cf       	rjmp	.-148    	; 0x47b2 <os_radio+0xe8>
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
        break;

      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
    4846:	80 e0       	ldi	r24, 0x00	; 0
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    4848:	0e 94 5d 21 	call	0x42ba	; 0x42ba <startrx>
        break;
    }
    hal_enableIRQs();
}
    484c:	cf 91       	pop	r28
      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
        break;
    }
    hal_enableIRQs();
    484e:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <hal_enableIRQs>

00004852 <_ZN3dht11_readSensorEhhh>:
//
// PRIVATE
//

int8_t dht::_readSensor(uint8_t pin, uint8_t wakeupDelay, uint8_t leadingZeroBits)
{
    4852:	2f 92       	push	r2
    4854:	3f 92       	push	r3
    4856:	4f 92       	push	r4
    4858:	5f 92       	push	r5
    485a:	6f 92       	push	r6
    485c:	7f 92       	push	r7
    485e:	8f 92       	push	r8
    4860:	9f 92       	push	r9
    4862:	af 92       	push	r10
    4864:	bf 92       	push	r11
    4866:	cf 92       	push	r12
    4868:	df 92       	push	r13
    486a:	ef 92       	push	r14
    486c:	ff 92       	push	r15
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	ec 01       	movw	r28, r24
    4878:	f6 2e       	mov	r15, r22
    487a:	04 2f       	mov	r16, r20
    487c:	e2 2e       	mov	r14, r18
    leadingZeroBits = 40 - leadingZeroBits; // reverse counting...

    // replace digitalRead() with Direct Port Reads.
    // reduces footprint ~100 bytes => portability issue?
    // direct port read is about 3x faster
    uint8_t bit = digitalPinToBitMask(pin);
    487e:	86 2f       	mov	r24, r22
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	fc 01       	movw	r30, r24
    4884:	e1 55       	subi	r30, 0x51	; 81
    4886:	fb 4f       	sbci	r31, 0xFB	; 251
    4888:	14 91       	lpm	r17, Z
    uint8_t port = digitalPinToPort(pin);
    488a:	fc 01       	movw	r30, r24
    488c:	ed 53       	subi	r30, 0x3D	; 61
    488e:	fb 4f       	sbci	r31, 0xFB	; 251
    4890:	e4 91       	lpm	r30, Z
    volatile uint8_t *PIR = portInputRegister(port);
    4892:	f0 e0       	ldi	r31, 0x00	; 0
    4894:	ee 0f       	add	r30, r30
    4896:	ff 1f       	adc	r31, r31
    4898:	e9 52       	subi	r30, 0x29	; 41
    489a:	fb 4f       	sbci	r31, 0xFB	; 251
    489c:	c5 90       	lpm	r12, Z+
    489e:	d4 90       	lpm	r13, Z

    // REQUEST SAMPLE
    pinMode(pin, OUTPUT);
    48a0:	61 e0       	ldi	r22, 0x01	; 1
    48a2:	8f 2d       	mov	r24, r15
    48a4:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    digitalWrite(pin, LOW); // T-be
    48a8:	60 e0       	ldi	r22, 0x00	; 0
    48aa:	8f 2d       	mov	r24, r15
    48ac:	0e 94 a8 32 	call	0x6550	; 0x6550 <digitalWrite>
    if (wakeupDelay > 8) delay(wakeupDelay);
    48b0:	09 30       	cpi	r16, 0x09	; 9
    48b2:	38 f0       	brcs	.+14     	; 0x48c2 <_ZN3dht11_readSensorEhhh+0x70>
    48b4:	60 2f       	mov	r22, r16
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	0e 94 c3 31 	call	0x6386	; 0x6386 <delay>
    48c0:	0a c0       	rjmp	.+20     	; 0x48d6 <_ZN3dht11_readSensorEhhh+0x84>
    else delayMicroseconds(wakeupDelay * 1000UL);
    48c2:	88 ee       	ldi	r24, 0xE8	; 232
    48c4:	93 e0       	ldi	r25, 0x03	; 3
    48c6:	9c 01       	movw	r18, r24
    48c8:	02 9f       	mul	r16, r18
    48ca:	c0 01       	movw	r24, r0
    48cc:	03 9f       	mul	r16, r19
    48ce:	90 0d       	add	r25, r0
    48d0:	11 24       	eor	r1, r1
    48d2:	0e 94 ff 31 	call	0x63fe	; 0x63fe <delayMicroseconds>
    // digitalWrite(pin, HIGH); // T-go
    pinMode(pin, INPUT);
    48d6:	60 e0       	ldi	r22, 0x00	; 0
    48d8:	8f 2d       	mov	r24, r15
    48da:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    48de:	80 e9       	ldi	r24, 0x90	; 144
    48e0:	91 e0       	ldi	r25, 0x01	; 1

    uint16_t loopCount = DHTLIB_TIMEOUT * 2;  // 200uSec max
    // while(digitalRead(pin) == HIGH)
    while ((*PIR & bit) != LOW )
    48e2:	d6 01       	movw	r26, r12
    48e4:	2c 91       	ld	r18, X
    48e6:	21 23       	and	r18, r17
    48e8:	21 f0       	breq	.+8      	; 0x48f2 <_ZN3dht11_readSensorEhhh+0xa0>
    48ea:	01 97       	sbiw	r24, 0x01	; 1
    {
        if (--loopCount == 0) 
    48ec:	d1 f7       	brne	.-12     	; 0x48e2 <_ZN3dht11_readSensorEhhh+0x90>
        {
          return DHTLIB_ERROR_CONNECT;
    48ee:	8d ef       	ldi	r24, 0xFD	; 253
    48f0:	5e c0       	rjmp	.+188    	; 0x49ae <_ZN3dht11_readSensorEhhh+0x15c>
    48f2:	88 ec       	ldi	r24, 0xC8	; 200
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    }

    // GET ACKNOWLEDGE or TIMEOUT
    loopCount = DHTLIB_TIMEOUT;
    // while(digitalRead(pin) == LOW)
    while ((*PIR & bit) == LOW )  // T-rel
    48f6:	f6 01       	movw	r30, r12
    48f8:	20 81       	ld	r18, Z
    48fa:	21 23       	and	r18, r17
    48fc:	21 f4       	brne	.+8      	; 0x4906 <_ZN3dht11_readSensorEhhh+0xb4>
    48fe:	01 97       	sbiw	r24, 0x01	; 1
    {
        if (--loopCount == 0) 
    4900:	d1 f7       	brne	.-12     	; 0x48f6 <_ZN3dht11_readSensorEhhh+0xa4>
        {
          return DHTLIB_ERROR_ACK_L;
    4902:	8c ef       	ldi	r24, 0xFC	; 252
    4904:	54 c0       	rjmp	.+168    	; 0x49ae <_ZN3dht11_readSensorEhhh+0x15c>
    4906:	88 ec       	ldi	r24, 0xC8	; 200
    4908:	90 e0       	ldi	r25, 0x00	; 0
        }
    }

    loopCount = DHTLIB_TIMEOUT;
    // while(digitalRead(pin) == HIGH)
    while ((*PIR & bit) != LOW )  // T-reh
    490a:	d6 01       	movw	r26, r12
    490c:	2c 91       	ld	r18, X
    490e:	21 23       	and	r18, r17
    4910:	21 f0       	breq	.+8      	; 0x491a <_ZN3dht11_readSensorEhhh+0xc8>
    4912:	01 97       	sbiw	r24, 0x01	; 1
    {
        if (--loopCount == 0)
    4914:	d1 f7       	brne	.-12     	; 0x490a <_ZN3dht11_readSensorEhhh+0xb8>
        {
          return DHTLIB_ERROR_ACK_H;
    4916:	8b ef       	ldi	r24, 0xFB	; 251
    4918:	4a c0       	rjmp	.+148    	; 0x49ae <_ZN3dht11_readSensorEhhh+0x15c>
    491a:	58 e2       	ldi	r21, 0x28	; 40
    491c:	88 ec       	ldi	r24, 0xC8	; 200
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	30 e0       	ldi	r19, 0x00	; 0
    4924:	e8 ec       	ldi	r30, 0xC8	; 200
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	00 e0       	ldi	r16, 0x00	; 0
    492a:	60 e0       	ldi	r22, 0x00	; 0
    492c:	31 2c       	mov	r3, r1
    492e:	40 e8       	ldi	r20, 0x80	; 128
    {
        // WAIT FOR FALLING EDGE
        state = (*PIR & bit);
        if (state == LOW && pstate != LOW)
        {
            if (i > leadingZeroBits) // DHT22 first 6 bits are all zero !!   DHT11 only 1
    4930:	25 2e       	mov	r2, r21
    4932:	2e 18       	sub	r2, r14
            {
                zeroLoop = min(zeroLoop, loopCount);
                delta = (DHTLIB_TIMEOUT - zeroLoop)/4;
    4934:	78 ec       	ldi	r23, 0xC8	; 200
    4936:	87 2e       	mov	r8, r23
    4938:	91 2c       	mov	r9, r1
    493a:	a1 2c       	mov	r10, r1
    493c:	b1 2c       	mov	r11, r1

    // READ THE OUTPUT - 40 BITS => 5 BYTES
    for (uint8_t i = 40; i != 0; )
    {
        // WAIT FOR FALLING EDGE
        state = (*PIR & bit);
    493e:	d6 01       	movw	r26, r12
    4940:	7c 91       	ld	r23, X
    4942:	71 23       	and	r23, r17
        if (state == LOW && pstate != LOW)
    4944:	61 f5       	brne	.+88     	; 0x499e <_ZN3dht11_readSensorEhhh+0x14c>
    4946:	00 23       	and	r16, r16
    4948:	51 f1       	breq	.+84     	; 0x499e <_ZN3dht11_readSensorEhhh+0x14c>
        {
            if (i > leadingZeroBits) // DHT22 first 6 bits are all zero !!   DHT11 only 1
    494a:	25 16       	cp	r2, r21
    494c:	98 f4       	brcc	.+38     	; 0x4974 <_ZN3dht11_readSensorEhhh+0x122>
    494e:	8e 17       	cp	r24, r30
    4950:	9f 07       	cpc	r25, r31
    4952:	08 f4       	brcc	.+2      	; 0x4956 <_ZN3dht11_readSensorEhhh+0x104>
    4954:	fc 01       	movw	r30, r24
            {
                zeroLoop = min(zeroLoop, loopCount);
                delta = (DHTLIB_TIMEOUT - zeroLoop)/4;
    4956:	24 01       	movw	r4, r8
    4958:	35 01       	movw	r6, r10
    495a:	4e 1a       	sub	r4, r30
    495c:	5f 0a       	sbc	r5, r31
    495e:	61 08       	sbc	r6, r1
    4960:	71 08       	sbc	r7, r1
    4962:	82 e0       	ldi	r24, 0x02	; 2
    4964:	75 94       	asr	r7
    4966:	67 94       	ror	r6
    4968:	57 94       	ror	r5
    496a:	47 94       	ror	r4
    496c:	8a 95       	dec	r24
    496e:	d1 f7       	brne	.-12     	; 0x4964 <_ZN3dht11_readSensorEhhh+0x112>
    4970:	92 01       	movw	r18, r4
    4972:	07 c0       	rjmp	.+14     	; 0x4982 <_ZN3dht11_readSensorEhhh+0x130>
            }
            else if ( loopCount <= (zeroLoop - delta) ) // long -> one
    4974:	7f 01       	movw	r14, r30
    4976:	e2 1a       	sub	r14, r18
    4978:	f3 0a       	sbc	r15, r19
    497a:	e8 16       	cp	r14, r24
    497c:	f9 06       	cpc	r15, r25
    497e:	08 f0       	brcs	.+2      	; 0x4982 <_ZN3dht11_readSensorEhhh+0x130>
            {
                data |= mask;
    4980:	64 2b       	or	r22, r20
            }
            mask >>= 1;
    4982:	46 95       	lsr	r20
            if (mask == 0)   // next byte
    4984:	49 f4       	brne	.+18     	; 0x4998 <_ZN3dht11_readSensorEhhh+0x146>
            {
                mask = 128;
                bits[idx] = data;
    4986:	ce 01       	movw	r24, r28
    4988:	83 0d       	add	r24, r3
    498a:	91 1d       	adc	r25, r1
    498c:	dc 01       	movw	r26, r24
    498e:	18 96       	adiw	r26, 0x08	; 8
    4990:	6c 93       	st	X, r22
                idx++;
    4992:	33 94       	inc	r3
                data = 0;
    4994:	60 e0       	ldi	r22, 0x00	; 0
                data |= mask;
            }
            mask >>= 1;
            if (mask == 0)   // next byte
            {
                mask = 128;
    4996:	40 e8       	ldi	r20, 0x80	; 128
                bits[idx] = data;
                idx++;
                data = 0;
            }
            // next bit
            --i;
    4998:	51 50       	subi	r21, 0x01	; 1

            // reset timeout flag
            loopCount = DHTLIB_TIMEOUT;
    499a:	88 ec       	ldi	r24, 0xC8	; 200
    499c:	90 e0       	ldi	r25, 0x00	; 0
        }
        pstate = state;
        // Check timeout
        if (--loopCount == 0)
    499e:	01 97       	sbiw	r24, 0x01	; 1
    49a0:	29 f0       	breq	.+10     	; 0x49ac <_ZN3dht11_readSensorEhhh+0x15a>

    // READ THE OUTPUT - 40 BITS => 5 BYTES
    for (uint8_t i = 40; i != 0; )
    {
        // WAIT FOR FALLING EDGE
        state = (*PIR & bit);
    49a2:	07 2f       	mov	r16, r23
    }

    loopCount = DHTLIB_TIMEOUT;

    // READ THE OUTPUT - 40 BITS => 5 BYTES
    for (uint8_t i = 40; i != 0; )
    49a4:	51 11       	cpse	r21, r1
    49a6:	cb cf       	rjmp	.-106    	; 0x493e <_ZN3dht11_readSensorEhhh+0xec>
        }

    }
    // pinMode(pin, OUTPUT);
    // digitalWrite(pin, HIGH);
    return DHTLIB_OK;
    49a8:	80 e0       	ldi	r24, 0x00	; 0
    49aa:	01 c0       	rjmp	.+2      	; 0x49ae <_ZN3dht11_readSensorEhhh+0x15c>
        }
        pstate = state;
        // Check timeout
        if (--loopCount == 0)
        {
          return DHTLIB_ERROR_TIMEOUT;
    49ac:	8e ef       	ldi	r24, 0xFE	; 254

    }
    // pinMode(pin, OUTPUT);
    // digitalWrite(pin, HIGH);
    return DHTLIB_OK;
}
    49ae:	df 91       	pop	r29
    49b0:	cf 91       	pop	r28
    49b2:	1f 91       	pop	r17
    49b4:	0f 91       	pop	r16
    49b6:	ff 90       	pop	r15
    49b8:	ef 90       	pop	r14
    49ba:	df 90       	pop	r13
    49bc:	cf 90       	pop	r12
    49be:	bf 90       	pop	r11
    49c0:	af 90       	pop	r10
    49c2:	9f 90       	pop	r9
    49c4:	8f 90       	pop	r8
    49c6:	7f 90       	pop	r7
    49c8:	6f 90       	pop	r6
    49ca:	5f 90       	pop	r5
    49cc:	4f 90       	pop	r4
    49ce:	3f 90       	pop	r3
    49d0:	2f 90       	pop	r2
    49d2:	08 95       	ret

000049d4 <_ZN3dht6read11Eh>:
//
// PUBLIC
//

int8_t dht::read11(uint8_t pin)
{
    49d4:	ff 92       	push	r15
    49d6:	0f 93       	push	r16
    49d8:	1f 93       	push	r17
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	ec 01       	movw	r28, r24
    // READ VALUES
    if (_disableIRQ) noInterrupts();
    49e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e2:	88 23       	and	r24, r24
    49e4:	09 f0       	breq	.+2      	; 0x49e8 <_ZN3dht6read11Eh+0x14>
    49e6:	f8 94       	cli
    int8_t result = _readSensor(pin, DHTLIB_DHT11_WAKEUP, DHTLIB_DHT11_LEADING_ZEROS);
    49e8:	21 e0       	ldi	r18, 0x01	; 1
    49ea:	42 e1       	ldi	r20, 0x12	; 18
    49ec:	ce 01       	movw	r24, r28
    49ee:	0e 94 29 24 	call	0x4852	; 0x4852 <_ZN3dht11_readSensorEhhh>
    49f2:	f8 2e       	mov	r15, r24
    if (_disableIRQ) interrupts();
    49f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f6:	88 23       	and	r24, r24
    49f8:	09 f0       	breq	.+2      	; 0x49fc <_ZN3dht6read11Eh+0x28>
    49fa:	78 94       	sei

    // these bits are always zero, masking them reduces errors.
    bits[0] &= 0x7F;
    49fc:	08 85       	ldd	r16, Y+8	; 0x08
    49fe:	0f 77       	andi	r16, 0x7F	; 127
    4a00:	08 87       	std	Y+8, r16	; 0x08
    bits[2] &= 0x7F;
    4a02:	1a 85       	ldd	r17, Y+10	; 0x0a
    4a04:	1f 77       	andi	r17, 0x7F	; 127
    4a06:	1a 87       	std	Y+10, r17	; 0x0a

    // CONVERT AND STORE
    humidity    = bits[0];  // bits[1] == 0;
    4a08:	60 2f       	mov	r22, r16
    4a0a:	70 e0       	ldi	r23, 0x00	; 0
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__floatunsisf>
    4a14:	68 83       	st	Y, r22
    4a16:	79 83       	std	Y+1, r23	; 0x01
    4a18:	8a 83       	std	Y+2, r24	; 0x02
    4a1a:	9b 83       	std	Y+3, r25	; 0x03
    temperature = bits[2];  // bits[3] == 0;
    4a1c:	61 2f       	mov	r22, r17
    4a1e:	70 e0       	ldi	r23, 0x00	; 0
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__floatunsisf>
    4a28:	6c 83       	std	Y+4, r22	; 0x04
    4a2a:	7d 83       	std	Y+5, r23	; 0x05
    4a2c:	8e 83       	std	Y+6, r24	; 0x06
    4a2e:	9f 83       	std	Y+7, r25	; 0x07

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    4a30:	99 85       	ldd	r25, Y+9	; 0x09
    4a32:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a34:	89 0f       	add	r24, r25
    4a36:	08 0f       	add	r16, r24
    4a38:	10 0f       	add	r17, r16
    4a3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a3c:	18 13       	cpse	r17, r24
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <_ZN3dht6read11Eh+0x70>
    {
        return DHTLIB_ERROR_CHECKSUM;
    }
    return result;
    4a40:	8f 2d       	mov	r24, r15
    4a42:	01 c0       	rjmp	.+2      	; 0x4a46 <_ZN3dht6read11Eh+0x72>

    // TEST CHECKSUM
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
    if (bits[4] != sum)
    {
        return DHTLIB_ERROR_CHECKSUM;
    4a44:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return result;
}
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	1f 91       	pop	r17
    4a4c:	0f 91       	pop	r16
    4a4e:	ff 90       	pop	r15
    4a50:	08 95       	ret

00004a52 <_ZN5Print17availableForWriteEv>:
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
}
    4a52:	80 e0       	ldi	r24, 0x00	; 0
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	08 95       	ret

00004a58 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    4a58:	1f 92       	push	r1
    4a5a:	0f 92       	push	r0
    4a5c:	0f b6       	in	r0, 0x3f	; 63
    4a5e:	0f 92       	push	r0
    4a60:	11 24       	eor	r1, r1
    4a62:	2f 93       	push	r18
    4a64:	3f 93       	push	r19
    4a66:	4f 93       	push	r20
    4a68:	5f 93       	push	r21
    4a6a:	6f 93       	push	r22
    4a6c:	7f 93       	push	r23
    4a6e:	8f 93       	push	r24
    4a70:	9f 93       	push	r25
    4a72:	af 93       	push	r26
    4a74:	bf 93       	push	r27
    4a76:	ef 93       	push	r30
    4a78:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    4a7a:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <_ZN14SoftwareSerial13active_objectE>
    4a7e:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <_ZN14SoftwareSerial13active_objectE+0x1>
    4a82:	30 97       	sbiw	r30, 0x00	; 0
    4a84:	09 f4       	brne	.+2      	; 0x4a88 <__vector_3+0x30>
    4a86:	51 c0       	rjmp	.+162    	; 0x4b2a <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    4a88:	96 8d       	ldd	r25, Z+30	; 0x1e
    4a8a:	a6 85       	ldd	r26, Z+14	; 0x0e
    4a8c:	b7 85       	ldd	r27, Z+15	; 0x0f
    4a8e:	85 85       	ldd	r24, Z+13	; 0x0d
    4a90:	91 ff       	sbrs	r25, 1
    4a92:	04 c0       	rjmp	.+8      	; 0x4a9c <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4a94:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    4a96:	89 23       	and	r24, r25
    4a98:	29 f4       	brne	.+10     	; 0x4aa4 <__vector_3+0x4c>
    4a9a:	47 c0       	rjmp	.+142    	; 0x4b2a <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4a9c:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    4a9e:	89 23       	and	r24, r25
    4aa0:	09 f0       	breq	.+2      	; 0x4aa4 <__vector_3+0x4c>
    4aa2:	43 c0       	rjmp	.+134    	; 0x4b2a <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    4aa4:	a3 89       	ldd	r26, Z+19	; 0x13
    4aa6:	b4 89       	ldd	r27, Z+20	; 0x14
    4aa8:	9c 91       	ld	r25, X
    4aaa:	85 89       	ldd	r24, Z+21	; 0x15
    4aac:	80 95       	com	r24
    4aae:	89 23       	and	r24, r25
    4ab0:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4ab2:	86 89       	ldd	r24, Z+22	; 0x16
    4ab4:	97 89       	ldd	r25, Z+23	; 0x17
    4ab6:	01 97       	sbiw	r24, 0x01	; 1
    4ab8:	f1 f7       	brne	.-4      	; 0x4ab6 <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    4aba:	60 8d       	ldd	r22, Z+24	; 0x18
    4abc:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4abe:	a6 85       	ldd	r26, Z+14	; 0x0e
    4ac0:	b7 85       	ldd	r27, Z+15	; 0x0f
    4ac2:	55 85       	ldd	r21, Z+13	; 0x0d
    4ac4:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    4ac6:	20 e0       	ldi	r18, 0x00	; 0
    4ac8:	cb 01       	movw	r24, r22
    4aca:	01 97       	sbiw	r24, 0x01	; 1
    4acc:	f1 f7       	brne	.-4      	; 0x4aca <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    4ace:	82 2f       	mov	r24, r18
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	95 95       	asr	r25
    4ad4:	87 95       	ror	r24
    4ad6:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    4ad8:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    4ada:	45 23       	and	r20, r21
    4adc:	09 f0       	breq	.+2      	; 0x4ae0 <__vector_3+0x88>
        d |= 0x80;
    4ade:	20 68       	ori	r18, 0x80	; 128
    4ae0:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    4ae2:	91 f7       	brne	.-28     	; 0x4ac8 <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    4ae4:	86 8d       	ldd	r24, Z+30	; 0x1e
    4ae6:	81 fd       	sbrc	r24, 1
      d = ~d;
    4ae8:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    4aea:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	01 96       	adiw	r24, 0x01	; 1
    4af2:	8f 73       	andi	r24, 0x3F	; 63
    4af4:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
    4af6:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <_ZN14SoftwareSerial20_receive_buffer_headE>
    4afa:	38 17       	cp	r19, r24
    4afc:	49 f0       	breq	.+18     	; 0x4b10 <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    4afe:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4b02:	b0 e0       	ldi	r27, 0x00	; 0
    4b04:	a8 52       	subi	r26, 0x28	; 40
    4b06:	bd 4f       	sbci	r27, 0xFD	; 253
    4b08:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
    4b0a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    4b0e:	03 c0       	rjmp	.+6      	; 0x4b16 <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    4b10:	86 8d       	ldd	r24, Z+30	; 0x1e
    4b12:	81 60       	ori	r24, 0x01	; 1
    4b14:	86 8f       	std	Z+30, r24	; 0x1e
    4b16:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b18:	93 8d       	ldd	r25, Z+27	; 0x1b
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    4b1e:	a3 89       	ldd	r26, Z+19	; 0x13
    4b20:	b4 89       	ldd	r27, Z+20	; 0x14
    4b22:	9c 91       	ld	r25, X
    4b24:	85 89       	ldd	r24, Z+21	; 0x15
    4b26:	89 2b       	or	r24, r25
    4b28:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    4b2a:	ff 91       	pop	r31
    4b2c:	ef 91       	pop	r30
    4b2e:	bf 91       	pop	r27
    4b30:	af 91       	pop	r26
    4b32:	9f 91       	pop	r25
    4b34:	8f 91       	pop	r24
    4b36:	7f 91       	pop	r23
    4b38:	6f 91       	pop	r22
    4b3a:	5f 91       	pop	r21
    4b3c:	4f 91       	pop	r20
    4b3e:	3f 91       	pop	r19
    4b40:	2f 91       	pop	r18
    4b42:	0f 90       	pop	r0
    4b44:	0f be       	out	0x3f, r0	; 63
    4b46:	0f 90       	pop	r0
    4b48:	1f 90       	pop	r1
    4b4a:	18 95       	reti

00004b4c <_ZN10CCS811Core12readRegisterEhPh>:
	if (returnError != CCS811_Stat_SUCCESS)
		return returnError;
	value &= ~(1 << 3); //Clear INTERRUPT bit
	returnError = writeRegister(CSS811_MEAS_MODE, value);
	return returnError;
}
    4b4c:	ef 92       	push	r14
    4b4e:	ff 92       	push	r15
    4b50:	1f 93       	push	r17
    4b52:	cf 93       	push	r28
    4b54:	df 93       	push	r29
    4b56:	ec 01       	movw	r28, r24
    4b58:	16 2f       	mov	r17, r22
    4b5a:	7a 01       	movw	r14, r20
    4b5c:	6a 81       	ldd	r22, Y+2	; 0x02
    4b5e:	88 81       	ld	r24, Y
    4b60:	99 81       	ldd	r25, Y+1	; 0x01
    4b62:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire17beginTransmissionEh>
    4b66:	88 81       	ld	r24, Y
    4b68:	99 81       	ldd	r25, Y+1	; 0x01
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	ed 91       	ld	r30, X+
    4b6e:	fc 91       	ld	r31, X
    4b70:	01 90       	ld	r0, Z+
    4b72:	f0 81       	ld	r31, Z
    4b74:	e0 2d       	mov	r30, r0
    4b76:	61 2f       	mov	r22, r17
    4b78:	09 95       	icall
    4b7a:	88 81       	ld	r24, Y
    4b7c:	99 81       	ldd	r25, Y+1	; 0x01
    4b7e:	0e 94 2a 2c 	call	0x5854	; 0x5854 <_ZN7TwoWire15endTransmissionEv>
    4b82:	88 23       	and	r24, r24
    4b84:	11 f0       	breq	.+4      	; 0x4b8a <_ZN10CCS811Core12readRegisterEhPh+0x3e>
    4b86:	12 e0       	ldi	r17, 0x02	; 2
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <_ZN10CCS811Core12readRegisterEhPh+0x40>
    4b8a:	10 e0       	ldi	r17, 0x00	; 0
    4b8c:	41 e0       	ldi	r20, 0x01	; 1
    4b8e:	6a 81       	ldd	r22, Y+2	; 0x02
    4b90:	88 81       	ld	r24, Y
    4b92:	99 81       	ldd	r25, Y+1	; 0x01
    4b94:	0e 94 27 2c 	call	0x584e	; 0x584e <_ZN7TwoWire11requestFromEhh>
    4b98:	88 81       	ld	r24, Y
    4b9a:	99 81       	ldd	r25, Y+1	; 0x01
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	ed 91       	ld	r30, X+
    4ba0:	fc 91       	ld	r31, X
    4ba2:	02 84       	ldd	r0, Z+10	; 0x0a
    4ba4:	f3 85       	ldd	r31, Z+11	; 0x0b
    4ba6:	e0 2d       	mov	r30, r0
    4ba8:	09 95       	icall
    4baa:	f7 01       	movw	r30, r14
    4bac:	80 83       	st	Z, r24
    4bae:	81 2f       	mov	r24, r17
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	1f 91       	pop	r17
    4bb6:	ff 90       	pop	r15
    4bb8:	ef 90       	pop	r14
    4bba:	08 95       	ret

00004bbc <_ZN10CCS811Core9beginCoreER7TwoWire>:
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	00 d0       	rcall	.+0      	; 0x4bc2 <_ZN10CCS811Core9beginCoreER7TwoWire+0x6>
    4bc2:	cd b7       	in	r28, 0x3d	; 61
    4bc4:	de b7       	in	r29, 0x3e	; 62
    4bc6:	fc 01       	movw	r30, r24
    4bc8:	71 83       	std	Z+1, r23	; 0x01
    4bca:	60 83       	st	Z, r22
    4bcc:	1a 82       	std	Y+2, r1	; 0x02
    4bce:	20 e1       	ldi	r18, 0x10	; 16
    4bd0:	37 e2       	ldi	r19, 0x27	; 39
    4bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd4:	9f 5f       	subi	r25, 0xFF	; 255
    4bd6:	9a 83       	std	Y+2, r25	; 0x02
    4bd8:	21 50       	subi	r18, 0x01	; 1
    4bda:	31 09       	sbc	r19, r1
    4bdc:	d1 f7       	brne	.-12     	; 0x4bd2 <_ZN10CCS811Core9beginCoreER7TwoWire+0x16>
    4bde:	19 82       	std	Y+1, r1	; 0x01
    4be0:	ae 01       	movw	r20, r28
    4be2:	4f 5f       	subi	r20, 0xFF	; 255
    4be4:	5f 4f       	sbci	r21, 0xFF	; 255
    4be6:	60 e2       	ldi	r22, 0x20	; 32
    4be8:	cf 01       	movw	r24, r30
    4bea:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <_ZN10CCS811Core12readRegisterEhPh>
    4bee:	81 11       	cpse	r24, r1
    4bf0:	05 c0       	rjmp	.+10     	; 0x4bfc <_ZN10CCS811Core9beginCoreER7TwoWire+0x40>
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	99 81       	ldd	r25, Y+1	; 0x01
    4bf6:	91 38       	cpi	r25, 0x81	; 129
    4bf8:	09 f4       	brne	.+2      	; 0x4bfc <_ZN10CCS811Core9beginCoreER7TwoWire+0x40>
    4bfa:	80 e0       	ldi	r24, 0x00	; 0
    4bfc:	0f 90       	pop	r0
    4bfe:	0f 90       	pop	r0
    4c00:	df 91       	pop	r29
    4c02:	cf 91       	pop	r28
    4c04:	08 95       	ret

00004c06 <_ZN10CCS811Core17multiReadRegisterEhPhh>:
    4c06:	ef 92       	push	r14
    4c08:	ff 92       	push	r15
    4c0a:	0f 93       	push	r16
    4c0c:	1f 93       	push	r17
    4c0e:	cf 93       	push	r28
    4c10:	df 93       	push	r29
    4c12:	ec 01       	movw	r28, r24
    4c14:	e6 2e       	mov	r14, r22
    4c16:	8a 01       	movw	r16, r20
    4c18:	f2 2e       	mov	r15, r18
    4c1a:	6a 81       	ldd	r22, Y+2	; 0x02
    4c1c:	88 81       	ld	r24, Y
    4c1e:	99 81       	ldd	r25, Y+1	; 0x01
    4c20:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire17beginTransmissionEh>
    4c24:	88 81       	ld	r24, Y
    4c26:	99 81       	ldd	r25, Y+1	; 0x01
    4c28:	dc 01       	movw	r26, r24
    4c2a:	ed 91       	ld	r30, X+
    4c2c:	fc 91       	ld	r31, X
    4c2e:	01 90       	ld	r0, Z+
    4c30:	f0 81       	ld	r31, Z
    4c32:	e0 2d       	mov	r30, r0
    4c34:	6e 2d       	mov	r22, r14
    4c36:	09 95       	icall
    4c38:	88 81       	ld	r24, Y
    4c3a:	99 81       	ldd	r25, Y+1	; 0x01
    4c3c:	0e 94 2a 2c 	call	0x5854	; 0x5854 <_ZN7TwoWire15endTransmissionEv>
    4c40:	81 11       	cpse	r24, r1
    4c42:	19 c0       	rjmp	.+50     	; 0x4c76 <_ZN10CCS811Core17multiReadRegisterEhPhh+0x70>
    4c44:	4f 2d       	mov	r20, r15
    4c46:	6a 81       	ldd	r22, Y+2	; 0x02
    4c48:	88 81       	ld	r24, Y
    4c4a:	99 81       	ldd	r25, Y+1	; 0x01
    4c4c:	0e 94 27 2c 	call	0x584e	; 0x584e <_ZN7TwoWire11requestFromEhh>
    4c50:	f8 01       	movw	r30, r16
    4c52:	ef 0d       	add	r30, r15
    4c54:	f1 1d       	adc	r31, r1
    4c56:	7f 01       	movw	r14, r30
    4c58:	88 81       	ld	r24, Y
    4c5a:	99 81       	ldd	r25, Y+1	; 0x01
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	ed 91       	ld	r30, X+
    4c60:	fc 91       	ld	r31, X
    4c62:	00 84       	ldd	r0, Z+8	; 0x08
    4c64:	f1 85       	ldd	r31, Z+9	; 0x09
    4c66:	e0 2d       	mov	r30, r0
    4c68:	09 95       	icall
    4c6a:	89 2b       	or	r24, r25
    4c6c:	31 f0       	breq	.+12     	; 0x4c7a <_ZN10CCS811Core17multiReadRegisterEhPhh+0x74>
    4c6e:	0e 15       	cp	r16, r14
    4c70:	1f 05       	cpc	r17, r15
    4c72:	29 f4       	brne	.+10     	; 0x4c7e <_ZN10CCS811Core17multiReadRegisterEhPhh+0x78>
    4c74:	02 c0       	rjmp	.+4      	; 0x4c7a <_ZN10CCS811Core17multiReadRegisterEhPhh+0x74>
    4c76:	82 e0       	ldi	r24, 0x02	; 2
    4c78:	0f c0       	rjmp	.+30     	; 0x4c98 <_ZN10CCS811Core17multiReadRegisterEhPhh+0x92>
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	0d c0       	rjmp	.+26     	; 0x4c98 <_ZN10CCS811Core17multiReadRegisterEhPhh+0x92>
    4c7e:	88 81       	ld	r24, Y
    4c80:	99 81       	ldd	r25, Y+1	; 0x01
    4c82:	dc 01       	movw	r26, r24
    4c84:	ed 91       	ld	r30, X+
    4c86:	fc 91       	ld	r31, X
    4c88:	02 84       	ldd	r0, Z+10	; 0x0a
    4c8a:	f3 85       	ldd	r31, Z+11	; 0x0b
    4c8c:	e0 2d       	mov	r30, r0
    4c8e:	09 95       	icall
    4c90:	f8 01       	movw	r30, r16
    4c92:	81 93       	st	Z+, r24
    4c94:	8f 01       	movw	r16, r30
    4c96:	e0 cf       	rjmp	.-64     	; 0x4c58 <_ZN10CCS811Core17multiReadRegisterEhPhh+0x52>
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	ff 90       	pop	r15
    4ca2:	ef 90       	pop	r14
    4ca4:	08 95       	ret

00004ca6 <_ZN10CCS811Core13writeRegisterEhh>:
    4ca6:	0f 93       	push	r16
    4ca8:	1f 93       	push	r17
    4caa:	cf 93       	push	r28
    4cac:	df 93       	push	r29
    4cae:	ec 01       	movw	r28, r24
    4cb0:	06 2f       	mov	r16, r22
    4cb2:	14 2f       	mov	r17, r20
    4cb4:	6a 81       	ldd	r22, Y+2	; 0x02
    4cb6:	88 81       	ld	r24, Y
    4cb8:	99 81       	ldd	r25, Y+1	; 0x01
    4cba:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire17beginTransmissionEh>
    4cbe:	88 81       	ld	r24, Y
    4cc0:	99 81       	ldd	r25, Y+1	; 0x01
    4cc2:	dc 01       	movw	r26, r24
    4cc4:	ed 91       	ld	r30, X+
    4cc6:	fc 91       	ld	r31, X
    4cc8:	01 90       	ld	r0, Z+
    4cca:	f0 81       	ld	r31, Z
    4ccc:	e0 2d       	mov	r30, r0
    4cce:	60 2f       	mov	r22, r16
    4cd0:	09 95       	icall
    4cd2:	88 81       	ld	r24, Y
    4cd4:	99 81       	ldd	r25, Y+1	; 0x01
    4cd6:	dc 01       	movw	r26, r24
    4cd8:	ed 91       	ld	r30, X+
    4cda:	fc 91       	ld	r31, X
    4cdc:	01 90       	ld	r0, Z+
    4cde:	f0 81       	ld	r31, Z
    4ce0:	e0 2d       	mov	r30, r0
    4ce2:	61 2f       	mov	r22, r17
    4ce4:	09 95       	icall
    4ce6:	88 81       	ld	r24, Y
    4ce8:	99 81       	ldd	r25, Y+1	; 0x01
    4cea:	0e 94 2a 2c 	call	0x5854	; 0x5854 <_ZN7TwoWire15endTransmissionEv>
    4cee:	88 23       	and	r24, r24
    4cf0:	11 f0       	breq	.+4      	; 0x4cf6 <_ZN10CCS811Core13writeRegisterEhh+0x50>
    4cf2:	82 e0       	ldi	r24, 0x02	; 2
    4cf4:	01 c0       	rjmp	.+2      	; 0x4cf8 <_ZN10CCS811Core13writeRegisterEhh+0x52>
    4cf6:	80 e0       	ldi	r24, 0x00	; 0
    4cf8:	df 91       	pop	r29
    4cfa:	cf 91       	pop	r28
    4cfc:	1f 91       	pop	r17
    4cfe:	0f 91       	pop	r16
    4d00:	08 95       	ret

00004d02 <_ZN10CCS811Core18multiWriteRegisterEhPhh>:
    4d02:	ef 92       	push	r14
    4d04:	ff 92       	push	r15
    4d06:	0f 93       	push	r16
    4d08:	1f 93       	push	r17
    4d0a:	cf 93       	push	r28
    4d0c:	df 93       	push	r29
    4d0e:	8c 01       	movw	r16, r24
    4d10:	e6 2e       	mov	r14, r22
    4d12:	ea 01       	movw	r28, r20
    4d14:	f2 2e       	mov	r15, r18
    4d16:	dc 01       	movw	r26, r24
    4d18:	12 96       	adiw	r26, 0x02	; 2
    4d1a:	6c 91       	ld	r22, X
    4d1c:	12 97       	sbiw	r26, 0x02	; 2
    4d1e:	8d 91       	ld	r24, X+
    4d20:	9c 91       	ld	r25, X
    4d22:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire17beginTransmissionEh>
    4d26:	f8 01       	movw	r30, r16
    4d28:	80 81       	ld	r24, Z
    4d2a:	91 81       	ldd	r25, Z+1	; 0x01
    4d2c:	dc 01       	movw	r26, r24
    4d2e:	ed 91       	ld	r30, X+
    4d30:	fc 91       	ld	r31, X
    4d32:	01 90       	ld	r0, Z+
    4d34:	f0 81       	ld	r31, Z
    4d36:	e0 2d       	mov	r30, r0
    4d38:	6e 2d       	mov	r22, r14
    4d3a:	09 95       	icall
    4d3c:	fe 01       	movw	r30, r28
    4d3e:	ef 0d       	add	r30, r15
    4d40:	f1 1d       	adc	r31, r1
    4d42:	7f 01       	movw	r14, r30
    4d44:	d8 01       	movw	r26, r16
    4d46:	8d 91       	ld	r24, X+
    4d48:	9c 91       	ld	r25, X
    4d4a:	ce 15       	cp	r28, r14
    4d4c:	df 05       	cpc	r29, r15
    4d4e:	49 f0       	breq	.+18     	; 0x4d62 <_ZN10CCS811Core18multiWriteRegisterEhPhh+0x60>
    4d50:	dc 01       	movw	r26, r24
    4d52:	ed 91       	ld	r30, X+
    4d54:	fc 91       	ld	r31, X
    4d56:	01 90       	ld	r0, Z+
    4d58:	f0 81       	ld	r31, Z
    4d5a:	e0 2d       	mov	r30, r0
    4d5c:	69 91       	ld	r22, Y+
    4d5e:	09 95       	icall
    4d60:	f1 cf       	rjmp	.-30     	; 0x4d44 <_ZN10CCS811Core18multiWriteRegisterEhPhh+0x42>
    4d62:	0e 94 2a 2c 	call	0x5854	; 0x5854 <_ZN7TwoWire15endTransmissionEv>
    4d66:	88 23       	and	r24, r24
    4d68:	11 f0       	breq	.+4      	; 0x4d6e <_ZN10CCS811Core18multiWriteRegisterEhPhh+0x6c>
    4d6a:	82 e0       	ldi	r24, 0x02	; 2
    4d6c:	01 c0       	rjmp	.+2      	; 0x4d70 <_ZN10CCS811Core18multiWriteRegisterEhPhh+0x6e>
    4d6e:	80 e0       	ldi	r24, 0x00	; 0
    4d70:	df 91       	pop	r29
    4d72:	cf 91       	pop	r28
    4d74:	1f 91       	pop	r17
    4d76:	0f 91       	pop	r16
    4d78:	ff 90       	pop	r15
    4d7a:	ef 90       	pop	r14
    4d7c:	08 95       	ret

00004d7e <_ZN6CCS811C1Eh>:
    4d7e:	fc 01       	movw	r30, r24
    4d80:	62 83       	std	Z+2, r22	; 0x02
    4d82:	10 8a       	std	Z+16, r1	; 0x10
    4d84:	17 86       	std	Z+15, r1	; 0x0f
    4d86:	12 8a       	std	Z+18, r1	; 0x12
    4d88:	11 8a       	std	Z+17, r1	; 0x11
    4d8a:	80 e0       	ldi	r24, 0x00	; 0
    4d8c:	90 e4       	ldi	r25, 0x40	; 64
    4d8e:	ac e1       	ldi	r26, 0x1C	; 28
    4d90:	b6 e4       	ldi	r27, 0x46	; 70
    4d92:	83 83       	std	Z+3, r24	; 0x03
    4d94:	94 83       	std	Z+4, r25	; 0x04
    4d96:	a5 83       	std	Z+5, r26	; 0x05
    4d98:	b6 83       	std	Z+6, r27	; 0x06
    4d9a:	17 82       	std	Z+7, r1	; 0x07
    4d9c:	10 86       	std	Z+8, r1	; 0x08
    4d9e:	11 86       	std	Z+9, r1	; 0x09
    4da0:	12 86       	std	Z+10, r1	; 0x0a
    4da2:	13 8a       	std	Z+19, r1	; 0x13
    4da4:	14 8a       	std	Z+20, r1	; 0x14
    4da6:	15 8a       	std	Z+21, r1	; 0x15
    4da8:	16 8a       	std	Z+22, r1	; 0x16
    4daa:	14 86       	std	Z+12, r1	; 0x0c
    4dac:	13 86       	std	Z+11, r1	; 0x0b
    4dae:	16 86       	std	Z+14, r1	; 0x0e
    4db0:	15 86       	std	Z+13, r1	; 0x0d
    4db2:	08 95       	ret

00004db4 <_ZN6CCS81120readAlgorithmResultsEv>:
    4db4:	0f 93       	push	r16
    4db6:	1f 93       	push	r17
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	00 d0       	rcall	.+0      	; 0x4dbe <_ZN6CCS81120readAlgorithmResultsEv+0xa>
    4dbe:	00 d0       	rcall	.+0      	; 0x4dc0 <_ZN6CCS81120readAlgorithmResultsEv+0xc>
    4dc0:	cd b7       	in	r28, 0x3d	; 61
    4dc2:	de b7       	in	r29, 0x3e	; 62
    4dc4:	8c 01       	movw	r16, r24
    4dc6:	24 e0       	ldi	r18, 0x04	; 4
    4dc8:	ae 01       	movw	r20, r28
    4dca:	4f 5f       	subi	r20, 0xFF	; 255
    4dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dce:	62 e0       	ldi	r22, 0x02	; 2
    4dd0:	0e 94 03 26 	call	0x4c06	; 0x4c06 <_ZN10CCS811Core17multiReadRegisterEhPhh>
    4dd4:	81 11       	cpse	r24, r1
    4dd6:	0f c0       	rjmp	.+30     	; 0x4df6 <_ZN6CCS81120readAlgorithmResultsEv+0x42>
    4dd8:	29 81       	ldd	r18, Y+1	; 0x01
    4dda:	3a 81       	ldd	r19, Y+2	; 0x02
    4ddc:	32 27       	eor	r19, r18
    4dde:	23 27       	eor	r18, r19
    4de0:	32 27       	eor	r19, r18
    4de2:	f8 01       	movw	r30, r16
    4de4:	36 87       	std	Z+14, r19	; 0x0e
    4de6:	25 87       	std	Z+13, r18	; 0x0d
    4de8:	2b 81       	ldd	r18, Y+3	; 0x03
    4dea:	3c 81       	ldd	r19, Y+4	; 0x04
    4dec:	32 27       	eor	r19, r18
    4dee:	23 27       	eor	r18, r19
    4df0:	32 27       	eor	r19, r18
    4df2:	34 87       	std	Z+12, r19	; 0x0c
    4df4:	23 87       	std	Z+11, r18	; 0x0b
    4df6:	0f 90       	pop	r0
    4df8:	0f 90       	pop	r0
    4dfa:	0f 90       	pop	r0
    4dfc:	0f 90       	pop	r0
    4dfe:	df 91       	pop	r29
    4e00:	cf 91       	pop	r28
    4e02:	1f 91       	pop	r17
    4e04:	0f 91       	pop	r16
    4e06:	08 95       	ret

00004e08 <_ZN6CCS81119checkForStatusErrorEv>:
    4e08:	cf 93       	push	r28
    4e0a:	df 93       	push	r29
    4e0c:	1f 92       	push	r1
    4e0e:	cd b7       	in	r28, 0x3d	; 61
    4e10:	de b7       	in	r29, 0x3e	; 62
    4e12:	ae 01       	movw	r20, r28
    4e14:	4f 5f       	subi	r20, 0xFF	; 255
    4e16:	5f 4f       	sbci	r21, 0xFF	; 255
    4e18:	60 e0       	ldi	r22, 0x00	; 0
    4e1a:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <_ZN10CCS811Core12readRegisterEhPh>
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	81 70       	andi	r24, 0x01	; 1
    4e22:	0f 90       	pop	r0
    4e24:	df 91       	pop	r29
    4e26:	cf 91       	pop	r28
    4e28:	08 95       	ret

00004e2a <_ZN6CCS81113dataAvailableEv>:
    4e2a:	cf 93       	push	r28
    4e2c:	df 93       	push	r29
    4e2e:	1f 92       	push	r1
    4e30:	cd b7       	in	r28, 0x3d	; 61
    4e32:	de b7       	in	r29, 0x3e	; 62
    4e34:	ae 01       	movw	r20, r28
    4e36:	4f 5f       	subi	r20, 0xFF	; 255
    4e38:	5f 4f       	sbci	r21, 0xFF	; 255
    4e3a:	60 e0       	ldi	r22, 0x00	; 0
    4e3c:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <_ZN10CCS811Core12readRegisterEhPh>
    4e40:	81 11       	cpse	r24, r1
    4e42:	05 c0       	rjmp	.+10     	; 0x4e4e <_ZN6CCS81113dataAvailableEv+0x24>
    4e44:	89 81       	ldd	r24, Y+1	; 0x01
    4e46:	83 fb       	bst	r24, 3
    4e48:	88 27       	eor	r24, r24
    4e4a:	80 f9       	bld	r24, 0
    4e4c:	01 c0       	rjmp	.+2      	; 0x4e50 <_ZN6CCS81113dataAvailableEv+0x26>
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	0f 90       	pop	r0
    4e52:	df 91       	pop	r29
    4e54:	cf 91       	pop	r28
    4e56:	08 95       	ret

00004e58 <_ZN6CCS8118appValidEv>:
    4e58:	cf 93       	push	r28
    4e5a:	df 93       	push	r29
    4e5c:	1f 92       	push	r1
    4e5e:	cd b7       	in	r28, 0x3d	; 61
    4e60:	de b7       	in	r29, 0x3e	; 62
    4e62:	ae 01       	movw	r20, r28
    4e64:	4f 5f       	subi	r20, 0xFF	; 255
    4e66:	5f 4f       	sbci	r21, 0xFF	; 255
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <_ZN10CCS811Core12readRegisterEhPh>
    4e6e:	81 11       	cpse	r24, r1
    4e70:	04 c0       	rjmp	.+8      	; 0x4e7a <_ZN6CCS8118appValidEv+0x22>
    4e72:	89 81       	ldd	r24, Y+1	; 0x01
    4e74:	82 95       	swap	r24
    4e76:	81 70       	andi	r24, 0x01	; 1
    4e78:	01 c0       	rjmp	.+2      	; 0x4e7c <_ZN6CCS8118appValidEv+0x24>
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	0f 90       	pop	r0
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	08 95       	ret

00004e84 <_ZN6CCS81112setDriveModeEh>:
//Mode 1 = read every 1s
//Mode 2 = every 10s
//Mode 3 = every 60s
//Mode 4 = RAW mode
CCS811Core::CCS811_Status_e CCS811::setDriveMode(uint8_t mode)
{
    4e84:	ef 92       	push	r14
    4e86:	ff 92       	push	r15
    4e88:	1f 93       	push	r17
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
    4e8e:	1f 92       	push	r1
    4e90:	cd b7       	in	r28, 0x3d	; 61
    4e92:	de b7       	in	r29, 0x3e	; 62
    4e94:	7c 01       	movw	r14, r24
    4e96:	16 2f       	mov	r17, r22
	if (mode > 4)
		mode = 4; //sanitize input

	uint8_t value;
	CCS811Core::CCS811_Status_e returnError = readRegister(CSS811_MEAS_MODE, &value); //Read what's currently there
    4e98:	ae 01       	movw	r20, r28
    4e9a:	4f 5f       	subi	r20, 0xFF	; 255
    4e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e9e:	61 e0       	ldi	r22, 0x01	; 1
    4ea0:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <_ZN10CCS811Core12readRegisterEhPh>
	if (returnError != CCS811_Stat_SUCCESS)
    4ea4:	81 11       	cpse	r24, r1
    4ea6:	10 c0       	rjmp	.+32     	; 0x4ec8 <_ZN6CCS81112setDriveModeEh+0x44>
		return returnError;
	value &= ~(0b00000111 << 4); //Clear DRIVE_MODE bits
	value |= (mode << 4);		 //Mask in mode
    4ea8:	61 2f       	mov	r22, r17
    4eaa:	15 30       	cpi	r17, 0x05	; 5
    4eac:	08 f0       	brcs	.+2      	; 0x4eb0 <_ZN6CCS81112setDriveModeEh+0x2c>
    4eae:	64 e0       	ldi	r22, 0x04	; 4
    4eb0:	20 e1       	ldi	r18, 0x10	; 16
    4eb2:	62 9f       	mul	r22, r18
    4eb4:	c0 01       	movw	r24, r0
    4eb6:	11 24       	eor	r1, r1
    4eb8:	49 81       	ldd	r20, Y+1	; 0x01
    4eba:	4f 78       	andi	r20, 0x8F	; 143
    4ebc:	48 2b       	or	r20, r24
    4ebe:	49 83       	std	Y+1, r20	; 0x01
	returnError = writeRegister(CSS811_MEAS_MODE, value);
    4ec0:	61 e0       	ldi	r22, 0x01	; 1
    4ec2:	c7 01       	movw	r24, r14
    4ec4:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <_ZN10CCS811Core13writeRegisterEhh>
	return returnError;
}
    4ec8:	0f 90       	pop	r0
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	1f 91       	pop	r17
    4ed0:	ff 90       	pop	r15
    4ed2:	ef 90       	pop	r14
    4ed4:	08 95       	ret

00004ed6 <_ZN6CCS81115beginWithStatusER7TwoWire>:
//
//  This starts the lower level begin, then applies settings
//
//****************************************************************************//
CCS811Core::CCS811_Status_e CCS811::beginWithStatus(TwoWire &wirePort)
{
    4ed6:	0f 93       	push	r16
    4ed8:	1f 93       	push	r17
    4eda:	cf 93       	push	r28
    4edc:	df 93       	push	r29
    4ede:	00 d0       	rcall	.+0      	; 0x4ee0 <_ZN6CCS81115beginWithStatusER7TwoWire+0xa>
    4ee0:	00 d0       	rcall	.+0      	; 0x4ee2 <_ZN6CCS81115beginWithStatusER7TwoWire+0xc>
    4ee2:	1f 92       	push	r1
    4ee4:	cd b7       	in	r28, 0x3d	; 61
    4ee6:	de b7       	in	r29, 0x3e	; 62
    4ee8:	8c 01       	movw	r16, r24
	uint8_t data[4] = {0x11, 0xE5, 0x72, 0x8A};					   //Reset key
    4eea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__malloc_margin+0x2>
    4eee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__malloc_margin+0x3>
    4ef2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__malloc_margin+0x4>
    4ef6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__malloc_margin+0x5>
    4efa:	89 83       	std	Y+1, r24	; 0x01
    4efc:	9a 83       	std	Y+2, r25	; 0x02
    4efe:	ab 83       	std	Y+3, r26	; 0x03
    4f00:	bc 83       	std	Y+4, r27	; 0x04
	CCS811Core::CCS811_Status_e returnError = CCS811_Stat_SUCCESS; //Default error state

	//restart the core
	returnError = beginCore(wirePort);
    4f02:	c8 01       	movw	r24, r16
    4f04:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <_ZN10CCS811Core9beginCoreER7TwoWire>

	if (returnError != CCS811_Stat_SUCCESS)
    4f08:	81 11       	cpse	r24, r1
    4f0a:	3c c0       	rjmp	.+120    	; 0x4f84 <_ZN6CCS81115beginWithStatusER7TwoWire+0xae>
		return returnError;

	//Reset the device
	multiWriteRegister(CSS811_SW_RESET, data, 4);
    4f0c:	24 e0       	ldi	r18, 0x04	; 4
    4f0e:	ae 01       	movw	r20, r28
    4f10:	4f 5f       	subi	r20, 0xFF	; 255
    4f12:	5f 4f       	sbci	r21, 0xFF	; 255
    4f14:	6f ef       	ldi	r22, 0xFF	; 255
    4f16:	c8 01       	movw	r24, r16
    4f18:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN10CCS811Core18multiWriteRegisterEhPhh>

	//Tclk = 1/16MHz = 0x0000000625
	//0.001 s / tclk = 16000 counts
	volatile uint8_t temp = 0;
    4f1c:	1d 82       	std	Y+5, r1	; 0x05
    4f1e:	80 e8       	ldi	r24, 0x80	; 128
    4f20:	9e e3       	ldi	r25, 0x3E	; 62
		temp++;
	}
#elif __AVR__
	for (uint16_t i = 0; i < 16000; i++) //This waits > 1ms @ 16MHz clock
	{
		temp++;
    4f22:	2d 81       	ldd	r18, Y+5	; 0x05
    4f24:	2f 5f       	subi	r18, 0xFF	; 255
    4f26:	2d 83       	std	Y+5, r18	; 0x05
    4f28:	01 97       	sbiw	r24, 0x01	; 1
	for (uint32_t i = 0; i < 80000; i++) //This waits > 1ms @ 80MHz clock
	{
		temp++;
	}
#elif __AVR__
	for (uint16_t i = 0; i < 16000; i++) //This waits > 1ms @ 16MHz clock
    4f2a:	d9 f7       	brne	.-10     	; 0x4f22 <_ZN6CCS81115beginWithStatusER7TwoWire+0x4c>
	{
		temp++;
	}
#endif

	if (checkForStatusError() == true)
    4f2c:	c8 01       	movw	r24, r16
    4f2e:	0e 94 04 27 	call	0x4e08	; 0x4e08 <_ZN6CCS81119checkForStatusErrorEv>
    4f32:	88 23       	and	r24, r24
    4f34:	11 f0       	breq	.+4      	; 0x4f3a <_ZN6CCS81115beginWithStatusER7TwoWire+0x64>
		return CCS811_Stat_INTERNAL_ERROR;
    4f36:	83 e0       	ldi	r24, 0x03	; 3
    4f38:	25 c0       	rjmp	.+74     	; 0x4f84 <_ZN6CCS81115beginWithStatusER7TwoWire+0xae>

	if (appValid() == false)
    4f3a:	c8 01       	movw	r24, r16
    4f3c:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <_ZN6CCS8118appValidEv>
    4f40:	88 23       	and	r24, r24
    4f42:	c9 f3       	breq	.-14     	; 0x4f36 <_ZN6CCS81115beginWithStatusER7TwoWire+0x60>
		return CCS811_Stat_INTERNAL_ERROR;

	//Write 0 bytes to this register to start app
	_i2cPort->beginTransmission(I2CAddress);
    4f44:	d8 01       	movw	r26, r16
    4f46:	12 96       	adiw	r26, 0x02	; 2
    4f48:	6c 91       	ld	r22, X
    4f4a:	12 97       	sbiw	r26, 0x02	; 2
    4f4c:	8d 91       	ld	r24, X+
    4f4e:	9c 91       	ld	r25, X
    4f50:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire17beginTransmissionEh>
	_i2cPort->write(CSS811_APP_START);
    4f54:	f8 01       	movw	r30, r16
    4f56:	80 81       	ld	r24, Z
    4f58:	91 81       	ldd	r25, Z+1	; 0x01
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	ed 91       	ld	r30, X+
    4f5e:	fc 91       	ld	r31, X
    4f60:	01 90       	ld	r0, Z+
    4f62:	f0 81       	ld	r31, Z
    4f64:	e0 2d       	mov	r30, r0
    4f66:	64 ef       	ldi	r22, 0xF4	; 244
    4f68:	09 95       	icall
	if (_i2cPort->endTransmission() != 0)
    4f6a:	f8 01       	movw	r30, r16
    4f6c:	80 81       	ld	r24, Z
    4f6e:	91 81       	ldd	r25, Z+1	; 0x01
    4f70:	0e 94 2a 2c 	call	0x5854	; 0x5854 <_ZN7TwoWire15endTransmissionEv>
    4f74:	81 11       	cpse	r24, r1
    4f76:	05 c0       	rjmp	.+10     	; 0x4f82 <_ZN6CCS81115beginWithStatusER7TwoWire+0xac>
	// Seems to work with 50us delay, but make a bit longer to be sure.
#if defined(ARDUINO_ARCH_ESP32) || defined(ARDUINO_ARCH_ESP8266)
	delayMicroseconds(100);
#endif

	returnError = setDriveMode(1); //Read every second
    4f78:	61 e0       	ldi	r22, 0x01	; 1
    4f7a:	c8 01       	movw	r24, r16
    4f7c:	0e 94 42 27 	call	0x4e84	; 0x4e84 <_ZN6CCS81112setDriveModeEh>
    4f80:	01 c0       	rjmp	.+2      	; 0x4f84 <_ZN6CCS81115beginWithStatusER7TwoWire+0xae>
	//Write 0 bytes to this register to start app
	_i2cPort->beginTransmission(I2CAddress);
	_i2cPort->write(CSS811_APP_START);
	if (_i2cPort->endTransmission() != 0)
	{
		return CCS811_Stat_I2C_ERROR;
    4f82:	82 e0       	ldi	r24, 0x02	; 2
#endif

	returnError = setDriveMode(1); //Read every second

	return returnError;
}
    4f84:	0f 90       	pop	r0
    4f86:	0f 90       	pop	r0
    4f88:	0f 90       	pop	r0
    4f8a:	0f 90       	pop	r0
    4f8c:	0f 90       	pop	r0
    4f8e:	df 91       	pop	r29
    4f90:	cf 91       	pop	r28
    4f92:	1f 91       	pop	r17
    4f94:	0f 91       	pop	r16
    4f96:	08 95       	ret

00004f98 <_ZN6CCS8115beginER7TwoWire>:
//  This starts the lower level begin, then applies settings
//
//****************************************************************************//
bool CCS811::begin(TwoWire &wirePort)
{
	if (beginWithStatus(wirePort) == CCS811_Stat_SUCCESS)
    4f98:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN6CCS81115beginWithStatusER7TwoWire>
    4f9c:	91 e0       	ldi	r25, 0x01	; 1
    4f9e:	81 11       	cpse	r24, r1
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
		return true;
	return false;
}
    4fa2:	89 2f       	mov	r24, r25
    4fa4:	08 95       	ret

00004fa6 <_ZN6CCS81120setEnvironmentalDataEff>:
}

//Given a temp and humidity, write this data to the CSS811 for better compensation
//This function expects the humidity and temp to come in as floats
CCS811Core::CCS811_Status_e CCS811::setEnvironmentalData(float relativeHumidity, float temperature)
{
    4fa6:	4f 92       	push	r4
    4fa8:	5f 92       	push	r5
    4faa:	6f 92       	push	r6
    4fac:	7f 92       	push	r7
    4fae:	8f 92       	push	r8
    4fb0:	9f 92       	push	r9
    4fb2:	af 92       	push	r10
    4fb4:	bf 92       	push	r11
    4fb6:	ef 92       	push	r14
    4fb8:	ff 92       	push	r15
    4fba:	0f 93       	push	r16
    4fbc:	1f 93       	push	r17
    4fbe:	cf 93       	push	r28
    4fc0:	df 93       	push	r29
    4fc2:	00 d0       	rcall	.+0      	; 0x4fc4 <_ZN6CCS81120setEnvironmentalDataEff+0x1e>
    4fc4:	00 d0       	rcall	.+0      	; 0x4fc6 <_ZN6CCS81120setEnvironmentalDataEff+0x20>
    4fc6:	cd b7       	in	r28, 0x3d	; 61
    4fc8:	de b7       	in	r29, 0x3e	; 62
    4fca:	7c 01       	movw	r14, r24
    4fcc:	4a 01       	movw	r8, r20
    4fce:	5b 01       	movw	r10, r22
    4fd0:	28 01       	movw	r4, r16
    4fd2:	39 01       	movw	r6, r18
	//Check for invalid temperatures
	if ((temperature < -25) || (temperature > 50))
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	48 ec       	ldi	r20, 0xC8	; 200
    4fda:	51 ec       	ldi	r21, 0xC1	; 193
    4fdc:	c3 01       	movw	r24, r6
    4fde:	b2 01       	movw	r22, r4
    4fe0:	0e 94 9e 2c 	call	0x593c	; 0x593c <__cmpsf2>
    4fe4:	87 fd       	sbrc	r24, 7
    4fe6:	55 c0       	rjmp	.+170    	; 0x5092 <_ZN6CCS81120setEnvironmentalDataEff+0xec>
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	48 e4       	ldi	r20, 0x48	; 72
    4fee:	52 e4       	ldi	r21, 0x42	; 66
    4ff0:	c3 01       	movw	r24, r6
    4ff2:	b2 01       	movw	r22, r4
    4ff4:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <__gesf2>
    4ff8:	18 16       	cp	r1, r24
    4ffa:	0c f4       	brge	.+2      	; 0x4ffe <_ZN6CCS81120setEnvironmentalDataEff+0x58>
    4ffc:	4a c0       	rjmp	.+148    	; 0x5092 <_ZN6CCS81120setEnvironmentalDataEff+0xec>
		return CCS811_Stat_GENERIC_ERROR;

	//Check for invalid humidity
	if ((relativeHumidity < 0) || (relativeHumidity > 100))
    4ffe:	20 e0       	ldi	r18, 0x00	; 0
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	a9 01       	movw	r20, r18
    5004:	c5 01       	movw	r24, r10
    5006:	b4 01       	movw	r22, r8
    5008:	0e 94 9e 2c 	call	0x593c	; 0x593c <__cmpsf2>
    500c:	87 fd       	sbrc	r24, 7
    500e:	41 c0       	rjmp	.+130    	; 0x5092 <_ZN6CCS81120setEnvironmentalDataEff+0xec>
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	48 ec       	ldi	r20, 0xC8	; 200
    5016:	52 e4       	ldi	r21, 0x42	; 66
    5018:	c5 01       	movw	r24, r10
    501a:	b4 01       	movw	r22, r8
    501c:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <__gesf2>
    5020:	18 16       	cp	r1, r24
    5022:	bc f1       	brlt	.+110    	; 0x5092 <_ZN6CCS81120setEnvironmentalDataEff+0xec>
	//{
	//	envData[0] |= 1; //Set 9th bit of fractional to indicate 0.5%
	//}

	//Correct rounding. See issue 8: https://github.com/sparkfun/Qwiic_BME280_CCS811_Combo/issues/8
	envData[0] = (rH + 250) / 500;
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	4a e7       	ldi	r20, 0x7A	; 122
    502a:	54 e4       	ldi	r21, 0x44	; 68
    502c:	c5 01       	movw	r24, r10
    502e:	b4 01       	movw	r22, r8
    5030:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__mulsf3>
    5034:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__fixunssfsi>
    5038:	66 50       	subi	r22, 0x06	; 6
    503a:	7f 4f       	sbci	r23, 0xFF	; 255
    503c:	8f 4f       	sbci	r24, 0xFF	; 255
    503e:	9f 4f       	sbci	r25, 0xFF	; 255
    5040:	24 ef       	ldi	r18, 0xF4	; 244
    5042:	82 2e       	mov	r8, r18
    5044:	99 24       	eor	r9, r9
    5046:	93 94       	inc	r9
    5048:	a1 2c       	mov	r10, r1
    504a:	b1 2c       	mov	r11, r1
    504c:	a5 01       	movw	r20, r10
    504e:	94 01       	movw	r18, r8
    5050:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodsi4>
    5054:	29 83       	std	Y+1, r18	; 0x01
	envData[1] = 0; //CCS811 only supports increments of 0.5 so bits 7-0 will always be zero
    5056:	1a 82       	std	Y+2, r1	; 0x02
	//{
	//	envData[2] |= 1;  //Set 9th bit of fractional to indicate 0.5C
	//}

	//Correct rounding
	envData[2] = (temp + 250) / 500;
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	4a e7       	ldi	r20, 0x7A	; 122
    505e:	54 e4       	ldi	r21, 0x44	; 68
    5060:	c3 01       	movw	r24, r6
    5062:	b2 01       	movw	r22, r4
    5064:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__mulsf3>
    5068:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__fixunssfsi>
    506c:	6e 55       	subi	r22, 0x5E	; 94
    506e:	7d 49       	sbci	r23, 0x9D	; 157
    5070:	8f 4f       	sbci	r24, 0xFF	; 255
    5072:	9f 4f       	sbci	r25, 0xFF	; 255
    5074:	a5 01       	movw	r20, r10
    5076:	94 01       	movw	r18, r8
    5078:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodsi4>
    507c:	2b 83       	std	Y+3, r18	; 0x03
	envData[3] = 0;
    507e:	1c 82       	std	Y+4, r1	; 0x04

	CCS811Core::CCS811_Status_e returnError = multiWriteRegister(CSS811_ENV_DATA, envData, 4);
    5080:	24 e0       	ldi	r18, 0x04	; 4
    5082:	ae 01       	movw	r20, r28
    5084:	4f 5f       	subi	r20, 0xFF	; 255
    5086:	5f 4f       	sbci	r21, 0xFF	; 255
    5088:	65 e0       	ldi	r22, 0x05	; 5
    508a:	c7 01       	movw	r24, r14
    508c:	0e 94 81 26 	call	0x4d02	; 0x4d02 <_ZN10CCS811Core18multiWriteRegisterEhPhh>
	return returnError;
    5090:	01 c0       	rjmp	.+2      	; 0x5094 <_ZN6CCS81120setEnvironmentalDataEff+0xee>
//This function expects the humidity and temp to come in as floats
CCS811Core::CCS811_Status_e CCS811::setEnvironmentalData(float relativeHumidity, float temperature)
{
	//Check for invalid temperatures
	if ((temperature < -25) || (temperature > 50))
		return CCS811_Stat_GENERIC_ERROR;
    5092:	85 e0       	ldi	r24, 0x05	; 5
	envData[2] = (temp + 250) / 500;
	envData[3] = 0;

	CCS811Core::CCS811_Status_e returnError = multiWriteRegister(CSS811_ENV_DATA, envData, 4);
	return returnError;
}
    5094:	0f 90       	pop	r0
    5096:	0f 90       	pop	r0
    5098:	0f 90       	pop	r0
    509a:	0f 90       	pop	r0
    509c:	df 91       	pop	r29
    509e:	cf 91       	pop	r28
    50a0:	1f 91       	pop	r17
    50a2:	0f 91       	pop	r16
    50a4:	ff 90       	pop	r15
    50a6:	ef 90       	pop	r14
    50a8:	bf 90       	pop	r11
    50aa:	af 90       	pop	r10
    50ac:	9f 90       	pop	r9
    50ae:	8f 90       	pop	r8
    50b0:	7f 90       	pop	r7
    50b2:	6f 90       	pop	r6
    50b4:	5f 90       	pop	r5
    50b6:	4f 90       	pop	r4
    50b8:	08 95       	ret

000050ba <_ZN6CCS8117getTVOCEv>:

uint16_t CCS811::getTVOC(void)
{
	return tVOC;
}
    50ba:	fc 01       	movw	r30, r24
    50bc:	83 85       	ldd	r24, Z+11	; 0x0b
    50be:	94 85       	ldd	r25, Z+12	; 0x0c
    50c0:	08 95       	ret

000050c2 <_ZN6CCS8116getCO2Ev>:

uint16_t CCS811::getCO2(void)
{
	return CO2;
}
    50c2:	fc 01       	movw	r30, r24
    50c4:	85 85       	ldd	r24, Z+13	; 0x0d
    50c6:	96 85       	ldd	r25, Z+14	; 0x0e
    50c8:	08 95       	ret

000050ca <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    50ca:	cf 93       	push	r28
  uint8_t sreg = SREG;
    50cc:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    50ce:	f8 94       	cli
  if (!initialized) {
    50d0:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <_ZN8SPIClass11initializedE>
    50d4:	81 11       	cpse	r24, r1
    50d6:	27 c0       	rjmp	.+78     	; 0x5126 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    50d8:	ed ec       	ldi	r30, 0xCD	; 205
    50da:	f4 e0       	ldi	r31, 0x04	; 4
    50dc:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    50de:	e9 eb       	ldi	r30, 0xB9	; 185
    50e0:	f4 e0       	ldi	r31, 0x04	; 4
    50e2:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    50e4:	e8 2f       	mov	r30, r24
    50e6:	f0 e0       	ldi	r31, 0x00	; 0
    50e8:	ee 0f       	add	r30, r30
    50ea:	ff 1f       	adc	r31, r31
    50ec:	e5 51       	subi	r30, 0x15	; 21
    50ee:	fb 4f       	sbci	r31, 0xFB	; 251
    50f0:	a5 91       	lpm	r26, Z+
    50f2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    50f4:	ec 91       	ld	r30, X
    50f6:	e9 23       	and	r30, r25
    50f8:	21 f4       	brne	.+8      	; 0x5102 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    50fa:	61 e0       	ldi	r22, 0x01	; 1
    50fc:	8a e0       	ldi	r24, 0x0A	; 10
    50fe:	0e 94 a8 32 	call	0x6550	; 0x6550 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5102:	61 e0       	ldi	r22, 0x01	; 1
    5104:	8a e0       	ldi	r24, 0x0A	; 10
    5106:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    510a:	8c b5       	in	r24, 0x2c	; 44
    510c:	80 61       	ori	r24, 0x10	; 16
    510e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5110:	8c b5       	in	r24, 0x2c	; 44
    5112:	80 64       	ori	r24, 0x40	; 64
    5114:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	8d e0       	ldi	r24, 0x0D	; 13
    511a:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
    pinMode(MOSI, OUTPUT);
    511e:	61 e0       	ldi	r22, 0x01	; 1
    5120:	8b e0       	ldi	r24, 0x0B	; 11
    5122:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <pinMode>
  }
  initialized++; // reference count
    5126:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <_ZN8SPIClass11initializedE>
    512a:	8f 5f       	subi	r24, 0xFF	; 255
    512c:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5130:	cf bf       	out	0x3f, r28	; 63
}
    5132:	cf 91       	pop	r28
    5134:	08 95       	ret

00005136 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5136:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <twi_sendStop>
    5140:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_inRepStart>
    5144:	61 e0       	ldi	r22, 0x01	; 1
    5146:	82 e1       	ldi	r24, 0x12	; 18
    5148:	0e 94 a8 32 	call	0x6550	; 0x6550 <digitalWrite>
    514c:	61 e0       	ldi	r22, 0x01	; 1
    514e:	83 e1       	ldi	r24, 0x13	; 19
    5150:	0e 94 a8 32 	call	0x6550	; 0x6550 <digitalWrite>
    5154:	e9 eb       	ldi	r30, 0xB9	; 185
    5156:	f0 e0       	ldi	r31, 0x00	; 0
    5158:	80 81       	ld	r24, Z
    515a:	8e 7f       	andi	r24, 0xFE	; 254
    515c:	80 83       	st	Z, r24
    515e:	80 81       	ld	r24, Z
    5160:	8d 7f       	andi	r24, 0xFD	; 253
    5162:	80 83       	st	Z, r24
    5164:	80 e2       	ldi	r24, 0x20	; 32
    5166:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    516a:	85 e4       	ldi	r24, 0x45	; 69
    516c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    5170:	08 95       	ret

00005172 <twi_readFrom>:
    5172:	41 32       	cpi	r20, 0x21	; 33
    5174:	08 f0       	brcs	.+2      	; 0x5178 <twi_readFrom+0x6>
    5176:	43 c0       	rjmp	.+134    	; 0x51fe <twi_readFrom+0x8c>
    5178:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <twi_state>
    517c:	91 11       	cpse	r25, r1
    517e:	fc cf       	rjmp	.-8      	; 0x5178 <twi_readFrom+0x6>
    5180:	91 e0       	ldi	r25, 0x01	; 1
    5182:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <twi_state>
    5186:	20 93 89 03 	sts	0x0389, r18	; 0x800389 <twi_sendStop>
    518a:	2f ef       	ldi	r18, 0xFF	; 255
    518c:	20 93 1e 03 	sts	0x031E, r18	; 0x80031e <twi_error>
    5190:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <twi_masterBufferIndex>
    5194:	24 0f       	add	r18, r20
    5196:	20 93 62 03 	sts	0x0362, r18	; 0x800362 <twi_masterBufferLength>
    519a:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <twi_slarw>
    519e:	90 91 8a 03 	lds	r25, 0x038A	; 0x80038a <twi_slarw>
    51a2:	88 0f       	add	r24, r24
    51a4:	89 2b       	or	r24, r25
    51a6:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_slarw>
    51aa:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_inRepStart>
    51ae:	81 30       	cpi	r24, 0x01	; 1
    51b0:	61 f4       	brne	.+24     	; 0x51ca <twi_readFrom+0x58>
    51b2:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_inRepStart>
    51b6:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <twi_slarw>
    51ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    51be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    51c2:	83 fd       	sbrc	r24, 3
    51c4:	f8 cf       	rjmp	.-16     	; 0x51b6 <twi_readFrom+0x44>
    51c6:	85 ec       	ldi	r24, 0xC5	; 197
    51c8:	01 c0       	rjmp	.+2      	; 0x51cc <twi_readFrom+0x5a>
    51ca:	85 ee       	ldi	r24, 0xE5	; 229
    51cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    51d0:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_state>
    51d4:	81 30       	cpi	r24, 0x01	; 1
    51d6:	e1 f3       	breq	.-8      	; 0x51d0 <twi_readFrom+0x5e>
    51d8:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <twi_masterBufferIndex>
    51dc:	84 17       	cp	r24, r20
    51de:	10 f4       	brcc	.+4      	; 0x51e4 <twi_readFrom+0x72>
    51e0:	40 91 63 03 	lds	r20, 0x0363	; 0x800363 <twi_masterBufferIndex>
    51e4:	a4 e6       	ldi	r26, 0x64	; 100
    51e6:	b3 e0       	ldi	r27, 0x03	; 3
    51e8:	96 2f       	mov	r25, r22
    51ea:	fb 01       	movw	r30, r22
    51ec:	8e 2f       	mov	r24, r30
    51ee:	89 1b       	sub	r24, r25
    51f0:	84 17       	cp	r24, r20
    51f2:	18 f4       	brcc	.+6      	; 0x51fa <twi_readFrom+0x88>
    51f4:	8d 91       	ld	r24, X+
    51f6:	81 93       	st	Z+, r24
    51f8:	f9 cf       	rjmp	.-14     	; 0x51ec <twi_readFrom+0x7a>
    51fa:	84 2f       	mov	r24, r20
    51fc:	08 95       	ret
    51fe:	80 e0       	ldi	r24, 0x00	; 0
    5200:	08 95       	ret

00005202 <twi_writeTo>:
    5202:	0f 93       	push	r16
    5204:	41 32       	cpi	r20, 0x21	; 33
    5206:	08 f0       	brcs	.+2      	; 0x520a <twi_writeTo+0x8>
    5208:	4a c0       	rjmp	.+148    	; 0x529e <twi_writeTo+0x9c>
    520a:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <twi_state>
    520e:	91 11       	cpse	r25, r1
    5210:	fc cf       	rjmp	.-8      	; 0x520a <twi_writeTo+0x8>
    5212:	32 e0       	ldi	r19, 0x02	; 2
    5214:	30 93 8b 03 	sts	0x038B, r19	; 0x80038b <twi_state>
    5218:	00 93 89 03 	sts	0x0389, r16	; 0x800389 <twi_sendStop>
    521c:	3f ef       	ldi	r19, 0xFF	; 255
    521e:	30 93 1e 03 	sts	0x031E, r19	; 0x80031e <twi_error>
    5222:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <twi_masterBufferIndex>
    5226:	40 93 62 03 	sts	0x0362, r20	; 0x800362 <twi_masterBufferLength>
    522a:	56 2f       	mov	r21, r22
    522c:	a4 e6       	ldi	r26, 0x64	; 100
    522e:	b3 e0       	ldi	r27, 0x03	; 3
    5230:	fb 01       	movw	r30, r22
    5232:	3e 2f       	mov	r19, r30
    5234:	35 1b       	sub	r19, r21
    5236:	34 17       	cp	r19, r20
    5238:	18 f4       	brcc	.+6      	; 0x5240 <twi_writeTo+0x3e>
    523a:	31 91       	ld	r19, Z+
    523c:	3d 93       	st	X+, r19
    523e:	f9 cf       	rjmp	.-14     	; 0x5232 <twi_writeTo+0x30>
    5240:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <twi_slarw>
    5244:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <twi_slarw>
    5248:	88 0f       	add	r24, r24
    524a:	83 2b       	or	r24, r19
    524c:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_slarw>
    5250:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <twi_inRepStart>
    5254:	81 30       	cpi	r24, 0x01	; 1
    5256:	61 f4       	brne	.+24     	; 0x5270 <twi_writeTo+0x6e>
    5258:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <twi_inRepStart>
    525c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <twi_slarw>
    5260:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    5264:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    5268:	83 fd       	sbrc	r24, 3
    526a:	f8 cf       	rjmp	.-16     	; 0x525c <twi_writeTo+0x5a>
    526c:	85 ec       	ldi	r24, 0xC5	; 197
    526e:	01 c0       	rjmp	.+2      	; 0x5272 <twi_writeTo+0x70>
    5270:	85 ee       	ldi	r24, 0xE5	; 229
    5272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    5276:	22 23       	and	r18, r18
    5278:	21 f0       	breq	.+8      	; 0x5282 <twi_writeTo+0x80>
    527a:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <twi_state>
    527e:	82 30       	cpi	r24, 0x02	; 2
    5280:	d1 f3       	breq	.-12     	; 0x5276 <twi_writeTo+0x74>
    5282:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <twi_error>
    5286:	8f 3f       	cpi	r24, 0xFF	; 255
    5288:	79 f0       	breq	.+30     	; 0x52a8 <twi_writeTo+0xa6>
    528a:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <twi_error>
    528e:	80 32       	cpi	r24, 0x20	; 32
    5290:	41 f0       	breq	.+16     	; 0x52a2 <twi_writeTo+0xa0>
    5292:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <twi_error>
    5296:	80 33       	cpi	r24, 0x30	; 48
    5298:	31 f0       	breq	.+12     	; 0x52a6 <twi_writeTo+0xa4>
    529a:	94 e0       	ldi	r25, 0x04	; 4
    529c:	05 c0       	rjmp	.+10     	; 0x52a8 <twi_writeTo+0xa6>
    529e:	91 e0       	ldi	r25, 0x01	; 1
    52a0:	03 c0       	rjmp	.+6      	; 0x52a8 <twi_writeTo+0xa6>
    52a2:	92 e0       	ldi	r25, 0x02	; 2
    52a4:	01 c0       	rjmp	.+2      	; 0x52a8 <twi_writeTo+0xa6>
    52a6:	93 e0       	ldi	r25, 0x03	; 3
    52a8:	89 2f       	mov	r24, r25
    52aa:	0f 91       	pop	r16
    52ac:	08 95       	ret

000052ae <twi_transmit>:
    52ae:	40 91 40 03 	lds	r20, 0x0340	; 0x800340 <twi_txBufferLength>
    52b2:	26 2f       	mov	r18, r22
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	24 0f       	add	r18, r20
    52b8:	31 1d       	adc	r19, r1
    52ba:	21 32       	cpi	r18, 0x21	; 33
    52bc:	31 05       	cpc	r19, r1
    52be:	dc f4       	brge	.+54     	; 0x52f6 <twi_transmit+0x48>
    52c0:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <twi_state>
    52c4:	24 30       	cpi	r18, 0x04	; 4
    52c6:	c9 f4       	brne	.+50     	; 0x52fa <twi_transmit+0x4c>
    52c8:	fc 01       	movw	r30, r24
    52ca:	80 e0       	ldi	r24, 0x00	; 0
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	86 17       	cp	r24, r22
    52d0:	58 f4       	brcc	.+22     	; 0x52e8 <twi_transmit+0x3a>
    52d2:	30 91 40 03 	lds	r19, 0x0340	; 0x800340 <twi_txBufferLength>
    52d6:	21 91       	ld	r18, Z+
    52d8:	dc 01       	movw	r26, r24
    52da:	ae 5b       	subi	r26, 0xBE	; 190
    52dc:	bc 4f       	sbci	r27, 0xFC	; 252
    52de:	a3 0f       	add	r26, r19
    52e0:	b1 1d       	adc	r27, r1
    52e2:	2c 93       	st	X, r18
    52e4:	01 96       	adiw	r24, 0x01	; 1
    52e6:	f3 cf       	rjmp	.-26     	; 0x52ce <twi_transmit+0x20>
    52e8:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_txBufferLength>
    52ec:	68 0f       	add	r22, r24
    52ee:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <twi_txBufferLength>
    52f2:	80 e0       	ldi	r24, 0x00	; 0
    52f4:	08 95       	ret
    52f6:	81 e0       	ldi	r24, 0x01	; 1
    52f8:	08 95       	ret
    52fa:	82 e0       	ldi	r24, 0x02	; 2
    52fc:	08 95       	ret

000052fe <twi_attachSlaveRxEvent>:
    52fe:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <twi_onSlaveReceive+0x1>
    5302:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <twi_onSlaveReceive>
    5306:	08 95       	ret

00005308 <twi_attachSlaveTxEvent>:
    5308:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <twi_onSlaveTransmit+0x1>
    530c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <twi_onSlaveTransmit>
    5310:	08 95       	ret

00005312 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5312:	85 ed       	ldi	r24, 0xD5	; 213
    5314:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5318:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    531c:	84 fd       	sbrc	r24, 4
    531e:	fc cf       	rjmp	.-8      	; 0x5318 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5320:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
    5324:	08 95       	ret

00005326 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5326:	85 ec       	ldi	r24, 0xC5	; 197
    5328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    532c:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
    5330:	08 95       	ret

00005332 <__vector_24>:
}

ISR(TWI_vect)
{
    5332:	1f 92       	push	r1
    5334:	0f 92       	push	r0
    5336:	0f b6       	in	r0, 0x3f	; 63
    5338:	0f 92       	push	r0
    533a:	11 24       	eor	r1, r1
    533c:	2f 93       	push	r18
    533e:	3f 93       	push	r19
    5340:	4f 93       	push	r20
    5342:	5f 93       	push	r21
    5344:	6f 93       	push	r22
    5346:	7f 93       	push	r23
    5348:	8f 93       	push	r24
    534a:	9f 93       	push	r25
    534c:	af 93       	push	r26
    534e:	bf 93       	push	r27
    5350:	ef 93       	push	r30
    5352:	ff 93       	push	r31
  switch(TW_STATUS){
    5354:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    5358:	88 7f       	andi	r24, 0xF8	; 248
    535a:	80 36       	cpi	r24, 0x60	; 96
    535c:	09 f4       	brne	.+2      	; 0x5360 <__vector_24+0x2e>
    535e:	9e c0       	rjmp	.+316    	; 0x549c <__vector_24+0x16a>
    5360:	78 f5       	brcc	.+94     	; 0x53c0 <__vector_24+0x8e>
    5362:	88 32       	cpi	r24, 0x28	; 40
    5364:	09 f4       	brne	.+2      	; 0x5368 <__vector_24+0x36>
    5366:	5d c0       	rjmp	.+186    	; 0x5422 <__vector_24+0xf0>
    5368:	90 f4       	brcc	.+36     	; 0x538e <__vector_24+0x5c>
    536a:	80 31       	cpi	r24, 0x10	; 16
    536c:	09 f4       	brne	.+2      	; 0x5370 <__vector_24+0x3e>
    536e:	56 c0       	rjmp	.+172    	; 0x541c <__vector_24+0xea>
    5370:	38 f4       	brcc	.+14     	; 0x5380 <__vector_24+0x4e>
    5372:	88 23       	and	r24, r24
    5374:	09 f4       	brne	.+2      	; 0x5378 <__vector_24+0x46>
    5376:	f5 c0       	rjmp	.+490    	; 0x5562 <__vector_24+0x230>
    5378:	88 30       	cpi	r24, 0x08	; 8
    537a:	09 f4       	brne	.+2      	; 0x537e <__vector_24+0x4c>
    537c:	4f c0       	rjmp	.+158    	; 0x541c <__vector_24+0xea>
    537e:	f5 c0       	rjmp	.+490    	; 0x556a <__vector_24+0x238>
    5380:	88 31       	cpi	r24, 0x18	; 24
    5382:	09 f4       	brne	.+2      	; 0x5386 <__vector_24+0x54>
    5384:	4e c0       	rjmp	.+156    	; 0x5422 <__vector_24+0xf0>
    5386:	80 32       	cpi	r24, 0x20	; 32
    5388:	09 f4       	brne	.+2      	; 0x538c <__vector_24+0x5a>
    538a:	5f c0       	rjmp	.+190    	; 0x544a <__vector_24+0x118>
    538c:	ee c0       	rjmp	.+476    	; 0x556a <__vector_24+0x238>
    538e:	80 34       	cpi	r24, 0x40	; 64
    5390:	09 f4       	brne	.+2      	; 0x5394 <__vector_24+0x62>
    5392:	6a c0       	rjmp	.+212    	; 0x5468 <__vector_24+0x136>
    5394:	58 f4       	brcc	.+22     	; 0x53ac <__vector_24+0x7a>
    5396:	80 33       	cpi	r24, 0x30	; 48
    5398:	09 f4       	brne	.+2      	; 0x539c <__vector_24+0x6a>
    539a:	57 c0       	rjmp	.+174    	; 0x544a <__vector_24+0x118>
    539c:	88 33       	cpi	r24, 0x38	; 56
    539e:	09 f0       	breq	.+2      	; 0x53a2 <__vector_24+0x70>
    53a0:	e4 c0       	rjmp	.+456    	; 0x556a <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    53a2:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <twi_error>
      twi_releaseBus();
    53a6:	0e 94 93 29 	call	0x5326	; 0x5326 <twi_releaseBus>
      break;
    53aa:	df c0       	rjmp	.+446    	; 0x556a <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    53ac:	80 35       	cpi	r24, 0x50	; 80
    53ae:	09 f4       	brne	.+2      	; 0x53b2 <__vector_24+0x80>
    53b0:	4f c0       	rjmp	.+158    	; 0x5450 <__vector_24+0x11e>
    53b2:	88 35       	cpi	r24, 0x58	; 88
    53b4:	09 f4       	brne	.+2      	; 0x53b8 <__vector_24+0x86>
    53b6:	5d c0       	rjmp	.+186    	; 0x5472 <__vector_24+0x140>
    53b8:	88 34       	cpi	r24, 0x48	; 72
    53ba:	09 f0       	breq	.+2      	; 0x53be <__vector_24+0x8c>
    53bc:	d6 c0       	rjmp	.+428    	; 0x556a <__vector_24+0x238>
    53be:	d3 c0       	rjmp	.+422    	; 0x5566 <__vector_24+0x234>
    53c0:	88 39       	cpi	r24, 0x98	; 152
    53c2:	09 f4       	brne	.+2      	; 0x53c6 <__vector_24+0x94>
    53c4:	c4 c0       	rjmp	.+392    	; 0x554e <__vector_24+0x21c>
    53c6:	a8 f4       	brcc	.+42     	; 0x53f2 <__vector_24+0xc0>
    53c8:	88 37       	cpi	r24, 0x78	; 120
    53ca:	09 f4       	brne	.+2      	; 0x53ce <__vector_24+0x9c>
    53cc:	67 c0       	rjmp	.+206    	; 0x549c <__vector_24+0x16a>
    53ce:	38 f4       	brcc	.+14     	; 0x53de <__vector_24+0xac>
    53d0:	88 36       	cpi	r24, 0x68	; 104
    53d2:	09 f4       	brne	.+2      	; 0x53d6 <__vector_24+0xa4>
    53d4:	63 c0       	rjmp	.+198    	; 0x549c <__vector_24+0x16a>
    53d6:	80 37       	cpi	r24, 0x70	; 112
    53d8:	09 f4       	brne	.+2      	; 0x53dc <__vector_24+0xaa>
    53da:	60 c0       	rjmp	.+192    	; 0x549c <__vector_24+0x16a>
    53dc:	c6 c0       	rjmp	.+396    	; 0x556a <__vector_24+0x238>
    53de:	88 38       	cpi	r24, 0x88	; 136
    53e0:	09 f4       	brne	.+2      	; 0x53e4 <__vector_24+0xb2>
    53e2:	b5 c0       	rjmp	.+362    	; 0x554e <__vector_24+0x21c>
    53e4:	80 39       	cpi	r24, 0x90	; 144
    53e6:	09 f4       	brne	.+2      	; 0x53ea <__vector_24+0xb8>
    53e8:	5f c0       	rjmp	.+190    	; 0x54a8 <__vector_24+0x176>
    53ea:	80 38       	cpi	r24, 0x80	; 128
    53ec:	09 f0       	breq	.+2      	; 0x53f0 <__vector_24+0xbe>
    53ee:	bd c0       	rjmp	.+378    	; 0x556a <__vector_24+0x238>
    53f0:	5b c0       	rjmp	.+182    	; 0x54a8 <__vector_24+0x176>
    53f2:	80 3b       	cpi	r24, 0xB0	; 176
    53f4:	09 f4       	brne	.+2      	; 0x53f8 <__vector_24+0xc6>
    53f6:	83 c0       	rjmp	.+262    	; 0x54fe <__vector_24+0x1cc>
    53f8:	38 f4       	brcc	.+14     	; 0x5408 <__vector_24+0xd6>
    53fa:	80 3a       	cpi	r24, 0xA0	; 160
    53fc:	09 f4       	brne	.+2      	; 0x5400 <__vector_24+0xce>
    53fe:	66 c0       	rjmp	.+204    	; 0x54cc <__vector_24+0x19a>
    5400:	88 3a       	cpi	r24, 0xA8	; 168
    5402:	09 f4       	brne	.+2      	; 0x5406 <__vector_24+0xd4>
    5404:	7c c0       	rjmp	.+248    	; 0x54fe <__vector_24+0x1cc>
    5406:	b1 c0       	rjmp	.+354    	; 0x556a <__vector_24+0x238>
    5408:	80 3c       	cpi	r24, 0xC0	; 192
    540a:	09 f4       	brne	.+2      	; 0x540e <__vector_24+0xdc>
    540c:	a4 c0       	rjmp	.+328    	; 0x5556 <__vector_24+0x224>
    540e:	88 3c       	cpi	r24, 0xC8	; 200
    5410:	09 f4       	brne	.+2      	; 0x5414 <__vector_24+0xe2>
    5412:	a1 c0       	rjmp	.+322    	; 0x5556 <__vector_24+0x224>
    5414:	88 3b       	cpi	r24, 0xB8	; 184
    5416:	09 f4       	brne	.+2      	; 0x541a <__vector_24+0xe8>
    5418:	87 c0       	rjmp	.+270    	; 0x5528 <__vector_24+0x1f6>
    541a:	a7 c0       	rjmp	.+334    	; 0x556a <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    541c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <twi_slarw>
    5420:	10 c0       	rjmp	.+32     	; 0x5442 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5422:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <twi_masterBufferIndex>
    5426:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_masterBufferLength>
    542a:	98 17       	cp	r25, r24
    542c:	70 f5       	brcc	.+92     	; 0x548a <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    542e:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <twi_masterBufferIndex>
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	8e 0f       	add	r24, r30
    5436:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_masterBufferIndex>
    543a:	f0 e0       	ldi	r31, 0x00	; 0
    543c:	ec 59       	subi	r30, 0x9C	; 156
    543e:	fc 4f       	sbci	r31, 0xFC	; 252
    5440:	80 81       	ld	r24, Z
    5442:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5446:	85 ec       	ldi	r24, 0xC5	; 197
    5448:	83 c0       	rjmp	.+262    	; 0x5550 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    544a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <twi_error>
    544e:	8b c0       	rjmp	.+278    	; 0x5566 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5450:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <twi_masterBufferIndex>
    5454:	81 e0       	ldi	r24, 0x01	; 1
    5456:	8e 0f       	add	r24, r30
    5458:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_masterBufferIndex>
    545c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    5460:	f0 e0       	ldi	r31, 0x00	; 0
    5462:	ec 59       	subi	r30, 0x9C	; 156
    5464:	fc 4f       	sbci	r31, 0xFC	; 252
    5466:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5468:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <twi_masterBufferIndex>
    546c:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_masterBufferLength>
    5470:	6b c0       	rjmp	.+214    	; 0x5548 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5472:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <twi_masterBufferIndex>
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	8e 0f       	add	r24, r30
    547a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_masterBufferIndex>
    547e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    5482:	f0 e0       	ldi	r31, 0x00	; 0
    5484:	ec 59       	subi	r30, 0x9C	; 156
    5486:	fc 4f       	sbci	r31, 0xFC	; 252
    5488:	80 83       	st	Z, r24
	if (twi_sendStop)
    548a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <twi_sendStop>
    548e:	81 11       	cpse	r24, r1
    5490:	6a c0       	rjmp	.+212    	; 0x5566 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5498:	84 ea       	ldi	r24, 0xA4	; 164
    549a:	5e c0       	rjmp	.+188    	; 0x5558 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    549c:	83 e0       	ldi	r24, 0x03	; 3
    549e:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    54a2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <twi_rxBufferIndex>
    54a6:	cf cf       	rjmp	.-98     	; 0x5446 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    54a8:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_rxBufferIndex>
    54ac:	80 32       	cpi	r24, 0x20	; 32
    54ae:	08 f0       	brcs	.+2      	; 0x54b2 <__vector_24+0x180>
    54b0:	4e c0       	rjmp	.+156    	; 0x554e <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    54b2:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <twi_rxBufferIndex>
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	8e 0f       	add	r24, r30
    54ba:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <twi_rxBufferIndex>
    54be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    54c2:	f0 e0       	ldi	r31, 0x00	; 0
    54c4:	e0 5e       	subi	r30, 0xE0	; 224
    54c6:	fc 4f       	sbci	r31, 0xFC	; 252
    54c8:	80 83       	st	Z, r24
    54ca:	bd cf       	rjmp	.-134    	; 0x5446 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    54cc:	0e 94 93 29 	call	0x5326	; 0x5326 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    54d0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <twi_rxBufferIndex>
    54d4:	80 32       	cpi	r24, 0x20	; 32
    54d6:	30 f4       	brcc	.+12     	; 0x54e4 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    54d8:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <twi_rxBufferIndex>
    54dc:	f0 e0       	ldi	r31, 0x00	; 0
    54de:	e0 5e       	subi	r30, 0xE0	; 224
    54e0:	fc 4f       	sbci	r31, 0xFC	; 252
    54e2:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    54e4:	60 91 1f 03 	lds	r22, 0x031F	; 0x80031f <twi_rxBufferIndex>
    54e8:	70 e0       	ldi	r23, 0x00	; 0
    54ea:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <twi_onSlaveReceive>
    54ee:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <twi_onSlaveReceive+0x1>
    54f2:	80 e2       	ldi	r24, 0x20	; 32
    54f4:	93 e0       	ldi	r25, 0x03	; 3
    54f6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    54f8:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <twi_rxBufferIndex>
      break;
    54fc:	36 c0       	rjmp	.+108    	; 0x556a <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    54fe:	84 e0       	ldi	r24, 0x04	; 4
    5500:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5504:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5508:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    550c:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <twi_onSlaveTransmit>
    5510:	f0 91 87 03 	lds	r31, 0x0387	; 0x800387 <twi_onSlaveTransmit+0x1>
    5514:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5516:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_txBufferLength>
    551a:	81 11       	cpse	r24, r1
    551c:	05 c0       	rjmp	.+10     	; 0x5528 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5524:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5528:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <twi_txBufferIndex>
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	8e 0f       	add	r24, r30
    5530:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <twi_txBufferIndex>
    5534:	f0 e0       	ldi	r31, 0x00	; 0
    5536:	ee 5b       	subi	r30, 0xBE	; 190
    5538:	fc 4f       	sbci	r31, 0xFC	; 252
    553a:	80 81       	ld	r24, Z
    553c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5540:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <twi_txBufferIndex>
    5544:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_txBufferLength>
    5548:	98 17       	cp	r25, r24
    554a:	08 f4       	brcc	.+2      	; 0x554e <__vector_24+0x21c>
    554c:	7c cf       	rjmp	.-264    	; 0x5446 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    554e:	85 e8       	ldi	r24, 0x85	; 133
    5550:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    5554:	0a c0       	rjmp	.+20     	; 0x556a <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5556:	85 ec       	ldi	r24, 0xC5	; 197
    5558:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    555c:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <twi_state>
      break;
    5560:	04 c0       	rjmp	.+8      	; 0x556a <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5562:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <twi_error>
      twi_stop();
    5566:	0e 94 89 29 	call	0x5312	; 0x5312 <twi_stop>
      break;
  }
}
    556a:	ff 91       	pop	r31
    556c:	ef 91       	pop	r30
    556e:	bf 91       	pop	r27
    5570:	af 91       	pop	r26
    5572:	9f 91       	pop	r25
    5574:	8f 91       	pop	r24
    5576:	7f 91       	pop	r23
    5578:	6f 91       	pop	r22
    557a:	5f 91       	pop	r21
    557c:	4f 91       	pop	r20
    557e:	3f 91       	pop	r19
    5580:	2f 91       	pop	r18
    5582:	0f 90       	pop	r0
    5584:	0f be       	out	0x3f, r0	; 63
    5586:	0f 90       	pop	r0
    5588:	1f 90       	pop	r1
    558a:	18 95       	reti

0000558c <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    558c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZN7TwoWire14rxBufferLengthE>
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	20 91 c1 03 	lds	r18, 0x03C1	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    5596:	82 1b       	sub	r24, r18
    5598:	91 09       	sbc	r25, r1
    559a:	08 95       	ret

0000559c <_ZN7TwoWire4readEv>:
    559c:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    55a0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZN7TwoWire14rxBufferLengthE>
    55a4:	98 17       	cp	r25, r24
    55a6:	50 f4       	brcc	.+20     	; 0x55bc <_ZN7TwoWire4readEv+0x20>
    55a8:	e9 2f       	mov	r30, r25
    55aa:	f0 e0       	ldi	r31, 0x00	; 0
    55ac:	ee 53       	subi	r30, 0x3E	; 62
    55ae:	fc 4f       	sbci	r31, 0xFC	; 252
    55b0:	20 81       	ld	r18, Z
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	9f 5f       	subi	r25, 0xFF	; 255
    55b6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    55ba:	02 c0       	rjmp	.+4      	; 0x55c0 <_ZN7TwoWire4readEv+0x24>
    55bc:	2f ef       	ldi	r18, 0xFF	; 255
    55be:	3f ef       	ldi	r19, 0xFF	; 255
    55c0:	c9 01       	movw	r24, r18
    55c2:	08 95       	ret

000055c4 <_ZN7TwoWire4peekEv>:
    55c4:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    55c8:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZN7TwoWire14rxBufferLengthE>
    55cc:	e8 17       	cp	r30, r24
    55ce:	30 f4       	brcc	.+12     	; 0x55dc <_ZN7TwoWire4peekEv+0x18>
    55d0:	f0 e0       	ldi	r31, 0x00	; 0
    55d2:	ee 53       	subi	r30, 0x3E	; 62
    55d4:	fc 4f       	sbci	r31, 0xFC	; 252
    55d6:	80 81       	ld	r24, Z
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	08 95       	ret
    55dc:	8f ef       	ldi	r24, 0xFF	; 255
    55de:	9f ef       	ldi	r25, 0xFF	; 255
    55e0:	08 95       	ret

000055e2 <_ZN7TwoWire5flushEv>:
    55e2:	08 95       	ret

000055e4 <_ZN7TwoWire16onReceiveServiceEPhi>:
    55e4:	cf 93       	push	r28
    55e6:	df 93       	push	r29
    55e8:	ec 01       	movw	r28, r24
    55ea:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <_ZN7TwoWire14user_onReceiveE>
    55ee:	f0 91 99 03 	lds	r31, 0x0399	; 0x800399 <_ZN7TwoWire14user_onReceiveE+0x1>
    55f2:	30 97       	sbiw	r30, 0x00	; 0
    55f4:	f1 f0       	breq	.+60     	; 0x5632 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    55f6:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    55fa:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <_ZN7TwoWire14rxBufferLengthE>
    55fe:	98 17       	cp	r25, r24
    5600:	c0 f0       	brcs	.+48     	; 0x5632 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	29 2f       	mov	r18, r25
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	26 17       	cp	r18, r22
    560a:	37 07       	cpc	r19, r23
    560c:	54 f4       	brge	.+20     	; 0x5622 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    560e:	de 01       	movw	r26, r28
    5610:	a2 0f       	add	r26, r18
    5612:	b3 1f       	adc	r27, r19
    5614:	4c 91       	ld	r20, X
    5616:	d9 01       	movw	r26, r18
    5618:	ae 53       	subi	r26, 0x3E	; 62
    561a:	bc 4f       	sbci	r27, 0xFC	; 252
    561c:	4c 93       	st	X, r20
    561e:	9f 5f       	subi	r25, 0xFF	; 255
    5620:	f1 cf       	rjmp	.-30     	; 0x5604 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5622:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    5626:	60 93 c0 03 	sts	0x03C0, r22	; 0x8003c0 <_ZN7TwoWire14rxBufferLengthE>
    562a:	cb 01       	movw	r24, r22
    562c:	df 91       	pop	r29
    562e:	cf 91       	pop	r28
    5630:	09 94       	ijmp
    5632:	df 91       	pop	r29
    5634:	cf 91       	pop	r28
    5636:	08 95       	ret

00005638 <_ZN7TwoWire16onRequestServiceEv>:
    5638:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <_ZN7TwoWire14user_onRequestE>
    563c:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <_ZN7TwoWire14user_onRequestE+0x1>
    5640:	30 97       	sbiw	r30, 0x00	; 0
    5642:	29 f0       	breq	.+10     	; 0x564e <_ZN7TwoWire16onRequestServiceEv+0x16>
    5644:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire13txBufferIndexE>
    5648:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire14txBufferLengthE>
    564c:	09 94       	ijmp
    564e:	08 95       	ret

00005650 <_ZN7TwoWire5writeEPKhj>:
    5650:	cf 92       	push	r12
    5652:	df 92       	push	r13
    5654:	ef 92       	push	r14
    5656:	ff 92       	push	r15
    5658:	0f 93       	push	r16
    565a:	1f 93       	push	r17
    565c:	cf 93       	push	r28
    565e:	df 93       	push	r29
    5660:	7c 01       	movw	r14, r24
    5662:	cb 01       	movw	r24, r22
    5664:	8a 01       	movw	r16, r20
    5666:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <_ZN7TwoWire12transmittingE>
    566a:	22 23       	and	r18, r18
    566c:	89 f0       	breq	.+34     	; 0x5690 <_ZN7TwoWire5writeEPKhj+0x40>
    566e:	eb 01       	movw	r28, r22
    5670:	6b 01       	movw	r12, r22
    5672:	c4 0e       	add	r12, r20
    5674:	d5 1e       	adc	r13, r21
    5676:	cc 15       	cp	r28, r12
    5678:	dd 05       	cpc	r29, r13
    567a:	69 f0       	breq	.+26     	; 0x5696 <_ZN7TwoWire5writeEPKhj+0x46>
    567c:	69 91       	ld	r22, Y+
    567e:	d7 01       	movw	r26, r14
    5680:	ed 91       	ld	r30, X+
    5682:	fc 91       	ld	r31, X
    5684:	01 90       	ld	r0, Z+
    5686:	f0 81       	ld	r31, Z
    5688:	e0 2d       	mov	r30, r0
    568a:	c7 01       	movw	r24, r14
    568c:	09 95       	icall
    568e:	f3 cf       	rjmp	.-26     	; 0x5676 <_ZN7TwoWire5writeEPKhj+0x26>
    5690:	64 2f       	mov	r22, r20
    5692:	0e 94 57 29 	call	0x52ae	; 0x52ae <twi_transmit>
    5696:	c8 01       	movw	r24, r16
    5698:	df 91       	pop	r29
    569a:	cf 91       	pop	r28
    569c:	1f 91       	pop	r17
    569e:	0f 91       	pop	r16
    56a0:	ff 90       	pop	r15
    56a2:	ef 90       	pop	r14
    56a4:	df 90       	pop	r13
    56a6:	cf 90       	pop	r12
    56a8:	08 95       	ret

000056aa <_ZN7TwoWire5writeEh>:
    56aa:	cf 93       	push	r28
    56ac:	df 93       	push	r29
    56ae:	1f 92       	push	r1
    56b0:	cd b7       	in	r28, 0x3d	; 61
    56b2:	de b7       	in	r29, 0x3e	; 62
    56b4:	69 83       	std	Y+1, r22	; 0x01
    56b6:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <_ZN7TwoWire12transmittingE>
    56ba:	22 23       	and	r18, r18
    56bc:	d1 f0       	breq	.+52     	; 0x56f2 <_ZN7TwoWire5writeEh+0x48>
    56be:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <_ZN7TwoWire14txBufferLengthE>
    56c2:	20 32       	cpi	r18, 0x20	; 32
    56c4:	40 f0       	brcs	.+16     	; 0x56d6 <_ZN7TwoWire5writeEh+0x2c>
    56c6:	21 e0       	ldi	r18, 0x01	; 1
    56c8:	30 e0       	ldi	r19, 0x00	; 0
    56ca:	fc 01       	movw	r30, r24
    56cc:	33 83       	std	Z+3, r19	; 0x03
    56ce:	22 83       	std	Z+2, r18	; 0x02
    56d0:	80 e0       	ldi	r24, 0x00	; 0
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	15 c0       	rjmp	.+42     	; 0x5700 <_ZN7TwoWire5writeEh+0x56>
    56d6:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_ZN7TwoWire13txBufferIndexE>
    56da:	e8 2f       	mov	r30, r24
    56dc:	f0 e0       	ldi	r31, 0x00	; 0
    56de:	e1 56       	subi	r30, 0x61	; 97
    56e0:	fc 4f       	sbci	r31, 0xFC	; 252
    56e2:	99 81       	ldd	r25, Y+1	; 0x01
    56e4:	90 83       	st	Z, r25
    56e6:	8f 5f       	subi	r24, 0xFF	; 255
    56e8:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <_ZN7TwoWire13txBufferIndexE>
    56ec:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <_ZN7TwoWire14txBufferLengthE>
    56f0:	05 c0       	rjmp	.+10     	; 0x56fc <_ZN7TwoWire5writeEh+0x52>
    56f2:	61 e0       	ldi	r22, 0x01	; 1
    56f4:	ce 01       	movw	r24, r28
    56f6:	01 96       	adiw	r24, 0x01	; 1
    56f8:	0e 94 57 29 	call	0x52ae	; 0x52ae <twi_transmit>
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	0f 90       	pop	r0
    5702:	df 91       	pop	r29
    5704:	cf 91       	pop	r28
    5706:	08 95       	ret

00005708 <_ZN7TwoWireC1Ev>:
    5708:	fc 01       	movw	r30, r24
    570a:	13 82       	std	Z+3, r1	; 0x03
    570c:	12 82       	std	Z+2, r1	; 0x02
    570e:	88 ee       	ldi	r24, 0xE8	; 232
    5710:	93 e0       	ldi	r25, 0x03	; 3
    5712:	a0 e0       	ldi	r26, 0x00	; 0
    5714:	b0 e0       	ldi	r27, 0x00	; 0
    5716:	84 83       	std	Z+4, r24	; 0x04
    5718:	95 83       	std	Z+5, r25	; 0x05
    571a:	a6 83       	std	Z+6, r26	; 0x06
    571c:	b7 83       	std	Z+7, r27	; 0x07
    571e:	86 e4       	ldi	r24, 0x46	; 70
    5720:	92 e0       	ldi	r25, 0x02	; 2
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	80 83       	st	Z, r24
    5726:	08 95       	ret

00005728 <_ZN7TwoWire5beginEv>:
    5728:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    572c:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <_ZN7TwoWire14rxBufferLengthE>
    5730:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire13txBufferIndexE>
    5734:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire14txBufferLengthE>
    5738:	0e 94 9b 28 	call	0x5136	; 0x5136 <twi_init>
    573c:	8c e1       	ldi	r24, 0x1C	; 28
    573e:	9b e2       	ldi	r25, 0x2B	; 43
    5740:	0e 94 84 29 	call	0x5308	; 0x5308 <twi_attachSlaveTxEvent>
    5744:	82 ef       	ldi	r24, 0xF2	; 242
    5746:	9a e2       	ldi	r25, 0x2A	; 42
    5748:	0c 94 7f 29 	jmp	0x52fe	; 0x52fe <twi_attachSlaveRxEvent>

0000574c <_ZN7TwoWire17beginTransmissionEh>:
    574c:	81 e0       	ldi	r24, 0x01	; 1
    574e:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_ZN7TwoWire12transmittingE>
    5752:	60 93 bf 03 	sts	0x03BF, r22	; 0x8003bf <_ZN7TwoWire9txAddressE>
    5756:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire13txBufferIndexE>
    575a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire14txBufferLengthE>
    575e:	08 95       	ret

00005760 <_ZN7TwoWire15endTransmissionEh>:
    5760:	0f 93       	push	r16
    5762:	06 2f       	mov	r16, r22
    5764:	21 e0       	ldi	r18, 0x01	; 1
    5766:	40 91 9d 03 	lds	r20, 0x039D	; 0x80039d <_ZN7TwoWire14txBufferLengthE>
    576a:	6f e9       	ldi	r22, 0x9F	; 159
    576c:	73 e0       	ldi	r23, 0x03	; 3
    576e:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <_ZN7TwoWire9txAddressE>
    5772:	0e 94 01 29 	call	0x5202	; 0x5202 <twi_writeTo>
    5776:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_ZN7TwoWire13txBufferIndexE>
    577a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZN7TwoWire14txBufferLengthE>
    577e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <_ZN7TwoWire12transmittingE>
    5782:	0f 91       	pop	r16
    5784:	08 95       	ret

00005786 <_ZN7TwoWire11requestFromEhhmhh>:
    5786:	4f 92       	push	r4
    5788:	5f 92       	push	r5
    578a:	6f 92       	push	r6
    578c:	7f 92       	push	r7
    578e:	af 92       	push	r10
    5790:	bf 92       	push	r11
    5792:	cf 92       	push	r12
    5794:	ef 92       	push	r14
    5796:	ff 92       	push	r15
    5798:	0f 93       	push	r16
    579a:	1f 93       	push	r17
    579c:	cf 93       	push	r28
    579e:	df 93       	push	r29
    57a0:	5c 01       	movw	r10, r24
    57a2:	f6 2e       	mov	r15, r22
    57a4:	d4 2f       	mov	r29, r20
    57a6:	28 01       	movw	r4, r16
    57a8:	39 01       	movw	r6, r18
    57aa:	ee 20       	and	r14, r14
    57ac:	21 f1       	breq	.+72     	; 0x57f6 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    57ae:	0e 94 a6 2b 	call	0x574c	; 0x574c <_ZN7TwoWire17beginTransmissionEh>
    57b2:	ce 2d       	mov	r28, r14
    57b4:	c4 30       	cpi	r28, 0x04	; 4
    57b6:	08 f0       	brcs	.+2      	; 0x57ba <_ZN7TwoWire11requestFromEhhmhh+0x34>
    57b8:	c3 e0       	ldi	r28, 0x03	; 3
    57ba:	c1 50       	subi	r28, 0x01	; 1
    57bc:	c0 f0       	brcs	.+48     	; 0x57ee <_ZN7TwoWire11requestFromEhhmhh+0x68>
    57be:	28 e0       	ldi	r18, 0x08	; 8
    57c0:	c2 9f       	mul	r28, r18
    57c2:	c0 01       	movw	r24, r0
    57c4:	11 24       	eor	r1, r1
    57c6:	a3 01       	movw	r20, r6
    57c8:	92 01       	movw	r18, r4
    57ca:	04 c0       	rjmp	.+8      	; 0x57d4 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    57cc:	56 95       	lsr	r21
    57ce:	47 95       	ror	r20
    57d0:	37 95       	ror	r19
    57d2:	27 95       	ror	r18
    57d4:	8a 95       	dec	r24
    57d6:	d2 f7       	brpl	.-12     	; 0x57cc <_ZN7TwoWire11requestFromEhhmhh+0x46>
    57d8:	ca 01       	movw	r24, r20
    57da:	b9 01       	movw	r22, r18
    57dc:	d5 01       	movw	r26, r10
    57de:	ed 91       	ld	r30, X+
    57e0:	fc 91       	ld	r31, X
    57e2:	01 90       	ld	r0, Z+
    57e4:	f0 81       	ld	r31, Z
    57e6:	e0 2d       	mov	r30, r0
    57e8:	c5 01       	movw	r24, r10
    57ea:	09 95       	icall
    57ec:	e6 cf       	rjmp	.-52     	; 0x57ba <_ZN7TwoWire11requestFromEhhmhh+0x34>
    57ee:	60 e0       	ldi	r22, 0x00	; 0
    57f0:	c5 01       	movw	r24, r10
    57f2:	0e 94 b0 2b 	call	0x5760	; 0x5760 <_ZN7TwoWire15endTransmissionEh>
    57f6:	4d 2f       	mov	r20, r29
    57f8:	d1 32       	cpi	r29, 0x21	; 33
    57fa:	08 f0       	brcs	.+2      	; 0x57fe <_ZN7TwoWire11requestFromEhhmhh+0x78>
    57fc:	40 e2       	ldi	r20, 0x20	; 32
    57fe:	2c 2d       	mov	r18, r12
    5800:	62 ec       	ldi	r22, 0xC2	; 194
    5802:	73 e0       	ldi	r23, 0x03	; 3
    5804:	8f 2d       	mov	r24, r15
    5806:	0e 94 b9 28 	call	0x5172	; 0x5172 <twi_readFrom>
    580a:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <_ZN7TwoWire13rxBufferIndexE>
    580e:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <_ZN7TwoWire14rxBufferLengthE>
    5812:	df 91       	pop	r29
    5814:	cf 91       	pop	r28
    5816:	1f 91       	pop	r17
    5818:	0f 91       	pop	r16
    581a:	ff 90       	pop	r15
    581c:	ef 90       	pop	r14
    581e:	cf 90       	pop	r12
    5820:	bf 90       	pop	r11
    5822:	af 90       	pop	r10
    5824:	7f 90       	pop	r7
    5826:	6f 90       	pop	r6
    5828:	5f 90       	pop	r5
    582a:	4f 90       	pop	r4
    582c:	08 95       	ret

0000582e <_ZN7TwoWire11requestFromEhhh>:
    582e:	cf 92       	push	r12
    5830:	ef 92       	push	r14
    5832:	0f 93       	push	r16
    5834:	1f 93       	push	r17
    5836:	c2 2e       	mov	r12, r18
    5838:	e1 2c       	mov	r14, r1
    583a:	00 e0       	ldi	r16, 0x00	; 0
    583c:	10 e0       	ldi	r17, 0x00	; 0
    583e:	98 01       	movw	r18, r16
    5840:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN7TwoWire11requestFromEhhmhh>
    5844:	1f 91       	pop	r17
    5846:	0f 91       	pop	r16
    5848:	ef 90       	pop	r14
    584a:	cf 90       	pop	r12
    584c:	08 95       	ret

0000584e <_ZN7TwoWire11requestFromEhh>:
    584e:	21 e0       	ldi	r18, 0x01	; 1
    5850:	0c 94 17 2c 	jmp	0x582e	; 0x582e <_ZN7TwoWire11requestFromEhhh>

00005854 <_ZN7TwoWire15endTransmissionEv>:
    5854:	61 e0       	ldi	r22, 0x01	; 1
    5856:	0c 94 b0 2b 	jmp	0x5760	; 0x5760 <_ZN7TwoWire15endTransmissionEh>

0000585a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    585a:	8c e8       	ldi	r24, 0x8C	; 140
    585c:	93 e0       	ldi	r25, 0x03	; 3
    585e:	0c 94 84 2b 	jmp	0x5708	; 0x5708 <_ZN7TwoWireC1Ev>

00005862 <__subsf3>:
    5862:	50 58       	subi	r21, 0x80	; 128

00005864 <__addsf3>:
    5864:	bb 27       	eor	r27, r27
    5866:	aa 27       	eor	r26, r26
    5868:	0e 94 49 2c 	call	0x5892	; 0x5892 <__addsf3x>
    586c:	0c 94 4a 2d 	jmp	0x5a94	; 0x5a94 <__fp_round>
    5870:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <__fp_pscA>
    5874:	38 f0       	brcs	.+14     	; 0x5884 <__addsf3+0x20>
    5876:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__fp_pscB>
    587a:	20 f0       	brcs	.+8      	; 0x5884 <__addsf3+0x20>
    587c:	39 f4       	brne	.+14     	; 0x588c <__addsf3+0x28>
    587e:	9f 3f       	cpi	r25, 0xFF	; 255
    5880:	19 f4       	brne	.+6      	; 0x5888 <__addsf3+0x24>
    5882:	26 f4       	brtc	.+8      	; 0x588c <__addsf3+0x28>
    5884:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__fp_nan>
    5888:	0e f4       	brtc	.+2      	; 0x588c <__addsf3+0x28>
    588a:	e0 95       	com	r30
    588c:	e7 fb       	bst	r30, 7
    588e:	0c 94 33 2d 	jmp	0x5a66	; 0x5a66 <__fp_inf>

00005892 <__addsf3x>:
    5892:	e9 2f       	mov	r30, r25
    5894:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <__fp_split3>
    5898:	58 f3       	brcs	.-42     	; 0x5870 <__addsf3+0xc>
    589a:	ba 17       	cp	r27, r26
    589c:	62 07       	cpc	r22, r18
    589e:	73 07       	cpc	r23, r19
    58a0:	84 07       	cpc	r24, r20
    58a2:	95 07       	cpc	r25, r21
    58a4:	20 f0       	brcs	.+8      	; 0x58ae <__addsf3x+0x1c>
    58a6:	79 f4       	brne	.+30     	; 0x58c6 <__addsf3x+0x34>
    58a8:	a6 f5       	brtc	.+104    	; 0x5912 <__addsf3x+0x80>
    58aa:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__fp_zero>
    58ae:	0e f4       	brtc	.+2      	; 0x58b2 <__addsf3x+0x20>
    58b0:	e0 95       	com	r30
    58b2:	0b 2e       	mov	r0, r27
    58b4:	ba 2f       	mov	r27, r26
    58b6:	a0 2d       	mov	r26, r0
    58b8:	0b 01       	movw	r0, r22
    58ba:	b9 01       	movw	r22, r18
    58bc:	90 01       	movw	r18, r0
    58be:	0c 01       	movw	r0, r24
    58c0:	ca 01       	movw	r24, r20
    58c2:	a0 01       	movw	r20, r0
    58c4:	11 24       	eor	r1, r1
    58c6:	ff 27       	eor	r31, r31
    58c8:	59 1b       	sub	r21, r25
    58ca:	99 f0       	breq	.+38     	; 0x58f2 <__addsf3x+0x60>
    58cc:	59 3f       	cpi	r21, 0xF9	; 249
    58ce:	50 f4       	brcc	.+20     	; 0x58e4 <__addsf3x+0x52>
    58d0:	50 3e       	cpi	r21, 0xE0	; 224
    58d2:	68 f1       	brcs	.+90     	; 0x592e <__addsf3x+0x9c>
    58d4:	1a 16       	cp	r1, r26
    58d6:	f0 40       	sbci	r31, 0x00	; 0
    58d8:	a2 2f       	mov	r26, r18
    58da:	23 2f       	mov	r18, r19
    58dc:	34 2f       	mov	r19, r20
    58de:	44 27       	eor	r20, r20
    58e0:	58 5f       	subi	r21, 0xF8	; 248
    58e2:	f3 cf       	rjmp	.-26     	; 0x58ca <__addsf3x+0x38>
    58e4:	46 95       	lsr	r20
    58e6:	37 95       	ror	r19
    58e8:	27 95       	ror	r18
    58ea:	a7 95       	ror	r26
    58ec:	f0 40       	sbci	r31, 0x00	; 0
    58ee:	53 95       	inc	r21
    58f0:	c9 f7       	brne	.-14     	; 0x58e4 <__addsf3x+0x52>
    58f2:	7e f4       	brtc	.+30     	; 0x5912 <__addsf3x+0x80>
    58f4:	1f 16       	cp	r1, r31
    58f6:	ba 0b       	sbc	r27, r26
    58f8:	62 0b       	sbc	r22, r18
    58fa:	73 0b       	sbc	r23, r19
    58fc:	84 0b       	sbc	r24, r20
    58fe:	ba f0       	brmi	.+46     	; 0x592e <__addsf3x+0x9c>
    5900:	91 50       	subi	r25, 0x01	; 1
    5902:	a1 f0       	breq	.+40     	; 0x592c <__addsf3x+0x9a>
    5904:	ff 0f       	add	r31, r31
    5906:	bb 1f       	adc	r27, r27
    5908:	66 1f       	adc	r22, r22
    590a:	77 1f       	adc	r23, r23
    590c:	88 1f       	adc	r24, r24
    590e:	c2 f7       	brpl	.-16     	; 0x5900 <__addsf3x+0x6e>
    5910:	0e c0       	rjmp	.+28     	; 0x592e <__addsf3x+0x9c>
    5912:	ba 0f       	add	r27, r26
    5914:	62 1f       	adc	r22, r18
    5916:	73 1f       	adc	r23, r19
    5918:	84 1f       	adc	r24, r20
    591a:	48 f4       	brcc	.+18     	; 0x592e <__addsf3x+0x9c>
    591c:	87 95       	ror	r24
    591e:	77 95       	ror	r23
    5920:	67 95       	ror	r22
    5922:	b7 95       	ror	r27
    5924:	f7 95       	ror	r31
    5926:	9e 3f       	cpi	r25, 0xFE	; 254
    5928:	08 f0       	brcs	.+2      	; 0x592c <__addsf3x+0x9a>
    592a:	b0 cf       	rjmp	.-160    	; 0x588c <__addsf3+0x28>
    592c:	93 95       	inc	r25
    592e:	88 0f       	add	r24, r24
    5930:	08 f0       	brcs	.+2      	; 0x5934 <__addsf3x+0xa2>
    5932:	99 27       	eor	r25, r25
    5934:	ee 0f       	add	r30, r30
    5936:	97 95       	ror	r25
    5938:	87 95       	ror	r24
    593a:	08 95       	ret

0000593c <__cmpsf2>:
    593c:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__fp_cmp>
    5940:	08 f4       	brcc	.+2      	; 0x5944 <__cmpsf2+0x8>
    5942:	81 e0       	ldi	r24, 0x01	; 1
    5944:	08 95       	ret

00005946 <__fixunssfsi>:
    5946:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__fp_splitA>
    594a:	88 f0       	brcs	.+34     	; 0x596e <__fixunssfsi+0x28>
    594c:	9f 57       	subi	r25, 0x7F	; 127
    594e:	98 f0       	brcs	.+38     	; 0x5976 <__fixunssfsi+0x30>
    5950:	b9 2f       	mov	r27, r25
    5952:	99 27       	eor	r25, r25
    5954:	b7 51       	subi	r27, 0x17	; 23
    5956:	b0 f0       	brcs	.+44     	; 0x5984 <__fixunssfsi+0x3e>
    5958:	e1 f0       	breq	.+56     	; 0x5992 <__fixunssfsi+0x4c>
    595a:	66 0f       	add	r22, r22
    595c:	77 1f       	adc	r23, r23
    595e:	88 1f       	adc	r24, r24
    5960:	99 1f       	adc	r25, r25
    5962:	1a f0       	brmi	.+6      	; 0x596a <__fixunssfsi+0x24>
    5964:	ba 95       	dec	r27
    5966:	c9 f7       	brne	.-14     	; 0x595a <__fixunssfsi+0x14>
    5968:	14 c0       	rjmp	.+40     	; 0x5992 <__fixunssfsi+0x4c>
    596a:	b1 30       	cpi	r27, 0x01	; 1
    596c:	91 f0       	breq	.+36     	; 0x5992 <__fixunssfsi+0x4c>
    596e:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__fp_zero>
    5972:	b1 e0       	ldi	r27, 0x01	; 1
    5974:	08 95       	ret
    5976:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__fp_zero>
    597a:	67 2f       	mov	r22, r23
    597c:	78 2f       	mov	r23, r24
    597e:	88 27       	eor	r24, r24
    5980:	b8 5f       	subi	r27, 0xF8	; 248
    5982:	39 f0       	breq	.+14     	; 0x5992 <__fixunssfsi+0x4c>
    5984:	b9 3f       	cpi	r27, 0xF9	; 249
    5986:	cc f3       	brlt	.-14     	; 0x597a <__fixunssfsi+0x34>
    5988:	86 95       	lsr	r24
    598a:	77 95       	ror	r23
    598c:	67 95       	ror	r22
    598e:	b3 95       	inc	r27
    5990:	d9 f7       	brne	.-10     	; 0x5988 <__fixunssfsi+0x42>
    5992:	3e f4       	brtc	.+14     	; 0x59a2 <__fixunssfsi+0x5c>
    5994:	90 95       	com	r25
    5996:	80 95       	com	r24
    5998:	70 95       	com	r23
    599a:	61 95       	neg	r22
    599c:	7f 4f       	sbci	r23, 0xFF	; 255
    599e:	8f 4f       	sbci	r24, 0xFF	; 255
    59a0:	9f 4f       	sbci	r25, 0xFF	; 255
    59a2:	08 95       	ret

000059a4 <__floatunsisf>:
    59a4:	e8 94       	clt
    59a6:	09 c0       	rjmp	.+18     	; 0x59ba <__floatsisf+0x12>

000059a8 <__floatsisf>:
    59a8:	97 fb       	bst	r25, 7
    59aa:	3e f4       	brtc	.+14     	; 0x59ba <__floatsisf+0x12>
    59ac:	90 95       	com	r25
    59ae:	80 95       	com	r24
    59b0:	70 95       	com	r23
    59b2:	61 95       	neg	r22
    59b4:	7f 4f       	sbci	r23, 0xFF	; 255
    59b6:	8f 4f       	sbci	r24, 0xFF	; 255
    59b8:	9f 4f       	sbci	r25, 0xFF	; 255
    59ba:	99 23       	and	r25, r25
    59bc:	a9 f0       	breq	.+42     	; 0x59e8 <__floatsisf+0x40>
    59be:	f9 2f       	mov	r31, r25
    59c0:	96 e9       	ldi	r25, 0x96	; 150
    59c2:	bb 27       	eor	r27, r27
    59c4:	93 95       	inc	r25
    59c6:	f6 95       	lsr	r31
    59c8:	87 95       	ror	r24
    59ca:	77 95       	ror	r23
    59cc:	67 95       	ror	r22
    59ce:	b7 95       	ror	r27
    59d0:	f1 11       	cpse	r31, r1
    59d2:	f8 cf       	rjmp	.-16     	; 0x59c4 <__floatsisf+0x1c>
    59d4:	fa f4       	brpl	.+62     	; 0x5a14 <__floatsisf+0x6c>
    59d6:	bb 0f       	add	r27, r27
    59d8:	11 f4       	brne	.+4      	; 0x59de <__floatsisf+0x36>
    59da:	60 ff       	sbrs	r22, 0
    59dc:	1b c0       	rjmp	.+54     	; 0x5a14 <__floatsisf+0x6c>
    59de:	6f 5f       	subi	r22, 0xFF	; 255
    59e0:	7f 4f       	sbci	r23, 0xFF	; 255
    59e2:	8f 4f       	sbci	r24, 0xFF	; 255
    59e4:	9f 4f       	sbci	r25, 0xFF	; 255
    59e6:	16 c0       	rjmp	.+44     	; 0x5a14 <__floatsisf+0x6c>
    59e8:	88 23       	and	r24, r24
    59ea:	11 f0       	breq	.+4      	; 0x59f0 <__floatsisf+0x48>
    59ec:	96 e9       	ldi	r25, 0x96	; 150
    59ee:	11 c0       	rjmp	.+34     	; 0x5a12 <__floatsisf+0x6a>
    59f0:	77 23       	and	r23, r23
    59f2:	21 f0       	breq	.+8      	; 0x59fc <__floatsisf+0x54>
    59f4:	9e e8       	ldi	r25, 0x8E	; 142
    59f6:	87 2f       	mov	r24, r23
    59f8:	76 2f       	mov	r23, r22
    59fa:	05 c0       	rjmp	.+10     	; 0x5a06 <__floatsisf+0x5e>
    59fc:	66 23       	and	r22, r22
    59fe:	71 f0       	breq	.+28     	; 0x5a1c <__floatsisf+0x74>
    5a00:	96 e8       	ldi	r25, 0x86	; 134
    5a02:	86 2f       	mov	r24, r22
    5a04:	70 e0       	ldi	r23, 0x00	; 0
    5a06:	60 e0       	ldi	r22, 0x00	; 0
    5a08:	2a f0       	brmi	.+10     	; 0x5a14 <__floatsisf+0x6c>
    5a0a:	9a 95       	dec	r25
    5a0c:	66 0f       	add	r22, r22
    5a0e:	77 1f       	adc	r23, r23
    5a10:	88 1f       	adc	r24, r24
    5a12:	da f7       	brpl	.-10     	; 0x5a0a <__floatsisf+0x62>
    5a14:	88 0f       	add	r24, r24
    5a16:	96 95       	lsr	r25
    5a18:	87 95       	ror	r24
    5a1a:	97 f9       	bld	r25, 7
    5a1c:	08 95       	ret

00005a1e <__fp_cmp>:
    5a1e:	99 0f       	add	r25, r25
    5a20:	00 08       	sbc	r0, r0
    5a22:	55 0f       	add	r21, r21
    5a24:	aa 0b       	sbc	r26, r26
    5a26:	e0 e8       	ldi	r30, 0x80	; 128
    5a28:	fe ef       	ldi	r31, 0xFE	; 254
    5a2a:	16 16       	cp	r1, r22
    5a2c:	17 06       	cpc	r1, r23
    5a2e:	e8 07       	cpc	r30, r24
    5a30:	f9 07       	cpc	r31, r25
    5a32:	c0 f0       	brcs	.+48     	; 0x5a64 <__fp_cmp+0x46>
    5a34:	12 16       	cp	r1, r18
    5a36:	13 06       	cpc	r1, r19
    5a38:	e4 07       	cpc	r30, r20
    5a3a:	f5 07       	cpc	r31, r21
    5a3c:	98 f0       	brcs	.+38     	; 0x5a64 <__fp_cmp+0x46>
    5a3e:	62 1b       	sub	r22, r18
    5a40:	73 0b       	sbc	r23, r19
    5a42:	84 0b       	sbc	r24, r20
    5a44:	95 0b       	sbc	r25, r21
    5a46:	39 f4       	brne	.+14     	; 0x5a56 <__fp_cmp+0x38>
    5a48:	0a 26       	eor	r0, r26
    5a4a:	61 f0       	breq	.+24     	; 0x5a64 <__fp_cmp+0x46>
    5a4c:	23 2b       	or	r18, r19
    5a4e:	24 2b       	or	r18, r20
    5a50:	25 2b       	or	r18, r21
    5a52:	21 f4       	brne	.+8      	; 0x5a5c <__fp_cmp+0x3e>
    5a54:	08 95       	ret
    5a56:	0a 26       	eor	r0, r26
    5a58:	09 f4       	brne	.+2      	; 0x5a5c <__fp_cmp+0x3e>
    5a5a:	a1 40       	sbci	r26, 0x01	; 1
    5a5c:	a6 95       	lsr	r26
    5a5e:	8f ef       	ldi	r24, 0xFF	; 255
    5a60:	81 1d       	adc	r24, r1
    5a62:	81 1d       	adc	r24, r1
    5a64:	08 95       	ret

00005a66 <__fp_inf>:
    5a66:	97 f9       	bld	r25, 7
    5a68:	9f 67       	ori	r25, 0x7F	; 127
    5a6a:	80 e8       	ldi	r24, 0x80	; 128
    5a6c:	70 e0       	ldi	r23, 0x00	; 0
    5a6e:	60 e0       	ldi	r22, 0x00	; 0
    5a70:	08 95       	ret

00005a72 <__fp_nan>:
    5a72:	9f ef       	ldi	r25, 0xFF	; 255
    5a74:	80 ec       	ldi	r24, 0xC0	; 192
    5a76:	08 95       	ret

00005a78 <__fp_pscA>:
    5a78:	00 24       	eor	r0, r0
    5a7a:	0a 94       	dec	r0
    5a7c:	16 16       	cp	r1, r22
    5a7e:	17 06       	cpc	r1, r23
    5a80:	18 06       	cpc	r1, r24
    5a82:	09 06       	cpc	r0, r25
    5a84:	08 95       	ret

00005a86 <__fp_pscB>:
    5a86:	00 24       	eor	r0, r0
    5a88:	0a 94       	dec	r0
    5a8a:	12 16       	cp	r1, r18
    5a8c:	13 06       	cpc	r1, r19
    5a8e:	14 06       	cpc	r1, r20
    5a90:	05 06       	cpc	r0, r21
    5a92:	08 95       	ret

00005a94 <__fp_round>:
    5a94:	09 2e       	mov	r0, r25
    5a96:	03 94       	inc	r0
    5a98:	00 0c       	add	r0, r0
    5a9a:	11 f4       	brne	.+4      	; 0x5aa0 <__fp_round+0xc>
    5a9c:	88 23       	and	r24, r24
    5a9e:	52 f0       	brmi	.+20     	; 0x5ab4 <__fp_round+0x20>
    5aa0:	bb 0f       	add	r27, r27
    5aa2:	40 f4       	brcc	.+16     	; 0x5ab4 <__fp_round+0x20>
    5aa4:	bf 2b       	or	r27, r31
    5aa6:	11 f4       	brne	.+4      	; 0x5aac <__fp_round+0x18>
    5aa8:	60 ff       	sbrs	r22, 0
    5aaa:	04 c0       	rjmp	.+8      	; 0x5ab4 <__fp_round+0x20>
    5aac:	6f 5f       	subi	r22, 0xFF	; 255
    5aae:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab4:	08 95       	ret

00005ab6 <__fp_split3>:
    5ab6:	57 fd       	sbrc	r21, 7
    5ab8:	90 58       	subi	r25, 0x80	; 128
    5aba:	44 0f       	add	r20, r20
    5abc:	55 1f       	adc	r21, r21
    5abe:	59 f0       	breq	.+22     	; 0x5ad6 <__fp_splitA+0x10>
    5ac0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ac2:	71 f0       	breq	.+28     	; 0x5ae0 <__fp_splitA+0x1a>
    5ac4:	47 95       	ror	r20

00005ac6 <__fp_splitA>:
    5ac6:	88 0f       	add	r24, r24
    5ac8:	97 fb       	bst	r25, 7
    5aca:	99 1f       	adc	r25, r25
    5acc:	61 f0       	breq	.+24     	; 0x5ae6 <__fp_splitA+0x20>
    5ace:	9f 3f       	cpi	r25, 0xFF	; 255
    5ad0:	79 f0       	breq	.+30     	; 0x5af0 <__fp_splitA+0x2a>
    5ad2:	87 95       	ror	r24
    5ad4:	08 95       	ret
    5ad6:	12 16       	cp	r1, r18
    5ad8:	13 06       	cpc	r1, r19
    5ada:	14 06       	cpc	r1, r20
    5adc:	55 1f       	adc	r21, r21
    5ade:	f2 cf       	rjmp	.-28     	; 0x5ac4 <__fp_split3+0xe>
    5ae0:	46 95       	lsr	r20
    5ae2:	f1 df       	rcall	.-30     	; 0x5ac6 <__fp_splitA>
    5ae4:	08 c0       	rjmp	.+16     	; 0x5af6 <__fp_splitA+0x30>
    5ae6:	16 16       	cp	r1, r22
    5ae8:	17 06       	cpc	r1, r23
    5aea:	18 06       	cpc	r1, r24
    5aec:	99 1f       	adc	r25, r25
    5aee:	f1 cf       	rjmp	.-30     	; 0x5ad2 <__fp_splitA+0xc>
    5af0:	86 95       	lsr	r24
    5af2:	71 05       	cpc	r23, r1
    5af4:	61 05       	cpc	r22, r1
    5af6:	08 94       	sec
    5af8:	08 95       	ret

00005afa <__fp_zero>:
    5afa:	e8 94       	clt

00005afc <__fp_szero>:
    5afc:	bb 27       	eor	r27, r27
    5afe:	66 27       	eor	r22, r22
    5b00:	77 27       	eor	r23, r23
    5b02:	cb 01       	movw	r24, r22
    5b04:	97 f9       	bld	r25, 7
    5b06:	08 95       	ret

00005b08 <__gesf2>:
    5b08:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__fp_cmp>
    5b0c:	08 f4       	brcc	.+2      	; 0x5b10 <__gesf2+0x8>
    5b0e:	8f ef       	ldi	r24, 0xFF	; 255
    5b10:	08 95       	ret

00005b12 <__mulsf3>:
    5b12:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__mulsf3x>
    5b16:	0c 94 4a 2d 	jmp	0x5a94	; 0x5a94 <__fp_round>
    5b1a:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <__fp_pscA>
    5b1e:	38 f0       	brcs	.+14     	; 0x5b2e <__mulsf3+0x1c>
    5b20:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <__fp_pscB>
    5b24:	20 f0       	brcs	.+8      	; 0x5b2e <__mulsf3+0x1c>
    5b26:	95 23       	and	r25, r21
    5b28:	11 f0       	breq	.+4      	; 0x5b2e <__mulsf3+0x1c>
    5b2a:	0c 94 33 2d 	jmp	0x5a66	; 0x5a66 <__fp_inf>
    5b2e:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__fp_nan>
    5b32:	11 24       	eor	r1, r1
    5b34:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__fp_szero>

00005b38 <__mulsf3x>:
    5b38:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <__fp_split3>
    5b3c:	70 f3       	brcs	.-36     	; 0x5b1a <__mulsf3+0x8>

00005b3e <__mulsf3_pse>:
    5b3e:	95 9f       	mul	r25, r21
    5b40:	c1 f3       	breq	.-16     	; 0x5b32 <__mulsf3+0x20>
    5b42:	95 0f       	add	r25, r21
    5b44:	50 e0       	ldi	r21, 0x00	; 0
    5b46:	55 1f       	adc	r21, r21
    5b48:	62 9f       	mul	r22, r18
    5b4a:	f0 01       	movw	r30, r0
    5b4c:	72 9f       	mul	r23, r18
    5b4e:	bb 27       	eor	r27, r27
    5b50:	f0 0d       	add	r31, r0
    5b52:	b1 1d       	adc	r27, r1
    5b54:	63 9f       	mul	r22, r19
    5b56:	aa 27       	eor	r26, r26
    5b58:	f0 0d       	add	r31, r0
    5b5a:	b1 1d       	adc	r27, r1
    5b5c:	aa 1f       	adc	r26, r26
    5b5e:	64 9f       	mul	r22, r20
    5b60:	66 27       	eor	r22, r22
    5b62:	b0 0d       	add	r27, r0
    5b64:	a1 1d       	adc	r26, r1
    5b66:	66 1f       	adc	r22, r22
    5b68:	82 9f       	mul	r24, r18
    5b6a:	22 27       	eor	r18, r18
    5b6c:	b0 0d       	add	r27, r0
    5b6e:	a1 1d       	adc	r26, r1
    5b70:	62 1f       	adc	r22, r18
    5b72:	73 9f       	mul	r23, r19
    5b74:	b0 0d       	add	r27, r0
    5b76:	a1 1d       	adc	r26, r1
    5b78:	62 1f       	adc	r22, r18
    5b7a:	83 9f       	mul	r24, r19
    5b7c:	a0 0d       	add	r26, r0
    5b7e:	61 1d       	adc	r22, r1
    5b80:	22 1f       	adc	r18, r18
    5b82:	74 9f       	mul	r23, r20
    5b84:	33 27       	eor	r19, r19
    5b86:	a0 0d       	add	r26, r0
    5b88:	61 1d       	adc	r22, r1
    5b8a:	23 1f       	adc	r18, r19
    5b8c:	84 9f       	mul	r24, r20
    5b8e:	60 0d       	add	r22, r0
    5b90:	21 1d       	adc	r18, r1
    5b92:	82 2f       	mov	r24, r18
    5b94:	76 2f       	mov	r23, r22
    5b96:	6a 2f       	mov	r22, r26
    5b98:	11 24       	eor	r1, r1
    5b9a:	9f 57       	subi	r25, 0x7F	; 127
    5b9c:	50 40       	sbci	r21, 0x00	; 0
    5b9e:	9a f0       	brmi	.+38     	; 0x5bc6 <__mulsf3_pse+0x88>
    5ba0:	f1 f0       	breq	.+60     	; 0x5bde <__mulsf3_pse+0xa0>
    5ba2:	88 23       	and	r24, r24
    5ba4:	4a f0       	brmi	.+18     	; 0x5bb8 <__mulsf3_pse+0x7a>
    5ba6:	ee 0f       	add	r30, r30
    5ba8:	ff 1f       	adc	r31, r31
    5baa:	bb 1f       	adc	r27, r27
    5bac:	66 1f       	adc	r22, r22
    5bae:	77 1f       	adc	r23, r23
    5bb0:	88 1f       	adc	r24, r24
    5bb2:	91 50       	subi	r25, 0x01	; 1
    5bb4:	50 40       	sbci	r21, 0x00	; 0
    5bb6:	a9 f7       	brne	.-22     	; 0x5ba2 <__mulsf3_pse+0x64>
    5bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    5bba:	51 05       	cpc	r21, r1
    5bbc:	80 f0       	brcs	.+32     	; 0x5bde <__mulsf3_pse+0xa0>
    5bbe:	0c 94 33 2d 	jmp	0x5a66	; 0x5a66 <__fp_inf>
    5bc2:	0c 94 7e 2d 	jmp	0x5afc	; 0x5afc <__fp_szero>
    5bc6:	5f 3f       	cpi	r21, 0xFF	; 255
    5bc8:	e4 f3       	brlt	.-8      	; 0x5bc2 <__mulsf3_pse+0x84>
    5bca:	98 3e       	cpi	r25, 0xE8	; 232
    5bcc:	d4 f3       	brlt	.-12     	; 0x5bc2 <__mulsf3_pse+0x84>
    5bce:	86 95       	lsr	r24
    5bd0:	77 95       	ror	r23
    5bd2:	67 95       	ror	r22
    5bd4:	b7 95       	ror	r27
    5bd6:	f7 95       	ror	r31
    5bd8:	e7 95       	ror	r30
    5bda:	9f 5f       	subi	r25, 0xFF	; 255
    5bdc:	c1 f7       	brne	.-16     	; 0x5bce <__mulsf3_pse+0x90>
    5bde:	fe 2b       	or	r31, r30
    5be0:	88 0f       	add	r24, r24
    5be2:	91 1d       	adc	r25, r1
    5be4:	96 95       	lsr	r25
    5be6:	87 95       	ror	r24
    5be8:	97 f9       	bld	r25, 7
    5bea:	08 95       	ret

00005bec <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5bec:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5bee:	91 8d       	ldd	r25, Z+25	; 0x19
    5bf0:	22 8d       	ldd	r18, Z+26	; 0x1a
    5bf2:	89 2f       	mov	r24, r25
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	80 5c       	subi	r24, 0xC0	; 192
    5bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfa:	82 1b       	sub	r24, r18
    5bfc:	91 09       	sbc	r25, r1
}
    5bfe:	8f 73       	andi	r24, 0x3F	; 63
    5c00:	99 27       	eor	r25, r25
    5c02:	08 95       	ret

00005c04 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    5c04:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5c06:	91 8d       	ldd	r25, Z+25	; 0x19
    5c08:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c0a:	98 17       	cp	r25, r24
    5c0c:	31 f0       	breq	.+12     	; 0x5c1a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5c0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c10:	e8 0f       	add	r30, r24
    5c12:	f1 1d       	adc	r31, r1
    5c14:	85 8d       	ldd	r24, Z+29	; 0x1d
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5c1a:	8f ef       	ldi	r24, 0xFF	; 255
    5c1c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5c1e:	08 95       	ret

00005c20 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    5c20:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    5c22:	91 8d       	ldd	r25, Z+25	; 0x19
    5c24:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c26:	98 17       	cp	r25, r24
    5c28:	61 f0       	breq	.+24     	; 0x5c42 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5c2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c2c:	df 01       	movw	r26, r30
    5c2e:	a8 0f       	add	r26, r24
    5c30:	b1 1d       	adc	r27, r1
    5c32:	5d 96       	adiw	r26, 0x1d	; 29
    5c34:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5c36:	92 8d       	ldd	r25, Z+26	; 0x1a
    5c38:	9f 5f       	subi	r25, 0xFF	; 255
    5c3a:	9f 73       	andi	r25, 0x3F	; 63
    5c3c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5c42:	8f ef       	ldi	r24, 0xFF	; 255
    5c44:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5c46:	08 95       	ret

00005c48 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    5c48:	fc 01       	movw	r30, r24
    5c4a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    5c4c:	44 8d       	ldd	r20, Z+28	; 0x1c
    5c4e:	25 2f       	mov	r18, r21
    5c50:	30 e0       	ldi	r19, 0x00	; 0
    5c52:	84 2f       	mov	r24, r20
    5c54:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5c56:	82 1b       	sub	r24, r18
    5c58:	93 0b       	sbc	r25, r19
    5c5a:	54 17       	cp	r21, r20
    5c5c:	10 f0       	brcs	.+4      	; 0x5c62 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    5c5e:	cf 96       	adiw	r24, 0x3f	; 63
    5c60:	08 95       	ret
  return tail - head - 1;
    5c62:	01 97       	sbiw	r24, 0x01	; 1
}
    5c64:	08 95       	ret

00005c66 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5c66:	8a e8       	ldi	r24, 0x8A	; 138
    5c68:	9f e2       	ldi	r25, 0x2F	; 47
    5c6a:	89 2b       	or	r24, r25
    5c6c:	49 f0       	breq	.+18     	; 0x5c80 <_Z14serialEventRunv+0x1a>
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	89 2b       	or	r24, r25
    5c74:	29 f0       	breq	.+10     	; 0x5c80 <_Z14serialEventRunv+0x1a>
    5c76:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <_Z17Serial0_availablev>
    5c7a:	81 11       	cpse	r24, r1
    5c7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5c80:	08 95       	ret

00005c82 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5c82:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5c84:	84 8d       	ldd	r24, Z+28	; 0x1c
    5c86:	df 01       	movw	r26, r30
    5c88:	a8 0f       	add	r26, r24
    5c8a:	b1 1d       	adc	r27, r1
    5c8c:	a3 5a       	subi	r26, 0xA3	; 163
    5c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    5c90:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5c92:	84 8d       	ldd	r24, Z+28	; 0x1c
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	01 96       	adiw	r24, 0x01	; 1
    5c98:	8f 73       	andi	r24, 0x3F	; 63
    5c9a:	99 27       	eor	r25, r25
    5c9c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5c9e:	a6 89       	ldd	r26, Z+22	; 0x16
    5ca0:	b7 89       	ldd	r27, Z+23	; 0x17
    5ca2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5ca4:	a0 89       	ldd	r26, Z+16	; 0x10
    5ca6:	b1 89       	ldd	r27, Z+17	; 0x11
    5ca8:	8c 91       	ld	r24, X
    5caa:	83 70       	andi	r24, 0x03	; 3
    5cac:	80 64       	ori	r24, 0x40	; 64
    5cae:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5cb0:	93 8d       	ldd	r25, Z+27	; 0x1b
    5cb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    5cb4:	98 13       	cpse	r25, r24
    5cb6:	06 c0       	rjmp	.+12     	; 0x5cc4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5cb8:	02 88       	ldd	r0, Z+18	; 0x12
    5cba:	f3 89       	ldd	r31, Z+19	; 0x13
    5cbc:	e0 2d       	mov	r30, r0
    5cbe:	80 81       	ld	r24, Z
    5cc0:	8f 7d       	andi	r24, 0xDF	; 223
    5cc2:	80 83       	st	Z, r24
    5cc4:	08 95       	ret

00005cc6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    5cc6:	ef 92       	push	r14
    5cc8:	ff 92       	push	r15
    5cca:	0f 93       	push	r16
    5ccc:	1f 93       	push	r17
    5cce:	cf 93       	push	r28
    5cd0:	df 93       	push	r29
    5cd2:	ec 01       	movw	r28, r24
  _written = true;
    5cd4:	81 e0       	ldi	r24, 0x01	; 1
    5cd6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5cd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5cda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5cdc:	98 13       	cpse	r25, r24
    5cde:	05 c0       	rjmp	.+10     	; 0x5cea <_ZN14HardwareSerial5writeEh+0x24>
    5ce0:	e8 89       	ldd	r30, Y+16	; 0x10
    5ce2:	f9 89       	ldd	r31, Y+17	; 0x11
    5ce4:	80 81       	ld	r24, Z
    5ce6:	85 fd       	sbrc	r24, 5
    5ce8:	26 c0       	rjmp	.+76     	; 0x5d36 <_ZN14HardwareSerial5writeEh+0x70>
    5cea:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5cec:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5cee:	10 e0       	ldi	r17, 0x00	; 0
    5cf0:	0f 5f       	subi	r16, 0xFF	; 255
    5cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf4:	0f 73       	andi	r16, 0x3F	; 63
    5cf6:	11 27       	eor	r17, r17
    5cf8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5cfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5cfc:	e8 12       	cpse	r14, r24
    5cfe:	0c c0       	rjmp	.+24     	; 0x5d18 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    5d00:	0f b6       	in	r0, 0x3f	; 63
    5d02:	07 fc       	sbrc	r0, 7
    5d04:	fa cf       	rjmp	.-12     	; 0x5cfa <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5d06:	e8 89       	ldd	r30, Y+16	; 0x10
    5d08:	f9 89       	ldd	r31, Y+17	; 0x11
    5d0a:	80 81       	ld	r24, Z
    5d0c:	85 ff       	sbrs	r24, 5
    5d0e:	f5 cf       	rjmp	.-22     	; 0x5cfa <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    5d10:	ce 01       	movw	r24, r28
    5d12:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5d16:	f1 cf       	rjmp	.-30     	; 0x5cfa <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    5d18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d1a:	fe 01       	movw	r30, r28
    5d1c:	e8 0f       	add	r30, r24
    5d1e:	f1 1d       	adc	r31, r1
    5d20:	e3 5a       	subi	r30, 0xA3	; 163
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5d26:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d28:	f8 94       	cli
    _tx_buffer_head = i;
    5d2a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    5d2c:	ea 89       	ldd	r30, Y+18	; 0x12
    5d2e:	fb 89       	ldd	r31, Y+19	; 0x13
    5d30:	80 81       	ld	r24, Z
    5d32:	80 62       	ori	r24, 0x20	; 32
    5d34:	0a c0       	rjmp	.+20     	; 0x5d4a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5d36:	9f b7       	in	r25, 0x3f	; 63
    5d38:	f8 94       	cli
      *_udr = c;
    5d3a:	ee 89       	ldd	r30, Y+22	; 0x16
    5d3c:	ff 89       	ldd	r31, Y+23	; 0x17
    5d3e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5d40:	e8 89       	ldd	r30, Y+16	; 0x10
    5d42:	f9 89       	ldd	r31, Y+17	; 0x11
    5d44:	80 81       	ld	r24, Z
    5d46:	83 70       	andi	r24, 0x03	; 3
    5d48:	80 64       	ori	r24, 0x40	; 64
    5d4a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5d4c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	1f 91       	pop	r17
    5d58:	0f 91       	pop	r16
    5d5a:	ff 90       	pop	r15
    5d5c:	ef 90       	pop	r14
    5d5e:	08 95       	ret

00005d60 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5d60:	cf 93       	push	r28
    5d62:	df 93       	push	r29
    5d64:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5d66:	88 8d       	ldd	r24, Y+24	; 0x18
    5d68:	88 23       	and	r24, r24
    5d6a:	c9 f0       	breq	.+50     	; 0x5d9e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5d6c:	ea 89       	ldd	r30, Y+18	; 0x12
    5d6e:	fb 89       	ldd	r31, Y+19	; 0x13
    5d70:	80 81       	ld	r24, Z
    5d72:	85 fd       	sbrc	r24, 5
    5d74:	05 c0       	rjmp	.+10     	; 0x5d80 <_ZN14HardwareSerial5flushEv+0x20>
    5d76:	a8 89       	ldd	r26, Y+16	; 0x10
    5d78:	b9 89       	ldd	r27, Y+17	; 0x11
    5d7a:	8c 91       	ld	r24, X
    5d7c:	86 fd       	sbrc	r24, 6
    5d7e:	0f c0       	rjmp	.+30     	; 0x5d9e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5d80:	0f b6       	in	r0, 0x3f	; 63
    5d82:	07 fc       	sbrc	r0, 7
    5d84:	f5 cf       	rjmp	.-22     	; 0x5d70 <_ZN14HardwareSerial5flushEv+0x10>
    5d86:	80 81       	ld	r24, Z
    5d88:	85 ff       	sbrs	r24, 5
    5d8a:	f2 cf       	rjmp	.-28     	; 0x5d70 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    5d8c:	a8 89       	ldd	r26, Y+16	; 0x10
    5d8e:	b9 89       	ldd	r27, Y+17	; 0x11
    5d90:	8c 91       	ld	r24, X
    5d92:	85 ff       	sbrs	r24, 5
    5d94:	ed cf       	rjmp	.-38     	; 0x5d70 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5d96:	ce 01       	movw	r24, r28
    5d98:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    5d9c:	e7 cf       	rjmp	.-50     	; 0x5d6c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5d9e:	df 91       	pop	r29
    5da0:	cf 91       	pop	r28
    5da2:	08 95       	ret

00005da4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5da4:	cf 92       	push	r12
    5da6:	df 92       	push	r13
    5da8:	ef 92       	push	r14
    5daa:	ff 92       	push	r15
    5dac:	1f 93       	push	r17
    5dae:	cf 93       	push	r28
    5db0:	df 93       	push	r29
    5db2:	ec 01       	movw	r28, r24
    5db4:	6a 01       	movw	r12, r20
    5db6:	7b 01       	movw	r14, r22
    5db8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    5dba:	60 e8       	ldi	r22, 0x80	; 128
    5dbc:	74 e8       	ldi	r23, 0x84	; 132
    5dbe:	8e e1       	ldi	r24, 0x1E	; 30
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	a7 01       	movw	r20, r14
    5dc4:	96 01       	movw	r18, r12
    5dc6:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodsi4>
    5dca:	da 01       	movw	r26, r20
    5dcc:	c9 01       	movw	r24, r18
    5dce:	01 97       	sbiw	r24, 0x01	; 1
    5dd0:	a1 09       	sbc	r26, r1
    5dd2:	b1 09       	sbc	r27, r1
    5dd4:	b6 95       	lsr	r27
    5dd6:	a7 95       	ror	r26
    5dd8:	97 95       	ror	r25
    5dda:	87 95       	ror	r24
    5ddc:	9c 01       	movw	r18, r24
  *_ucsra = 1 << U2X0;
    5dde:	e8 89       	ldd	r30, Y+16	; 0x10
    5de0:	f9 89       	ldd	r31, Y+17	; 0x11
    5de2:	82 e0       	ldi	r24, 0x02	; 2
    5de4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5de6:	21 15       	cp	r18, r1
    5de8:	80 e1       	ldi	r24, 0x10	; 16
    5dea:	38 07       	cpc	r19, r24
    5dec:	a8 f0       	brcs	.+42     	; 0x5e18 <_ZN14HardwareSerial5beginEmh+0x74>
  {
    *_ucsra = 0;
    5dee:	e8 89       	ldd	r30, Y+16	; 0x10
    5df0:	f9 89       	ldd	r31, Y+17	; 0x11
    5df2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    5df4:	60 e4       	ldi	r22, 0x40	; 64
    5df6:	72 e4       	ldi	r23, 0x42	; 66
    5df8:	8f e0       	ldi	r24, 0x0F	; 15
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	a7 01       	movw	r20, r14
    5dfe:	96 01       	movw	r18, r12
    5e00:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodsi4>
    5e04:	da 01       	movw	r26, r20
    5e06:	c9 01       	movw	r24, r18
    5e08:	01 97       	sbiw	r24, 0x01	; 1
    5e0a:	a1 09       	sbc	r26, r1
    5e0c:	b1 09       	sbc	r27, r1
    5e0e:	b6 95       	lsr	r27
    5e10:	a7 95       	ror	r26
    5e12:	97 95       	ror	r25
    5e14:	87 95       	ror	r24
    5e16:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5e18:	ec 85       	ldd	r30, Y+12	; 0x0c
    5e1a:	fd 85       	ldd	r31, Y+13	; 0x0d
    5e1c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    5e1e:	ee 85       	ldd	r30, Y+14	; 0x0e
    5e20:	ff 85       	ldd	r31, Y+15	; 0x0f
    5e22:	20 83       	st	Z, r18

  _written = false;
    5e24:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    5e26:	ec 89       	ldd	r30, Y+20	; 0x14
    5e28:	fd 89       	ldd	r31, Y+21	; 0x15
    5e2a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    5e2c:	ea 89       	ldd	r30, Y+18	; 0x12
    5e2e:	fb 89       	ldd	r31, Y+19	; 0x13
    5e30:	80 81       	ld	r24, Z
    5e32:	80 61       	ori	r24, 0x10	; 16
    5e34:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    5e36:	ea 89       	ldd	r30, Y+18	; 0x12
    5e38:	fb 89       	ldd	r31, Y+19	; 0x13
    5e3a:	80 81       	ld	r24, Z
    5e3c:	88 60       	ori	r24, 0x08	; 8
    5e3e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    5e40:	ea 89       	ldd	r30, Y+18	; 0x12
    5e42:	fb 89       	ldd	r31, Y+19	; 0x13
    5e44:	80 81       	ld	r24, Z
    5e46:	80 68       	ori	r24, 0x80	; 128
    5e48:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5e4a:	ea 89       	ldd	r30, Y+18	; 0x12
    5e4c:	fb 89       	ldd	r31, Y+19	; 0x13
    5e4e:	80 81       	ld	r24, Z
    5e50:	8f 7d       	andi	r24, 0xDF	; 223
    5e52:	80 83       	st	Z, r24
}
    5e54:	df 91       	pop	r29
    5e56:	cf 91       	pop	r28
    5e58:	1f 91       	pop	r17
    5e5a:	ff 90       	pop	r15
    5e5c:	ef 90       	pop	r14
    5e5e:	df 90       	pop	r13
    5e60:	cf 90       	pop	r12
    5e62:	08 95       	ret

00005e64 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5e64:	1f 92       	push	r1
    5e66:	0f 92       	push	r0
    5e68:	0f b6       	in	r0, 0x3f	; 63
    5e6a:	0f 92       	push	r0
    5e6c:	11 24       	eor	r1, r1
    5e6e:	2f 93       	push	r18
    5e70:	8f 93       	push	r24
    5e72:	9f 93       	push	r25
    5e74:	ef 93       	push	r30
    5e76:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5e78:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <Serial+0x10>
    5e7c:	f0 91 f3 03 	lds	r31, 0x03F3	; 0x8003f3 <Serial+0x11>
    5e80:	80 81       	ld	r24, Z
    5e82:	e0 91 f8 03 	lds	r30, 0x03F8	; 0x8003f8 <Serial+0x16>
    5e86:	f0 91 f9 03 	lds	r31, 0x03F9	; 0x8003f9 <Serial+0x17>
    5e8a:	82 fd       	sbrc	r24, 2
    5e8c:	12 c0       	rjmp	.+36     	; 0x5eb2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5e8e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5e90:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <Serial+0x19>
    5e94:	8f 5f       	subi	r24, 0xFF	; 255
    5e96:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5e98:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <Serial+0x1a>
    5e9c:	82 17       	cp	r24, r18
    5e9e:	51 f0       	breq	.+20     	; 0x5eb4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    5ea0:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <Serial+0x19>
    5ea4:	f0 e0       	ldi	r31, 0x00	; 0
    5ea6:	ee 51       	subi	r30, 0x1E	; 30
    5ea8:	fc 4f       	sbci	r31, 0xFC	; 252
    5eaa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5eac:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <Serial+0x19>
    5eb0:	01 c0       	rjmp	.+2      	; 0x5eb4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5eb2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    5eb4:	ff 91       	pop	r31
    5eb6:	ef 91       	pop	r30
    5eb8:	9f 91       	pop	r25
    5eba:	8f 91       	pop	r24
    5ebc:	2f 91       	pop	r18
    5ebe:	0f 90       	pop	r0
    5ec0:	0f be       	out	0x3f, r0	; 63
    5ec2:	0f 90       	pop	r0
    5ec4:	1f 90       	pop	r1
    5ec6:	18 95       	reti

00005ec8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5ec8:	1f 92       	push	r1
    5eca:	0f 92       	push	r0
    5ecc:	0f b6       	in	r0, 0x3f	; 63
    5ece:	0f 92       	push	r0
    5ed0:	11 24       	eor	r1, r1
    5ed2:	2f 93       	push	r18
    5ed4:	3f 93       	push	r19
    5ed6:	4f 93       	push	r20
    5ed8:	5f 93       	push	r21
    5eda:	6f 93       	push	r22
    5edc:	7f 93       	push	r23
    5ede:	8f 93       	push	r24
    5ee0:	9f 93       	push	r25
    5ee2:	af 93       	push	r26
    5ee4:	bf 93       	push	r27
    5ee6:	ef 93       	push	r30
    5ee8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    5eea:	82 ee       	ldi	r24, 0xE2	; 226
    5eec:	93 e0       	ldi	r25, 0x03	; 3
    5eee:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    5ef2:	ff 91       	pop	r31
    5ef4:	ef 91       	pop	r30
    5ef6:	bf 91       	pop	r27
    5ef8:	af 91       	pop	r26
    5efa:	9f 91       	pop	r25
    5efc:	8f 91       	pop	r24
    5efe:	7f 91       	pop	r23
    5f00:	6f 91       	pop	r22
    5f02:	5f 91       	pop	r21
    5f04:	4f 91       	pop	r20
    5f06:	3f 91       	pop	r19
    5f08:	2f 91       	pop	r18
    5f0a:	0f 90       	pop	r0
    5f0c:	0f be       	out	0x3f, r0	; 63
    5f0e:	0f 90       	pop	r0
    5f10:	1f 90       	pop	r1
    5f12:	18 95       	reti

00005f14 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5f14:	82 ee       	ldi	r24, 0xE2	; 226
    5f16:	93 e0       	ldi	r25, 0x03	; 3
    5f18:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <_ZN14HardwareSerial9availableEv>
    5f1c:	21 e0       	ldi	r18, 0x01	; 1
    5f1e:	89 2b       	or	r24, r25
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <_Z17Serial0_availablev+0x10>
    5f22:	20 e0       	ldi	r18, 0x00	; 0
}
    5f24:	82 2f       	mov	r24, r18
    5f26:	08 95       	ret

00005f28 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5f28:	e2 ee       	ldi	r30, 0xE2	; 226
    5f2a:	f3 e0       	ldi	r31, 0x03	; 3
    5f2c:	13 82       	std	Z+3, r1	; 0x03
    5f2e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    5f30:	88 ee       	ldi	r24, 0xE8	; 232
    5f32:	93 e0       	ldi	r25, 0x03	; 3
    5f34:	a0 e0       	ldi	r26, 0x00	; 0
    5f36:	b0 e0       	ldi	r27, 0x00	; 0
    5f38:	84 83       	std	Z+4, r24	; 0x04
    5f3a:	95 83       	std	Z+5, r25	; 0x05
    5f3c:	a6 83       	std	Z+6, r26	; 0x06
    5f3e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5f40:	88 e5       	ldi	r24, 0x58	; 88
    5f42:	92 e0       	ldi	r25, 0x02	; 2
    5f44:	91 83       	std	Z+1, r25	; 0x01
    5f46:	80 83       	st	Z, r24
    5f48:	85 ec       	ldi	r24, 0xC5	; 197
    5f4a:	90 e0       	ldi	r25, 0x00	; 0
    5f4c:	95 87       	std	Z+13, r25	; 0x0d
    5f4e:	84 87       	std	Z+12, r24	; 0x0c
    5f50:	84 ec       	ldi	r24, 0xC4	; 196
    5f52:	90 e0       	ldi	r25, 0x00	; 0
    5f54:	97 87       	std	Z+15, r25	; 0x0f
    5f56:	86 87       	std	Z+14, r24	; 0x0e
    5f58:	80 ec       	ldi	r24, 0xC0	; 192
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	91 8b       	std	Z+17, r25	; 0x11
    5f5e:	80 8b       	std	Z+16, r24	; 0x10
    5f60:	81 ec       	ldi	r24, 0xC1	; 193
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	93 8b       	std	Z+19, r25	; 0x13
    5f66:	82 8b       	std	Z+18, r24	; 0x12
    5f68:	82 ec       	ldi	r24, 0xC2	; 194
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	95 8b       	std	Z+21, r25	; 0x15
    5f6e:	84 8b       	std	Z+20, r24	; 0x14
    5f70:	86 ec       	ldi	r24, 0xC6	; 198
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	97 8b       	std	Z+23, r25	; 0x17
    5f76:	86 8b       	std	Z+22, r24	; 0x16
    5f78:	11 8e       	std	Z+25, r1	; 0x19
    5f7a:	12 8e       	std	Z+26, r1	; 0x1a
    5f7c:	13 8e       	std	Z+27, r1	; 0x1b
    5f7e:	14 8e       	std	Z+28, r1	; 0x1c
    5f80:	08 95       	ret

00005f82 <initVariant>:
    5f82:	08 95       	ret

00005f84 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5f84:	0e 94 08 32 	call	0x6410	; 0x6410 <init>

	initVariant();
    5f88:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5f8c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5f90:	c3 e3       	ldi	r28, 0x33	; 51
    5f92:	de e2       	ldi	r29, 0x2E	; 46
#endif
	
	setup();
    
	for (;;) {
		loop();
    5f94:	0e 94 75 05 	call	0xaea	; 0xaea <loop>
		if (serialEventRun) serialEventRun();
    5f98:	20 97       	sbiw	r28, 0x00	; 0
    5f9a:	e1 f3       	breq	.-8      	; 0x5f94 <main+0x10>
    5f9c:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <_Z14serialEventRunv>
    5fa0:	f9 cf       	rjmp	.-14     	; 0x5f94 <main+0x10>

00005fa2 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5fa2:	cf 92       	push	r12
    5fa4:	df 92       	push	r13
    5fa6:	ef 92       	push	r14
    5fa8:	ff 92       	push	r15
    5faa:	0f 93       	push	r16
    5fac:	1f 93       	push	r17
    5fae:	cf 93       	push	r28
    5fb0:	df 93       	push	r29
    5fb2:	6c 01       	movw	r12, r24
    5fb4:	7a 01       	movw	r14, r20
    5fb6:	8b 01       	movw	r16, r22
    5fb8:	c0 e0       	ldi	r28, 0x00	; 0
    5fba:	d0 e0       	ldi	r29, 0x00	; 0
    5fbc:	ce 15       	cp	r28, r14
    5fbe:	df 05       	cpc	r29, r15
    5fc0:	81 f0       	breq	.+32     	; 0x5fe2 <_ZN5Print5writeEPKhj+0x40>
    5fc2:	d8 01       	movw	r26, r16
    5fc4:	6d 91       	ld	r22, X+
    5fc6:	8d 01       	movw	r16, r26
    5fc8:	d6 01       	movw	r26, r12
    5fca:	ed 91       	ld	r30, X+
    5fcc:	fc 91       	ld	r31, X
    5fce:	01 90       	ld	r0, Z+
    5fd0:	f0 81       	ld	r31, Z
    5fd2:	e0 2d       	mov	r30, r0
    5fd4:	c6 01       	movw	r24, r12
    5fd6:	09 95       	icall
    5fd8:	89 2b       	or	r24, r25
    5fda:	11 f0       	breq	.+4      	; 0x5fe0 <_ZN5Print5writeEPKhj+0x3e>
    5fdc:	21 96       	adiw	r28, 0x01	; 1
    5fde:	ee cf       	rjmp	.-36     	; 0x5fbc <_ZN5Print5writeEPKhj+0x1a>
    5fe0:	7e 01       	movw	r14, r28
    5fe2:	c7 01       	movw	r24, r14
    5fe4:	df 91       	pop	r29
    5fe6:	cf 91       	pop	r28
    5fe8:	1f 91       	pop	r17
    5fea:	0f 91       	pop	r16
    5fec:	ff 90       	pop	r15
    5fee:	ef 90       	pop	r14
    5ff0:	df 90       	pop	r13
    5ff2:	cf 90       	pop	r12
    5ff4:	08 95       	ret

00005ff6 <_ZN5Print5writeEPKc>:
    5ff6:	61 15       	cp	r22, r1
    5ff8:	71 05       	cpc	r23, r1
    5ffa:	79 f0       	breq	.+30     	; 0x601a <_ZN5Print5writeEPKc+0x24>
    5ffc:	fb 01       	movw	r30, r22
    5ffe:	01 90       	ld	r0, Z+
    6000:	00 20       	and	r0, r0
    6002:	e9 f7       	brne	.-6      	; 0x5ffe <_ZN5Print5writeEPKc+0x8>
    6004:	31 97       	sbiw	r30, 0x01	; 1
    6006:	af 01       	movw	r20, r30
    6008:	46 1b       	sub	r20, r22
    600a:	57 0b       	sbc	r21, r23
    600c:	dc 01       	movw	r26, r24
    600e:	ed 91       	ld	r30, X+
    6010:	fc 91       	ld	r31, X
    6012:	02 80       	ldd	r0, Z+2	; 0x02
    6014:	f3 81       	ldd	r31, Z+3	; 0x03
    6016:	e0 2d       	mov	r30, r0
    6018:	09 94       	ijmp
    601a:	80 e0       	ldi	r24, 0x00	; 0
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	08 95       	ret

00006020 <_ZN5Print5printEPK19__FlashStringHelper>:
    6020:	ef 92       	push	r14
    6022:	ff 92       	push	r15
    6024:	0f 93       	push	r16
    6026:	1f 93       	push	r17
    6028:	cf 93       	push	r28
    602a:	df 93       	push	r29
    602c:	8c 01       	movw	r16, r24
    602e:	7b 01       	movw	r14, r22
    6030:	c0 e0       	ldi	r28, 0x00	; 0
    6032:	d0 e0       	ldi	r29, 0x00	; 0
    6034:	f7 01       	movw	r30, r14
    6036:	ec 0f       	add	r30, r28
    6038:	fd 1f       	adc	r31, r29
    603a:	64 91       	lpm	r22, Z
    603c:	66 23       	and	r22, r22
    603e:	61 f0       	breq	.+24     	; 0x6058 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    6040:	d8 01       	movw	r26, r16
    6042:	ed 91       	ld	r30, X+
    6044:	fc 91       	ld	r31, X
    6046:	01 90       	ld	r0, Z+
    6048:	f0 81       	ld	r31, Z
    604a:	e0 2d       	mov	r30, r0
    604c:	c8 01       	movw	r24, r16
    604e:	09 95       	icall
    6050:	89 2b       	or	r24, r25
    6052:	11 f0       	breq	.+4      	; 0x6058 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    6054:	21 96       	adiw	r28, 0x01	; 1
    6056:	ee cf       	rjmp	.-36     	; 0x6034 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    6058:	ce 01       	movw	r24, r28
    605a:	df 91       	pop	r29
    605c:	cf 91       	pop	r28
    605e:	1f 91       	pop	r17
    6060:	0f 91       	pop	r16
    6062:	ff 90       	pop	r15
    6064:	ef 90       	pop	r14
    6066:	08 95       	ret

00006068 <_ZN5Print5printERK6String>:
    6068:	db 01       	movw	r26, r22
    606a:	14 96       	adiw	r26, 0x04	; 4
    606c:	4d 91       	ld	r20, X+
    606e:	5c 91       	ld	r21, X
    6070:	15 97       	sbiw	r26, 0x05	; 5
    6072:	6d 91       	ld	r22, X+
    6074:	7c 91       	ld	r23, X
    6076:	dc 01       	movw	r26, r24
    6078:	ed 91       	ld	r30, X+
    607a:	fc 91       	ld	r31, X
    607c:	02 80       	ldd	r0, Z+2	; 0x02
    607e:	f3 81       	ldd	r31, Z+3	; 0x03
    6080:	e0 2d       	mov	r30, r0
    6082:	09 94       	ijmp

00006084 <_ZN5Print5printEPKc>:
    6084:	0c 94 fb 2f 	jmp	0x5ff6	; 0x5ff6 <_ZN5Print5writeEPKc>

00006088 <_ZN5Print5printEc>:
    6088:	dc 01       	movw	r26, r24
    608a:	ed 91       	ld	r30, X+
    608c:	fc 91       	ld	r31, X
    608e:	01 90       	ld	r0, Z+
    6090:	f0 81       	ld	r31, Z
    6092:	e0 2d       	mov	r30, r0
    6094:	09 94       	ijmp

00006096 <_ZN5Print7printlnEv>:
    6096:	66 e6       	ldi	r22, 0x66	; 102
    6098:	72 e0       	ldi	r23, 0x02	; 2
    609a:	0c 94 fb 2f 	jmp	0x5ff6	; 0x5ff6 <_ZN5Print5writeEPKc>

0000609e <_ZN5Print7printlnEPK19__FlashStringHelper>:
    609e:	0f 93       	push	r16
    60a0:	1f 93       	push	r17
    60a2:	cf 93       	push	r28
    60a4:	df 93       	push	r29
    60a6:	ec 01       	movw	r28, r24
    60a8:	0e 94 10 30 	call	0x6020	; 0x6020 <_ZN5Print5printEPK19__FlashStringHelper>
    60ac:	8c 01       	movw	r16, r24
    60ae:	ce 01       	movw	r24, r28
    60b0:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN5Print7printlnEv>
    60b4:	80 0f       	add	r24, r16
    60b6:	91 1f       	adc	r25, r17
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	1f 91       	pop	r17
    60be:	0f 91       	pop	r16
    60c0:	08 95       	ret

000060c2 <_ZN5Print7printlnERK6String>:
    60c2:	0f 93       	push	r16
    60c4:	1f 93       	push	r17
    60c6:	cf 93       	push	r28
    60c8:	df 93       	push	r29
    60ca:	ec 01       	movw	r28, r24
    60cc:	0e 94 34 30 	call	0x6068	; 0x6068 <_ZN5Print5printERK6String>
    60d0:	8c 01       	movw	r16, r24
    60d2:	ce 01       	movw	r24, r28
    60d4:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN5Print7printlnEv>
    60d8:	80 0f       	add	r24, r16
    60da:	91 1f       	adc	r25, r17
    60dc:	df 91       	pop	r29
    60de:	cf 91       	pop	r28
    60e0:	1f 91       	pop	r17
    60e2:	0f 91       	pop	r16
    60e4:	08 95       	ret

000060e6 <_ZN5Print7printlnEPKc>:
    60e6:	0f 93       	push	r16
    60e8:	1f 93       	push	r17
    60ea:	cf 93       	push	r28
    60ec:	df 93       	push	r29
    60ee:	ec 01       	movw	r28, r24
    60f0:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <_ZN5Print5writeEPKc>
    60f4:	8c 01       	movw	r16, r24
    60f6:	ce 01       	movw	r24, r28
    60f8:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN5Print7printlnEv>
    60fc:	80 0f       	add	r24, r16
    60fe:	91 1f       	adc	r25, r17
    6100:	df 91       	pop	r29
    6102:	cf 91       	pop	r28
    6104:	1f 91       	pop	r17
    6106:	0f 91       	pop	r16
    6108:	08 95       	ret

0000610a <_ZN5Print11printNumberEmh>:
    610a:	8f 92       	push	r8
    610c:	9f 92       	push	r9
    610e:	af 92       	push	r10
    6110:	bf 92       	push	r11
    6112:	ef 92       	push	r14
    6114:	ff 92       	push	r15
    6116:	0f 93       	push	r16
    6118:	1f 93       	push	r17
    611a:	cf 93       	push	r28
    611c:	df 93       	push	r29
    611e:	cd b7       	in	r28, 0x3d	; 61
    6120:	de b7       	in	r29, 0x3e	; 62
    6122:	a1 97       	sbiw	r28, 0x21	; 33
    6124:	0f b6       	in	r0, 0x3f	; 63
    6126:	f8 94       	cli
    6128:	de bf       	out	0x3e, r29	; 62
    612a:	0f be       	out	0x3f, r0	; 63
    612c:	cd bf       	out	0x3d, r28	; 61
    612e:	7c 01       	movw	r14, r24
    6130:	fa 01       	movw	r30, r20
    6132:	cb 01       	movw	r24, r22
    6134:	19 a2       	std	Y+33, r1	; 0x21
    6136:	22 30       	cpi	r18, 0x02	; 2
    6138:	08 f4       	brcc	.+2      	; 0x613c <_ZN5Print11printNumberEmh+0x32>
    613a:	2a e0       	ldi	r18, 0x0A	; 10
    613c:	8e 01       	movw	r16, r28
    613e:	0f 5d       	subi	r16, 0xDF	; 223
    6140:	1f 4f       	sbci	r17, 0xFF	; 255
    6142:	82 2e       	mov	r8, r18
    6144:	91 2c       	mov	r9, r1
    6146:	a1 2c       	mov	r10, r1
    6148:	b1 2c       	mov	r11, r1
    614a:	bf 01       	movw	r22, r30
    614c:	a5 01       	movw	r20, r10
    614e:	94 01       	movw	r18, r8
    6150:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodsi4>
    6154:	f9 01       	movw	r30, r18
    6156:	ca 01       	movw	r24, r20
    6158:	01 50       	subi	r16, 0x01	; 1
    615a:	11 09       	sbc	r17, r1
    615c:	6a 30       	cpi	r22, 0x0A	; 10
    615e:	10 f4       	brcc	.+4      	; 0x6164 <_ZN5Print11printNumberEmh+0x5a>
    6160:	60 5d       	subi	r22, 0xD0	; 208
    6162:	01 c0       	rjmp	.+2      	; 0x6166 <_ZN5Print11printNumberEmh+0x5c>
    6164:	69 5c       	subi	r22, 0xC9	; 201
    6166:	d8 01       	movw	r26, r16
    6168:	6c 93       	st	X, r22
    616a:	23 2b       	or	r18, r19
    616c:	24 2b       	or	r18, r20
    616e:	25 2b       	or	r18, r21
    6170:	61 f7       	brne	.-40     	; 0x614a <_ZN5Print11printNumberEmh+0x40>
    6172:	b8 01       	movw	r22, r16
    6174:	c7 01       	movw	r24, r14
    6176:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <_ZN5Print5writeEPKc>
    617a:	a1 96       	adiw	r28, 0x21	; 33
    617c:	0f b6       	in	r0, 0x3f	; 63
    617e:	f8 94       	cli
    6180:	de bf       	out	0x3e, r29	; 62
    6182:	0f be       	out	0x3f, r0	; 63
    6184:	cd bf       	out	0x3d, r28	; 61
    6186:	df 91       	pop	r29
    6188:	cf 91       	pop	r28
    618a:	1f 91       	pop	r17
    618c:	0f 91       	pop	r16
    618e:	ff 90       	pop	r15
    6190:	ef 90       	pop	r14
    6192:	bf 90       	pop	r11
    6194:	af 90       	pop	r10
    6196:	9f 90       	pop	r9
    6198:	8f 90       	pop	r8
    619a:	08 95       	ret

0000619c <_ZN5Print5printEmi>:
    619c:	21 15       	cp	r18, r1
    619e:	31 05       	cpc	r19, r1
    61a0:	41 f4       	brne	.+16     	; 0x61b2 <_ZN5Print5printEmi+0x16>
    61a2:	dc 01       	movw	r26, r24
    61a4:	ed 91       	ld	r30, X+
    61a6:	fc 91       	ld	r31, X
    61a8:	01 90       	ld	r0, Z+
    61aa:	f0 81       	ld	r31, Z
    61ac:	e0 2d       	mov	r30, r0
    61ae:	64 2f       	mov	r22, r20
    61b0:	09 94       	ijmp
    61b2:	0c 94 85 30 	jmp	0x610a	; 0x610a <_ZN5Print11printNumberEmh>

000061b6 <_ZN5Print5printEhi>:
    61b6:	9a 01       	movw	r18, r20
    61b8:	46 2f       	mov	r20, r22
    61ba:	50 e0       	ldi	r21, 0x00	; 0
    61bc:	60 e0       	ldi	r22, 0x00	; 0
    61be:	70 e0       	ldi	r23, 0x00	; 0
    61c0:	0c 94 ce 30 	jmp	0x619c	; 0x619c <_ZN5Print5printEmi>

000061c4 <_ZN5Print7printlnEhi>:
    61c4:	0f 93       	push	r16
    61c6:	1f 93       	push	r17
    61c8:	cf 93       	push	r28
    61ca:	df 93       	push	r29
    61cc:	ec 01       	movw	r28, r24
    61ce:	0e 94 db 30 	call	0x61b6	; 0x61b6 <_ZN5Print5printEhi>
    61d2:	8c 01       	movw	r16, r24
    61d4:	ce 01       	movw	r24, r28
    61d6:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN5Print7printlnEv>
    61da:	80 0f       	add	r24, r16
    61dc:	91 1f       	adc	r25, r17
    61de:	df 91       	pop	r29
    61e0:	cf 91       	pop	r28
    61e2:	1f 91       	pop	r17
    61e4:	0f 91       	pop	r16
    61e6:	08 95       	ret

000061e8 <_ZN5Print5printEji>:
    61e8:	9a 01       	movw	r18, r20
    61ea:	ab 01       	movw	r20, r22
    61ec:	60 e0       	ldi	r22, 0x00	; 0
    61ee:	70 e0       	ldi	r23, 0x00	; 0
    61f0:	0c 94 ce 30 	jmp	0x619c	; 0x619c <_ZN5Print5printEmi>

000061f4 <_ZN5Print7printlnEji>:
    61f4:	0f 93       	push	r16
    61f6:	1f 93       	push	r17
    61f8:	cf 93       	push	r28
    61fa:	df 93       	push	r29
    61fc:	ec 01       	movw	r28, r24
    61fe:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_ZN5Print5printEji>
    6202:	8c 01       	movw	r16, r24
    6204:	ce 01       	movw	r24, r28
    6206:	0e 94 4b 30 	call	0x6096	; 0x6096 <_ZN5Print7printlnEv>
    620a:	80 0f       	add	r24, r16
    620c:	91 1f       	adc	r25, r17
    620e:	df 91       	pop	r29
    6210:	cf 91       	pop	r28
    6212:	1f 91       	pop	r17
    6214:	0f 91       	pop	r16
    6216:	08 95       	ret

00006218 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    6218:	cf 92       	push	r12
    621a:	df 92       	push	r13
    621c:	ef 92       	push	r14
    621e:	ff 92       	push	r15
    6220:	0f 93       	push	r16
    6222:	1f 93       	push	r17
    6224:	cf 93       	push	r28
    6226:	df 93       	push	r29
  if (base == 0) {
    6228:	21 15       	cp	r18, r1
    622a:	31 05       	cpc	r19, r1
    622c:	81 f4       	brne	.+32     	; 0x624e <_ZN5Print5printEli+0x36>
    return write(n);
    622e:	dc 01       	movw	r26, r24
    6230:	ed 91       	ld	r30, X+
    6232:	fc 91       	ld	r31, X
    6234:	01 90       	ld	r0, Z+
    6236:	f0 81       	ld	r31, Z
    6238:	e0 2d       	mov	r30, r0
    623a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    623c:	df 91       	pop	r29
    623e:	cf 91       	pop	r28
    6240:	1f 91       	pop	r17
    6242:	0f 91       	pop	r16
    6244:	ff 90       	pop	r15
    6246:	ef 90       	pop	r14
    6248:	df 90       	pop	r13
    624a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    624c:	09 94       	ijmp
  } else if (base == 10) {
    624e:	2a 30       	cpi	r18, 0x0A	; 10
    6250:	31 05       	cpc	r19, r1
    6252:	01 f5       	brne	.+64     	; 0x6294 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    6254:	77 ff       	sbrs	r23, 7
    6256:	1d c0       	rjmp	.+58     	; 0x6292 <_ZN5Print5printEli+0x7a>
    6258:	6a 01       	movw	r12, r20
    625a:	7b 01       	movw	r14, r22
    625c:	ec 01       	movw	r28, r24
      int t = print('-');
    625e:	6d e2       	ldi	r22, 0x2D	; 45
    6260:	0e 94 44 30 	call	0x6088	; 0x6088 <_ZN5Print5printEc>
    6264:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    6266:	44 27       	eor	r20, r20
    6268:	55 27       	eor	r21, r21
    626a:	ba 01       	movw	r22, r20
    626c:	4c 19       	sub	r20, r12
    626e:	5d 09       	sbc	r21, r13
    6270:	6e 09       	sbc	r22, r14
    6272:	7f 09       	sbc	r23, r15
    6274:	2a e0       	ldi	r18, 0x0A	; 10
    6276:	ce 01       	movw	r24, r28
    6278:	0e 94 85 30 	call	0x610a	; 0x610a <_ZN5Print11printNumberEmh>
    627c:	80 0f       	add	r24, r16
    627e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	1f 91       	pop	r17
    6286:	0f 91       	pop	r16
    6288:	ff 90       	pop	r15
    628a:	ef 90       	pop	r14
    628c:	df 90       	pop	r13
    628e:	cf 90       	pop	r12
    6290:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    6292:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    6294:	df 91       	pop	r29
    6296:	cf 91       	pop	r28
    6298:	1f 91       	pop	r17
    629a:	0f 91       	pop	r16
    629c:	ff 90       	pop	r15
    629e:	ef 90       	pop	r14
    62a0:	df 90       	pop	r13
    62a2:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    62a4:	0c 94 85 30 	jmp	0x610a	; 0x610a <_ZN5Print11printNumberEmh>

000062a8 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    62a8:	1f 92       	push	r1
    62aa:	0f 92       	push	r0
    62ac:	0f b6       	in	r0, 0x3f	; 63
    62ae:	0f 92       	push	r0
    62b0:	11 24       	eor	r1, r1
    62b2:	2f 93       	push	r18
    62b4:	3f 93       	push	r19
    62b6:	8f 93       	push	r24
    62b8:	9f 93       	push	r25
    62ba:	af 93       	push	r26
    62bc:	bf 93       	push	r27
    62be:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <timer0_millis>
    62c2:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <timer0_millis+0x1>
    62c6:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <timer0_millis+0x2>
    62ca:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <timer0_millis+0x3>
    62ce:	30 91 7f 04 	lds	r19, 0x047F	; 0x80047f <timer0_fract>
    62d2:	26 e0       	ldi	r18, 0x06	; 6
    62d4:	23 0f       	add	r18, r19
    62d6:	2d 37       	cpi	r18, 0x7D	; 125
    62d8:	20 f4       	brcc	.+8      	; 0x62e2 <__vector_16+0x3a>
    62da:	02 96       	adiw	r24, 0x02	; 2
    62dc:	a1 1d       	adc	r26, r1
    62de:	b1 1d       	adc	r27, r1
    62e0:	05 c0       	rjmp	.+10     	; 0x62ec <__vector_16+0x44>
    62e2:	29 e8       	ldi	r18, 0x89	; 137
    62e4:	23 0f       	add	r18, r19
    62e6:	03 96       	adiw	r24, 0x03	; 3
    62e8:	a1 1d       	adc	r26, r1
    62ea:	b1 1d       	adc	r27, r1
    62ec:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <timer0_fract>
    62f0:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <timer0_millis>
    62f4:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <timer0_millis+0x1>
    62f8:	a0 93 82 04 	sts	0x0482, r26	; 0x800482 <timer0_millis+0x2>
    62fc:	b0 93 83 04 	sts	0x0483, r27	; 0x800483 <timer0_millis+0x3>
    6300:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <timer0_overflow_count>
    6304:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <timer0_overflow_count+0x1>
    6308:	a0 91 86 04 	lds	r26, 0x0486	; 0x800486 <timer0_overflow_count+0x2>
    630c:	b0 91 87 04 	lds	r27, 0x0487	; 0x800487 <timer0_overflow_count+0x3>
    6310:	01 96       	adiw	r24, 0x01	; 1
    6312:	a1 1d       	adc	r26, r1
    6314:	b1 1d       	adc	r27, r1
    6316:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <timer0_overflow_count>
    631a:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <timer0_overflow_count+0x1>
    631e:	a0 93 86 04 	sts	0x0486, r26	; 0x800486 <timer0_overflow_count+0x2>
    6322:	b0 93 87 04 	sts	0x0487, r27	; 0x800487 <timer0_overflow_count+0x3>
    6326:	bf 91       	pop	r27
    6328:	af 91       	pop	r26
    632a:	9f 91       	pop	r25
    632c:	8f 91       	pop	r24
    632e:	3f 91       	pop	r19
    6330:	2f 91       	pop	r18
    6332:	0f 90       	pop	r0
    6334:	0f be       	out	0x3f, r0	; 63
    6336:	0f 90       	pop	r0
    6338:	1f 90       	pop	r1
    633a:	18 95       	reti

0000633c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    633c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    633e:	f8 94       	cli
	m = timer0_overflow_count;
    6340:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <timer0_overflow_count>
    6344:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <timer0_overflow_count+0x1>
    6348:	a0 91 86 04 	lds	r26, 0x0486	; 0x800486 <timer0_overflow_count+0x2>
    634c:	b0 91 87 04 	lds	r27, 0x0487	; 0x800487 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6350:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6352:	a8 9b       	sbis	0x15, 0	; 21
    6354:	05 c0       	rjmp	.+10     	; 0x6360 <micros+0x24>
    6356:	2f 3f       	cpi	r18, 0xFF	; 255
    6358:	19 f0       	breq	.+6      	; 0x6360 <micros+0x24>
		m++;
    635a:	01 96       	adiw	r24, 0x01	; 1
    635c:	a1 1d       	adc	r26, r1
    635e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6360:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6362:	ba 2f       	mov	r27, r26
    6364:	a9 2f       	mov	r26, r25
    6366:	98 2f       	mov	r25, r24
    6368:	88 27       	eor	r24, r24
    636a:	82 0f       	add	r24, r18
    636c:	91 1d       	adc	r25, r1
    636e:	a1 1d       	adc	r26, r1
    6370:	b1 1d       	adc	r27, r1
    6372:	bc 01       	movw	r22, r24
    6374:	cd 01       	movw	r24, r26
    6376:	43 e0       	ldi	r20, 0x03	; 3
    6378:	66 0f       	add	r22, r22
    637a:	77 1f       	adc	r23, r23
    637c:	88 1f       	adc	r24, r24
    637e:	99 1f       	adc	r25, r25
    6380:	4a 95       	dec	r20
    6382:	d1 f7       	brne	.-12     	; 0x6378 <micros+0x3c>
}
    6384:	08 95       	ret

00006386 <delay>:

void delay(unsigned long ms)
{
    6386:	8f 92       	push	r8
    6388:	9f 92       	push	r9
    638a:	af 92       	push	r10
    638c:	bf 92       	push	r11
    638e:	cf 92       	push	r12
    6390:	df 92       	push	r13
    6392:	ef 92       	push	r14
    6394:	ff 92       	push	r15
    6396:	6b 01       	movw	r12, r22
    6398:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    639a:	0e 94 9e 31 	call	0x633c	; 0x633c <micros>
    639e:	4b 01       	movw	r8, r22
    63a0:	5c 01       	movw	r10, r24

	while (ms > 0) {
    63a2:	c1 14       	cp	r12, r1
    63a4:	d1 04       	cpc	r13, r1
    63a6:	e1 04       	cpc	r14, r1
    63a8:	f1 04       	cpc	r15, r1
    63aa:	01 f1       	breq	.+64     	; 0x63ec <delay+0x66>
		yield();
    63ac:	0e 94 c4 34 	call	0x6988	; 0x6988 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    63b0:	0e 94 9e 31 	call	0x633c	; 0x633c <micros>
    63b4:	dc 01       	movw	r26, r24
    63b6:	cb 01       	movw	r24, r22
    63b8:	88 19       	sub	r24, r8
    63ba:	99 09       	sbc	r25, r9
    63bc:	aa 09       	sbc	r26, r10
    63be:	bb 09       	sbc	r27, r11
    63c0:	88 3e       	cpi	r24, 0xE8	; 232
    63c2:	93 40       	sbci	r25, 0x03	; 3
    63c4:	a1 05       	cpc	r26, r1
    63c6:	b1 05       	cpc	r27, r1
    63c8:	60 f3       	brcs	.-40     	; 0x63a2 <delay+0x1c>
			ms--;
    63ca:	21 e0       	ldi	r18, 0x01	; 1
    63cc:	c2 1a       	sub	r12, r18
    63ce:	d1 08       	sbc	r13, r1
    63d0:	e1 08       	sbc	r14, r1
    63d2:	f1 08       	sbc	r15, r1
			start += 1000;
    63d4:	88 ee       	ldi	r24, 0xE8	; 232
    63d6:	88 0e       	add	r8, r24
    63d8:	83 e0       	ldi	r24, 0x03	; 3
    63da:	98 1e       	adc	r9, r24
    63dc:	a1 1c       	adc	r10, r1
    63de:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    63e0:	c1 14       	cp	r12, r1
    63e2:	d1 04       	cpc	r13, r1
    63e4:	e1 04       	cpc	r14, r1
    63e6:	f1 04       	cpc	r15, r1
    63e8:	19 f7       	brne	.-58     	; 0x63b0 <delay+0x2a>
    63ea:	db cf       	rjmp	.-74     	; 0x63a2 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    63ec:	ff 90       	pop	r15
    63ee:	ef 90       	pop	r14
    63f0:	df 90       	pop	r13
    63f2:	cf 90       	pop	r12
    63f4:	bf 90       	pop	r11
    63f6:	af 90       	pop	r10
    63f8:	9f 90       	pop	r9
    63fa:	8f 90       	pop	r8
    63fc:	08 95       	ret

000063fe <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    63fe:	83 30       	cpi	r24, 0x03	; 3
    6400:	91 05       	cpc	r25, r1
    6402:	28 f0       	brcs	.+10     	; 0x640e <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    6404:	88 0f       	add	r24, r24
    6406:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    6408:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    640a:	01 97       	sbiw	r24, 0x01	; 1
    640c:	f1 f7       	brne	.-4      	; 0x640a <delayMicroseconds+0xc>
    640e:	08 95       	ret

00006410 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6410:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6412:	84 b5       	in	r24, 0x24	; 36
    6414:	82 60       	ori	r24, 0x02	; 2
    6416:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6418:	84 b5       	in	r24, 0x24	; 36
    641a:	81 60       	ori	r24, 0x01	; 1
    641c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    641e:	85 b5       	in	r24, 0x25	; 37
    6420:	82 60       	ori	r24, 0x02	; 2
    6422:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6424:	85 b5       	in	r24, 0x25	; 37
    6426:	81 60       	ori	r24, 0x01	; 1
    6428:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    642a:	ee e6       	ldi	r30, 0x6E	; 110
    642c:	f0 e0       	ldi	r31, 0x00	; 0
    642e:	80 81       	ld	r24, Z
    6430:	81 60       	ori	r24, 0x01	; 1
    6432:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6434:	e1 e8       	ldi	r30, 0x81	; 129
    6436:	f0 e0       	ldi	r31, 0x00	; 0
    6438:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    643a:	80 81       	ld	r24, Z
    643c:	82 60       	ori	r24, 0x02	; 2
    643e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6440:	80 81       	ld	r24, Z
    6442:	81 60       	ori	r24, 0x01	; 1
    6444:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6446:	e0 e8       	ldi	r30, 0x80	; 128
    6448:	f0 e0       	ldi	r31, 0x00	; 0
    644a:	80 81       	ld	r24, Z
    644c:	81 60       	ori	r24, 0x01	; 1
    644e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6450:	e1 eb       	ldi	r30, 0xB1	; 177
    6452:	f0 e0       	ldi	r31, 0x00	; 0
    6454:	80 81       	ld	r24, Z
    6456:	84 60       	ori	r24, 0x04	; 4
    6458:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    645a:	e0 eb       	ldi	r30, 0xB0	; 176
    645c:	f0 e0       	ldi	r31, 0x00	; 0
    645e:	80 81       	ld	r24, Z
    6460:	81 60       	ori	r24, 0x01	; 1
    6462:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6464:	ea e7       	ldi	r30, 0x7A	; 122
    6466:	f0 e0       	ldi	r31, 0x00	; 0
    6468:	80 81       	ld	r24, Z
    646a:	84 60       	ori	r24, 0x04	; 4
    646c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    646e:	80 81       	ld	r24, Z
    6470:	82 60       	ori	r24, 0x02	; 2
    6472:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    6474:	80 81       	ld	r24, Z
    6476:	8e 7f       	andi	r24, 0xFE	; 254
    6478:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    647a:	80 81       	ld	r24, Z
    647c:	80 68       	ori	r24, 0x80	; 128
    647e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6480:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    6484:	08 95       	ret

00006486 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6486:	83 30       	cpi	r24, 0x03	; 3
    6488:	81 f0       	breq	.+32     	; 0x64aa <turnOffPWM+0x24>
    648a:	28 f4       	brcc	.+10     	; 0x6496 <turnOffPWM+0x10>
    648c:	81 30       	cpi	r24, 0x01	; 1
    648e:	99 f0       	breq	.+38     	; 0x64b6 <turnOffPWM+0x30>
    6490:	82 30       	cpi	r24, 0x02	; 2
    6492:	a1 f0       	breq	.+40     	; 0x64bc <turnOffPWM+0x36>
    6494:	08 95       	ret
    6496:	87 30       	cpi	r24, 0x07	; 7
    6498:	a9 f0       	breq	.+42     	; 0x64c4 <turnOffPWM+0x3e>
    649a:	88 30       	cpi	r24, 0x08	; 8
    649c:	b9 f0       	breq	.+46     	; 0x64cc <turnOffPWM+0x46>
    649e:	84 30       	cpi	r24, 0x04	; 4
    64a0:	d1 f4       	brne	.+52     	; 0x64d6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    64a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    64a6:	8f 7d       	andi	r24, 0xDF	; 223
    64a8:	03 c0       	rjmp	.+6      	; 0x64b0 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    64aa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    64ae:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    64b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    64b4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    64b6:	84 b5       	in	r24, 0x24	; 36
    64b8:	8f 77       	andi	r24, 0x7F	; 127
    64ba:	02 c0       	rjmp	.+4      	; 0x64c0 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    64bc:	84 b5       	in	r24, 0x24	; 36
    64be:	8f 7d       	andi	r24, 0xDF	; 223
    64c0:	84 bd       	out	0x24, r24	; 36
    64c2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    64c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    64c8:	8f 77       	andi	r24, 0x7F	; 127
    64ca:	03 c0       	rjmp	.+6      	; 0x64d2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    64cc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    64d0:	8f 7d       	andi	r24, 0xDF	; 223
    64d2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    64d6:	08 95       	ret

000064d8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    64d8:	cf 93       	push	r28
    64da:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	fc 01       	movw	r30, r24
    64e0:	e1 55       	subi	r30, 0x51	; 81
    64e2:	fb 4f       	sbci	r31, 0xFB	; 251
    64e4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    64e6:	fc 01       	movw	r30, r24
    64e8:	ed 53       	subi	r30, 0x3D	; 61
    64ea:	fb 4f       	sbci	r31, 0xFB	; 251
    64ec:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    64ee:	88 23       	and	r24, r24
    64f0:	61 f1       	breq	.+88     	; 0x654a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	88 0f       	add	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	fc 01       	movw	r30, r24
    64fa:	e5 51       	subi	r30, 0x15	; 21
    64fc:	fb 4f       	sbci	r31, 0xFB	; 251
    64fe:	c5 91       	lpm	r28, Z+
    6500:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6502:	fc 01       	movw	r30, r24
    6504:	ef 51       	subi	r30, 0x1F	; 31
    6506:	fb 4f       	sbci	r31, 0xFB	; 251
    6508:	a5 91       	lpm	r26, Z+
    650a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    650c:	61 11       	cpse	r22, r1
    650e:	09 c0       	rjmp	.+18     	; 0x6522 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6510:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6512:	f8 94       	cli
		*reg &= ~bit;
    6514:	88 81       	ld	r24, Y
    6516:	20 95       	com	r18
    6518:	82 23       	and	r24, r18
    651a:	88 83       	st	Y, r24
		*out &= ~bit;
    651c:	ec 91       	ld	r30, X
    651e:	2e 23       	and	r18, r30
    6520:	0b c0       	rjmp	.+22     	; 0x6538 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6522:	62 30       	cpi	r22, 0x02	; 2
    6524:	61 f4       	brne	.+24     	; 0x653e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6526:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6528:	f8 94       	cli
		*reg &= ~bit;
    652a:	88 81       	ld	r24, Y
    652c:	32 2f       	mov	r19, r18
    652e:	30 95       	com	r19
    6530:	83 23       	and	r24, r19
    6532:	88 83       	st	Y, r24
		*out |= bit;
    6534:	ec 91       	ld	r30, X
    6536:	2e 2b       	or	r18, r30
    6538:	2c 93       	st	X, r18
		SREG = oldSREG;
    653a:	9f bf       	out	0x3f, r25	; 63
    653c:	06 c0       	rjmp	.+12     	; 0x654a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    653e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6540:	f8 94       	cli
		*reg |= bit;
    6542:	e8 81       	ld	r30, Y
    6544:	2e 2b       	or	r18, r30
    6546:	28 83       	st	Y, r18
		SREG = oldSREG;
    6548:	8f bf       	out	0x3f, r24	; 63
	}
}
    654a:	df 91       	pop	r29
    654c:	cf 91       	pop	r28
    654e:	08 95       	ret

00006550 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6550:	1f 93       	push	r17
    6552:	cf 93       	push	r28
    6554:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6556:	28 2f       	mov	r18, r24
    6558:	30 e0       	ldi	r19, 0x00	; 0
    655a:	f9 01       	movw	r30, r18
    655c:	e5 56       	subi	r30, 0x65	; 101
    655e:	fb 4f       	sbci	r31, 0xFB	; 251
    6560:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6562:	f9 01       	movw	r30, r18
    6564:	e1 55       	subi	r30, 0x51	; 81
    6566:	fb 4f       	sbci	r31, 0xFB	; 251
    6568:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    656a:	f9 01       	movw	r30, r18
    656c:	ed 53       	subi	r30, 0x3D	; 61
    656e:	fb 4f       	sbci	r31, 0xFB	; 251
    6570:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6572:	cc 23       	and	r28, r28
    6574:	c1 f0       	breq	.+48     	; 0x65a6 <digitalWrite+0x56>
    6576:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6578:	81 11       	cpse	r24, r1
    657a:	0e 94 43 32 	call	0x6486	; 0x6486 <turnOffPWM>

	out = portOutputRegister(port);
    657e:	ec 2f       	mov	r30, r28
    6580:	f0 e0       	ldi	r31, 0x00	; 0
    6582:	ee 0f       	add	r30, r30
    6584:	ff 1f       	adc	r31, r31
    6586:	ef 51       	subi	r30, 0x1F	; 31
    6588:	fb 4f       	sbci	r31, 0xFB	; 251
    658a:	a5 91       	lpm	r26, Z+
    658c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    658e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6590:	f8 94       	cli

	if (val == LOW) {
    6592:	11 11       	cpse	r17, r1
    6594:	04 c0       	rjmp	.+8      	; 0x659e <digitalWrite+0x4e>
		*out &= ~bit;
    6596:	8c 91       	ld	r24, X
    6598:	d0 95       	com	r29
    659a:	d8 23       	and	r29, r24
    659c:	02 c0       	rjmp	.+4      	; 0x65a2 <digitalWrite+0x52>
	} else {
		*out |= bit;
    659e:	ec 91       	ld	r30, X
    65a0:	de 2b       	or	r29, r30
    65a2:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    65a4:	9f bf       	out	0x3f, r25	; 63
}
    65a6:	df 91       	pop	r29
    65a8:	cf 91       	pop	r28
    65aa:	1f 91       	pop	r17
    65ac:	08 95       	ret

000065ae <digitalRead>:

int digitalRead(uint8_t pin)
{
    65ae:	cf 93       	push	r28
    65b0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    65b2:	28 2f       	mov	r18, r24
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	f9 01       	movw	r30, r18
    65b8:	e5 56       	subi	r30, 0x65	; 101
    65ba:	fb 4f       	sbci	r31, 0xFB	; 251
    65bc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    65be:	f9 01       	movw	r30, r18
    65c0:	e1 55       	subi	r30, 0x51	; 81
    65c2:	fb 4f       	sbci	r31, 0xFB	; 251
    65c4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    65c6:	f9 01       	movw	r30, r18
    65c8:	ed 53       	subi	r30, 0x3D	; 61
    65ca:	fb 4f       	sbci	r31, 0xFB	; 251
    65cc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    65ce:	cc 23       	and	r28, r28
    65d0:	91 f0       	breq	.+36     	; 0x65f6 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    65d2:	81 11       	cpse	r24, r1
    65d4:	0e 94 43 32 	call	0x6486	; 0x6486 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    65d8:	ec 2f       	mov	r30, r28
    65da:	f0 e0       	ldi	r31, 0x00	; 0
    65dc:	ee 0f       	add	r30, r30
    65de:	ff 1f       	adc	r31, r31
    65e0:	e9 52       	subi	r30, 0x29	; 41
    65e2:	fb 4f       	sbci	r31, 0xFB	; 251
    65e4:	a5 91       	lpm	r26, Z+
    65e6:	b4 91       	lpm	r27, Z
    65e8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    65ea:	ed 23       	and	r30, r29
    65ec:	81 e0       	ldi	r24, 0x01	; 1
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	21 f4       	brne	.+8      	; 0x65fa <digitalRead+0x4c>
    65f2:	80 e0       	ldi	r24, 0x00	; 0
    65f4:	02 c0       	rjmp	.+4      	; 0x65fa <digitalRead+0x4c>
    65f6:	80 e0       	ldi	r24, 0x00	; 0
    65f8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    65fa:	df 91       	pop	r29
    65fc:	cf 91       	pop	r28
    65fe:	08 95       	ret

00006600 <_ZN6StringD1Ev>:
	char *end = buffer + len - 1;
	while (isspace(*end) && end >= begin) end--;
	len = end + 1 - begin;
	if (begin > buffer) memcpy(buffer, begin, len);
	buffer[len] = 0;
}
    6600:	fc 01       	movw	r30, r24
    6602:	80 81       	ld	r24, Z
    6604:	91 81       	ldd	r25, Z+1	; 0x01
    6606:	00 97       	sbiw	r24, 0x00	; 0
    6608:	11 f0       	breq	.+4      	; 0x660e <_ZN6StringD1Ev+0xe>
    660a:	0c 94 85 37 	jmp	0x6f0a	; 0x6f0a <free>
    660e:	08 95       	ret

00006610 <_ZN6String10invalidateEv>:
    6610:	cf 93       	push	r28
    6612:	df 93       	push	r29
    6614:	ec 01       	movw	r28, r24
    6616:	88 81       	ld	r24, Y
    6618:	99 81       	ldd	r25, Y+1	; 0x01
    661a:	00 97       	sbiw	r24, 0x00	; 0
    661c:	11 f0       	breq	.+4      	; 0x6622 <_ZN6String10invalidateEv+0x12>
    661e:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <free>
    6622:	19 82       	std	Y+1, r1	; 0x01
    6624:	18 82       	st	Y, r1
    6626:	1d 82       	std	Y+5, r1	; 0x05
    6628:	1c 82       	std	Y+4, r1	; 0x04
    662a:	1b 82       	std	Y+3, r1	; 0x03
    662c:	1a 82       	std	Y+2, r1	; 0x02
    662e:	df 91       	pop	r29
    6630:	cf 91       	pop	r28
    6632:	08 95       	ret

00006634 <_ZN6String12changeBufferEj>:
    6634:	0f 93       	push	r16
    6636:	1f 93       	push	r17
    6638:	cf 93       	push	r28
    663a:	df 93       	push	r29
    663c:	ec 01       	movw	r28, r24
    663e:	8b 01       	movw	r16, r22
    6640:	6f 5f       	subi	r22, 0xFF	; 255
    6642:	7f 4f       	sbci	r23, 0xFF	; 255
    6644:	88 81       	ld	r24, Y
    6646:	99 81       	ldd	r25, Y+1	; 0x01
    6648:	0e 94 0e 38 	call	0x701c	; 0x701c <realloc>
    664c:	00 97       	sbiw	r24, 0x00	; 0
    664e:	31 f0       	breq	.+12     	; 0x665c <_ZN6String12changeBufferEj+0x28>
    6650:	99 83       	std	Y+1, r25	; 0x01
    6652:	88 83       	st	Y, r24
    6654:	1b 83       	std	Y+3, r17	; 0x03
    6656:	0a 83       	std	Y+2, r16	; 0x02
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	01 c0       	rjmp	.+2      	; 0x665e <_ZN6String12changeBufferEj+0x2a>
    665c:	80 e0       	ldi	r24, 0x00	; 0
    665e:	df 91       	pop	r29
    6660:	cf 91       	pop	r28
    6662:	1f 91       	pop	r17
    6664:	0f 91       	pop	r16
    6666:	08 95       	ret

00006668 <_ZN6String7reserveEj>:
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	ec 01       	movw	r28, r24
    666e:	88 81       	ld	r24, Y
    6670:	99 81       	ldd	r25, Y+1	; 0x01
    6672:	89 2b       	or	r24, r25
    6674:	29 f0       	breq	.+10     	; 0x6680 <_ZN6String7reserveEj+0x18>
    6676:	8a 81       	ldd	r24, Y+2	; 0x02
    6678:	9b 81       	ldd	r25, Y+3	; 0x03
    667a:	86 17       	cp	r24, r22
    667c:	97 07       	cpc	r25, r23
    667e:	60 f4       	brcc	.+24     	; 0x6698 <_ZN6String7reserveEj+0x30>
    6680:	ce 01       	movw	r24, r28
    6682:	0e 94 1a 33 	call	0x6634	; 0x6634 <_ZN6String12changeBufferEj>
    6686:	88 23       	and	r24, r24
    6688:	41 f0       	breq	.+16     	; 0x669a <_ZN6String7reserveEj+0x32>
    668a:	8c 81       	ldd	r24, Y+4	; 0x04
    668c:	9d 81       	ldd	r25, Y+5	; 0x05
    668e:	89 2b       	or	r24, r25
    6690:	19 f4       	brne	.+6      	; 0x6698 <_ZN6String7reserveEj+0x30>
    6692:	e8 81       	ld	r30, Y
    6694:	f9 81       	ldd	r31, Y+1	; 0x01
    6696:	10 82       	st	Z, r1
    6698:	81 e0       	ldi	r24, 0x01	; 1
    669a:	df 91       	pop	r29
    669c:	cf 91       	pop	r28
    669e:	08 95       	ret

000066a0 <_ZN6String4copyEPKcj>:
    66a0:	ef 92       	push	r14
    66a2:	ff 92       	push	r15
    66a4:	0f 93       	push	r16
    66a6:	1f 93       	push	r17
    66a8:	cf 93       	push	r28
    66aa:	df 93       	push	r29
    66ac:	ec 01       	movw	r28, r24
    66ae:	7b 01       	movw	r14, r22
    66b0:	8a 01       	movw	r16, r20
    66b2:	ba 01       	movw	r22, r20
    66b4:	0e 94 34 33 	call	0x6668	; 0x6668 <_ZN6String7reserveEj>
    66b8:	81 11       	cpse	r24, r1
    66ba:	04 c0       	rjmp	.+8      	; 0x66c4 <_ZN6String4copyEPKcj+0x24>
    66bc:	ce 01       	movw	r24, r28
    66be:	0e 94 08 33 	call	0x6610	; 0x6610 <_ZN6String10invalidateEv>
    66c2:	07 c0       	rjmp	.+14     	; 0x66d2 <_ZN6String4copyEPKcj+0x32>
    66c4:	1d 83       	std	Y+5, r17	; 0x05
    66c6:	0c 83       	std	Y+4, r16	; 0x04
    66c8:	b7 01       	movw	r22, r14
    66ca:	88 81       	ld	r24, Y
    66cc:	99 81       	ldd	r25, Y+1	; 0x01
    66ce:	0e 94 0d 39 	call	0x721a	; 0x721a <strcpy>
    66d2:	ce 01       	movw	r24, r28
    66d4:	df 91       	pop	r29
    66d6:	cf 91       	pop	r28
    66d8:	1f 91       	pop	r17
    66da:	0f 91       	pop	r16
    66dc:	ff 90       	pop	r15
    66de:	ef 90       	pop	r14
    66e0:	08 95       	ret

000066e2 <_ZN6StringC1EPKc>:
    66e2:	fc 01       	movw	r30, r24
    66e4:	11 82       	std	Z+1, r1	; 0x01
    66e6:	10 82       	st	Z, r1
    66e8:	13 82       	std	Z+3, r1	; 0x03
    66ea:	12 82       	std	Z+2, r1	; 0x02
    66ec:	15 82       	std	Z+5, r1	; 0x05
    66ee:	14 82       	std	Z+4, r1	; 0x04
    66f0:	61 15       	cp	r22, r1
    66f2:	71 05       	cpc	r23, r1
    66f4:	51 f0       	breq	.+20     	; 0x670a <_ZN6StringC1EPKc+0x28>
    66f6:	fb 01       	movw	r30, r22
    66f8:	01 90       	ld	r0, Z+
    66fa:	00 20       	and	r0, r0
    66fc:	e9 f7       	brne	.-6      	; 0x66f8 <_ZN6StringC1EPKc+0x16>
    66fe:	31 97       	sbiw	r30, 0x01	; 1
    6700:	af 01       	movw	r20, r30
    6702:	46 1b       	sub	r20, r22
    6704:	57 0b       	sbc	r21, r23
    6706:	0c 94 50 33 	jmp	0x66a0	; 0x66a0 <_ZN6String4copyEPKcj>
    670a:	08 95       	ret

0000670c <_ZN6StringaSERKS_>:
    670c:	cf 93       	push	r28
    670e:	df 93       	push	r29
    6710:	ec 01       	movw	r28, r24
    6712:	fb 01       	movw	r30, r22
    6714:	86 17       	cp	r24, r22
    6716:	97 07       	cpc	r25, r23
    6718:	61 f0       	breq	.+24     	; 0x6732 <_ZN6StringaSERKS_+0x26>
    671a:	60 81       	ld	r22, Z
    671c:	71 81       	ldd	r23, Z+1	; 0x01
    671e:	61 15       	cp	r22, r1
    6720:	71 05       	cpc	r23, r1
    6722:	29 f0       	breq	.+10     	; 0x672e <_ZN6StringaSERKS_+0x22>
    6724:	44 81       	ldd	r20, Z+4	; 0x04
    6726:	55 81       	ldd	r21, Z+5	; 0x05
    6728:	0e 94 50 33 	call	0x66a0	; 0x66a0 <_ZN6String4copyEPKcj>
    672c:	02 c0       	rjmp	.+4      	; 0x6732 <_ZN6StringaSERKS_+0x26>
    672e:	0e 94 08 33 	call	0x6610	; 0x6610 <_ZN6String10invalidateEv>
    6732:	ce 01       	movw	r24, r28
    6734:	df 91       	pop	r29
    6736:	cf 91       	pop	r28
    6738:	08 95       	ret

0000673a <_ZN6StringC1ERKS_>:
    673a:	fc 01       	movw	r30, r24
    673c:	11 82       	std	Z+1, r1	; 0x01
    673e:	10 82       	st	Z, r1
    6740:	13 82       	std	Z+3, r1	; 0x03
    6742:	12 82       	std	Z+2, r1	; 0x02
    6744:	15 82       	std	Z+5, r1	; 0x05
    6746:	14 82       	std	Z+4, r1	; 0x04
    6748:	0c 94 86 33 	jmp	0x670c	; 0x670c <_ZN6StringaSERKS_>

0000674c <_ZN6StringaSEPKc>:
    674c:	cf 93       	push	r28
    674e:	df 93       	push	r29
    6750:	ec 01       	movw	r28, r24
    6752:	61 15       	cp	r22, r1
    6754:	71 05       	cpc	r23, r1
    6756:	59 f0       	breq	.+22     	; 0x676e <_ZN6StringaSEPKc+0x22>
    6758:	fb 01       	movw	r30, r22
    675a:	01 90       	ld	r0, Z+
    675c:	00 20       	and	r0, r0
    675e:	e9 f7       	brne	.-6      	; 0x675a <_ZN6StringaSEPKc+0xe>
    6760:	31 97       	sbiw	r30, 0x01	; 1
    6762:	af 01       	movw	r20, r30
    6764:	46 1b       	sub	r20, r22
    6766:	57 0b       	sbc	r21, r23
    6768:	0e 94 50 33 	call	0x66a0	; 0x66a0 <_ZN6String4copyEPKcj>
    676c:	02 c0       	rjmp	.+4      	; 0x6772 <_ZN6StringaSEPKc+0x26>
    676e:	0e 94 08 33 	call	0x6610	; 0x6610 <_ZN6String10invalidateEv>
    6772:	ce 01       	movw	r24, r28
    6774:	df 91       	pop	r29
    6776:	cf 91       	pop	r28
    6778:	08 95       	ret

0000677a <_ZN6StringC1Ehh>:
    677a:	0f 93       	push	r16
    677c:	1f 93       	push	r17
    677e:	cf 93       	push	r28
    6780:	df 93       	push	r29
    6782:	cd b7       	in	r28, 0x3d	; 61
    6784:	de b7       	in	r29, 0x3e	; 62
    6786:	29 97       	sbiw	r28, 0x09	; 9
    6788:	0f b6       	in	r0, 0x3f	; 63
    678a:	f8 94       	cli
    678c:	de bf       	out	0x3e, r29	; 62
    678e:	0f be       	out	0x3f, r0	; 63
    6790:	cd bf       	out	0x3d, r28	; 61
    6792:	8c 01       	movw	r16, r24
    6794:	86 2f       	mov	r24, r22
    6796:	f8 01       	movw	r30, r16
    6798:	11 82       	std	Z+1, r1	; 0x01
    679a:	10 82       	st	Z, r1
    679c:	13 82       	std	Z+3, r1	; 0x03
    679e:	12 82       	std	Z+2, r1	; 0x02
    67a0:	15 82       	std	Z+5, r1	; 0x05
    67a2:	14 82       	std	Z+4, r1	; 0x04
    67a4:	50 e0       	ldi	r21, 0x00	; 0
    67a6:	be 01       	movw	r22, r28
    67a8:	6f 5f       	subi	r22, 0xFF	; 255
    67aa:	7f 4f       	sbci	r23, 0xFF	; 255
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	0e 94 29 39 	call	0x7252	; 0x7252 <utoa>
    67b2:	be 01       	movw	r22, r28
    67b4:	6f 5f       	subi	r22, 0xFF	; 255
    67b6:	7f 4f       	sbci	r23, 0xFF	; 255
    67b8:	c8 01       	movw	r24, r16
    67ba:	0e 94 a6 33 	call	0x674c	; 0x674c <_ZN6StringaSEPKc>
    67be:	29 96       	adiw	r28, 0x09	; 9
    67c0:	0f b6       	in	r0, 0x3f	; 63
    67c2:	f8 94       	cli
    67c4:	de bf       	out	0x3e, r29	; 62
    67c6:	0f be       	out	0x3f, r0	; 63
    67c8:	cd bf       	out	0x3d, r28	; 61
    67ca:	df 91       	pop	r29
    67cc:	cf 91       	pop	r28
    67ce:	1f 91       	pop	r17
    67d0:	0f 91       	pop	r16
    67d2:	08 95       	ret

000067d4 <_ZN6StringC1Efh>:
    67d4:	ef 92       	push	r14
    67d6:	ff 92       	push	r15
    67d8:	0f 93       	push	r16
    67da:	1f 93       	push	r17
    67dc:	cf 93       	push	r28
    67de:	df 93       	push	r29
    67e0:	cd b7       	in	r28, 0x3d	; 61
    67e2:	de b7       	in	r29, 0x3e	; 62
    67e4:	a1 97       	sbiw	r28, 0x21	; 33
    67e6:	0f b6       	in	r0, 0x3f	; 63
    67e8:	f8 94       	cli
    67ea:	de bf       	out	0x3e, r29	; 62
    67ec:	0f be       	out	0x3f, r0	; 63
    67ee:	cd bf       	out	0x3d, r28	; 61
    67f0:	7c 01       	movw	r14, r24
    67f2:	cb 01       	movw	r24, r22
    67f4:	ba 01       	movw	r22, r20
    67f6:	f7 01       	movw	r30, r14
    67f8:	11 82       	std	Z+1, r1	; 0x01
    67fa:	10 82       	st	Z, r1
    67fc:	13 82       	std	Z+3, r1	; 0x03
    67fe:	12 82       	std	Z+2, r1	; 0x02
    6800:	15 82       	std	Z+5, r1	; 0x05
    6802:	14 82       	std	Z+4, r1	; 0x04
    6804:	42 e0       	ldi	r20, 0x02	; 2
    6806:	42 0f       	add	r20, r18
    6808:	8e 01       	movw	r16, r28
    680a:	0f 5f       	subi	r16, 0xFF	; 255
    680c:	1f 4f       	sbci	r17, 0xFF	; 255
    680e:	0e 94 cd 36 	call	0x6d9a	; 0x6d9a <dtostrf>
    6812:	bc 01       	movw	r22, r24
    6814:	c7 01       	movw	r24, r14
    6816:	0e 94 a6 33 	call	0x674c	; 0x674c <_ZN6StringaSEPKc>
    681a:	a1 96       	adiw	r28, 0x21	; 33
    681c:	0f b6       	in	r0, 0x3f	; 63
    681e:	f8 94       	cli
    6820:	de bf       	out	0x3e, r29	; 62
    6822:	0f be       	out	0x3f, r0	; 63
    6824:	cd bf       	out	0x3d, r28	; 61
    6826:	df 91       	pop	r29
    6828:	cf 91       	pop	r28
    682a:	1f 91       	pop	r17
    682c:	0f 91       	pop	r16
    682e:	ff 90       	pop	r15
    6830:	ef 90       	pop	r14
    6832:	08 95       	ret

00006834 <_ZN6String6concatEPKcj>:
    6834:	ef 92       	push	r14
    6836:	ff 92       	push	r15
    6838:	0f 93       	push	r16
    683a:	1f 93       	push	r17
    683c:	cf 93       	push	r28
    683e:	df 93       	push	r29
    6840:	61 15       	cp	r22, r1
    6842:	71 05       	cpc	r23, r1
    6844:	11 f4       	brne	.+4      	; 0x684a <_ZN6String6concatEPKcj+0x16>
    6846:	80 e0       	ldi	r24, 0x00	; 0
    6848:	1c c0       	rjmp	.+56     	; 0x6882 <_ZN6String6concatEPKcj+0x4e>
    684a:	41 15       	cp	r20, r1
    684c:	51 05       	cpc	r21, r1
    684e:	c1 f0       	breq	.+48     	; 0x6880 <_ZN6String6concatEPKcj+0x4c>
    6850:	7b 01       	movw	r14, r22
    6852:	ec 01       	movw	r28, r24
    6854:	8c 81       	ldd	r24, Y+4	; 0x04
    6856:	9d 81       	ldd	r25, Y+5	; 0x05
    6858:	8a 01       	movw	r16, r20
    685a:	08 0f       	add	r16, r24
    685c:	19 1f       	adc	r17, r25
    685e:	b8 01       	movw	r22, r16
    6860:	ce 01       	movw	r24, r28
    6862:	0e 94 34 33 	call	0x6668	; 0x6668 <_ZN6String7reserveEj>
    6866:	88 23       	and	r24, r24
    6868:	71 f3       	breq	.-36     	; 0x6846 <_ZN6String6concatEPKcj+0x12>
    686a:	28 81       	ld	r18, Y
    686c:	39 81       	ldd	r19, Y+1	; 0x01
    686e:	8c 81       	ldd	r24, Y+4	; 0x04
    6870:	9d 81       	ldd	r25, Y+5	; 0x05
    6872:	b7 01       	movw	r22, r14
    6874:	82 0f       	add	r24, r18
    6876:	93 1f       	adc	r25, r19
    6878:	0e 94 0d 39 	call	0x721a	; 0x721a <strcpy>
    687c:	1d 83       	std	Y+5, r17	; 0x05
    687e:	0c 83       	std	Y+4, r16	; 0x04
    6880:	81 e0       	ldi	r24, 0x01	; 1
    6882:	df 91       	pop	r29
    6884:	cf 91       	pop	r28
    6886:	1f 91       	pop	r17
    6888:	0f 91       	pop	r16
    688a:	ff 90       	pop	r15
    688c:	ef 90       	pop	r14
    688e:	08 95       	ret

00006890 <_ZplRK15StringSumHelperRK6String>:
    6890:	cf 93       	push	r28
    6892:	df 93       	push	r29
    6894:	ec 01       	movw	r28, r24
    6896:	fb 01       	movw	r30, r22
    6898:	44 81       	ldd	r20, Z+4	; 0x04
    689a:	55 81       	ldd	r21, Z+5	; 0x05
    689c:	60 81       	ld	r22, Z
    689e:	71 81       	ldd	r23, Z+1	; 0x01
    68a0:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN6String6concatEPKcj>
    68a4:	81 11       	cpse	r24, r1
    68a6:	03 c0       	rjmp	.+6      	; 0x68ae <_ZplRK15StringSumHelperRK6String+0x1e>
    68a8:	ce 01       	movw	r24, r28
    68aa:	0e 94 08 33 	call	0x6610	; 0x6610 <_ZN6String10invalidateEv>
    68ae:	ce 01       	movw	r24, r28
    68b0:	df 91       	pop	r29
    68b2:	cf 91       	pop	r28
    68b4:	08 95       	ret

000068b6 <_ZplRK15StringSumHelperPKc>:
    68b6:	cf 93       	push	r28
    68b8:	df 93       	push	r29
    68ba:	ec 01       	movw	r28, r24
    68bc:	61 15       	cp	r22, r1
    68be:	71 05       	cpc	r23, r1
    68c0:	61 f0       	breq	.+24     	; 0x68da <_ZplRK15StringSumHelperPKc+0x24>
    68c2:	fb 01       	movw	r30, r22
    68c4:	01 90       	ld	r0, Z+
    68c6:	00 20       	and	r0, r0
    68c8:	e9 f7       	brne	.-6      	; 0x68c4 <_ZplRK15StringSumHelperPKc+0xe>
    68ca:	31 97       	sbiw	r30, 0x01	; 1
    68cc:	af 01       	movw	r20, r30
    68ce:	46 1b       	sub	r20, r22
    68d0:	57 0b       	sbc	r21, r23
    68d2:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN6String6concatEPKcj>
    68d6:	81 11       	cpse	r24, r1
    68d8:	03 c0       	rjmp	.+6      	; 0x68e0 <_ZplRK15StringSumHelperPKc+0x2a>
    68da:	ce 01       	movw	r24, r28
    68dc:	0e 94 08 33 	call	0x6610	; 0x6610 <_ZN6String10invalidateEv>
    68e0:	ce 01       	movw	r24, r28
    68e2:	df 91       	pop	r29
    68e4:	cf 91       	pop	r28
    68e6:	08 95       	ret

000068e8 <_ZNK6String9substringEjj>:
    68e8:	bf 92       	push	r11
    68ea:	cf 92       	push	r12
    68ec:	df 92       	push	r13
    68ee:	ef 92       	push	r14
    68f0:	ff 92       	push	r15
    68f2:	0f 93       	push	r16
    68f4:	1f 93       	push	r17
    68f6:	cf 93       	push	r28
    68f8:	df 93       	push	r29
    68fa:	7c 01       	movw	r14, r24
    68fc:	6b 01       	movw	r12, r22
    68fe:	8a 01       	movw	r16, r20
    6900:	e9 01       	movw	r28, r18
    6902:	24 17       	cp	r18, r20
    6904:	35 07       	cpc	r19, r21
    6906:	20 f4       	brcc	.+8      	; 0x6910 <_ZNK6String9substringEjj+0x28>
    6908:	81 2f       	mov	r24, r17
    690a:	89 01       	movw	r16, r18
    690c:	c4 2f       	mov	r28, r20
    690e:	d8 2f       	mov	r29, r24
    6910:	68 e6       	ldi	r22, 0x68	; 104
    6912:	72 e0       	ldi	r23, 0x02	; 2
    6914:	c7 01       	movw	r24, r14
    6916:	0e 94 71 33 	call	0x66e2	; 0x66e2 <_ZN6StringC1EPKc>
    691a:	d6 01       	movw	r26, r12
    691c:	14 96       	adiw	r26, 0x04	; 4
    691e:	8d 91       	ld	r24, X+
    6920:	9c 91       	ld	r25, X
    6922:	15 97       	sbiw	r26, 0x05	; 5
    6924:	08 17       	cp	r16, r24
    6926:	19 07       	cpc	r17, r25
    6928:	c8 f4       	brcc	.+50     	; 0x695c <_ZNK6String9substringEjj+0x74>
    692a:	8c 17       	cp	r24, r28
    692c:	9d 07       	cpc	r25, r29
    692e:	08 f4       	brcc	.+2      	; 0x6932 <_ZNK6String9substringEjj+0x4a>
    6930:	ec 01       	movw	r28, r24
    6932:	d6 01       	movw	r26, r12
    6934:	ed 91       	ld	r30, X+
    6936:	fc 91       	ld	r31, X
    6938:	11 97       	sbiw	r26, 0x01	; 1
    693a:	ec 0f       	add	r30, r28
    693c:	fd 1f       	adc	r31, r29
    693e:	b0 80       	ld	r11, Z
    6940:	10 82       	st	Z, r1
    6942:	6d 91       	ld	r22, X+
    6944:	7c 91       	ld	r23, X
    6946:	60 0f       	add	r22, r16
    6948:	71 1f       	adc	r23, r17
    694a:	c7 01       	movw	r24, r14
    694c:	0e 94 a6 33 	call	0x674c	; 0x674c <_ZN6StringaSEPKc>
    6950:	d6 01       	movw	r26, r12
    6952:	ed 91       	ld	r30, X+
    6954:	fc 91       	ld	r31, X
    6956:	ec 0f       	add	r30, r28
    6958:	fd 1f       	adc	r31, r29
    695a:	b0 82       	st	Z, r11
    695c:	c7 01       	movw	r24, r14
    695e:	df 91       	pop	r29
    6960:	cf 91       	pop	r28
    6962:	1f 91       	pop	r17
    6964:	0f 91       	pop	r16
    6966:	ff 90       	pop	r15
    6968:	ef 90       	pop	r14
    696a:	df 90       	pop	r13
    696c:	cf 90       	pop	r12
    696e:	bf 90       	pop	r11
    6970:	08 95       	ret

00006972 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    6972:	fc 01       	movw	r30, r24
    6974:	80 81       	ld	r24, Z
    6976:	91 81       	ldd	r25, Z+1	; 0x01
    6978:	00 97       	sbiw	r24, 0x00	; 0
    697a:	11 f0       	breq	.+4      	; 0x6980 <_ZNK6String5toIntEv+0xe>
    697c:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <atol>
	return 0;
}
    6980:	60 e0       	ldi	r22, 0x00	; 0
    6982:	70 e0       	ldi	r23, 0x00	; 0
    6984:	cb 01       	movw	r24, r22
    6986:	08 95       	ret

00006988 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6988:	08 95       	ret

0000698a <__udivmodqi4>:
    698a:	99 1b       	sub	r25, r25
    698c:	79 e0       	ldi	r23, 0x09	; 9
    698e:	04 c0       	rjmp	.+8      	; 0x6998 <__udivmodqi4_ep>

00006990 <__udivmodqi4_loop>:
    6990:	99 1f       	adc	r25, r25
    6992:	96 17       	cp	r25, r22
    6994:	08 f0       	brcs	.+2      	; 0x6998 <__udivmodqi4_ep>
    6996:	96 1b       	sub	r25, r22

00006998 <__udivmodqi4_ep>:
    6998:	88 1f       	adc	r24, r24
    699a:	7a 95       	dec	r23
    699c:	c9 f7       	brne	.-14     	; 0x6990 <__udivmodqi4_loop>
    699e:	80 95       	com	r24
    69a0:	08 95       	ret

000069a2 <__divmodhi4>:
    69a2:	97 fb       	bst	r25, 7
    69a4:	07 2e       	mov	r0, r23
    69a6:	16 f4       	brtc	.+4      	; 0x69ac <__divmodhi4+0xa>
    69a8:	00 94       	com	r0
    69aa:	07 d0       	rcall	.+14     	; 0x69ba <__divmodhi4_neg1>
    69ac:	77 fd       	sbrc	r23, 7
    69ae:	09 d0       	rcall	.+18     	; 0x69c2 <__divmodhi4_neg2>
    69b0:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <__udivmodhi4>
    69b4:	07 fc       	sbrc	r0, 7
    69b6:	05 d0       	rcall	.+10     	; 0x69c2 <__divmodhi4_neg2>
    69b8:	3e f4       	brtc	.+14     	; 0x69c8 <__divmodhi4_exit>

000069ba <__divmodhi4_neg1>:
    69ba:	90 95       	com	r25
    69bc:	81 95       	neg	r24
    69be:	9f 4f       	sbci	r25, 0xFF	; 255
    69c0:	08 95       	ret

000069c2 <__divmodhi4_neg2>:
    69c2:	70 95       	com	r23
    69c4:	61 95       	neg	r22
    69c6:	7f 4f       	sbci	r23, 0xFF	; 255

000069c8 <__divmodhi4_exit>:
    69c8:	08 95       	ret

000069ca <__udivmodsi4>:
    69ca:	a1 e2       	ldi	r26, 0x21	; 33
    69cc:	1a 2e       	mov	r1, r26
    69ce:	aa 1b       	sub	r26, r26
    69d0:	bb 1b       	sub	r27, r27
    69d2:	fd 01       	movw	r30, r26
    69d4:	0d c0       	rjmp	.+26     	; 0x69f0 <__udivmodsi4_ep>

000069d6 <__udivmodsi4_loop>:
    69d6:	aa 1f       	adc	r26, r26
    69d8:	bb 1f       	adc	r27, r27
    69da:	ee 1f       	adc	r30, r30
    69dc:	ff 1f       	adc	r31, r31
    69de:	a2 17       	cp	r26, r18
    69e0:	b3 07       	cpc	r27, r19
    69e2:	e4 07       	cpc	r30, r20
    69e4:	f5 07       	cpc	r31, r21
    69e6:	20 f0       	brcs	.+8      	; 0x69f0 <__udivmodsi4_ep>
    69e8:	a2 1b       	sub	r26, r18
    69ea:	b3 0b       	sbc	r27, r19
    69ec:	e4 0b       	sbc	r30, r20
    69ee:	f5 0b       	sbc	r31, r21

000069f0 <__udivmodsi4_ep>:
    69f0:	66 1f       	adc	r22, r22
    69f2:	77 1f       	adc	r23, r23
    69f4:	88 1f       	adc	r24, r24
    69f6:	99 1f       	adc	r25, r25
    69f8:	1a 94       	dec	r1
    69fa:	69 f7       	brne	.-38     	; 0x69d6 <__udivmodsi4_loop>
    69fc:	60 95       	com	r22
    69fe:	70 95       	com	r23
    6a00:	80 95       	com	r24
    6a02:	90 95       	com	r25
    6a04:	9b 01       	movw	r18, r22
    6a06:	ac 01       	movw	r20, r24
    6a08:	bd 01       	movw	r22, r26
    6a0a:	cf 01       	movw	r24, r30
    6a0c:	08 95       	ret

00006a0e <__divmodsi4>:
    6a0e:	05 2e       	mov	r0, r21
    6a10:	97 fb       	bst	r25, 7
    6a12:	1e f4       	brtc	.+6      	; 0x6a1a <__divmodsi4+0xc>
    6a14:	00 94       	com	r0
    6a16:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <__negsi2>
    6a1a:	57 fd       	sbrc	r21, 7
    6a1c:	07 d0       	rcall	.+14     	; 0x6a2c <__divmodsi4_neg2>
    6a1e:	0e 94 e5 34 	call	0x69ca	; 0x69ca <__udivmodsi4>
    6a22:	07 fc       	sbrc	r0, 7
    6a24:	03 d0       	rcall	.+6      	; 0x6a2c <__divmodsi4_neg2>
    6a26:	4e f4       	brtc	.+18     	; 0x6a3a <__divmodsi4_exit>
    6a28:	0c 94 1e 35 	jmp	0x6a3c	; 0x6a3c <__negsi2>

00006a2c <__divmodsi4_neg2>:
    6a2c:	50 95       	com	r21
    6a2e:	40 95       	com	r20
    6a30:	30 95       	com	r19
    6a32:	21 95       	neg	r18
    6a34:	3f 4f       	sbci	r19, 0xFF	; 255
    6a36:	4f 4f       	sbci	r20, 0xFF	; 255
    6a38:	5f 4f       	sbci	r21, 0xFF	; 255

00006a3a <__divmodsi4_exit>:
    6a3a:	08 95       	ret

00006a3c <__negsi2>:
    6a3c:	90 95       	com	r25
    6a3e:	80 95       	com	r24
    6a40:	70 95       	com	r23
    6a42:	61 95       	neg	r22
    6a44:	7f 4f       	sbci	r23, 0xFF	; 255
    6a46:	8f 4f       	sbci	r24, 0xFF	; 255
    6a48:	9f 4f       	sbci	r25, 0xFF	; 255
    6a4a:	08 95       	ret

00006a4c <__tablejump2__>:
    6a4c:	ee 0f       	add	r30, r30
    6a4e:	ff 1f       	adc	r31, r31
    6a50:	05 90       	lpm	r0, Z+
    6a52:	f4 91       	lpm	r31, Z
    6a54:	e0 2d       	mov	r30, r0
    6a56:	09 94       	ijmp

00006a58 <__bswapsi2>:
    6a58:	69 27       	eor	r22, r25
    6a5a:	96 27       	eor	r25, r22
    6a5c:	69 27       	eor	r22, r25
    6a5e:	78 27       	eor	r23, r24
    6a60:	87 27       	eor	r24, r23
    6a62:	78 27       	eor	r23, r24
    6a64:	08 95       	ret

00006a66 <__umulhisi3>:
    6a66:	a2 9f       	mul	r26, r18
    6a68:	b0 01       	movw	r22, r0
    6a6a:	b3 9f       	mul	r27, r19
    6a6c:	c0 01       	movw	r24, r0
    6a6e:	a3 9f       	mul	r26, r19
    6a70:	70 0d       	add	r23, r0
    6a72:	81 1d       	adc	r24, r1
    6a74:	11 24       	eor	r1, r1
    6a76:	91 1d       	adc	r25, r1
    6a78:	b2 9f       	mul	r27, r18
    6a7a:	70 0d       	add	r23, r0
    6a7c:	81 1d       	adc	r24, r1
    6a7e:	11 24       	eor	r1, r1
    6a80:	91 1d       	adc	r25, r1
    6a82:	08 95       	ret

00006a84 <__usmulhisi3>:
    6a84:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__umulhisi3>

00006a88 <__usmulhisi3_tail>:
    6a88:	b7 ff       	sbrs	r27, 7
    6a8a:	08 95       	ret
    6a8c:	82 1b       	sub	r24, r18
    6a8e:	93 0b       	sbc	r25, r19
    6a90:	08 95       	ret

00006a92 <__muluhisi3>:
    6a92:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__umulhisi3>
    6a96:	a5 9f       	mul	r26, r21
    6a98:	90 0d       	add	r25, r0
    6a9a:	b4 9f       	mul	r27, r20
    6a9c:	90 0d       	add	r25, r0
    6a9e:	a4 9f       	mul	r26, r20
    6aa0:	80 0d       	add	r24, r0
    6aa2:	91 1d       	adc	r25, r1
    6aa4:	11 24       	eor	r1, r1
    6aa6:	08 95       	ret

00006aa8 <__mulshisi3>:
    6aa8:	b7 ff       	sbrs	r27, 7
    6aaa:	0c 94 49 35 	jmp	0x6a92	; 0x6a92 <__muluhisi3>

00006aae <__mulohisi3>:
    6aae:	0e 94 49 35 	call	0x6a92	; 0x6a92 <__muluhisi3>
    6ab2:	82 1b       	sub	r24, r18
    6ab4:	93 0b       	sbc	r25, r19
    6ab6:	08 95       	ret

00006ab8 <__mulsidi3>:
    6ab8:	97 fb       	bst	r25, 7
    6aba:	57 ff       	sbrs	r21, 7
    6abc:	0c 94 6c 35 	jmp	0x6ad8	; 0x6ad8 <__umulsidi3_helper>
    6ac0:	9f 93       	push	r25
    6ac2:	8f 93       	push	r24
    6ac4:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <__umulsidi3_helper>
    6ac8:	6e 1b       	sub	r22, r30
    6aca:	7f 0b       	sbc	r23, r31
    6acc:	af 91       	pop	r26
    6ace:	bf 91       	pop	r27
    6ad0:	8a 0b       	sbc	r24, r26
    6ad2:	9b 0b       	sbc	r25, r27
    6ad4:	08 95       	ret

00006ad6 <__umulsidi3>:
    6ad6:	e8 94       	clt

00006ad8 <__umulsidi3_helper>:
    6ad8:	df 93       	push	r29
    6ada:	cf 93       	push	r28
    6adc:	fc 01       	movw	r30, r24
    6ade:	db 01       	movw	r26, r22
    6ae0:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__umulhisi3>
    6ae4:	7f 93       	push	r23
    6ae6:	6f 93       	push	r22
    6ae8:	e9 01       	movw	r28, r18
    6aea:	9a 01       	movw	r18, r20
    6aec:	ac 01       	movw	r20, r24
    6aee:	bf 93       	push	r27
    6af0:	af 93       	push	r26
    6af2:	3f 93       	push	r19
    6af4:	2f 93       	push	r18
    6af6:	df 01       	movw	r26, r30
    6af8:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__umulhisi3>
    6afc:	26 f4       	brtc	.+8      	; 0x6b06 <__umulsidi3_helper+0x2e>
    6afe:	6c 1b       	sub	r22, r28
    6b00:	7d 0b       	sbc	r23, r29
    6b02:	82 0b       	sbc	r24, r18
    6b04:	93 0b       	sbc	r25, r19
    6b06:	9e 01       	movw	r18, r28
    6b08:	eb 01       	movw	r28, r22
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <__muldi3_6>
    6b10:	af 91       	pop	r26
    6b12:	bf 91       	pop	r27
    6b14:	2f 91       	pop	r18
    6b16:	3f 91       	pop	r19
    6b18:	0e 94 c4 36 	call	0x6d88	; 0x6d88 <__muldi3_6>
    6b1c:	be 01       	movw	r22, r28
    6b1e:	cf 01       	movw	r24, r30
    6b20:	f9 01       	movw	r30, r18
    6b22:	2f 91       	pop	r18
    6b24:	3f 91       	pop	r19
    6b26:	cf 91       	pop	r28
    6b28:	df 91       	pop	r29
    6b2a:	08 95       	ret

00006b2c <__moddi3>:
    6b2c:	68 94       	set
    6b2e:	01 c0       	rjmp	.+2      	; 0x6b32 <__divdi3_moddi3>

00006b30 <__divdi3>:
    6b30:	e8 94       	clt

00006b32 <__divdi3_moddi3>:
    6b32:	f9 2f       	mov	r31, r25
    6b34:	f1 2b       	or	r31, r17
    6b36:	12 f0       	brmi	.+4      	; 0x6b3c <__divdi3_moddi3+0xa>
    6b38:	0c 94 ca 35 	jmp	0x6b94	; 0x6b94 <__udivdi3_umoddi3>
    6b3c:	a0 e0       	ldi	r26, 0x00	; 0
    6b3e:	b0 e0       	ldi	r27, 0x00	; 0
    6b40:	e4 ea       	ldi	r30, 0xA4	; 164
    6b42:	f5 e3       	ldi	r31, 0x35	; 53
    6b44:	0c 94 3c 36 	jmp	0x6c78	; 0x6c78 <__prologue_saves__+0xc>
    6b48:	09 2e       	mov	r0, r25
    6b4a:	05 94       	asr	r0
    6b4c:	22 f4       	brpl	.+8      	; 0x6b56 <__divdi3_moddi3+0x24>
    6b4e:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <__negdi2>
    6b52:	11 23       	and	r17, r17
    6b54:	92 f4       	brpl	.+36     	; 0x6b7a <__divdi3_moddi3+0x48>
    6b56:	f0 e8       	ldi	r31, 0x80	; 128
    6b58:	0f 26       	eor	r0, r31
    6b5a:	ff ef       	ldi	r31, 0xFF	; 255
    6b5c:	e0 94       	com	r14
    6b5e:	f0 94       	com	r15
    6b60:	00 95       	com	r16
    6b62:	10 95       	com	r17
    6b64:	b0 94       	com	r11
    6b66:	c0 94       	com	r12
    6b68:	d0 94       	com	r13
    6b6a:	a1 94       	neg	r10
    6b6c:	bf 0a       	sbc	r11, r31
    6b6e:	cf 0a       	sbc	r12, r31
    6b70:	df 0a       	sbc	r13, r31
    6b72:	ef 0a       	sbc	r14, r31
    6b74:	ff 0a       	sbc	r15, r31
    6b76:	0f 0b       	sbc	r16, r31
    6b78:	1f 0b       	sbc	r17, r31
    6b7a:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmod64>
    6b7e:	07 fc       	sbrc	r0, 7
    6b80:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <__negdi2>
    6b84:	cd b7       	in	r28, 0x3d	; 61
    6b86:	de b7       	in	r29, 0x3e	; 62
    6b88:	ec e0       	ldi	r30, 0x0C	; 12
    6b8a:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <__epilogue_restores__+0xc>

00006b8e <__umoddi3>:
    6b8e:	68 94       	set
    6b90:	01 c0       	rjmp	.+2      	; 0x6b94 <__udivdi3_umoddi3>

00006b92 <__udivdi3>:
    6b92:	e8 94       	clt

00006b94 <__udivdi3_umoddi3>:
    6b94:	8f 92       	push	r8
    6b96:	9f 92       	push	r9
    6b98:	cf 93       	push	r28
    6b9a:	df 93       	push	r29
    6b9c:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__udivmod64>
    6ba0:	df 91       	pop	r29
    6ba2:	cf 91       	pop	r28
    6ba4:	9f 90       	pop	r9
    6ba6:	8f 90       	pop	r8
    6ba8:	08 95       	ret

00006baa <__udivmod64>:
    6baa:	88 24       	eor	r8, r8
    6bac:	99 24       	eor	r9, r9
    6bae:	f4 01       	movw	r30, r8
    6bb0:	e4 01       	movw	r28, r8
    6bb2:	b0 e4       	ldi	r27, 0x40	; 64
    6bb4:	9f 93       	push	r25
    6bb6:	aa 27       	eor	r26, r26
    6bb8:	9a 15       	cp	r25, r10
    6bba:	8b 04       	cpc	r8, r11
    6bbc:	9c 04       	cpc	r9, r12
    6bbe:	ed 05       	cpc	r30, r13
    6bc0:	fe 05       	cpc	r31, r14
    6bc2:	cf 05       	cpc	r28, r15
    6bc4:	d0 07       	cpc	r29, r16
    6bc6:	a1 07       	cpc	r26, r17
    6bc8:	98 f4       	brcc	.+38     	; 0x6bf0 <__udivmod64+0x46>
    6bca:	ad 2f       	mov	r26, r29
    6bcc:	dc 2f       	mov	r29, r28
    6bce:	cf 2f       	mov	r28, r31
    6bd0:	fe 2f       	mov	r31, r30
    6bd2:	e9 2d       	mov	r30, r9
    6bd4:	98 2c       	mov	r9, r8
    6bd6:	89 2e       	mov	r8, r25
    6bd8:	98 2f       	mov	r25, r24
    6bda:	87 2f       	mov	r24, r23
    6bdc:	76 2f       	mov	r23, r22
    6bde:	65 2f       	mov	r22, r21
    6be0:	54 2f       	mov	r21, r20
    6be2:	43 2f       	mov	r20, r19
    6be4:	32 2f       	mov	r19, r18
    6be6:	22 27       	eor	r18, r18
    6be8:	b8 50       	subi	r27, 0x08	; 8
    6bea:	31 f7       	brne	.-52     	; 0x6bb8 <__udivmod64+0xe>
    6bec:	bf 91       	pop	r27
    6bee:	27 c0       	rjmp	.+78     	; 0x6c3e <__udivmod64+0x94>
    6bf0:	1b 2e       	mov	r1, r27
    6bf2:	bf 91       	pop	r27
    6bf4:	bb 27       	eor	r27, r27
    6bf6:	22 0f       	add	r18, r18
    6bf8:	33 1f       	adc	r19, r19
    6bfa:	44 1f       	adc	r20, r20
    6bfc:	55 1f       	adc	r21, r21
    6bfe:	66 1f       	adc	r22, r22
    6c00:	77 1f       	adc	r23, r23
    6c02:	88 1f       	adc	r24, r24
    6c04:	99 1f       	adc	r25, r25
    6c06:	88 1c       	adc	r8, r8
    6c08:	99 1c       	adc	r9, r9
    6c0a:	ee 1f       	adc	r30, r30
    6c0c:	ff 1f       	adc	r31, r31
    6c0e:	cc 1f       	adc	r28, r28
    6c10:	dd 1f       	adc	r29, r29
    6c12:	aa 1f       	adc	r26, r26
    6c14:	bb 1f       	adc	r27, r27
    6c16:	8a 14       	cp	r8, r10
    6c18:	9b 04       	cpc	r9, r11
    6c1a:	ec 05       	cpc	r30, r12
    6c1c:	fd 05       	cpc	r31, r13
    6c1e:	ce 05       	cpc	r28, r14
    6c20:	df 05       	cpc	r29, r15
    6c22:	a0 07       	cpc	r26, r16
    6c24:	b1 07       	cpc	r27, r17
    6c26:	48 f0       	brcs	.+18     	; 0x6c3a <__udivmod64+0x90>
    6c28:	8a 18       	sub	r8, r10
    6c2a:	9b 08       	sbc	r9, r11
    6c2c:	ec 09       	sbc	r30, r12
    6c2e:	fd 09       	sbc	r31, r13
    6c30:	ce 09       	sbc	r28, r14
    6c32:	df 09       	sbc	r29, r15
    6c34:	a0 0b       	sbc	r26, r16
    6c36:	b1 0b       	sbc	r27, r17
    6c38:	21 60       	ori	r18, 0x01	; 1
    6c3a:	1a 94       	dec	r1
    6c3c:	e1 f6       	brne	.-72     	; 0x6bf6 <__udivmod64+0x4c>
    6c3e:	2e f4       	brtc	.+10     	; 0x6c4a <__udivmod64+0xa0>
    6c40:	94 01       	movw	r18, r8
    6c42:	af 01       	movw	r20, r30
    6c44:	be 01       	movw	r22, r28
    6c46:	cd 01       	movw	r24, r26
    6c48:	00 0c       	add	r0, r0
    6c4a:	08 95       	ret

00006c4c <__negdi2>:
    6c4c:	60 95       	com	r22
    6c4e:	70 95       	com	r23
    6c50:	80 95       	com	r24
    6c52:	90 95       	com	r25
    6c54:	30 95       	com	r19
    6c56:	40 95       	com	r20
    6c58:	50 95       	com	r21
    6c5a:	21 95       	neg	r18
    6c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c5e:	4f 4f       	sbci	r20, 0xFF	; 255
    6c60:	5f 4f       	sbci	r21, 0xFF	; 255
    6c62:	6f 4f       	sbci	r22, 0xFF	; 255
    6c64:	7f 4f       	sbci	r23, 0xFF	; 255
    6c66:	8f 4f       	sbci	r24, 0xFF	; 255
    6c68:	9f 4f       	sbci	r25, 0xFF	; 255
    6c6a:	08 95       	ret

00006c6c <__prologue_saves__>:
    6c6c:	2f 92       	push	r2
    6c6e:	3f 92       	push	r3
    6c70:	4f 92       	push	r4
    6c72:	5f 92       	push	r5
    6c74:	6f 92       	push	r6
    6c76:	7f 92       	push	r7
    6c78:	8f 92       	push	r8
    6c7a:	9f 92       	push	r9
    6c7c:	af 92       	push	r10
    6c7e:	bf 92       	push	r11
    6c80:	cf 92       	push	r12
    6c82:	df 92       	push	r13
    6c84:	ef 92       	push	r14
    6c86:	ff 92       	push	r15
    6c88:	0f 93       	push	r16
    6c8a:	1f 93       	push	r17
    6c8c:	cf 93       	push	r28
    6c8e:	df 93       	push	r29
    6c90:	cd b7       	in	r28, 0x3d	; 61
    6c92:	de b7       	in	r29, 0x3e	; 62
    6c94:	ca 1b       	sub	r28, r26
    6c96:	db 0b       	sbc	r29, r27
    6c98:	0f b6       	in	r0, 0x3f	; 63
    6c9a:	f8 94       	cli
    6c9c:	de bf       	out	0x3e, r29	; 62
    6c9e:	0f be       	out	0x3f, r0	; 63
    6ca0:	cd bf       	out	0x3d, r28	; 61
    6ca2:	09 94       	ijmp

00006ca4 <__epilogue_restores__>:
    6ca4:	2a 88       	ldd	r2, Y+18	; 0x12
    6ca6:	39 88       	ldd	r3, Y+17	; 0x11
    6ca8:	48 88       	ldd	r4, Y+16	; 0x10
    6caa:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cac:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cae:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cb6:	b9 84       	ldd	r11, Y+9	; 0x09
    6cb8:	c8 84       	ldd	r12, Y+8	; 0x08
    6cba:	df 80       	ldd	r13, Y+7	; 0x07
    6cbc:	ee 80       	ldd	r14, Y+6	; 0x06
    6cbe:	fd 80       	ldd	r15, Y+5	; 0x05
    6cc0:	0c 81       	ldd	r16, Y+4	; 0x04
    6cc2:	1b 81       	ldd	r17, Y+3	; 0x03
    6cc4:	aa 81       	ldd	r26, Y+2	; 0x02
    6cc6:	b9 81       	ldd	r27, Y+1	; 0x01
    6cc8:	ce 0f       	add	r28, r30
    6cca:	d1 1d       	adc	r29, r1
    6ccc:	0f b6       	in	r0, 0x3f	; 63
    6cce:	f8 94       	cli
    6cd0:	de bf       	out	0x3e, r29	; 62
    6cd2:	0f be       	out	0x3f, r0	; 63
    6cd4:	cd bf       	out	0x3d, r28	; 61
    6cd6:	ed 01       	movw	r28, r26
    6cd8:	08 95       	ret

00006cda <__ashldi3>:
    6cda:	0f 93       	push	r16
    6cdc:	08 30       	cpi	r16, 0x08	; 8
    6cde:	90 f0       	brcs	.+36     	; 0x6d04 <__ashldi3+0x2a>
    6ce0:	98 2f       	mov	r25, r24
    6ce2:	87 2f       	mov	r24, r23
    6ce4:	76 2f       	mov	r23, r22
    6ce6:	65 2f       	mov	r22, r21
    6ce8:	54 2f       	mov	r21, r20
    6cea:	43 2f       	mov	r20, r19
    6cec:	32 2f       	mov	r19, r18
    6cee:	22 27       	eor	r18, r18
    6cf0:	08 50       	subi	r16, 0x08	; 8
    6cf2:	f4 cf       	rjmp	.-24     	; 0x6cdc <__ashldi3+0x2>
    6cf4:	22 0f       	add	r18, r18
    6cf6:	33 1f       	adc	r19, r19
    6cf8:	44 1f       	adc	r20, r20
    6cfa:	55 1f       	adc	r21, r21
    6cfc:	66 1f       	adc	r22, r22
    6cfe:	77 1f       	adc	r23, r23
    6d00:	88 1f       	adc	r24, r24
    6d02:	99 1f       	adc	r25, r25
    6d04:	0a 95       	dec	r16
    6d06:	b2 f7       	brpl	.-20     	; 0x6cf4 <__ashldi3+0x1a>
    6d08:	0f 91       	pop	r16
    6d0a:	08 95       	ret

00006d0c <__ashrdi3>:
    6d0c:	97 fb       	bst	r25, 7
    6d0e:	10 f8       	bld	r1, 0

00006d10 <__lshrdi3>:
    6d10:	16 94       	lsr	r1
    6d12:	00 08       	sbc	r0, r0
    6d14:	0f 93       	push	r16
    6d16:	08 30       	cpi	r16, 0x08	; 8
    6d18:	98 f0       	brcs	.+38     	; 0x6d40 <__lshrdi3+0x30>
    6d1a:	08 50       	subi	r16, 0x08	; 8
    6d1c:	23 2f       	mov	r18, r19
    6d1e:	34 2f       	mov	r19, r20
    6d20:	45 2f       	mov	r20, r21
    6d22:	56 2f       	mov	r21, r22
    6d24:	67 2f       	mov	r22, r23
    6d26:	78 2f       	mov	r23, r24
    6d28:	89 2f       	mov	r24, r25
    6d2a:	90 2d       	mov	r25, r0
    6d2c:	f4 cf       	rjmp	.-24     	; 0x6d16 <__lshrdi3+0x6>
    6d2e:	05 94       	asr	r0
    6d30:	97 95       	ror	r25
    6d32:	87 95       	ror	r24
    6d34:	77 95       	ror	r23
    6d36:	67 95       	ror	r22
    6d38:	57 95       	ror	r21
    6d3a:	47 95       	ror	r20
    6d3c:	37 95       	ror	r19
    6d3e:	27 95       	ror	r18
    6d40:	0a 95       	dec	r16
    6d42:	aa f7       	brpl	.-22     	; 0x6d2e <__lshrdi3+0x1e>
    6d44:	0f 91       	pop	r16
    6d46:	08 95       	ret

00006d48 <__cmpdi2_s8>:
    6d48:	00 24       	eor	r0, r0
    6d4a:	a7 fd       	sbrc	r26, 7
    6d4c:	00 94       	com	r0
    6d4e:	2a 17       	cp	r18, r26
    6d50:	30 05       	cpc	r19, r0
    6d52:	40 05       	cpc	r20, r0
    6d54:	50 05       	cpc	r21, r0
    6d56:	60 05       	cpc	r22, r0
    6d58:	70 05       	cpc	r23, r0
    6d5a:	80 05       	cpc	r24, r0
    6d5c:	90 05       	cpc	r25, r0
    6d5e:	08 95       	ret

00006d60 <__udivmodhi4>:
    6d60:	aa 1b       	sub	r26, r26
    6d62:	bb 1b       	sub	r27, r27
    6d64:	51 e1       	ldi	r21, 0x11	; 17
    6d66:	07 c0       	rjmp	.+14     	; 0x6d76 <__udivmodhi4_ep>

00006d68 <__udivmodhi4_loop>:
    6d68:	aa 1f       	adc	r26, r26
    6d6a:	bb 1f       	adc	r27, r27
    6d6c:	a6 17       	cp	r26, r22
    6d6e:	b7 07       	cpc	r27, r23
    6d70:	10 f0       	brcs	.+4      	; 0x6d76 <__udivmodhi4_ep>
    6d72:	a6 1b       	sub	r26, r22
    6d74:	b7 0b       	sbc	r27, r23

00006d76 <__udivmodhi4_ep>:
    6d76:	88 1f       	adc	r24, r24
    6d78:	99 1f       	adc	r25, r25
    6d7a:	5a 95       	dec	r21
    6d7c:	a9 f7       	brne	.-22     	; 0x6d68 <__udivmodhi4_loop>
    6d7e:	80 95       	com	r24
    6d80:	90 95       	com	r25
    6d82:	bc 01       	movw	r22, r24
    6d84:	cd 01       	movw	r24, r26
    6d86:	08 95       	ret

00006d88 <__muldi3_6>:
    6d88:	0e 94 33 35 	call	0x6a66	; 0x6a66 <__umulhisi3>
    6d8c:	46 0f       	add	r20, r22
    6d8e:	57 1f       	adc	r21, r23
    6d90:	c8 1f       	adc	r28, r24
    6d92:	d9 1f       	adc	r29, r25
    6d94:	08 f4       	brcc	.+2      	; 0x6d98 <__muldi3_6+0x10>
    6d96:	31 96       	adiw	r30, 0x01	; 1
    6d98:	08 95       	ret

00006d9a <dtostrf>:
    6d9a:	ef 92       	push	r14
    6d9c:	0f 93       	push	r16
    6d9e:	1f 93       	push	r17
    6da0:	cf 93       	push	r28
    6da2:	df 93       	push	r29
    6da4:	e8 01       	movw	r28, r16
    6da6:	47 fd       	sbrc	r20, 7
    6da8:	02 c0       	rjmp	.+4      	; 0x6dae <dtostrf+0x14>
    6daa:	34 e0       	ldi	r19, 0x04	; 4
    6dac:	01 c0       	rjmp	.+2      	; 0x6db0 <dtostrf+0x16>
    6dae:	34 e1       	ldi	r19, 0x14	; 20
    6db0:	04 2e       	mov	r0, r20
    6db2:	00 0c       	add	r0, r0
    6db4:	55 0b       	sbc	r21, r21
    6db6:	57 ff       	sbrs	r21, 7
    6db8:	03 c0       	rjmp	.+6      	; 0x6dc0 <dtostrf+0x26>
    6dba:	51 95       	neg	r21
    6dbc:	41 95       	neg	r20
    6dbe:	51 09       	sbc	r21, r1
    6dc0:	e3 2e       	mov	r14, r19
    6dc2:	02 2f       	mov	r16, r18
    6dc4:	24 2f       	mov	r18, r20
    6dc6:	ae 01       	movw	r20, r28
    6dc8:	0e 94 4e 39 	call	0x729c	; 0x729c <dtoa_prf>
    6dcc:	ce 01       	movw	r24, r28
    6dce:	df 91       	pop	r29
    6dd0:	cf 91       	pop	r28
    6dd2:	1f 91       	pop	r17
    6dd4:	0f 91       	pop	r16
    6dd6:	ef 90       	pop	r14
    6dd8:	08 95       	ret

00006dda <malloc>:
    6dda:	0f 93       	push	r16
    6ddc:	1f 93       	push	r17
    6dde:	cf 93       	push	r28
    6de0:	df 93       	push	r29
    6de2:	82 30       	cpi	r24, 0x02	; 2
    6de4:	91 05       	cpc	r25, r1
    6de6:	10 f4       	brcc	.+4      	; 0x6dec <malloc+0x12>
    6de8:	82 e0       	ldi	r24, 0x02	; 2
    6dea:	90 e0       	ldi	r25, 0x00	; 0
    6dec:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <__flp>
    6df0:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <__flp+0x1>
    6df4:	20 e0       	ldi	r18, 0x00	; 0
    6df6:	30 e0       	ldi	r19, 0x00	; 0
    6df8:	a0 e0       	ldi	r26, 0x00	; 0
    6dfa:	b0 e0       	ldi	r27, 0x00	; 0
    6dfc:	30 97       	sbiw	r30, 0x00	; 0
    6dfe:	19 f1       	breq	.+70     	; 0x6e46 <malloc+0x6c>
    6e00:	40 81       	ld	r20, Z
    6e02:	51 81       	ldd	r21, Z+1	; 0x01
    6e04:	02 81       	ldd	r16, Z+2	; 0x02
    6e06:	13 81       	ldd	r17, Z+3	; 0x03
    6e08:	48 17       	cp	r20, r24
    6e0a:	59 07       	cpc	r21, r25
    6e0c:	c8 f0       	brcs	.+50     	; 0x6e40 <malloc+0x66>
    6e0e:	84 17       	cp	r24, r20
    6e10:	95 07       	cpc	r25, r21
    6e12:	69 f4       	brne	.+26     	; 0x6e2e <malloc+0x54>
    6e14:	10 97       	sbiw	r26, 0x00	; 0
    6e16:	31 f0       	breq	.+12     	; 0x6e24 <malloc+0x4a>
    6e18:	12 96       	adiw	r26, 0x02	; 2
    6e1a:	0c 93       	st	X, r16
    6e1c:	12 97       	sbiw	r26, 0x02	; 2
    6e1e:	13 96       	adiw	r26, 0x03	; 3
    6e20:	1c 93       	st	X, r17
    6e22:	27 c0       	rjmp	.+78     	; 0x6e72 <malloc+0x98>
    6e24:	00 93 47 06 	sts	0x0647, r16	; 0x800647 <__flp>
    6e28:	10 93 48 06 	sts	0x0648, r17	; 0x800648 <__flp+0x1>
    6e2c:	22 c0       	rjmp	.+68     	; 0x6e72 <malloc+0x98>
    6e2e:	21 15       	cp	r18, r1
    6e30:	31 05       	cpc	r19, r1
    6e32:	19 f0       	breq	.+6      	; 0x6e3a <malloc+0x60>
    6e34:	42 17       	cp	r20, r18
    6e36:	53 07       	cpc	r21, r19
    6e38:	18 f4       	brcc	.+6      	; 0x6e40 <malloc+0x66>
    6e3a:	9a 01       	movw	r18, r20
    6e3c:	bd 01       	movw	r22, r26
    6e3e:	ef 01       	movw	r28, r30
    6e40:	df 01       	movw	r26, r30
    6e42:	f8 01       	movw	r30, r16
    6e44:	db cf       	rjmp	.-74     	; 0x6dfc <malloc+0x22>
    6e46:	21 15       	cp	r18, r1
    6e48:	31 05       	cpc	r19, r1
    6e4a:	f9 f0       	breq	.+62     	; 0x6e8a <malloc+0xb0>
    6e4c:	28 1b       	sub	r18, r24
    6e4e:	39 0b       	sbc	r19, r25
    6e50:	24 30       	cpi	r18, 0x04	; 4
    6e52:	31 05       	cpc	r19, r1
    6e54:	80 f4       	brcc	.+32     	; 0x6e76 <malloc+0x9c>
    6e56:	8a 81       	ldd	r24, Y+2	; 0x02
    6e58:	9b 81       	ldd	r25, Y+3	; 0x03
    6e5a:	61 15       	cp	r22, r1
    6e5c:	71 05       	cpc	r23, r1
    6e5e:	21 f0       	breq	.+8      	; 0x6e68 <malloc+0x8e>
    6e60:	fb 01       	movw	r30, r22
    6e62:	93 83       	std	Z+3, r25	; 0x03
    6e64:	82 83       	std	Z+2, r24	; 0x02
    6e66:	04 c0       	rjmp	.+8      	; 0x6e70 <malloc+0x96>
    6e68:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <__flp+0x1>
    6e6c:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__flp>
    6e70:	fe 01       	movw	r30, r28
    6e72:	32 96       	adiw	r30, 0x02	; 2
    6e74:	44 c0       	rjmp	.+136    	; 0x6efe <malloc+0x124>
    6e76:	fe 01       	movw	r30, r28
    6e78:	e2 0f       	add	r30, r18
    6e7a:	f3 1f       	adc	r31, r19
    6e7c:	81 93       	st	Z+, r24
    6e7e:	91 93       	st	Z+, r25
    6e80:	22 50       	subi	r18, 0x02	; 2
    6e82:	31 09       	sbc	r19, r1
    6e84:	39 83       	std	Y+1, r19	; 0x01
    6e86:	28 83       	st	Y, r18
    6e88:	3a c0       	rjmp	.+116    	; 0x6efe <malloc+0x124>
    6e8a:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <__brkval>
    6e8e:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <__brkval+0x1>
    6e92:	23 2b       	or	r18, r19
    6e94:	41 f4       	brne	.+16     	; 0x6ea6 <malloc+0xcc>
    6e96:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6e9a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6e9e:	30 93 46 06 	sts	0x0646, r19	; 0x800646 <__brkval+0x1>
    6ea2:	20 93 45 06 	sts	0x0645, r18	; 0x800645 <__brkval>
    6ea6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    6eaa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    6eae:	21 15       	cp	r18, r1
    6eb0:	31 05       	cpc	r19, r1
    6eb2:	41 f4       	brne	.+16     	; 0x6ec4 <malloc+0xea>
    6eb4:	2d b7       	in	r18, 0x3d	; 61
    6eb6:	3e b7       	in	r19, 0x3e	; 62
    6eb8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6ebc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6ec0:	24 1b       	sub	r18, r20
    6ec2:	35 0b       	sbc	r19, r21
    6ec4:	e0 91 45 06 	lds	r30, 0x0645	; 0x800645 <__brkval>
    6ec8:	f0 91 46 06 	lds	r31, 0x0646	; 0x800646 <__brkval+0x1>
    6ecc:	e2 17       	cp	r30, r18
    6ece:	f3 07       	cpc	r31, r19
    6ed0:	a0 f4       	brcc	.+40     	; 0x6efa <malloc+0x120>
    6ed2:	2e 1b       	sub	r18, r30
    6ed4:	3f 0b       	sbc	r19, r31
    6ed6:	28 17       	cp	r18, r24
    6ed8:	39 07       	cpc	r19, r25
    6eda:	78 f0       	brcs	.+30     	; 0x6efa <malloc+0x120>
    6edc:	ac 01       	movw	r20, r24
    6ede:	4e 5f       	subi	r20, 0xFE	; 254
    6ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ee2:	24 17       	cp	r18, r20
    6ee4:	35 07       	cpc	r19, r21
    6ee6:	48 f0       	brcs	.+18     	; 0x6efa <malloc+0x120>
    6ee8:	4e 0f       	add	r20, r30
    6eea:	5f 1f       	adc	r21, r31
    6eec:	50 93 46 06 	sts	0x0646, r21	; 0x800646 <__brkval+0x1>
    6ef0:	40 93 45 06 	sts	0x0645, r20	; 0x800645 <__brkval>
    6ef4:	81 93       	st	Z+, r24
    6ef6:	91 93       	st	Z+, r25
    6ef8:	02 c0       	rjmp	.+4      	; 0x6efe <malloc+0x124>
    6efa:	e0 e0       	ldi	r30, 0x00	; 0
    6efc:	f0 e0       	ldi	r31, 0x00	; 0
    6efe:	cf 01       	movw	r24, r30
    6f00:	df 91       	pop	r29
    6f02:	cf 91       	pop	r28
    6f04:	1f 91       	pop	r17
    6f06:	0f 91       	pop	r16
    6f08:	08 95       	ret

00006f0a <free>:
    6f0a:	cf 93       	push	r28
    6f0c:	df 93       	push	r29
    6f0e:	00 97       	sbiw	r24, 0x00	; 0
    6f10:	09 f4       	brne	.+2      	; 0x6f14 <free+0xa>
    6f12:	81 c0       	rjmp	.+258    	; 0x7016 <free+0x10c>
    6f14:	fc 01       	movw	r30, r24
    6f16:	32 97       	sbiw	r30, 0x02	; 2
    6f18:	13 82       	std	Z+3, r1	; 0x03
    6f1a:	12 82       	std	Z+2, r1	; 0x02
    6f1c:	a0 91 47 06 	lds	r26, 0x0647	; 0x800647 <__flp>
    6f20:	b0 91 48 06 	lds	r27, 0x0648	; 0x800648 <__flp+0x1>
    6f24:	10 97       	sbiw	r26, 0x00	; 0
    6f26:	81 f4       	brne	.+32     	; 0x6f48 <free+0x3e>
    6f28:	20 81       	ld	r18, Z
    6f2a:	31 81       	ldd	r19, Z+1	; 0x01
    6f2c:	82 0f       	add	r24, r18
    6f2e:	93 1f       	adc	r25, r19
    6f30:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <__brkval>
    6f34:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <__brkval+0x1>
    6f38:	28 17       	cp	r18, r24
    6f3a:	39 07       	cpc	r19, r25
    6f3c:	51 f5       	brne	.+84     	; 0x6f92 <free+0x88>
    6f3e:	f0 93 46 06 	sts	0x0646, r31	; 0x800646 <__brkval+0x1>
    6f42:	e0 93 45 06 	sts	0x0645, r30	; 0x800645 <__brkval>
    6f46:	67 c0       	rjmp	.+206    	; 0x7016 <free+0x10c>
    6f48:	ed 01       	movw	r28, r26
    6f4a:	20 e0       	ldi	r18, 0x00	; 0
    6f4c:	30 e0       	ldi	r19, 0x00	; 0
    6f4e:	ce 17       	cp	r28, r30
    6f50:	df 07       	cpc	r29, r31
    6f52:	40 f4       	brcc	.+16     	; 0x6f64 <free+0x5a>
    6f54:	4a 81       	ldd	r20, Y+2	; 0x02
    6f56:	5b 81       	ldd	r21, Y+3	; 0x03
    6f58:	9e 01       	movw	r18, r28
    6f5a:	41 15       	cp	r20, r1
    6f5c:	51 05       	cpc	r21, r1
    6f5e:	f1 f0       	breq	.+60     	; 0x6f9c <free+0x92>
    6f60:	ea 01       	movw	r28, r20
    6f62:	f5 cf       	rjmp	.-22     	; 0x6f4e <free+0x44>
    6f64:	d3 83       	std	Z+3, r29	; 0x03
    6f66:	c2 83       	std	Z+2, r28	; 0x02
    6f68:	40 81       	ld	r20, Z
    6f6a:	51 81       	ldd	r21, Z+1	; 0x01
    6f6c:	84 0f       	add	r24, r20
    6f6e:	95 1f       	adc	r25, r21
    6f70:	c8 17       	cp	r28, r24
    6f72:	d9 07       	cpc	r29, r25
    6f74:	59 f4       	brne	.+22     	; 0x6f8c <free+0x82>
    6f76:	88 81       	ld	r24, Y
    6f78:	99 81       	ldd	r25, Y+1	; 0x01
    6f7a:	84 0f       	add	r24, r20
    6f7c:	95 1f       	adc	r25, r21
    6f7e:	02 96       	adiw	r24, 0x02	; 2
    6f80:	91 83       	std	Z+1, r25	; 0x01
    6f82:	80 83       	st	Z, r24
    6f84:	8a 81       	ldd	r24, Y+2	; 0x02
    6f86:	9b 81       	ldd	r25, Y+3	; 0x03
    6f88:	93 83       	std	Z+3, r25	; 0x03
    6f8a:	82 83       	std	Z+2, r24	; 0x02
    6f8c:	21 15       	cp	r18, r1
    6f8e:	31 05       	cpc	r19, r1
    6f90:	29 f4       	brne	.+10     	; 0x6f9c <free+0x92>
    6f92:	f0 93 48 06 	sts	0x0648, r31	; 0x800648 <__flp+0x1>
    6f96:	e0 93 47 06 	sts	0x0647, r30	; 0x800647 <__flp>
    6f9a:	3d c0       	rjmp	.+122    	; 0x7016 <free+0x10c>
    6f9c:	e9 01       	movw	r28, r18
    6f9e:	fb 83       	std	Y+3, r31	; 0x03
    6fa0:	ea 83       	std	Y+2, r30	; 0x02
    6fa2:	49 91       	ld	r20, Y+
    6fa4:	59 91       	ld	r21, Y+
    6fa6:	c4 0f       	add	r28, r20
    6fa8:	d5 1f       	adc	r29, r21
    6faa:	ec 17       	cp	r30, r28
    6fac:	fd 07       	cpc	r31, r29
    6fae:	61 f4       	brne	.+24     	; 0x6fc8 <free+0xbe>
    6fb0:	80 81       	ld	r24, Z
    6fb2:	91 81       	ldd	r25, Z+1	; 0x01
    6fb4:	84 0f       	add	r24, r20
    6fb6:	95 1f       	adc	r25, r21
    6fb8:	02 96       	adiw	r24, 0x02	; 2
    6fba:	e9 01       	movw	r28, r18
    6fbc:	99 83       	std	Y+1, r25	; 0x01
    6fbe:	88 83       	st	Y, r24
    6fc0:	82 81       	ldd	r24, Z+2	; 0x02
    6fc2:	93 81       	ldd	r25, Z+3	; 0x03
    6fc4:	9b 83       	std	Y+3, r25	; 0x03
    6fc6:	8a 83       	std	Y+2, r24	; 0x02
    6fc8:	e0 e0       	ldi	r30, 0x00	; 0
    6fca:	f0 e0       	ldi	r31, 0x00	; 0
    6fcc:	12 96       	adiw	r26, 0x02	; 2
    6fce:	8d 91       	ld	r24, X+
    6fd0:	9c 91       	ld	r25, X
    6fd2:	13 97       	sbiw	r26, 0x03	; 3
    6fd4:	00 97       	sbiw	r24, 0x00	; 0
    6fd6:	19 f0       	breq	.+6      	; 0x6fde <free+0xd4>
    6fd8:	fd 01       	movw	r30, r26
    6fda:	dc 01       	movw	r26, r24
    6fdc:	f7 cf       	rjmp	.-18     	; 0x6fcc <free+0xc2>
    6fde:	8d 91       	ld	r24, X+
    6fe0:	9c 91       	ld	r25, X
    6fe2:	11 97       	sbiw	r26, 0x01	; 1
    6fe4:	9d 01       	movw	r18, r26
    6fe6:	2e 5f       	subi	r18, 0xFE	; 254
    6fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    6fea:	82 0f       	add	r24, r18
    6fec:	93 1f       	adc	r25, r19
    6fee:	20 91 45 06 	lds	r18, 0x0645	; 0x800645 <__brkval>
    6ff2:	30 91 46 06 	lds	r19, 0x0646	; 0x800646 <__brkval+0x1>
    6ff6:	28 17       	cp	r18, r24
    6ff8:	39 07       	cpc	r19, r25
    6ffa:	69 f4       	brne	.+26     	; 0x7016 <free+0x10c>
    6ffc:	30 97       	sbiw	r30, 0x00	; 0
    6ffe:	29 f4       	brne	.+10     	; 0x700a <free+0x100>
    7000:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <__flp+0x1>
    7004:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <__flp>
    7008:	02 c0       	rjmp	.+4      	; 0x700e <free+0x104>
    700a:	13 82       	std	Z+3, r1	; 0x03
    700c:	12 82       	std	Z+2, r1	; 0x02
    700e:	b0 93 46 06 	sts	0x0646, r27	; 0x800646 <__brkval+0x1>
    7012:	a0 93 45 06 	sts	0x0645, r26	; 0x800645 <__brkval>
    7016:	df 91       	pop	r29
    7018:	cf 91       	pop	r28
    701a:	08 95       	ret

0000701c <realloc>:
    701c:	a0 e0       	ldi	r26, 0x00	; 0
    701e:	b0 e0       	ldi	r27, 0x00	; 0
    7020:	e4 e1       	ldi	r30, 0x14	; 20
    7022:	f8 e3       	ldi	r31, 0x38	; 56
    7024:	0c 94 3a 36 	jmp	0x6c74	; 0x6c74 <__prologue_saves__+0x8>
    7028:	ec 01       	movw	r28, r24
    702a:	00 97       	sbiw	r24, 0x00	; 0
    702c:	21 f4       	brne	.+8      	; 0x7036 <realloc+0x1a>
    702e:	cb 01       	movw	r24, r22
    7030:	0e 94 ed 36 	call	0x6dda	; 0x6dda <malloc>
    7034:	b4 c0       	rjmp	.+360    	; 0x719e <realloc+0x182>
    7036:	fc 01       	movw	r30, r24
    7038:	e6 0f       	add	r30, r22
    703a:	f7 1f       	adc	r31, r23
    703c:	9c 01       	movw	r18, r24
    703e:	22 50       	subi	r18, 0x02	; 2
    7040:	31 09       	sbc	r19, r1
    7042:	e2 17       	cp	r30, r18
    7044:	f3 07       	cpc	r31, r19
    7046:	08 f4       	brcc	.+2      	; 0x704a <realloc+0x2e>
    7048:	a8 c0       	rjmp	.+336    	; 0x719a <realloc+0x17e>
    704a:	d9 01       	movw	r26, r18
    704c:	0d 91       	ld	r16, X+
    704e:	1c 91       	ld	r17, X
    7050:	11 97       	sbiw	r26, 0x01	; 1
    7052:	06 17       	cp	r16, r22
    7054:	17 07       	cpc	r17, r23
    7056:	b0 f0       	brcs	.+44     	; 0x7084 <realloc+0x68>
    7058:	05 30       	cpi	r16, 0x05	; 5
    705a:	11 05       	cpc	r17, r1
    705c:	08 f4       	brcc	.+2      	; 0x7060 <realloc+0x44>
    705e:	9b c0       	rjmp	.+310    	; 0x7196 <realloc+0x17a>
    7060:	c8 01       	movw	r24, r16
    7062:	04 97       	sbiw	r24, 0x04	; 4
    7064:	86 17       	cp	r24, r22
    7066:	97 07       	cpc	r25, r23
    7068:	08 f4       	brcc	.+2      	; 0x706c <realloc+0x50>
    706a:	95 c0       	rjmp	.+298    	; 0x7196 <realloc+0x17a>
    706c:	02 50       	subi	r16, 0x02	; 2
    706e:	11 09       	sbc	r17, r1
    7070:	06 1b       	sub	r16, r22
    7072:	17 0b       	sbc	r17, r23
    7074:	01 93       	st	Z+, r16
    7076:	11 93       	st	Z+, r17
    7078:	6d 93       	st	X+, r22
    707a:	7c 93       	st	X, r23
    707c:	cf 01       	movw	r24, r30
    707e:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <free>
    7082:	89 c0       	rjmp	.+274    	; 0x7196 <realloc+0x17a>
    7084:	5b 01       	movw	r10, r22
    7086:	a0 1a       	sub	r10, r16
    7088:	b1 0a       	sbc	r11, r17
    708a:	4c 01       	movw	r8, r24
    708c:	80 0e       	add	r8, r16
    708e:	91 1e       	adc	r9, r17
    7090:	a0 91 47 06 	lds	r26, 0x0647	; 0x800647 <__flp>
    7094:	b0 91 48 06 	lds	r27, 0x0648	; 0x800648 <__flp+0x1>
    7098:	61 2c       	mov	r6, r1
    709a:	71 2c       	mov	r7, r1
    709c:	e1 2c       	mov	r14, r1
    709e:	f1 2c       	mov	r15, r1
    70a0:	10 97       	sbiw	r26, 0x00	; 0
    70a2:	09 f4       	brne	.+2      	; 0x70a6 <realloc+0x8a>
    70a4:	46 c0       	rjmp	.+140    	; 0x7132 <realloc+0x116>
    70a6:	8d 91       	ld	r24, X+
    70a8:	9c 91       	ld	r25, X
    70aa:	11 97       	sbiw	r26, 0x01	; 1
    70ac:	a8 15       	cp	r26, r8
    70ae:	b9 05       	cpc	r27, r9
    70b0:	b1 f5       	brne	.+108    	; 0x711e <realloc+0x102>
    70b2:	6c 01       	movw	r12, r24
    70b4:	42 e0       	ldi	r20, 0x02	; 2
    70b6:	c4 0e       	add	r12, r20
    70b8:	d1 1c       	adc	r13, r1
    70ba:	ca 14       	cp	r12, r10
    70bc:	db 04       	cpc	r13, r11
    70be:	78 f1       	brcs	.+94     	; 0x711e <realloc+0x102>
    70c0:	4c 01       	movw	r8, r24
    70c2:	8a 18       	sub	r8, r10
    70c4:	9b 08       	sbc	r9, r11
    70c6:	64 01       	movw	r12, r8
    70c8:	42 e0       	ldi	r20, 0x02	; 2
    70ca:	c4 0e       	add	r12, r20
    70cc:	d1 1c       	adc	r13, r1
    70ce:	12 96       	adiw	r26, 0x02	; 2
    70d0:	bc 90       	ld	r11, X
    70d2:	12 97       	sbiw	r26, 0x02	; 2
    70d4:	13 96       	adiw	r26, 0x03	; 3
    70d6:	ac 91       	ld	r26, X
    70d8:	b5 e0       	ldi	r27, 0x05	; 5
    70da:	cb 16       	cp	r12, r27
    70dc:	d1 04       	cpc	r13, r1
    70de:	40 f0       	brcs	.+16     	; 0x70f0 <realloc+0xd4>
    70e0:	b2 82       	std	Z+2, r11	; 0x02
    70e2:	a3 83       	std	Z+3, r26	; 0x03
    70e4:	91 82       	std	Z+1, r9	; 0x01
    70e6:	80 82       	st	Z, r8
    70e8:	d9 01       	movw	r26, r18
    70ea:	6d 93       	st	X+, r22
    70ec:	7c 93       	st	X, r23
    70ee:	09 c0       	rjmp	.+18     	; 0x7102 <realloc+0xe6>
    70f0:	0e 5f       	subi	r16, 0xFE	; 254
    70f2:	1f 4f       	sbci	r17, 0xFF	; 255
    70f4:	80 0f       	add	r24, r16
    70f6:	91 1f       	adc	r25, r17
    70f8:	f9 01       	movw	r30, r18
    70fa:	91 83       	std	Z+1, r25	; 0x01
    70fc:	80 83       	st	Z, r24
    70fe:	eb 2d       	mov	r30, r11
    7100:	fa 2f       	mov	r31, r26
    7102:	e1 14       	cp	r14, r1
    7104:	f1 04       	cpc	r15, r1
    7106:	31 f0       	breq	.+12     	; 0x7114 <realloc+0xf8>
    7108:	d7 01       	movw	r26, r14
    710a:	13 96       	adiw	r26, 0x03	; 3
    710c:	fc 93       	st	X, r31
    710e:	ee 93       	st	-X, r30
    7110:	12 97       	sbiw	r26, 0x02	; 2
    7112:	41 c0       	rjmp	.+130    	; 0x7196 <realloc+0x17a>
    7114:	f0 93 48 06 	sts	0x0648, r31	; 0x800648 <__flp+0x1>
    7118:	e0 93 47 06 	sts	0x0647, r30	; 0x800647 <__flp>
    711c:	3c c0       	rjmp	.+120    	; 0x7196 <realloc+0x17a>
    711e:	68 16       	cp	r6, r24
    7120:	79 06       	cpc	r7, r25
    7122:	08 f4       	brcc	.+2      	; 0x7126 <realloc+0x10a>
    7124:	3c 01       	movw	r6, r24
    7126:	7d 01       	movw	r14, r26
    7128:	12 96       	adiw	r26, 0x02	; 2
    712a:	0d 90       	ld	r0, X+
    712c:	bc 91       	ld	r27, X
    712e:	a0 2d       	mov	r26, r0
    7130:	b7 cf       	rjmp	.-146    	; 0x70a0 <realloc+0x84>
    7132:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <__brkval>
    7136:	90 91 46 06 	lds	r25, 0x0646	; 0x800646 <__brkval+0x1>
    713a:	88 16       	cp	r8, r24
    713c:	99 06       	cpc	r9, r25
    713e:	e1 f4       	brne	.+56     	; 0x7178 <realloc+0x15c>
    7140:	66 16       	cp	r6, r22
    7142:	77 06       	cpc	r7, r23
    7144:	c8 f4       	brcc	.+50     	; 0x7178 <realloc+0x15c>
    7146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    714a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    714e:	00 97       	sbiw	r24, 0x00	; 0
    7150:	41 f4       	brne	.+16     	; 0x7162 <realloc+0x146>
    7152:	8d b7       	in	r24, 0x3d	; 61
    7154:	9e b7       	in	r25, 0x3e	; 62
    7156:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    715a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    715e:	84 1b       	sub	r24, r20
    7160:	95 0b       	sbc	r25, r21
    7162:	e8 17       	cp	r30, r24
    7164:	f9 07       	cpc	r31, r25
    7166:	c8 f4       	brcc	.+50     	; 0x719a <realloc+0x17e>
    7168:	f0 93 46 06 	sts	0x0646, r31	; 0x800646 <__brkval+0x1>
    716c:	e0 93 45 06 	sts	0x0645, r30	; 0x800645 <__brkval>
    7170:	f9 01       	movw	r30, r18
    7172:	71 83       	std	Z+1, r23	; 0x01
    7174:	60 83       	st	Z, r22
    7176:	0f c0       	rjmp	.+30     	; 0x7196 <realloc+0x17a>
    7178:	cb 01       	movw	r24, r22
    717a:	0e 94 ed 36 	call	0x6dda	; 0x6dda <malloc>
    717e:	7c 01       	movw	r14, r24
    7180:	00 97       	sbiw	r24, 0x00	; 0
    7182:	59 f0       	breq	.+22     	; 0x719a <realloc+0x17e>
    7184:	a8 01       	movw	r20, r16
    7186:	be 01       	movw	r22, r28
    7188:	0e 94 04 39 	call	0x7208	; 0x7208 <memcpy>
    718c:	ce 01       	movw	r24, r28
    718e:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <free>
    7192:	c7 01       	movw	r24, r14
    7194:	04 c0       	rjmp	.+8      	; 0x719e <realloc+0x182>
    7196:	ce 01       	movw	r24, r28
    7198:	02 c0       	rjmp	.+4      	; 0x719e <realloc+0x182>
    719a:	80 e0       	ldi	r24, 0x00	; 0
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	cd b7       	in	r28, 0x3d	; 61
    71a0:	de b7       	in	r29, 0x3e	; 62
    71a2:	ee e0       	ldi	r30, 0x0E	; 14
    71a4:	0c 94 56 36 	jmp	0x6cac	; 0x6cac <__epilogue_restores__+0x8>

000071a8 <atol>:
    71a8:	1f 93       	push	r17
    71aa:	fc 01       	movw	r30, r24
    71ac:	99 27       	eor	r25, r25
    71ae:	88 27       	eor	r24, r24
    71b0:	bc 01       	movw	r22, r24
    71b2:	e8 94       	clt
    71b4:	11 91       	ld	r17, Z+
    71b6:	10 32       	cpi	r17, 0x20	; 32
    71b8:	e9 f3       	breq	.-6      	; 0x71b4 <atol+0xc>
    71ba:	19 30       	cpi	r17, 0x09	; 9
    71bc:	10 f0       	brcs	.+4      	; 0x71c2 <atol+0x1a>
    71be:	1e 30       	cpi	r17, 0x0E	; 14
    71c0:	c8 f3       	brcs	.-14     	; 0x71b4 <atol+0xc>
    71c2:	1b 32       	cpi	r17, 0x2B	; 43
    71c4:	51 f0       	breq	.+20     	; 0x71da <atol+0x32>
    71c6:	1d 32       	cpi	r17, 0x2D	; 45
    71c8:	49 f4       	brne	.+18     	; 0x71dc <atol+0x34>
    71ca:	68 94       	set
    71cc:	06 c0       	rjmp	.+12     	; 0x71da <atol+0x32>
    71ce:	0e 94 14 39 	call	0x7228	; 0x7228 <__mulsi_const_10>
    71d2:	61 0f       	add	r22, r17
    71d4:	71 1d       	adc	r23, r1
    71d6:	81 1d       	adc	r24, r1
    71d8:	91 1d       	adc	r25, r1
    71da:	11 91       	ld	r17, Z+
    71dc:	10 53       	subi	r17, 0x30	; 48
    71de:	1a 30       	cpi	r17, 0x0A	; 10
    71e0:	b0 f3       	brcs	.-20     	; 0x71ce <atol+0x26>
    71e2:	3e f4       	brtc	.+14     	; 0x71f2 <atol+0x4a>
    71e4:	90 95       	com	r25
    71e6:	80 95       	com	r24
    71e8:	70 95       	com	r23
    71ea:	61 95       	neg	r22
    71ec:	7f 4f       	sbci	r23, 0xFF	; 255
    71ee:	8f 4f       	sbci	r24, 0xFF	; 255
    71f0:	9f 4f       	sbci	r25, 0xFF	; 255
    71f2:	1f 91       	pop	r17
    71f4:	08 95       	ret

000071f6 <memcpy_P>:
    71f6:	fb 01       	movw	r30, r22
    71f8:	dc 01       	movw	r26, r24
    71fa:	02 c0       	rjmp	.+4      	; 0x7200 <memcpy_P+0xa>
    71fc:	05 90       	lpm	r0, Z+
    71fe:	0d 92       	st	X+, r0
    7200:	41 50       	subi	r20, 0x01	; 1
    7202:	50 40       	sbci	r21, 0x00	; 0
    7204:	d8 f7       	brcc	.-10     	; 0x71fc <memcpy_P+0x6>
    7206:	08 95       	ret

00007208 <memcpy>:
    7208:	fb 01       	movw	r30, r22
    720a:	dc 01       	movw	r26, r24
    720c:	02 c0       	rjmp	.+4      	; 0x7212 <memcpy+0xa>
    720e:	01 90       	ld	r0, Z+
    7210:	0d 92       	st	X+, r0
    7212:	41 50       	subi	r20, 0x01	; 1
    7214:	50 40       	sbci	r21, 0x00	; 0
    7216:	d8 f7       	brcc	.-10     	; 0x720e <memcpy+0x6>
    7218:	08 95       	ret

0000721a <strcpy>:
    721a:	fb 01       	movw	r30, r22
    721c:	dc 01       	movw	r26, r24
    721e:	01 90       	ld	r0, Z+
    7220:	0d 92       	st	X+, r0
    7222:	00 20       	and	r0, r0
    7224:	e1 f7       	brne	.-8      	; 0x721e <strcpy+0x4>
    7226:	08 95       	ret

00007228 <__mulsi_const_10>:
    7228:	59 2f       	mov	r21, r25
    722a:	48 2f       	mov	r20, r24
    722c:	37 2f       	mov	r19, r23
    722e:	26 2f       	mov	r18, r22
    7230:	66 0f       	add	r22, r22
    7232:	77 1f       	adc	r23, r23
    7234:	88 1f       	adc	r24, r24
    7236:	99 1f       	adc	r25, r25
    7238:	66 0f       	add	r22, r22
    723a:	77 1f       	adc	r23, r23
    723c:	88 1f       	adc	r24, r24
    723e:	99 1f       	adc	r25, r25
    7240:	62 0f       	add	r22, r18
    7242:	73 1f       	adc	r23, r19
    7244:	84 1f       	adc	r24, r20
    7246:	95 1f       	adc	r25, r21
    7248:	66 0f       	add	r22, r22
    724a:	77 1f       	adc	r23, r23
    724c:	88 1f       	adc	r24, r24
    724e:	99 1f       	adc	r25, r25
    7250:	08 95       	ret

00007252 <utoa>:
    7252:	45 32       	cpi	r20, 0x25	; 37
    7254:	51 05       	cpc	r21, r1
    7256:	20 f4       	brcc	.+8      	; 0x7260 <utoa+0xe>
    7258:	42 30       	cpi	r20, 0x02	; 2
    725a:	10 f0       	brcs	.+4      	; 0x7260 <utoa+0xe>
    725c:	0c 94 34 39 	jmp	0x7268	; 0x7268 <__utoa_ncheck>
    7260:	fb 01       	movw	r30, r22
    7262:	10 82       	st	Z, r1
    7264:	cb 01       	movw	r24, r22
    7266:	08 95       	ret

00007268 <__utoa_ncheck>:
    7268:	bb 27       	eor	r27, r27

0000726a <__utoa_common>:
    726a:	fb 01       	movw	r30, r22
    726c:	55 27       	eor	r21, r21
    726e:	aa 27       	eor	r26, r26
    7270:	88 0f       	add	r24, r24
    7272:	99 1f       	adc	r25, r25
    7274:	aa 1f       	adc	r26, r26
    7276:	a4 17       	cp	r26, r20
    7278:	10 f0       	brcs	.+4      	; 0x727e <__utoa_common+0x14>
    727a:	a4 1b       	sub	r26, r20
    727c:	83 95       	inc	r24
    727e:	50 51       	subi	r21, 0x10	; 16
    7280:	b9 f7       	brne	.-18     	; 0x7270 <__utoa_common+0x6>
    7282:	a0 5d       	subi	r26, 0xD0	; 208
    7284:	aa 33       	cpi	r26, 0x3A	; 58
    7286:	08 f0       	brcs	.+2      	; 0x728a <__utoa_common+0x20>
    7288:	a9 5d       	subi	r26, 0xD9	; 217
    728a:	a1 93       	st	Z+, r26
    728c:	00 97       	sbiw	r24, 0x00	; 0
    728e:	79 f7       	brne	.-34     	; 0x726e <__utoa_common+0x4>
    7290:	b1 11       	cpse	r27, r1
    7292:	b1 93       	st	Z+, r27
    7294:	11 92       	st	Z+, r1
    7296:	cb 01       	movw	r24, r22
    7298:	0c 94 80 3b 	jmp	0x7700	; 0x7700 <strrev>

0000729c <dtoa_prf>:
    729c:	a9 e0       	ldi	r26, 0x09	; 9
    729e:	b0 e0       	ldi	r27, 0x00	; 0
    72a0:	e4 e5       	ldi	r30, 0x54	; 84
    72a2:	f9 e3       	ldi	r31, 0x39	; 57
    72a4:	0c 94 3c 36 	jmp	0x6c78	; 0x6c78 <__prologue_saves__+0xc>
    72a8:	6a 01       	movw	r12, r20
    72aa:	12 2f       	mov	r17, r18
    72ac:	b0 2e       	mov	r11, r16
    72ae:	2b e3       	ldi	r18, 0x3B	; 59
    72b0:	20 17       	cp	r18, r16
    72b2:	20 f0       	brcs	.+8      	; 0x72bc <dtoa_prf+0x20>
    72b4:	ff 24       	eor	r15, r15
    72b6:	f3 94       	inc	r15
    72b8:	f0 0e       	add	r15, r16
    72ba:	02 c0       	rjmp	.+4      	; 0x72c0 <dtoa_prf+0x24>
    72bc:	2c e3       	ldi	r18, 0x3C	; 60
    72be:	f2 2e       	mov	r15, r18
    72c0:	0f 2d       	mov	r16, r15
    72c2:	27 e0       	ldi	r18, 0x07	; 7
    72c4:	ae 01       	movw	r20, r28
    72c6:	4f 5f       	subi	r20, 0xFF	; 255
    72c8:	5f 4f       	sbci	r21, 0xFF	; 255
    72ca:	0e 94 a8 3a 	call	0x7550	; 0x7550 <__ftoa_engine>
    72ce:	bc 01       	movw	r22, r24
    72d0:	49 81       	ldd	r20, Y+1	; 0x01
    72d2:	84 2f       	mov	r24, r20
    72d4:	89 70       	andi	r24, 0x09	; 9
    72d6:	81 30       	cpi	r24, 0x01	; 1
    72d8:	31 f0       	breq	.+12     	; 0x72e6 <dtoa_prf+0x4a>
    72da:	e1 fc       	sbrc	r14, 1
    72dc:	06 c0       	rjmp	.+12     	; 0x72ea <dtoa_prf+0x4e>
    72de:	e0 fe       	sbrs	r14, 0
    72e0:	06 c0       	rjmp	.+12     	; 0x72ee <dtoa_prf+0x52>
    72e2:	90 e2       	ldi	r25, 0x20	; 32
    72e4:	05 c0       	rjmp	.+10     	; 0x72f0 <dtoa_prf+0x54>
    72e6:	9d e2       	ldi	r25, 0x2D	; 45
    72e8:	03 c0       	rjmp	.+6      	; 0x72f0 <dtoa_prf+0x54>
    72ea:	9b e2       	ldi	r25, 0x2B	; 43
    72ec:	01 c0       	rjmp	.+2      	; 0x72f0 <dtoa_prf+0x54>
    72ee:	90 e0       	ldi	r25, 0x00	; 0
    72f0:	5e 2d       	mov	r21, r14
    72f2:	50 71       	andi	r21, 0x10	; 16
    72f4:	43 ff       	sbrs	r20, 3
    72f6:	3c c0       	rjmp	.+120    	; 0x7370 <dtoa_prf+0xd4>
    72f8:	91 11       	cpse	r25, r1
    72fa:	02 c0       	rjmp	.+4      	; 0x7300 <dtoa_prf+0x64>
    72fc:	83 e0       	ldi	r24, 0x03	; 3
    72fe:	01 c0       	rjmp	.+2      	; 0x7302 <dtoa_prf+0x66>
    7300:	84 e0       	ldi	r24, 0x04	; 4
    7302:	81 17       	cp	r24, r17
    7304:	18 f4       	brcc	.+6      	; 0x730c <dtoa_prf+0x70>
    7306:	21 2f       	mov	r18, r17
    7308:	28 1b       	sub	r18, r24
    730a:	01 c0       	rjmp	.+2      	; 0x730e <dtoa_prf+0x72>
    730c:	20 e0       	ldi	r18, 0x00	; 0
    730e:	51 11       	cpse	r21, r1
    7310:	0b c0       	rjmp	.+22     	; 0x7328 <dtoa_prf+0x8c>
    7312:	f6 01       	movw	r30, r12
    7314:	82 2f       	mov	r24, r18
    7316:	30 e2       	ldi	r19, 0x20	; 32
    7318:	88 23       	and	r24, r24
    731a:	19 f0       	breq	.+6      	; 0x7322 <dtoa_prf+0x86>
    731c:	31 93       	st	Z+, r19
    731e:	81 50       	subi	r24, 0x01	; 1
    7320:	fb cf       	rjmp	.-10     	; 0x7318 <dtoa_prf+0x7c>
    7322:	c2 0e       	add	r12, r18
    7324:	d1 1c       	adc	r13, r1
    7326:	20 e0       	ldi	r18, 0x00	; 0
    7328:	99 23       	and	r25, r25
    732a:	29 f0       	breq	.+10     	; 0x7336 <dtoa_prf+0x9a>
    732c:	d6 01       	movw	r26, r12
    732e:	9c 93       	st	X, r25
    7330:	f6 01       	movw	r30, r12
    7332:	31 96       	adiw	r30, 0x01	; 1
    7334:	6f 01       	movw	r12, r30
    7336:	c6 01       	movw	r24, r12
    7338:	03 96       	adiw	r24, 0x03	; 3
    733a:	e2 fe       	sbrs	r14, 2
    733c:	0a c0       	rjmp	.+20     	; 0x7352 <dtoa_prf+0xb6>
    733e:	3e e4       	ldi	r19, 0x4E	; 78
    7340:	d6 01       	movw	r26, r12
    7342:	3c 93       	st	X, r19
    7344:	41 e4       	ldi	r20, 0x41	; 65
    7346:	11 96       	adiw	r26, 0x01	; 1
    7348:	4c 93       	st	X, r20
    734a:	11 97       	sbiw	r26, 0x01	; 1
    734c:	12 96       	adiw	r26, 0x02	; 2
    734e:	3c 93       	st	X, r19
    7350:	06 c0       	rjmp	.+12     	; 0x735e <dtoa_prf+0xc2>
    7352:	3e e6       	ldi	r19, 0x6E	; 110
    7354:	f6 01       	movw	r30, r12
    7356:	30 83       	st	Z, r19
    7358:	41 e6       	ldi	r20, 0x61	; 97
    735a:	41 83       	std	Z+1, r20	; 0x01
    735c:	32 83       	std	Z+2, r19	; 0x02
    735e:	fc 01       	movw	r30, r24
    7360:	32 2f       	mov	r19, r18
    7362:	40 e2       	ldi	r20, 0x20	; 32
    7364:	33 23       	and	r19, r19
    7366:	09 f4       	brne	.+2      	; 0x736a <dtoa_prf+0xce>
    7368:	42 c0       	rjmp	.+132    	; 0x73ee <dtoa_prf+0x152>
    736a:	41 93       	st	Z+, r20
    736c:	31 50       	subi	r19, 0x01	; 1
    736e:	fa cf       	rjmp	.-12     	; 0x7364 <dtoa_prf+0xc8>
    7370:	42 ff       	sbrs	r20, 2
    7372:	44 c0       	rjmp	.+136    	; 0x73fc <dtoa_prf+0x160>
    7374:	91 11       	cpse	r25, r1
    7376:	02 c0       	rjmp	.+4      	; 0x737c <dtoa_prf+0xe0>
    7378:	83 e0       	ldi	r24, 0x03	; 3
    737a:	01 c0       	rjmp	.+2      	; 0x737e <dtoa_prf+0xe2>
    737c:	84 e0       	ldi	r24, 0x04	; 4
    737e:	81 17       	cp	r24, r17
    7380:	18 f4       	brcc	.+6      	; 0x7388 <dtoa_prf+0xec>
    7382:	21 2f       	mov	r18, r17
    7384:	28 1b       	sub	r18, r24
    7386:	01 c0       	rjmp	.+2      	; 0x738a <dtoa_prf+0xee>
    7388:	20 e0       	ldi	r18, 0x00	; 0
    738a:	51 11       	cpse	r21, r1
    738c:	0b c0       	rjmp	.+22     	; 0x73a4 <dtoa_prf+0x108>
    738e:	f6 01       	movw	r30, r12
    7390:	82 2f       	mov	r24, r18
    7392:	30 e2       	ldi	r19, 0x20	; 32
    7394:	88 23       	and	r24, r24
    7396:	19 f0       	breq	.+6      	; 0x739e <dtoa_prf+0x102>
    7398:	31 93       	st	Z+, r19
    739a:	81 50       	subi	r24, 0x01	; 1
    739c:	fb cf       	rjmp	.-10     	; 0x7394 <dtoa_prf+0xf8>
    739e:	c2 0e       	add	r12, r18
    73a0:	d1 1c       	adc	r13, r1
    73a2:	20 e0       	ldi	r18, 0x00	; 0
    73a4:	99 23       	and	r25, r25
    73a6:	29 f0       	breq	.+10     	; 0x73b2 <dtoa_prf+0x116>
    73a8:	d6 01       	movw	r26, r12
    73aa:	9c 93       	st	X, r25
    73ac:	f6 01       	movw	r30, r12
    73ae:	31 96       	adiw	r30, 0x01	; 1
    73b0:	6f 01       	movw	r12, r30
    73b2:	c6 01       	movw	r24, r12
    73b4:	03 96       	adiw	r24, 0x03	; 3
    73b6:	e2 fe       	sbrs	r14, 2
    73b8:	0b c0       	rjmp	.+22     	; 0x73d0 <dtoa_prf+0x134>
    73ba:	39 e4       	ldi	r19, 0x49	; 73
    73bc:	d6 01       	movw	r26, r12
    73be:	3c 93       	st	X, r19
    73c0:	3e e4       	ldi	r19, 0x4E	; 78
    73c2:	11 96       	adiw	r26, 0x01	; 1
    73c4:	3c 93       	st	X, r19
    73c6:	11 97       	sbiw	r26, 0x01	; 1
    73c8:	36 e4       	ldi	r19, 0x46	; 70
    73ca:	12 96       	adiw	r26, 0x02	; 2
    73cc:	3c 93       	st	X, r19
    73ce:	07 c0       	rjmp	.+14     	; 0x73de <dtoa_prf+0x142>
    73d0:	39 e6       	ldi	r19, 0x69	; 105
    73d2:	f6 01       	movw	r30, r12
    73d4:	30 83       	st	Z, r19
    73d6:	3e e6       	ldi	r19, 0x6E	; 110
    73d8:	31 83       	std	Z+1, r19	; 0x01
    73da:	36 e6       	ldi	r19, 0x66	; 102
    73dc:	32 83       	std	Z+2, r19	; 0x02
    73de:	fc 01       	movw	r30, r24
    73e0:	32 2f       	mov	r19, r18
    73e2:	40 e2       	ldi	r20, 0x20	; 32
    73e4:	33 23       	and	r19, r19
    73e6:	19 f0       	breq	.+6      	; 0x73ee <dtoa_prf+0x152>
    73e8:	41 93       	st	Z+, r20
    73ea:	31 50       	subi	r19, 0x01	; 1
    73ec:	fb cf       	rjmp	.-10     	; 0x73e4 <dtoa_prf+0x148>
    73ee:	fc 01       	movw	r30, r24
    73f0:	e2 0f       	add	r30, r18
    73f2:	f1 1d       	adc	r31, r1
    73f4:	10 82       	st	Z, r1
    73f6:	8e ef       	ldi	r24, 0xFE	; 254
    73f8:	9f ef       	ldi	r25, 0xFF	; 255
    73fa:	a6 c0       	rjmp	.+332    	; 0x7548 <dtoa_prf+0x2ac>
    73fc:	21 e0       	ldi	r18, 0x01	; 1
    73fe:	30 e0       	ldi	r19, 0x00	; 0
    7400:	91 11       	cpse	r25, r1
    7402:	02 c0       	rjmp	.+4      	; 0x7408 <dtoa_prf+0x16c>
    7404:	20 e0       	ldi	r18, 0x00	; 0
    7406:	30 e0       	ldi	r19, 0x00	; 0
    7408:	16 16       	cp	r1, r22
    740a:	17 06       	cpc	r1, r23
    740c:	1c f4       	brge	.+6      	; 0x7414 <dtoa_prf+0x178>
    740e:	fb 01       	movw	r30, r22
    7410:	31 96       	adiw	r30, 0x01	; 1
    7412:	02 c0       	rjmp	.+4      	; 0x7418 <dtoa_prf+0x17c>
    7414:	e1 e0       	ldi	r30, 0x01	; 1
    7416:	f0 e0       	ldi	r31, 0x00	; 0
    7418:	2e 0f       	add	r18, r30
    741a:	3f 1f       	adc	r19, r31
    741c:	bb 20       	and	r11, r11
    741e:	21 f0       	breq	.+8      	; 0x7428 <dtoa_prf+0x18c>
    7420:	eb 2d       	mov	r30, r11
    7422:	f0 e0       	ldi	r31, 0x00	; 0
    7424:	31 96       	adiw	r30, 0x01	; 1
    7426:	02 c0       	rjmp	.+4      	; 0x742c <dtoa_prf+0x190>
    7428:	e0 e0       	ldi	r30, 0x00	; 0
    742a:	f0 e0       	ldi	r31, 0x00	; 0
    742c:	2e 0f       	add	r18, r30
    742e:	3f 1f       	adc	r19, r31
    7430:	e1 2f       	mov	r30, r17
    7432:	f0 e0       	ldi	r31, 0x00	; 0
    7434:	2e 17       	cp	r18, r30
    7436:	3f 07       	cpc	r19, r31
    7438:	1c f4       	brge	.+6      	; 0x7440 <dtoa_prf+0x1a4>
    743a:	12 1b       	sub	r17, r18
    743c:	21 2f       	mov	r18, r17
    743e:	01 c0       	rjmp	.+2      	; 0x7442 <dtoa_prf+0x1a6>
    7440:	20 e0       	ldi	r18, 0x00	; 0
    7442:	8e 2d       	mov	r24, r14
    7444:	88 71       	andi	r24, 0x18	; 24
    7446:	59 f4       	brne	.+22     	; 0x745e <dtoa_prf+0x1c2>
    7448:	f6 01       	movw	r30, r12
    744a:	82 2f       	mov	r24, r18
    744c:	30 e2       	ldi	r19, 0x20	; 32
    744e:	88 23       	and	r24, r24
    7450:	19 f0       	breq	.+6      	; 0x7458 <dtoa_prf+0x1bc>
    7452:	31 93       	st	Z+, r19
    7454:	81 50       	subi	r24, 0x01	; 1
    7456:	fb cf       	rjmp	.-10     	; 0x744e <dtoa_prf+0x1b2>
    7458:	c2 0e       	add	r12, r18
    745a:	d1 1c       	adc	r13, r1
    745c:	20 e0       	ldi	r18, 0x00	; 0
    745e:	99 23       	and	r25, r25
    7460:	29 f0       	breq	.+10     	; 0x746c <dtoa_prf+0x1d0>
    7462:	d6 01       	movw	r26, r12
    7464:	9c 93       	st	X, r25
    7466:	f6 01       	movw	r30, r12
    7468:	31 96       	adiw	r30, 0x01	; 1
    746a:	6f 01       	movw	r12, r30
    746c:	51 11       	cpse	r21, r1
    746e:	0b c0       	rjmp	.+22     	; 0x7486 <dtoa_prf+0x1ea>
    7470:	f6 01       	movw	r30, r12
    7472:	82 2f       	mov	r24, r18
    7474:	90 e3       	ldi	r25, 0x30	; 48
    7476:	88 23       	and	r24, r24
    7478:	19 f0       	breq	.+6      	; 0x7480 <dtoa_prf+0x1e4>
    747a:	91 93       	st	Z+, r25
    747c:	81 50       	subi	r24, 0x01	; 1
    747e:	fb cf       	rjmp	.-10     	; 0x7476 <dtoa_prf+0x1da>
    7480:	c2 0e       	add	r12, r18
    7482:	d1 1c       	adc	r13, r1
    7484:	20 e0       	ldi	r18, 0x00	; 0
    7486:	0f 2d       	mov	r16, r15
    7488:	06 0f       	add	r16, r22
    748a:	9a 81       	ldd	r25, Y+2	; 0x02
    748c:	34 2f       	mov	r19, r20
    748e:	30 71       	andi	r19, 0x10	; 16
    7490:	44 ff       	sbrs	r20, 4
    7492:	03 c0       	rjmp	.+6      	; 0x749a <dtoa_prf+0x1fe>
    7494:	91 33       	cpi	r25, 0x31	; 49
    7496:	09 f4       	brne	.+2      	; 0x749a <dtoa_prf+0x1fe>
    7498:	01 50       	subi	r16, 0x01	; 1
    749a:	10 16       	cp	r1, r16
    749c:	24 f4       	brge	.+8      	; 0x74a6 <dtoa_prf+0x20a>
    749e:	09 30       	cpi	r16, 0x09	; 9
    74a0:	18 f0       	brcs	.+6      	; 0x74a8 <dtoa_prf+0x20c>
    74a2:	08 e0       	ldi	r16, 0x08	; 8
    74a4:	01 c0       	rjmp	.+2      	; 0x74a8 <dtoa_prf+0x20c>
    74a6:	01 e0       	ldi	r16, 0x01	; 1
    74a8:	ab 01       	movw	r20, r22
    74aa:	77 ff       	sbrs	r23, 7
    74ac:	02 c0       	rjmp	.+4      	; 0x74b2 <dtoa_prf+0x216>
    74ae:	40 e0       	ldi	r20, 0x00	; 0
    74b0:	50 e0       	ldi	r21, 0x00	; 0
    74b2:	fb 01       	movw	r30, r22
    74b4:	e4 1b       	sub	r30, r20
    74b6:	f5 0b       	sbc	r31, r21
    74b8:	a1 e0       	ldi	r26, 0x01	; 1
    74ba:	b0 e0       	ldi	r27, 0x00	; 0
    74bc:	ac 0f       	add	r26, r28
    74be:	bd 1f       	adc	r27, r29
    74c0:	ea 0f       	add	r30, r26
    74c2:	fb 1f       	adc	r31, r27
    74c4:	8e e2       	ldi	r24, 0x2E	; 46
    74c6:	a8 2e       	mov	r10, r24
    74c8:	4b 01       	movw	r8, r22
    74ca:	80 1a       	sub	r8, r16
    74cc:	91 08       	sbc	r9, r1
    74ce:	0b 2d       	mov	r16, r11
    74d0:	10 e0       	ldi	r17, 0x00	; 0
    74d2:	11 95       	neg	r17
    74d4:	01 95       	neg	r16
    74d6:	11 09       	sbc	r17, r1
    74d8:	4f 3f       	cpi	r20, 0xFF	; 255
    74da:	bf ef       	ldi	r27, 0xFF	; 255
    74dc:	5b 07       	cpc	r21, r27
    74de:	21 f4       	brne	.+8      	; 0x74e8 <dtoa_prf+0x24c>
    74e0:	d6 01       	movw	r26, r12
    74e2:	ac 92       	st	X, r10
    74e4:	11 96       	adiw	r26, 0x01	; 1
    74e6:	6d 01       	movw	r12, r26
    74e8:	64 17       	cp	r22, r20
    74ea:	75 07       	cpc	r23, r21
    74ec:	2c f0       	brlt	.+10     	; 0x74f8 <dtoa_prf+0x25c>
    74ee:	84 16       	cp	r8, r20
    74f0:	95 06       	cpc	r9, r21
    74f2:	14 f4       	brge	.+4      	; 0x74f8 <dtoa_prf+0x25c>
    74f4:	81 81       	ldd	r24, Z+1	; 0x01
    74f6:	01 c0       	rjmp	.+2      	; 0x74fa <dtoa_prf+0x25e>
    74f8:	80 e3       	ldi	r24, 0x30	; 48
    74fa:	41 50       	subi	r20, 0x01	; 1
    74fc:	51 09       	sbc	r21, r1
    74fe:	31 96       	adiw	r30, 0x01	; 1
    7500:	d6 01       	movw	r26, r12
    7502:	11 96       	adiw	r26, 0x01	; 1
    7504:	7d 01       	movw	r14, r26
    7506:	40 17       	cp	r20, r16
    7508:	51 07       	cpc	r21, r17
    750a:	24 f0       	brlt	.+8      	; 0x7514 <dtoa_prf+0x278>
    750c:	d6 01       	movw	r26, r12
    750e:	8c 93       	st	X, r24
    7510:	67 01       	movw	r12, r14
    7512:	e2 cf       	rjmp	.-60     	; 0x74d8 <dtoa_prf+0x23c>
    7514:	64 17       	cp	r22, r20
    7516:	75 07       	cpc	r23, r21
    7518:	39 f4       	brne	.+14     	; 0x7528 <dtoa_prf+0x28c>
    751a:	96 33       	cpi	r25, 0x36	; 54
    751c:	20 f4       	brcc	.+8      	; 0x7526 <dtoa_prf+0x28a>
    751e:	95 33       	cpi	r25, 0x35	; 53
    7520:	19 f4       	brne	.+6      	; 0x7528 <dtoa_prf+0x28c>
    7522:	31 11       	cpse	r19, r1
    7524:	01 c0       	rjmp	.+2      	; 0x7528 <dtoa_prf+0x28c>
    7526:	81 e3       	ldi	r24, 0x31	; 49
    7528:	f6 01       	movw	r30, r12
    752a:	80 83       	st	Z, r24
    752c:	f7 01       	movw	r30, r14
    752e:	82 2f       	mov	r24, r18
    7530:	90 e2       	ldi	r25, 0x20	; 32
    7532:	88 23       	and	r24, r24
    7534:	19 f0       	breq	.+6      	; 0x753c <dtoa_prf+0x2a0>
    7536:	91 93       	st	Z+, r25
    7538:	81 50       	subi	r24, 0x01	; 1
    753a:	fb cf       	rjmp	.-10     	; 0x7532 <dtoa_prf+0x296>
    753c:	f7 01       	movw	r30, r14
    753e:	e2 0f       	add	r30, r18
    7540:	f1 1d       	adc	r31, r1
    7542:	10 82       	st	Z, r1
    7544:	80 e0       	ldi	r24, 0x00	; 0
    7546:	90 e0       	ldi	r25, 0x00	; 0
    7548:	29 96       	adiw	r28, 0x09	; 9
    754a:	ec e0       	ldi	r30, 0x0C	; 12
    754c:	0c 94 58 36 	jmp	0x6cb0	; 0x6cb0 <__epilogue_restores__+0xc>

00007550 <__ftoa_engine>:
    7550:	28 30       	cpi	r18, 0x08	; 8
    7552:	08 f0       	brcs	.+2      	; 0x7556 <__ftoa_engine+0x6>
    7554:	27 e0       	ldi	r18, 0x07	; 7
    7556:	33 27       	eor	r19, r19
    7558:	da 01       	movw	r26, r20
    755a:	99 0f       	add	r25, r25
    755c:	31 1d       	adc	r19, r1
    755e:	87 fd       	sbrc	r24, 7
    7560:	91 60       	ori	r25, 0x01	; 1
    7562:	00 96       	adiw	r24, 0x00	; 0
    7564:	61 05       	cpc	r22, r1
    7566:	71 05       	cpc	r23, r1
    7568:	39 f4       	brne	.+14     	; 0x7578 <__ftoa_engine+0x28>
    756a:	32 60       	ori	r19, 0x02	; 2
    756c:	2e 5f       	subi	r18, 0xFE	; 254
    756e:	3d 93       	st	X+, r19
    7570:	30 e3       	ldi	r19, 0x30	; 48
    7572:	2a 95       	dec	r18
    7574:	e1 f7       	brne	.-8      	; 0x756e <__ftoa_engine+0x1e>
    7576:	08 95       	ret
    7578:	9f 3f       	cpi	r25, 0xFF	; 255
    757a:	30 f0       	brcs	.+12     	; 0x7588 <__ftoa_engine+0x38>
    757c:	80 38       	cpi	r24, 0x80	; 128
    757e:	71 05       	cpc	r23, r1
    7580:	61 05       	cpc	r22, r1
    7582:	09 f0       	breq	.+2      	; 0x7586 <__ftoa_engine+0x36>
    7584:	3c 5f       	subi	r19, 0xFC	; 252
    7586:	3c 5f       	subi	r19, 0xFC	; 252
    7588:	3d 93       	st	X+, r19
    758a:	91 30       	cpi	r25, 0x01	; 1
    758c:	08 f0       	brcs	.+2      	; 0x7590 <__ftoa_engine+0x40>
    758e:	80 68       	ori	r24, 0x80	; 128
    7590:	91 1d       	adc	r25, r1
    7592:	df 93       	push	r29
    7594:	cf 93       	push	r28
    7596:	1f 93       	push	r17
    7598:	0f 93       	push	r16
    759a:	ff 92       	push	r15
    759c:	ef 92       	push	r14
    759e:	19 2f       	mov	r17, r25
    75a0:	98 7f       	andi	r25, 0xF8	; 248
    75a2:	96 95       	lsr	r25
    75a4:	e9 2f       	mov	r30, r25
    75a6:	96 95       	lsr	r25
    75a8:	96 95       	lsr	r25
    75aa:	e9 0f       	add	r30, r25
    75ac:	ff 27       	eor	r31, r31
    75ae:	ee 5f       	subi	r30, 0xFE	; 254
    75b0:	fe 4f       	sbci	r31, 0xFE	; 254
    75b2:	99 27       	eor	r25, r25
    75b4:	33 27       	eor	r19, r19
    75b6:	ee 24       	eor	r14, r14
    75b8:	ff 24       	eor	r15, r15
    75ba:	a7 01       	movw	r20, r14
    75bc:	e7 01       	movw	r28, r14
    75be:	05 90       	lpm	r0, Z+
    75c0:	08 94       	sec
    75c2:	07 94       	ror	r0
    75c4:	28 f4       	brcc	.+10     	; 0x75d0 <__ftoa_engine+0x80>
    75c6:	36 0f       	add	r19, r22
    75c8:	e7 1e       	adc	r14, r23
    75ca:	f8 1e       	adc	r15, r24
    75cc:	49 1f       	adc	r20, r25
    75ce:	51 1d       	adc	r21, r1
    75d0:	66 0f       	add	r22, r22
    75d2:	77 1f       	adc	r23, r23
    75d4:	88 1f       	adc	r24, r24
    75d6:	99 1f       	adc	r25, r25
    75d8:	06 94       	lsr	r0
    75da:	a1 f7       	brne	.-24     	; 0x75c4 <__ftoa_engine+0x74>
    75dc:	05 90       	lpm	r0, Z+
    75de:	07 94       	ror	r0
    75e0:	28 f4       	brcc	.+10     	; 0x75ec <__ftoa_engine+0x9c>
    75e2:	e7 0e       	add	r14, r23
    75e4:	f8 1e       	adc	r15, r24
    75e6:	49 1f       	adc	r20, r25
    75e8:	56 1f       	adc	r21, r22
    75ea:	c1 1d       	adc	r28, r1
    75ec:	77 0f       	add	r23, r23
    75ee:	88 1f       	adc	r24, r24
    75f0:	99 1f       	adc	r25, r25
    75f2:	66 1f       	adc	r22, r22
    75f4:	06 94       	lsr	r0
    75f6:	a1 f7       	brne	.-24     	; 0x75e0 <__ftoa_engine+0x90>
    75f8:	05 90       	lpm	r0, Z+
    75fa:	07 94       	ror	r0
    75fc:	28 f4       	brcc	.+10     	; 0x7608 <__ftoa_engine+0xb8>
    75fe:	f8 0e       	add	r15, r24
    7600:	49 1f       	adc	r20, r25
    7602:	56 1f       	adc	r21, r22
    7604:	c7 1f       	adc	r28, r23
    7606:	d1 1d       	adc	r29, r1
    7608:	88 0f       	add	r24, r24
    760a:	99 1f       	adc	r25, r25
    760c:	66 1f       	adc	r22, r22
    760e:	77 1f       	adc	r23, r23
    7610:	06 94       	lsr	r0
    7612:	a1 f7       	brne	.-24     	; 0x75fc <__ftoa_engine+0xac>
    7614:	05 90       	lpm	r0, Z+
    7616:	07 94       	ror	r0
    7618:	20 f4       	brcc	.+8      	; 0x7622 <__ftoa_engine+0xd2>
    761a:	49 0f       	add	r20, r25
    761c:	56 1f       	adc	r21, r22
    761e:	c7 1f       	adc	r28, r23
    7620:	d8 1f       	adc	r29, r24
    7622:	99 0f       	add	r25, r25
    7624:	66 1f       	adc	r22, r22
    7626:	77 1f       	adc	r23, r23
    7628:	88 1f       	adc	r24, r24
    762a:	06 94       	lsr	r0
    762c:	a9 f7       	brne	.-22     	; 0x7618 <__ftoa_engine+0xc8>
    762e:	84 91       	lpm	r24, Z
    7630:	10 95       	com	r17
    7632:	17 70       	andi	r17, 0x07	; 7
    7634:	41 f0       	breq	.+16     	; 0x7646 <__ftoa_engine+0xf6>
    7636:	d6 95       	lsr	r29
    7638:	c7 95       	ror	r28
    763a:	57 95       	ror	r21
    763c:	47 95       	ror	r20
    763e:	f7 94       	ror	r15
    7640:	e7 94       	ror	r14
    7642:	1a 95       	dec	r17
    7644:	c1 f7       	brne	.-16     	; 0x7636 <__ftoa_engine+0xe6>
    7646:	e8 ea       	ldi	r30, 0xA8	; 168
    7648:	f0 e0       	ldi	r31, 0x00	; 0
    764a:	68 94       	set
    764c:	15 90       	lpm	r1, Z+
    764e:	15 91       	lpm	r17, Z+
    7650:	35 91       	lpm	r19, Z+
    7652:	65 91       	lpm	r22, Z+
    7654:	95 91       	lpm	r25, Z+
    7656:	05 90       	lpm	r0, Z+
    7658:	7f e2       	ldi	r23, 0x2F	; 47
    765a:	73 95       	inc	r23
    765c:	e1 18       	sub	r14, r1
    765e:	f1 0a       	sbc	r15, r17
    7660:	43 0b       	sbc	r20, r19
    7662:	56 0b       	sbc	r21, r22
    7664:	c9 0b       	sbc	r28, r25
    7666:	d0 09       	sbc	r29, r0
    7668:	c0 f7       	brcc	.-16     	; 0x765a <__ftoa_engine+0x10a>
    766a:	e1 0c       	add	r14, r1
    766c:	f1 1e       	adc	r15, r17
    766e:	43 1f       	adc	r20, r19
    7670:	56 1f       	adc	r21, r22
    7672:	c9 1f       	adc	r28, r25
    7674:	d0 1d       	adc	r29, r0
    7676:	7e f4       	brtc	.+30     	; 0x7696 <__ftoa_engine+0x146>
    7678:	70 33       	cpi	r23, 0x30	; 48
    767a:	11 f4       	brne	.+4      	; 0x7680 <__ftoa_engine+0x130>
    767c:	8a 95       	dec	r24
    767e:	e6 cf       	rjmp	.-52     	; 0x764c <__ftoa_engine+0xfc>
    7680:	e8 94       	clt
    7682:	01 50       	subi	r16, 0x01	; 1
    7684:	30 f0       	brcs	.+12     	; 0x7692 <__ftoa_engine+0x142>
    7686:	08 0f       	add	r16, r24
    7688:	0a f4       	brpl	.+2      	; 0x768c <__ftoa_engine+0x13c>
    768a:	00 27       	eor	r16, r16
    768c:	02 17       	cp	r16, r18
    768e:	08 f4       	brcc	.+2      	; 0x7692 <__ftoa_engine+0x142>
    7690:	20 2f       	mov	r18, r16
    7692:	23 95       	inc	r18
    7694:	02 2f       	mov	r16, r18
    7696:	7a 33       	cpi	r23, 0x3A	; 58
    7698:	28 f0       	brcs	.+10     	; 0x76a4 <__ftoa_engine+0x154>
    769a:	79 e3       	ldi	r23, 0x39	; 57
    769c:	7d 93       	st	X+, r23
    769e:	2a 95       	dec	r18
    76a0:	e9 f7       	brne	.-6      	; 0x769c <__ftoa_engine+0x14c>
    76a2:	10 c0       	rjmp	.+32     	; 0x76c4 <__ftoa_engine+0x174>
    76a4:	7d 93       	st	X+, r23
    76a6:	2a 95       	dec	r18
    76a8:	89 f6       	brne	.-94     	; 0x764c <__ftoa_engine+0xfc>
    76aa:	06 94       	lsr	r0
    76ac:	97 95       	ror	r25
    76ae:	67 95       	ror	r22
    76b0:	37 95       	ror	r19
    76b2:	17 95       	ror	r17
    76b4:	17 94       	ror	r1
    76b6:	e1 18       	sub	r14, r1
    76b8:	f1 0a       	sbc	r15, r17
    76ba:	43 0b       	sbc	r20, r19
    76bc:	56 0b       	sbc	r21, r22
    76be:	c9 0b       	sbc	r28, r25
    76c0:	d0 09       	sbc	r29, r0
    76c2:	98 f0       	brcs	.+38     	; 0x76ea <__ftoa_engine+0x19a>
    76c4:	23 95       	inc	r18
    76c6:	7e 91       	ld	r23, -X
    76c8:	73 95       	inc	r23
    76ca:	7a 33       	cpi	r23, 0x3A	; 58
    76cc:	08 f0       	brcs	.+2      	; 0x76d0 <__ftoa_engine+0x180>
    76ce:	70 e3       	ldi	r23, 0x30	; 48
    76d0:	7c 93       	st	X, r23
    76d2:	20 13       	cpse	r18, r16
    76d4:	b8 f7       	brcc	.-18     	; 0x76c4 <__ftoa_engine+0x174>
    76d6:	7e 91       	ld	r23, -X
    76d8:	70 61       	ori	r23, 0x10	; 16
    76da:	7d 93       	st	X+, r23
    76dc:	30 f0       	brcs	.+12     	; 0x76ea <__ftoa_engine+0x19a>
    76de:	83 95       	inc	r24
    76e0:	71 e3       	ldi	r23, 0x31	; 49
    76e2:	7d 93       	st	X+, r23
    76e4:	70 e3       	ldi	r23, 0x30	; 48
    76e6:	2a 95       	dec	r18
    76e8:	e1 f7       	brne	.-8      	; 0x76e2 <__ftoa_engine+0x192>
    76ea:	11 24       	eor	r1, r1
    76ec:	ef 90       	pop	r14
    76ee:	ff 90       	pop	r15
    76f0:	0f 91       	pop	r16
    76f2:	1f 91       	pop	r17
    76f4:	cf 91       	pop	r28
    76f6:	df 91       	pop	r29
    76f8:	99 27       	eor	r25, r25
    76fa:	87 fd       	sbrc	r24, 7
    76fc:	90 95       	com	r25
    76fe:	08 95       	ret

00007700 <strrev>:
    7700:	dc 01       	movw	r26, r24
    7702:	fc 01       	movw	r30, r24
    7704:	67 2f       	mov	r22, r23
    7706:	71 91       	ld	r23, Z+
    7708:	77 23       	and	r23, r23
    770a:	e1 f7       	brne	.-8      	; 0x7704 <strrev+0x4>
    770c:	32 97       	sbiw	r30, 0x02	; 2
    770e:	04 c0       	rjmp	.+8      	; 0x7718 <strrev+0x18>
    7710:	7c 91       	ld	r23, X
    7712:	6d 93       	st	X+, r22
    7714:	70 83       	st	Z, r23
    7716:	62 91       	ld	r22, -Z
    7718:	ae 17       	cp	r26, r30
    771a:	bf 07       	cpc	r27, r31
    771c:	c8 f3       	brcs	.-14     	; 0x7710 <strrev+0x10>
    771e:	08 95       	ret

00007720 <_exit>:
    7720:	f8 94       	cli

00007722 <__stop_program>:
    7722:	ff cf       	rjmp	.-2      	; 0x7722 <__stop_program>
